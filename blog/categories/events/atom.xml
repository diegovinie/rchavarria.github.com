<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: events | R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/blog/categories/events/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2018-03-17T14:42:34+01:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Así fue mi Codemotion 2017]]></title>
    <link href="http://rchavarria.github.io/blog/2017/11/29/mi-codemotion-2017/"/>
    <updated>2017-11-29T21:32:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2017/11/29/mi-codemotion-2017</id>
    <content type="html"><![CDATA[<p>¡Vaya! Otro <a href="http://2017.codemotion.es/">Codemotion</a> más a la <a href="/blog/categories/codemotion/">colección</a>, y ya van 6, ¡cómo pasa el
tiempo! A pesar de ello, sigue siendo el evento técnico más grande de España,
creo: dos días a tope, más de 2000 asistentes, cientos de charlas y unos
cuantos talleres bastante intensos. Y para que veas que no me invento los
datos, echa un vistazo al <a href="http://mailchi.mp/24b44589fbec/codemotion-2017-is-over?e=eecbf73be9">newsletter</a> que han mandado. Si es que, este año
incluso, hasta ha habido <em>eventos</em> dentro del evento.</p>

<p>Muchísimas gracias a los organizadores: Nacho, Abraham y Laura. Y gracias
también a los patrocinadores y voluntarios, que con todo su curro hacen que
este pedazo de evento sea posible.</p>

<p><img class="center" src="/images/2017/codemotion-voluntarios.png"></p>

<!-- more -->


<h2>El evento</h2>

<p>Los organizadores se superan cada año. Con el feedback recibido, deciden qué
cosas hay que cambiar de años anteriores, qué hay que conservar y qué hay que
eliminar.</p>

<p>Como todos los años, la afluencia de gente ha sido brutal. Fueras donde fueras,
había gente, mucha gente. Colas por todos los sitios. Salas hasta la bandera.
Eso sí, solo me quedé fuera de una de las charlas, por lo que las votaciones de
la gente en cuanto a intención de asistir a las charlas funcionó bastante bien.</p>

<p>El café de media mañana, muy bien acompañado. Eso sí, se montaron unas colas
enooormes para poder tomar un café. Creo que es difícil organizar algo para
servir 2000 cafés en poco tiempo. Pero la comida estuvo muy bien (escasa para
un glotón como yo, pero bien), había variedad, opción vegetariana y celíaca.</p>

<p>Como no todo son charlas y talleres, la zona chillout estaba siempre repletita
de gente y actividad. Interesante como siempre. Y este año añadieron una
novedad, una zona donde <a href="https://indiemad.org/">IndieMAD</a> organizó un concurso de videojuegos.
Cualquiera podía pasarse por allí, echarse unos vicios y votar al estudio que
hubiera desarrollado el mejor juego. Por lo que escuché en el cierre de
Codemotion, el año que viene repetirán. ¡Muy bien!</p>

<h2>Las charlas</h2>

<ul>
<li><p><a href="https://2017.codemotion.es/agenda.html#5649626120060928/5768955947909120">Seamos hipsters, pensemos en Serverless</a>, de <a href="https://twitter.com/mdelgadodiaz83">Manu Delgado</a>: Charla muy
divertida y práctica, muy centrada en Azure, pero práctica. Quería conocer de
qué va el concepto de <em>serverless</em>, y resulta que significa <em>despreocuparse de
la infraestructura</em>. ¿Pero eso no era IaaS o PaaS?. Al menos me quedó claro
cómo funcionan las <em>funciones en la nube</em> (como las Azure Functions).</p></li>
<li><p><a href="https://2017.codemotion.es/agenda.html#5649626120060928/5098174129635328">Clean architecture</a>, de <a href="https://twitter.com/aloaisa">Álvaro García Loaisa</a>: Repaso de la evolución de
las arquitecturas de lado servidor (monolito, n capas, MVC, hexagonal,...),
con ejemplos prácticos de algunas de ellas. La conclusión que saqué, es que al
final, Clean Architecture es muy parecida (por no decir igual) a Hexagonal
Architecture.</p></li>
<li><p><a href="https://2017.codemotion.es/agenda.html#5649626120060928/5699320770723840">Progressive wep apps orientadas a componentes con Vue.js</a>, de <a href="https://twitter.com/Rafael_Casuso">Rafael Casuso</a>:
Charla con un ritmo frenético donde se repasó qué son las PWAs y
cómo podemos desarrollarlas, nos presentó un proyecto a partir del cual podemos
crear nuestras propias PWAs fácil y rápido con VueJS. Muchos, muchos conceptos
donde rascar: app shell, web push notifications, service workers, cache api,
...</p></li>
<li><p><a href="https://2017.codemotion.es/agenda.html#5649626120060928/6007471319547904">El despertar de la zona de confort</a>, de <a href="https://twitter.com/lauralacarra">Laura Lacarra</a>: Comenzó un poco
nerviosa, pero pronto se rehizo. Nos contó unas cuantas fases que podríamos
encontrarnos al salir de la zona de confort (curiosidad, consumir conocimiento,
difundir conocimiento, motivar la curiosidad, ...). Me surgió una duda, ¿por
qué siempre que se habla de salir de la zona de confort se termina centrando el
debate en dar charlas en público?</p></li>
</ul>


<p><img class="center" src="/images/2017/codemotion-troll.png"></p>

<ul>
<li><a href="https://2017.codemotion.es/agenda.html#5693168230072320/6560049195384832">Taller: testing fácil con docker: gestiona dependencias y unifica entornos</a>,
de <a href="https://twitter.com/micael_gallego">Micael Gallego</a>: Una pena no poder seguir el taller al completo en vivo
por falta de conectividad. El taller fue super completo, con trasparencias para
dar y tomar, que pueden servir perfectamente como material de referencia. Me
llevo unas cuantas ideas sobre cómo afrontar nuestro entorno Jenkins en el
trabajo (¡a dockerizar todo!)</li>
</ul>


<p><img class="center" src="/images/2017/codemotion-taller.jpg"></p>

<ul>
<li>[Las reglas que hay que romper para que tu equipo de desarrollo sea el más rápido],
de <a href="https://twitter.com/javierabadia">Javier Abadía</a>: Presentación muy trabajada, divertida y con muy
buen ritmo. Charla llena de tips para trabajar mejor. Si me tuviera que quedar
con uno sería: conoce el objetivo (road-map) y no te distraigas, haz lo mínimo
con la calidad deseada para llegar al objetivo.</li>
</ul>


<p><img class="center" src="/images/2017/codemotion-superhacker.png"></p>

<ul>
<li><a href="https://2017.codemotion.es/agenda.html#5693168230072320/4878640902832128">¿Qué es un senior developer?</a>, de <a href="https://twitter.com/lgvalle">Luis G. Valle</a>: Presentación muy visual
donde nos habló sobre qué es y qué no es un senior. En resumen, un senior es
un profesional maduro. También nos habló de seguir unos principios (fiabilidad,
responsabilidad, flexibilidad y pragmatismo) y unas reglas. Aprendimos que los
seniors planifican su carrera, deciden cuál será su próximo paso.</li>
</ul>


<p><img class="center" src="/images/2017/codemotion-senior.png"></p>

<ul>
<li><a href="https://2017.codemotion.es/agenda.html#5693168230072320/5145563993473024">El informático</a>, de <a href="https://twitter.com/david_bonilla">David Bonilla</a>: Nada que aprender en sí, pero mucho
para reflexionar. ¿qué es un informático? ¿somos conscientes del poder que
tenemos? ¿qué pensamos de la manipulación de la información? ¿estás realmente
en el trabajo que deseas? ¿tu trabajo está alineado con tus valores? ¿estamos
haciendo lo posible para dejar un mundo mejor? Tenemos el deber de educar a los
no-informaticos de los peligros de ciertos algoritmos. Podría haber servido
como keynote para cerrar el evento.</li>
</ul>


<p><img class="center" src="/images/2017/codemotion-bonilla.png"></p>

<h2>Referencias</h2>

<ul>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/conferences/2017/codemotion/2017-11-25%20-%20codemotion.markdown">Notas extendidas del evento</a>, y <a href="https://github.com/rchavarria/blog-post-incubator/blob/master/conferences/2017/codemotion/2017-11-25%20-%20codemotion.en.markdown">en inglés también</a>, a modo de resumen para
los compañeros de trabajo.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Global day of code retreat 2017]]></title>
    <link href="http://rchavarria.github.io/blog/2017/11/22/global-day-of-code-retreat-2017/"/>
    <updated>2017-11-22T21:52:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2017/11/22/global-day-of-code-retreat-2017</id>
    <content type="html"><![CDATA[<p>Al igual que el <a href="http://rchavarria.github.io/blog/2016/10/27/global-day-of-code-retreat-2016/">año pasado</a>, he tenido el placer de participar en el Global
Day of Code Retreat 2017, un evento sobre programación <em>de intensa práctica,
enfocado en los fundamentos del diseño y desarrollo de software</em>. Este año ha
habido 136 eventos repartidos por todo el mundo. No he encontrado estadísticas
sobre cuantas personas participamos, pero estoy seguro de que con tantos
eventos tuvimos que ser miles.</p>

<p>¿Impresiona eh? ¿Te animarás el año que viene? El funcionamiento es sencillo:
se trata de resolver el problema del <a href="https://es.wikipedia.org/wiki/Juego_de_la_vida">juego de la vida de Conway</a>, donde unas
<em>células</em> viven o mueren de acuerdo a una serie de reglas preestablecidas.
Siempre se programa por parejas (o tríos), nunca solo. El día está dividido en
iteraciones de una duración determinada, y al final de cada iteración hacemos
una pequeña retrospectiva. Y así es como fue nuestro <a href="https://github.com/SoftwareCraftersMadrid/global-day-of-coderetreat-2017/blob/master/theday.md">día</a>.</p>

<p><img class="center" src="/images/2017/gdcr2017.jpg"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen propiedad de <a href="https://twitter.com/HelderDOliveira">Helder</a>, reproducida con su permiso
  </span>
</div>




<!-- more -->


<h2>El día</h2>

<p>Cada iteración duró unos 45 minutos. Según va avanzando el día, va aumentando
la intensidad de las conversaciones. Y también el cansancio. Para poner un poco
de emoción al asunto, en cada nueva iteración se pueden proponer una serie de
restricciones. Además, las restricciones de una iteración se acumulaban para la
siguiente. Por ejemplo, en la segunda iteración, debíamos programar haciendo
<a href="http://wiki.c2.com/?PairProgrammingPingPongPattern">ping-pong</a> <em>(uno escribe el test, otro lo hace pasar y escribe un nuevo test,
otro lo hac...)</em>. Más adelante se propuso eliminar los <code>else</code> y más adelante
todos los condicionales.</p>

<p>Después de cada iteración, se hace una pequeña retrospectiva, donde todos
ponemos en común cómo hemos afrontado el problema, qué impedimentos hemos
encontrado, cómo lo hemos solucionado, hasta dónde hemos llegado. En seguida
aparecieron 2 enfoques principales para atacar al problema:</p>

<ol>
<li>De dentro hacia afuera: se comienza a resolver el problema por la parte más
interna, más pequeña, más acotada. Se empiezan a describir las reglas del
juego en los tests y se van haciendo pasar, implementando las reglas en una
función o en pequeños objectos con muy poco código.</li>
<li>De fuera hacia adentro: el problema se ataca desde el nivel más alto. Se
suele hablar de <em>mundo</em>, <em>universo</em>, <em>juego</em>, <em>matriz de células</em>. Las
reglas del juego se implementan mucho más adelante. Pero al principio te
encuentras con problemas como recorrer una matriz, bucles anidados,
inicialización del juego, comprobación de límites,...</li>
</ol>


<p>Durante las retros suele haber alguna discusión/conversación. En esta ocasión,
especialmente en la última, hubo una interesante discusión que surgió a raiz de
restricciones relacionadas con no usar ni condicionales ni bucles. Sobre los
condicionales no hubo mucha dicrepancia, parece que tenemos claro que una forma
de reemplazar condicionales es el polimorfismo (aplicarlo ya es otra historia),
aunque no es la única.</p>

<p>Pero sobre los bucles no hubo mucho consenso. ¿Realmente eliminarlos ayuda a
hacer el código más legible? ¿Ayuda a tener menos código (y por tanto menos
probabilidad de errores)? Si el código no queda muy legible, ¿estoy tratando a
mis compañeros como inferiores? ¿o les estoy ayudando a aprender
características del lenguaje? Una pregunta que surgió varias veces: ¿Un
<code>map</code>/<code>filter</code> es un bucle?</p>

<p>El formato ofrece cierta libertad. Por ejemplo, las iteraciones no tienen
porqué durar 30 minutos exactos. Nosotros, como novedad, y como ahorro de
energía (parece mentira, pero es bastante agotador), en la última iteración
hicimos <a href="https://en.wikipedia.org/wiki/Mob_programming">mob programming</a>. Y, todo sea dicho, es la iteración que menos
avanzamos. El cansancio y las restricciones acumuladas hacían mella en
nosotros. Había que tener en cuenta más de dos puntos de vista, ya no era
programar en parejas.</p>

<p>Es curioso, este año he sentido que he avanzado más en la solución al problema
que en otras ocasiones. No estoy seguro, mirándolo con perspectiva, es como si
este año hubiera estado más centrado en el software y no tanto en las personas.
Puede que haya sido porque he afrontado el evento con más tranquilidad, al
pensar/saber que allí encontraría a algún conocido.</p>

<h2>La gente</h2>

<p>Aunque sienta que he estado más centrado en el software que en la gente, este
tipo de eventos tratan sobre la profesión y los profesionales. Por eso me
gustaría recordar que allí me volví a encontrar con gente como <a href="http://juandavidvega.es/">Juan David</a>,
<a href="https://twitter.com/HelderDOliveira">Helder</a> y <a href="http://twitter.com/luisrovirosa">Luis</a>, organizadores y facilitadores del evento.</p>

<p>Me reencontré con <a href="https://twitter.com/APA42">Alberto</a>, o bueno, más bien él me reencontró a mí, al
principio no le reconocí, y juraría que ya nos habíamos visto anteriormente.</p>

<p>Casualidades de la vida, conocí a un alcalaíno, <a href="https://twitter.com/amisai">Abel</a>. Y como buen habitante
de la vega del Henares, espero verle mucho por <a href="https://twitter.com/codenares">Codenares</a>, la comunidad de
desarrollo del... Henares, sí.</p>

<p>También tuve reencuentros de hace muchísimo tiempo, de <a href="http://rchavarria.github.io/blog/2014/11/18/mi-primer-code-retreat/">mi primer GDCR</a>, del
cual guardo un grato recuerdo, donde conocí a <a href="https://twitter.com/rafael_luque">Rafa</a>.</p>

<p>Y algún otro que no pude quedarme con una forma de contactar con ellos, como
Enrique, pero que seguro que nos volveremos a ver en un <em>fregao</em> de estos.</p>

<h2>Agradecimientos</h2>

<p>Por supuesto a <a href="http://idealista.com">idealista</a>, por facilitar las instalaciones y la comida... y
gente, que estuvieron allí para que los demás pudieramos disfrutar. Y también,
cómo no, a los facilitadores/organizadores Juan David, Helder y Luis.</p>

<p>¡Gracias!</p>

<h2>Referencias</h2>

<ul>
<li>Libro sobre el <a href="https://leanpub.com/4rulesofsimpledesign">Juego de la vida</a></li>
<li>Repositorio de <a href="https://github.com/SoftwareCraftersMadrid/global-day-of-coderetreat-2017">Software Crafter Madrid</a> sobre el evento y <a href="https://www.meetup.com/es-ES/madswcraft/photos/28339208/">algunas fotos</a>
nada comprometedoras</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mi Codemotion 2016]]></title>
    <link href="http://rchavarria.github.io/blog/2016/11/28/mi-codemotion-2016/"/>
    <updated>2016-11-28T22:00:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2016/11/28/mi-codemotion-2016</id>
    <content type="html"><![CDATA[<p>Y otro año más, me lo he pasado genial en el <a href="https://2016.codemotion.es/">Codemotion</a>. No creo que necesite
presentación. Es el evento técnico más grande en España: dos días completos,
más de 2000 asistentes, 150 charlas y talleres. Una auténtica monstruosidad. Y
llena de monstruos de la industria.</p>

<div style="background-image: url('/images/2016/codemotion-2016.jpg');
            width: 100%;
            height: 14em;
            background-position: center 0;
            background-size: cover;"></div>




<div style="text-align: center">
  <span style="font-size: 60%">
Foto: <a href="https://flic.kr/p/NjN8Hv">_MG_1926</a> de <a href="https://www.flickr.com/photos/78483623@N07/">Codemotion Madrid</a>, &copy; Todos los derechos reservados, reproducida con <a href="https://twitter.com/codemotion_es/status/803259905213952000">permiso explícito</a>
  </span>
</div>




<!-- more -->


<h2>Mis impresiones</h2>

<p>La organización tomó nota de una de las quejas más escuchadas el año pasado: la
masificación de alguna sala. Este año se pidió a los asistentes que votaran a
qué charlas tenían intención de acudir, y repartieron las salas en
consecuencia. Por supuesto, es imposible hacerlo perfecto, aún hubo algún caso
en el que la sala se quedó pequeña. Pero nada comparable a otros años.
Impresionante organización.</p>

<p>La comida me pareció exactamente igual al año anterior. En mi opinión se queda
corta, pero hay una ligera variedad de sabores y también vi que había
sandwiches especiales para celíacos. Muy buen detalle. Es una lata tener que
desplazarse a un pabellón exterior, pero es comprensible por la cantidad de
asistentes. Es una delicia ver que hay gente repartida por todo el recinto a la
hora de la comida y el café.</p>

<p>Hay gente que se queja de la mala gestión por parte de la organización para
favorecer que haya más presencia femenina. No estoy seguro, pero mi impresión
es que este año ha habido más mujeres que en años anteriores. No tengo datos,
simplemente me guio por mis sensaciones.</p>

<p>Así como me pareció que había más mujeres, también tuve la impresión de que
hubo menos ponentes extranjeros. Quizá fui yo que no encontré una charla
interesante ofrecida por alguno de ellos. Este tema me recuerda mucho a un post
reciente de Carlos Blé hablando sobre <a href="http://www.carlosble.com/2016/11/el-ingles-la-diversidad-y-la-comida-en-las-conferencias/?lang=es">el idioma en los eventos técnicos</a>.</p>

<h2>Charlas a las que asistí</h2>

<h3><a href="https://2016.codemotion.es/agenda.html#5732408326356992/90194003">Los androides no sueñan con ovejas eléctricas, sueñan con conciliar</a> de Susana Morcuende, Yamila Moreno y Jorge Arévalo</h3>

<p>Charla sobre conciliación. Como bien explicó Susana, todavía seguimos asociando
el término <em>conciliación</em> solamente con la familia (cuidar de hijos, abuelos,
enfermos,...). Los ingleses tienen un término mejor para esto: <em>work-life
balance</em>. Es decir, un término medio entre la vida en general (ocio, familia,
amigos,...) y el trabajo.</p>

<p>Susana habló de buscar la conciliación desde el minuto cero, desde el proceso
de selección. Y presentó la iniciativa <a href="http://yosoytumadre.es">Yo soy tu madre</a>, donde empresas muy a
favor de la conciliación tienen una especial cabida.</p>

<p>Después, Yamila y Jorge expusieron sus casos particulares. Yamila en Kaleidos,
y Jorge en Pronoide. Ambos contaron multitud de acciones llevadas a cabo en sus
empresas que les permiten conciliar.</p>

<blockquote><p>Si otras empresas lo están haciendo, es porque la conciliación es posible,
plantéalo en tu empresa</p></blockquote>

<h3><a href="https://2016.codemotion.es/agenda.html#5732408326356992/88334002">Teletrabajo en el mundo real</a> de Pablo Alba</h3>

<p>Pablo nos habló sobre teletrabajo y sus diferencias con el trabajo en remoto.
Contó que existen varios retos a superar: comunicación, coordinación,
felicidad, productividad y sentimiento de equipo.</p>

<p>Luego pasó a describir multitud de herramientas para hacer frente a esos retos.
Herramientas de videoconferencia, de conferencia de audio, chats, gestión del
código fuente, hardware,...</p>

<p>Un comentario que me sorprendió mucho fue el de tener el audio conectado
siempre, para que quien esté solo en casa pueda escuchar el ruido de la
oficina. No es que vaya a ser partícipe de todas las conversaciones, pero un
poco de compañía sí le hará.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5732408326356992/85544001">8 formas de mejorar tu vida gracias a los logs</a> de Joaquín Diez y Fran Rodríguez</h3>

<p>Joaquín nos habló de cómo deberían ser los logs mientras que Fran nos habló más
del lado de operaciones.</p>

<p>Los logs los deberíamos escribir para que los entendieran las máquinas, no los
humanos. Deberíamos definir claramente el formato de los mismos, y las
estructuras de datos que queremos loguear. También, que los logs deben estar
disponibles para todo el mundo. Todos deberían ser capaces de verlos, leerlos,
buscar en ellos,... Para ello es posible que tengamos que desarrollar
aplicaciones o usar algunas de terceros.</p>

<p>Los logs nos sirven para monitorizar, monitorizar el estado y la actividad de
nuestros sistemas. Estos logs deben estar centralizados. Cada vez más creamos y
destruimos máquinas con más facilidad, y los logs deben sobrevivir a las
máquinas.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5732408326356992/84654003">Intraemprendimiento para frikis</a> de Roberto Canales</h3>

<p>Aquí, Roberto nos contó en qué se ha equivocado Autentia en sus múltiples
intentos de pasar de ser una empresa de servicios a ser una empresa de
producto. No es que les vaya mal vendiendo servicios, pero lo que realmente
quieren hacer es hacer productos. Una empresa de servicios no escala, lo que
vendes es <em>horas hombre</em>, y Autentia no ha querido entrar en el juego del body
shopping.</p>

<p>Así pues, buena parte de los beneficios que tenían los han ido invirtiendo en
productos.</p>

<p>Primero, dedicando tiempos muertos de los empleados a desarrollar una
aplicación para uso interno. Pero el producto lo tocaban demasiadas manos, sin
un objetivo global concreto, y el producto se resiente.</p>

<p>En otras ocasiones, han invertido en otras empresas, para aprender de cómo lo
hacen otros. También han <em>dado</em> dinero a otras personas para que hagan realidad
sus ideas.</p>

<p>Si algo han aprendido es que te debes centrar en que tu producto lo use la
gente <strong>pronto</strong>.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5732408326356992/86444010">Aprender a distinguir el problema de la solución</a> de Carlos Blé</h3>

<p>Carlos comenzó fuerte:</p>

<blockquote><p>La forma de ir más rápido no es correr más, es evitar más desperdicio</p></blockquote>

<p>Cuando nos decantamos por una solución, estamos descartando otras.
Probablemente más sencillas, más baratas, más apropiadas. O peores, porqué no.</p>

<p>Antes de ponernos a implementar la solución, hay que comprender las necesidades
del cliente, hay que identificar correctamente el problema. Los clientes
normalmente vienen con soluciones, con <em>cómo</em> quieren que se les soluciones el
problema que tienen. Es ahí donde debemos pararnos y analizar el problema,
analizar el <em>qué</em>. Entendiendo bien su problema, podemos mostrarles varias
soluciones donde ellos podrán elegir la que mejor les convenga. Para conocer el
problema, podemos ayudarnos de todas estas técnicas de análisis:</p>

<p><img class="center" src="/images/2016/carlosble-analisis.png"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Slide #15 de <a href="http://www.slideshare.net/carlosble/distinguir-entre-problema-y-solucin">Distinguir entre problema y solución</a> de <a href="http://www.slideshare.net/carlosble">Carlos Blé</a>, reproducida con permiso del autor
  </span>
</div>


<blockquote><p>Para saber el valor de un producto, compáralo con una hoja de cálculo ~
<em>Carlos Blé</em></p></blockquote>

<p>Ésta fue una charla no técnica, de las <em>filosóficas</em>. Este tipo de charlas te
hacen pensar. Te hacen pensar en tu situación, en cómo trabajas, en si
realmente te gusta lo que haces y si estás haciendo lo correcto. Muy, muy
relacionada con los conceptos de Lean: posponer decisiones, evitar desperdicio,
conocer contexto del cliente,...</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5732408326356992/83544002">99 líneas que lo simplifican todo</a> de Daniel Molina</h3>

<p>Daniel estuvo contando las múltiples tecnologías que usan en su empresa. Un
testimonio bastante bueno. Nos introdujo en las mismas poco a poco, comenzando
por un modelo sencillo, y ampliándolo y complicándolo poco a poco.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5716304078045184/84664007">Lo que deberías saber sobre testing para irte de cañas con @pedro_g_s y no empezar con resaca</a> de Sergio Arroyo</h3>

<p>Charla muy técnica. Tocó innumerables conceptos relacionados con los tests.</p>

<p>En cuanto a tests unitarios, hay dos conceptos básicos: inyección de
dependencias y dobles de tests. También, además de las características
<a href="https://pragprog.com/magazines/2012-01/unit-tests-are-first">F.I.R.S.T.</a> de los mismos, añadió: <strong>I</strong>mmutable (no deben de dejar rastros) y
<strong>T</strong>rusted (los falsos positivos minan la confianza de los programadores en
los tests).</p>

<p>Me gustó mucho la parte donde comentó qué es lo que hace que un código NO sea
testeable:</p>

<p><img class="center" src="/images/2016/non-testable-design-smells.png"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Slide #66 de <a href="http://www.slideshare.net/delr3ves/lo-que-deberas-saber-sobre-testing-para-irte-de-caas-con-pedrogs-y-no-empezar-con-resaca">#codemotion2016: Everything you should know about testing to go with @pedro_g_s, @flipper83 & @kinisoftware avoiding the hangover</a> de <a href="http://www.slideshare.net/delr3ves">Sergio Arroyo</a>, <a href="https://creativecommons.org/licenses/by/4.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a>
  </span>
</div>


<p>Y para terminar: ¿quién vigila al vigilante? ¿quién prueba que los tests son
correctos? Nadie. Y precisamente por esa razón debemos mantener los tests lo
más sencillos posible. Nada de <code>if</code>s, nada de bucles. Sencillos.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5716304078045184/84664009">Clean code</a> de Álvaro García</h3>

<p>El título de la charla no da para muchas sorpresas. Álvaro habló sobre el libro
de Robert C. Martin, Clean Code.</p>

<p>Durante toda la charla aparecieron multitud de conceptos. La charla fue un buen
recordatorio del contenido del libro. Habló de Craftsmanship, de la Regla del
Boy Scout, de la Teoría de las Ventans Rotas, de la importancia de nombrar
correctamente las clases, métodos y variables, de la longitud de los métodos,
de los comentarios (o la falta de ellos) en el código,...</p>

<p>Súper, súper interesante. Bueno, hubo un tema que me escamó un poco: se
recomienda no utilizar códigos de error para informar de que ha habido un fallo
en nuestro código, se recomienda usar excepciones. Últimamente me he inclinado
más hacia no usar excepciones para eso, no usarlas para controlar el flujo de
mis programas. Un tema bastante polémico éste de tratar las excepciones.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5716304078045184/84664008">Time to grow up</a> de Jorge Barroso</h3>

<p>En mi opinión la mejor charla del Codemotion. Jorge habló de cómo ve él el
mundo del desarrollo. Y tiene mucho que decir. Jorge es bastante conocido en el
mundo del software y su opinión es bastante respetable.</p>

<p>Habló de que debemos aprender oratoria, los speakers del tipo de conferencias
como el Codemotion tienen mucho <em>poder</em>, tienen mucha responsabilidad. Pero
también la tenemos quienes estamos escuchando. Debemos hacerlo de forma
crítica, y no creernos todo lo que nos cuentan los que están en el <em>púlpito</em>.</p>

<p>Debemos hacer las empresas más humanas, evitar que <em>hagan el mal</em>. Y no nos
debemos vender por un futbolín, o por la posibilidad de pasar más horas en la
oficina. Debemos conseguir que la empresa nos valore como personas.</p>

<p>Construimos software como en la edad media se construían catedrales:</p>

<blockquote><p>Ponían mucha gente a hacer una cúpula. Se caía. Conclusión que sacaban: "pues
así no era"</p></blockquote>

<p>No podremos resolver los retos del futuro como lo hacemos ahora, lanzando más y
más gente a los proyectos.</p>

<p>Jorge habló de que no está totalmente de acuerdo con el movimento Software
Craftsmanship (no hay que ser dogmático, si no pragmático, hay que conocer las
normas para saber cuándo hay que romperlas), tampoco lo está con el término
<em>Computer Science</em> (no usamos el método científico, no somos ingenieros). Se
identifica más con el mundo de la cocina, donde conocen la química, las
bases, los ingredientes. Pero ser cocinero es más que eso. Es comunidad. Es
comunicación con tus iguales.</p>

<p>Comentó la necesidad de tener un lenguaje común entre los desarrolladores. Nada
de diferenciarnos entre back y front, entre web y escritorio o móvil. ¿Qué
hacen tus compañeros? Pregunta. Y sobre todo, no te comportes como un idiota:
escucha, mejora a tus compañeros, aprende, enseña, no impongas tus opiniones,
pide feedback.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5716304078045184/88324007">Cómo gestionar el estado de tu UI: El camino hacia el Virtual DOM y RxJS</a> de Ricardo Borillo</h3>

<p>Ricardo comentó cómo podemos mejorar la gestión del estado de la interfaz
gráfica. En un principio, toda esa información estaba incrustada en la interfaz
gráfica, estaba almacenada en el DOM (si hablamos de aplicaciones web). Pero el
DOM es muy lento. Algunas librería aliviaban este acoplamiento, pero el Virtual
DOM ha venido para desacoplar todavía más del DOM real.</p>

<p>Prosiguió la charla comentando cómo tecnologías como React, Redux y RxJS
encajan perfectamente en la nueva visión acerca de cómo hay que gestionar el
estado de nuestra aplicación del lado cliente. Hay sólo una fuente de verdad,
por lo que hay un estado global. Y nos explicó cómo éste estado global es
gestionado, almacenado, modificado y notificado por contenedores, middlewares,
dispatchers,... en la arquitectura planteada por React y compañía.</p>

<p>Sinceramente, están pegando fuerte estas tecnologías y el mundo funcional
parece que está calando en el lado cliente. El de Ricardo es, como siempre, un
testimonio de cómo se pueden hacer las cosas mucho mejor en el mundo web.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5716304078045184/85554005">¿Con 40+ y programando? Sácale provecho a tu experiencia</a> de Daniel López</h3>

<p>Daniel nos cuenta su propia historia, ¿por qué sigue programando pasados los
40? Pues porque le gusta, se le da bien, y puede seguir aportando valor. Aporta
valor por que soluciona problemas, no los crea, y porque no se queda
simplemente con teclear. Debes aportar algo más, si no quieres ser
reemplazable.</p>

<p>Entre los múltiples consejos: encuentra un nicho (o varios) muy específico, un
tema donde no haya muchos expertos; no puedes escalar, así que no apuntes a
cantidad, si no a calidad; entiende y hazte entender; adaptabilidad, búscate
las habichelas; capacidad de análisis crítico.</p>

<blockquote><p>El buen programador no nace, se va haciendo con el tiempo, con el trabajo
duro y con el aprendizaje</p></blockquote>

<p>Y como muestra de sabiduría, unos consejos o mantras:</p>

<ul>
<li>Fuerza: para cambiar lo que se pueda cambiar</li>
<li>Paciencia: para aguantar lo que no se pueda</li>
<li>Sabiduría: para saber distiguir entre ellas</li>
</ul>


<h3><a href="https://2016.codemotion.es/agenda.html#5716304078045184/83544008">Data! Data! Data!</a> de David Bonilla</h3>

<p>La idea principal de la charla rondó las bases de datos. David nos hizo ver que
las bases de datos están en todas y cada una de nuestras aplicaciones. Unas son
más avanzadas que otras, y existen multitud de tipos de ellas. Cada una de
ellas con sus ventajas y sus inconvenientes, así que no debemos pensar que hay
una base de datos que nos pueda resolver todos nuestros problemas.</p>

<p>Aún así, aunque todos lidiamos con ellas todos los días, son unas grandes
desconocidas para nosotros. David nos animó a que aprendiéramos más sobre
ellas, que nos interesáramos más en ellas. Al fin y al cabo, es una de las
pocas tecnologías que están en prácticamente todas las aplicaciones.</p>

<h2>Conclusión</h2>

<p>En general, las charlas a las que asistí fueron de un gran nivel, y me
sorprendió que en casi todas ellas comenzaran exponiendo el tema principal de
la charla. Muy bien hecho. Es como si la organización se lo hubiera
recomendado.</p>

<p>Otro detalle, muchos de los ponentes publicaron las presentaciones antes o
durante la charla, lo que permitía a la gente seguir las trasparencias en el
móvil o portátil con conexión a internet, y de esta forma no dejarse los ojos
intentando ver la imagen del proyector. Una idea brillante.</p>

<p>En definitiva, es un evento que siempre me ha merecido la pena asistir. Es
barato, hay multitud de charlas donde elegir (quizá demasiadas), acude lo mejor
de la industria. Sólo podría pedir que se celebrara más de una vez al año y más
cerca de mi casa. Por pedir, que no quede.</p>

<p>Aún así, los dos días se me quedaron cortos para charlar con la gente. No puedo
con todo. O atiendo a charlas interesantes, o me quedo por los pasillos. Pero
no siempre que me quedo por los pasillos coincido con alguien conocido. Asi que
es un tema que me lleva de cabeza.</p>

<p><strong>Muchísimas gracias a los organizadores: Nacho, Abraham y Laura. Y gracias
también a los patrocinadores y voluntarios. Todos ellos hacen que Codemotion
sea posible.</strong></p>

<h2>Recursos</h2>

<p>Aparte de todas las presentaciones a las que asistí, he escaneado <a href="https://github.com/rchavarria/rchavarria.github.com/tree/master/images/2016/codemotion">las notas que tomé</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Global Day of Code Retreat 2016]]></title>
    <link href="http://rchavarria.github.io/blog/2016/10/27/global-day-of-code-retreat-2016/"/>
    <updated>2016-10-27T21:46:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/10/27/global-day-of-code-retreat-2016</id>
    <content type="html"><![CDATA[<p>Siento que el título esté inglés, no he encontrado una traducción que suene bien
en español: ¿<em>Día global del retiro del código</em>? Uff, no lo veo.</p>

<p>A lo que vamos, el pasado día (<em>day</em>) sábado 22 se celebró a nivel mundial (<em>global</em>)
un evento en el que programadores se reúnen (<em>retreat</em>) para... programar (<em>code</em>).</p>

<p>Sí, como lo oyes. Hay gente a la que le chirría que unas personas que se dedican
profesionalmente a programar se reúnan con compañeros de profesión para seguir
programando un día no laborable. Pero es que este evento no tiene nada que ver con
lo laboral, aunque sí con la profesión. Una definición tirando a formal sería:</p>

<blockquote><p>Un «code retreat» es un evento de un día, de intensa práctica, enfocado en los
fundamentos del diseño y desarrollo de software. El formato ha demostrado ser
un medio efectivo de mejora de habilidades dado que proporciona a los
desarrolladores la oportunidad de tomar parte en prácticas focalizadas,
dejando de lado las presiones de tener un que terminar un trabajo.</p></blockquote>

<p><em>(traducción libre de la definición sacada de <a href="http://coderetreat.org/about">Code retreat</a>)</em></p>

<p><img class="center" src="/images/2016/gdcr16.jpg"></p>

<div style="text-align: center; margin: -20px 0 0 0">
  <span style="font-size: 60%">
  Foto: «Global Day of Code Retreat 2016», por <a href="https://twitter.com/eferro">Eduardo Ferro</a>
  </span>
</div>




<!-- more -->


<p>Más concretamente, en el Global Day of Code Retreat, se trata de resolver el
problema del <a href="https://es.wikipedia.org/wiki/Juego_de_la_vida">Juego de la vida de Conway</a>. La definición habla de práctica
intensa y focalizada, de fundamentos de diseño y desarrollo. Para potenciar
esta práctica, el día está dividido en <em>iteraciones</em> de duración relativamente
corta. Y en cada iteración, el facilitador propone una serie de restricciones.
Así fué nuestro <a href="https://github.com/SoftwareCraftsmanshipMadrid/global-day-of-coderetreat-2016/blob/master/presentation/theday.md">día</a>.</p>

<h1>Restricciones</h1>

<p>Nuestro día consistió de seis iteraciones, y cada una de ellas contó con las
siguientes restricciones:</p>

<ol>
<li><p><strong>Ping-pong</strong>: en estos eventos siempre se programa en parejas y haciendo TDD.
Programar en modo ping-pong significa que una persona escribe el primer test
y la otra escribe la mínima implementación para pasar el test y vuelve a
escribir el siguiente test. La primera persona hace pasar el test y vuelve a
escribir uno nuevo. Ping. Pong.</p></li>
<li><p><strong>Nada de primitivas</strong>: esta comienza a ser divertida, está prohibido el uso de
primitivas. ¿Que necesitas pasar un entero para indicar una posición en un
array? No, no. ¿Que quieres usar <code>true</code> como flag para controlar el flujo?
Nanai. Esta restricción te obliga a crear abstracciones, a nombrar todas esas
primitivas que pueden significar cualquier cosa. Esta restricción es una de mis
favoritas.</p></li>
<li><p><strong>No se puede usar el ratón</strong>, y se limitan las <em>discusiones</em> a 3 minutos: menos
mal que esta la realizé con herramientas que uso en mi día a día (porque
esto no te lo explica nadie, quizá te toque de pareja a alguien que no programa
en tu amado lenguaje, o ni siquiera en tu mismo entorno, divertido ¿verdad?) y
me gusta usar atajos de teclado. Si no, lo hubiera pasado mal. Como curiosidad,
existe el plugin <a href="https://github.com/athiele/key-promoter-fork">Key promoter</a> para los IDEs de JetBrains que te interrumpe
cada vez que usas el ratón.</p></li>
<li><p><strong>Prohibidos las sentencias condicionales</strong>: esta restricción siempre me marca
mucho. Está prohibido utilizar <code>if</code>s, <code>switch</code>es, operadores ternarios,...
«Muy fácil, utiliza polimorfismo» diría uno. «Eso lo solucionas con un mapa»,
pero no es tan fácil, lo siento. La primera vez me parecía imposible de
conseguir. Desde entonces, continuamente veo oportunidades para aplicar lo que
aprendo cada vez que juego con esta restricción.</p></li>
<li><p><strong>No se puede hablar</strong>: una de las más complicadas, sobre todo si tienes de
pareja a alguien a quien has conocido este día, lo cual suele ser bastante
habitual. El objetivo de esta restricción es hacer nuestro código lo más
expresivo posible, de forma que no tengamos que explicar nuestras intenciones.
También consigue que te pongas a escribir código desde el minuto cero y te
dejes de discusiones.</p></li>
<li><p><strong>Intercambio de código</strong>: se trata de intercambiar, no sólo el código, si no el
ordenador al completo con otra pareja. Por lo cual puedes encontrarte
cualquier cosa: un fichero en blanco, ningún test, la solución muy bien
encaminada, un código sobredimensionado,... Me pareció muy divertida, y una
forma muy dinámica de hacer la última iteración, donde las fuerzas ya flaquean.
Me pareció muy interesante, porque nada más cambiar de código (entorno,
ordenador, lenguaje,...) te encuentras como perdido. Pero luego empiezas a
darte cuenta de que los tests son muy parecidos a los que llevas en la cabeza.
Empiezas a hacer conexiones, a reconocer objetos, relaciones. Y ¡BUM! En cinco
minutos ya estás en marcha otra vez. Cuando cambié de código me encontré con
que debía programar en C++, que no veía desde la universidad (qué miedo,
incluir ficheros <code>.h</code> y manejar punteros), con un IDE que no conocía para nada,
y encima ¿escribir test automáticos?. Pues sí, lo conseguimos mis compañeros de
iteración y yo. Muy, muy revelador.</p></li>
</ol>


<h1>Personas y agradecimientos</h1>

<p>Y porque el software no es sólo unos y ceros, si no también personas... No sólo
es el qué, si no a quién me he <em>llevado</em> de allí:</p>

<ul>
<li><a href="https://twitter.com/juandvegarguez">Juan D. Vega</a>, facilitador del evento. Muchas gracias por guiarnos, por las
restricciones y por conectarnos con otros grupos que también celebraban el
code retreat.</li>
<li><a href="https://twitter.com/luisrovirosa">Luis Rovirosa</a>, co-facilitador, co-organizador. Generando intensas y sanas
discusiones con sus incisivas preguntas.</li>
<li><a href="https://twitter.com/eferro">Eduardo Ferro</a>, me alegró poder conocerle en persona, soy seguidor de su
<a href="http://www.eferro.net/">blog</a> desde hace un tiempecillo.</li>
<li><a href="https://twitter.com/dmj200">Álvaro Fidalgo</a>, no sabía nada de él, pero me pareció un gran profesional.</li>
<li><a href="https://twitter.com/helderdoliveira">Helder de Oliveira</a>, otra persona a la que quería conocer en persona, y no
me equivocaba.</li>
<li><a href="https://twitter.com/ludobermejo">Ludo Bermejo</a>, estuvo muy interesante la discusión que partío de él sobre
optimizaciones en el código, y nos recordó que no en todos los contextos la
memoria y la CPU son <em>gratis</em>.</li>
<li><a href="https://twitter.com/gelsanz">Ángel Sanz</a>, no pude programar con él, pero hablamos un rato en las
cervezas, y me cayó muy muy bien.</li>
<li><a href="https://es.linkedin.com/in/garciajavier">Javier García</a>, con quien tampoco pude programar, pero charlamos durante las
cervezas.</li>
</ul>


<p>Y por supuesto, agradecer a <a href="http://idealista.com">idealista.com</a> por el espacio y la comida.</p>

<h1>Recursos</h1>

<ul>
<li><a href="https://github.com/athiele/key-promoter-fork">Key promoter</a>. El enlace es un fork de un plugin que parece descontinuado:
<a href="https://plugins.jetbrains.com/plugin/4455">Key promoter plugin</a>.</li>
<li>Github de <a href="https://github.com/SoftwareCraftsmanshipMadrid/global-day-of-coderetreat-2016">Software Craftmanship Madrid</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mi CAS 2015]]></title>
    <link href="http://rchavarria.github.io/blog/2015/12/13/mi-cas-2015/"/>
    <updated>2015-12-13T21:48:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/12/13/mi-cas-2015</id>
    <content type="html"><![CDATA[<p>Me quedé sin chapa. Sin chapa de "Mi primera CAS". Conocí a varias personas que
la llevaban orgullosos. Espero que para ellos significara lo mismo que
significó para mí <a href="/blog/2012/11/08/mi-experiencia-en-la-cas2012/">mi primera CAS</a>.</p>

<p>Ésta, como aquella, ha sido una gran experiencia. La de este año ha sido
enooorme, comparada con la de Cáceres. Hemos asistido más de 700 personas. Ha
tenido que ser un trabajo monumental organizarla, así que desde aquí mis
agradecimientos y admiración a todos los que la han hecho posible:
organizadores, patrocinadores y voluntarios. Olé!</p>

<!-- more -->


<p>La conferencia fueron dos intensos días llenos de charlas interesantísimas. Dos
días que saben a poco. Sobretodo porque no he podido disfrutar de las cañas de
después, o las quedadas fuera del evento. Y también porque, a pesar de que
todos los asistentes estuviéramos en la misma sala para tomar café y comer, me
ha resultado imposible entablar conversaciones con todas las personas que
quería. ¡Agotador! Pero muy motivador a la vez.</p>

<p>Sigamos con las charlas a las que asistí, y qué me llevé de ellas:</p>

<h2><a href="http://www.slideshare.net/carlosble/cas2015-opening-improving-the-software">Apertura</a>, <a href="https://twitter.com/carlosble">Carlos Blé</a></h2>

<p>Carlos habló de la necesidad de hablar inglés, no porque sí, si no para
aprender de las fuentes. También habló de la importancia de hablar otro
lenguaje, extraño para los desarrolladores, el de negocio. De esta forma nos
entenderemos mejor ambas partes. Fue una charla muy inspiradora, fenommenal
como apertura. Me quedaría con la frase:</p>

<blockquote><p>Tú eres el único responsable de tu carrera</p></blockquote>

<h2><a href="https://www.youtube.com/watch?v=C6Sy0v19RAc&amp;t=2h14m00s">Your application is not your framework</a>, de <a href="https://twitter.com/ecomba">Enrique Comba</a></h2>

<p>¿Por qué cuando te preguntan por tu applicación dices qué framework estás
usando? Habla sobre qué hace de verdad tu aplicación. Enrique habló de muchos
conceptos alrededor de los frameworks: <em>convention over configuration</em>, mezcla
de lógica de negocio con la lógica impuesta por el framework. ¿Qué beneficios
trae separar la lógica de tu aplicación del framework? Separación de
responsabilidades, velocidad en los tests automáticos y sobretodo claridad en
el <strong>propósito</strong> y <strong>estructura</strong> de tu aplicación.</p>

<h2><a href="http://www.slideshare.net/PeterMarshall10/pete-marshall-casmadrid2015-continuous-delivery-in-legacy-environments">Continuous delivery</a>, de <a href="https://twitter.com/petemar5hall">Peter Marshal</a></h2>

<p>Peter compartió su experiencia en llevar a un equipo desde el desarrollo de una
aplicación <em>a la vieja usanza</em> hasta alcanzar puestas en producción diarias. En
las slides de la presentación encontrarás multitud de consejos para llevarlo a
cabo, pero yo me quedaría con estos conceptos o enseñanzas:</p>

<ul>
<li>La entrega contínua es enfocarse en la excelencia técnica</li>
<li>Conforme avanza el tiempo, el mayor problema de las aplicaciones con
problemas es que los bugs aumentan mientras que las funcionalidades
desplegadas disminuyen.</li>
<li>La clave está en la simplicidad</li>
<li>Lleva su tiempo madurar (equipo, producto, compañía,...)</li>
</ul>


<h2><a href="http://cas2015.agile-spain.org/charlas/">Building resilient integrations</a>, de <a href="https://twitter.com/cuvuligio">Dave Moore</a></h2>

<p>Esta charla tuvo su parte teórica y su parte práctica. De la parte teórica,
decir que debemos entender que los fallos están en todas partes, por lo que es
nuestro trabajo hacer software que no falle, que sea tolerante a fallos de
sistemas externos. Algunas técnicas para hacerlo podrían ser: tests automáticos
(no mienten, la documentación sí), aislar integraciones que herramientas de
terceros (creando interfaces que las separen de nuestra applicación), utilizar
nuestro propio modelo de datos, política de reintentos de conexión,...</p>

<p>En el taller de después tuvimos la oportunidad de poner todo esto en prática.
Un taller super divertido.</p>

<h2><a href="http://es.slideshare.net/juanignaciosl/continuous-integration-at-cartodb">Continuous integration in CartoBD</a>, de <a href="https://twitter.com/juanignaciosl">Juan Ignacio Sánchez</a></h2>

<p>Juan Ignacio empezó fuerte, comentando que, aunque hay millones de
herramientas, es el <strong>equipo</strong> quien realmente puede hacer que la integración,
entrega y despliegue contínuo funcionen.</p>

<p>¿Cómo lo hacen en CartoDB? Planeándolo desde antes que la gente entre a
trabajar con ellos, despligando desde el primer día, planes iterativos e
incrementales, tests, code reviews, pull requests, feature toggles, pequeñas
releases a grupos controlados de usuarios (canary releases), posibilidad de
hacer rollback rápidamente (pequeños despliegues llevan a que esto sea
posible), análisis post-mortem de grandes fallos, mucha instrumentación y
monitorización.</p>

<h2><a href="http://www.slideshare.net/lantoli/believe-it-or-not-keynote-cas-2015-55802209">Keynote técnica</a>, de <a href="https://twitter.com/lantoli">Leo Antolí</a></h2>

<p>Leo hizo incapié en lo más profundo de agile y lean: no te creas lo que te
cuenten, pruébalo y si te funciona úsalo, si no te funciona, descártalo. Hay
mucho estudios que dicen que una práctica es X veces mejor. Analiza esos
estudios y te darás cuenta de que son humo. Pon en duda el pair programming,
TDD, mejoras en productividad, code dojos, code retreats, craftsmanship, deuda
técnica, tasa de proyectos software fallidos,...</p>

<p>Como buena keynote, lo que me llevo de esta charla son pensamientos, dudas,
cuestiones. Debo entender que el software no es el fin, es un medio para
conseguir un fin. Deja de usar números no probados. Cuenta experiencias propias
(no sirven para demostrar nada, pero son algo real). Y sobretodo, mantén un
<strong>espiritu crítico</strong>.</p>

<h2><a href="https://www.youtube.com/watch?v=_CcO9upHiDU&amp;t=9m20s">Keynote viernes</a>, de <a href="https://twitter.com/rachelcdavies">Rachel Davis</a></h2>

<p>Esta keynote trató de introducir cambios, de introducir tiempo para el
aprendizaje. Debemos crear tiempo para ello a lo largo de nuestra semana. No
tengas prisa en introducir cambios, la gente necesita <strong>tiempo</strong>.</p>

<p>De esta keynote quiero recordar dos consejos de Rachel: comparte lo aprendido
(por ejemplo en esta CAS), invierte tiempo en profundizar en lo aprendido.</p>

<h2><a href="https://medium.com/@borillo/el-modelo-de-desarrollo-mete-saca-be17304ad1df#.b0vwf7ben">Escapando del modelo mete-saca</a>, de <a href="https://twitter.com/borillo">Ricardo Borillo</a></h2>

<p>¿Estamos seguros de que lo que quiere el usuario es un simple sistema CRUD? ¿No
hay una forma de aportar más valor? Un CRUD es muy genérico, seguro que no
resuelve las necesidades del usuario con la mejor eficiencia.</p>

<p>Ricardo analizó qué nos lleva a este modelo: pobres historias de usuario, mal
definidas, que nos llevan a hacer cosas generales; los frameworks (como ORMs);
y arquitecturas de usuario pobres, con componentes maestro-detalle, consumo de
apis REST,... todo esto nos conduce al modelo mete-saca.</p>

<p>La solución propuesta por Ricardo, un único punto de entrada (en contraposición
a los múltiples endpoints REST) con una arquitectura <a href="https://en.wikipedia.org/wiki/Command%E2%80%93query_separation#Command_Query_Responsibility_Segregation">CQRS</a>. Cada <em>comando</em>
correspondería con una acción del usuario, una historia de usuario, un caso de
uso muy específico, que nos conduciría a tener las mínimas funcionalidades
desarrolladas con la máxima eficiencia y la mejor usabilidad para el usuario.</p>

<h2><a href="http://www.slideshare.net/programania/software-economics-tradeoffs-of-decoupled-softwre">Economía del software</a>, de <a href="https://twitter.com/artolamola">Luis Artola</a> y <a href="https://twitter.com/ggalmazor">Guillermo Gutierrez</a></h2>

<p>Luis y Guillermo nos condujeron en un viaje apasionante desde las necesidades
de negocio hasta detalles del código, tales como las dependencias. En el
camino, comentaron multitud de conceptos, de buenas prácticas, hicieron
referencia a charlas de todo el evento (lo que pone de manifiesto lo amplio de
su charla).</p>

<p>Concepto clave: negocio quiere entrega de <strong>valor</strong>, minimizando <strong>costes</strong> y
<strong>riesgos</strong> pero manteniendo <strong>opciones</strong> abiertas. El mayor en el software es
el coste de evolución. Cuanto más difícil sea cambiar algo, más costoso será a
lo largo del tiempo. El desarrollo iterativo e incremental reduce los riestos.
El despliegue de pequeñas funcionalidades, interfaces, inversión de control son
formas de crear opciones.</p>

<h2><a href="http://eamodeorubio.github.io/effective-ui-bdd-with-js/short.html#/">Effective UI testing</a>, de <a href="https://twitter.com/eamodeorubio">Enrique Amodeo</a></h2>

<p>Todo comenzó con el dilema: ¿debo testear cada clase individual o todo el
sistema? Pues ni lo uno, ni lo otro. En cuanto a la interfaz gráfica, la
podríamos dividir en dos dominios: la presentación y la lógica de usabilidad.</p>

<p>¿Como testear cada parte? Para testear la presentación debemos mockear el DOM
del navegador. Para testear la lógica de usabilida, debemos mockear el acceso
al servidor. Basándose en eso, Enrique recomienda seguir dos prácticas:
encapsular los accesos al servidor y los accesos al DOM.</p>

<h2>Trabajo para casa</h2>

<ul>
<li>Parece que integración, entrega y despliegue contínuos son prácticas básicas para empresas exitosas.</li>
<li>Prepara las conferencias a las que asistas: busca el lugar donde se va a
celebrar e imprime un plano de las salas que se van a utilizar, crea una
checklist con las cosas que hacer antes de asistir a un evento. Como por
ejemplo prepar preguntas a hacer a gente interesante que quiero conocer (me
gustó aquello que hiciste/dijiste, discrepo con aquello que ...)</li>
<li>Echar un vistazo a la herramienta Screen Hero</li>
<li>Libro recomendado por Leo Antolí: Pensar rápido, pensar despacio</li>
<li>Libro recomendado por Rachel Davis: Drive (cómo introducir cambios)</li>
<li>Busca slide de Rachel Davis sobre <em>Sources of learning</em></li>
<li>Busca referencia a lo que falta de SOLID: RCCASS</li>
<li>¿Qué es el patrón Page Object?</li>
<li>Slide con las <em>mejores prácticas</em> recomendadas por Enrique Amodeo</li>
</ul>


<h2>Recursos</h2>

<ul>
<li><a href="https://gist.github.com/nhpatt/89f90a27042e4fd1db7b">Charlas, artículos y más sobre la CAS 2015</a></li>
<li><a href="https://www.youtube.com/watch?v=C6Sy0v19RAc">Streaming del día 1</a></li>
<li><a href="https://www.youtube.com/watch?v=_CcO9upHiDU">Streaming del día 2</a></li>
<li><a href="http://martinfowler.com/bliki/CQRS.html">Martin Fowler acerca de CQRS</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
