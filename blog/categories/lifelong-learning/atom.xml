<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: lifelong learning | R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/blog/categories/lifelong-learning/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2016-05-01T18:29:53+02:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Charla técnica: Effective learning for programmers]]></title>
    <link href="http://rchavarria.github.io/blog/2015/10/18/charla-tecnica-effective-learning-for-programmers/"/>
    <updated>2015-10-18T18:46:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/10/18/charla-tecnica-effective-learning-for-programmers</id>
    <content type="html"><![CDATA[<p>Me gustaría compartir una charla de <a href="http://akaptur.com/">Allison Kaptur</a>, en un grupo de usuarios
de Python de Nueva Zelanda, titulada <a href="https://www.youtube.com/embed/Mcc6JEhDSpo">Effective learning for programmers</a>,
donde habla acerca de encontrar ciertas estrategias para el aprendizaje.</p>

<iframe width="420"
        height="315"
        src="https://www.youtube.com/embed/Mcc6JEhDSpo"
        frameborder="0"
        allowfullscreen></iframe>




<!-- more -->


<h2>Notas tomadas</h2>

<p>La charla consta de dos partes: mentalidad (<em>mindset</em>) y estrategias</p>

<h3>Mentalidad</h3>

<p>Allison habla de dos tipos:</p>

<ol>
<li><strong>Mentalidad de crecimiento</strong>: la inteligencia es algo que se puede trabajar y
desarrollar con <strong>esfuerzo</strong></li>
<li><strong>Mentalidad fija</strong>: la inteligencia es la que es y no puede ir a más, la
inteligencia es fija, y cada uno tiene una cierta cantidad de ella</li>
</ol>


<p>La diferencia fundamental radica en que quien posee una mentalidad de
crecimiento, piensa que si algo no es fácil, puede trabajar duro para
aprenderlo. Mientras que quien posee una mentalidad fija, piensa que si algo es
fácil, se trata de una cualidad con la que ha nacido, que es de lo suyo.</p>

<p>Alabanzas contraproducentes: ante alabanzas de un trabajo realizado, los de
mentalidad fija se contentan, mientras que los de mentalidad de crecimiento se
sienten animados para superarse a sí mismos.</p>

<p>Respuesta a la confusión: los de mentalidad fija se quedan bloqueados, y los de
mentalidad de crecimiento se esfuerzan en entender la parte complicada, hasta
que superan el obstáculo.</p>

<p><strong>Está claro que los desarrolladores necesitamos una mentalidad de
crecimiento</strong>. Pero, ¿se puede cambiar una mentalidad fija?</p>

<ol>
<li>Reformula las alabanzas: cuando alaben tu trabajo: "eres un máquina",... te
dices a tí internamente: "no soy un máquina, he trabajado duro para llegar
hasta aquí"</li>
<li>Reformula los fallos</li>
<li>Celebra los desafíos: cuando te toca arreglar un bug, decirte a tí mismo:
"genial! que se prepare ese bug, porque le voy a patear el culo"</li>
<li>Pregunta sobre el proceso seguido: pregunta siempre, "¿cómo has hecho eso?",
"¿cómo funciona eso?", muestra curiosidad por cómo se hacen las cosas,
aprende de los que más saben</li>
</ol>


<h3>Estrategias</h3>

<p>El aprendizaje es una habilidad adquirida, por lo que se puede mejorar
practicando:</p>

<ol>
<li>Recuperación con esfuerzo (<em>effortful retrieval</em>): aprender mediante
preguntas que te obligan a encontrar una respuesta. Es maś efectivo que una
relectura, incluso mejor que una relectura de las notas que has tomado en una
clase. La relectura te da la ilusión de que ya te sabes la lección.</li>
<li>Práctica espaciada (<em>spaced practice</em>): es mejor que una práctica masiva. La
práctica debe ser espaciada en el tiempo, variada y que mezcle conceptos de
todo el proceso de aprendizaje. Es mejor un curso de 1h durante 5 días que uno
de 5 horas en un día.</li>
<li>Dificultad y errores: cierta dificultad suele ser lo deseable. Cometer
errores suele ser también recomendable durante el aprendizaje.</li>
</ol>


<h4>Implementando <em>recuperación con esfuerzo</em></h4>

<ul>
<li>Las tarjetas de conceptos (<em>flashcards</em>) es un ejemplo de esto, pero quizá no
es la mejor forma de implementarlo</li>
<li>Cuando no sabes a ciencia cierta algo, intenta adivinarlo. Por ejemplo, los
argumentos de un comando, o intentar deducir algún aspecto de la lección que
estas estudiando</li>
<li>Intentar adivinar cual es la causa de un bug antes siquiera de empezar a
solucionarlo</li>
<li>Cuando te preguntan por algún concepto que te suena, pero no lo conoces en
profundidad, puedes intentar deducir de qué trata y así confirmar tus
suposiciones</li>
</ul>


<h4>Implementando <em>práctica espaciada</em></h4>

<ul>
<li>Trabajar en tus proyectos personales los fines de semana. Así cuando vayas a
comenzar el sábado, debes recordar lo que trabajaste hace un tiempo. Eso
ayuda al aprendizaje.</li>
</ul>


<h4>Implementando <em>dificultad y errores</em></h4>

<ul>
<li>La dificultad vienen implícita en muchos de nuestros aprendizajes, así que no
hace falta que hagamos algo extra para ello</li>
<li>Para descubrir errores: intentar buscar un feedback rápido, revisiones de
código, post-mortems,...</li>
<li>Generar un entorno donde los pequeños errores no tienen consecuencias, o que
cuando tú sepas algo que tus compañeros no saben, no te burles de ellos</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla no técnica: How to learn anything... fast]]></title>
    <link href="http://rchavarria.github.io/blog/2015/08/30/how-learn-anything-fast/"/>
    <updated>2015-08-30T19:09:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/08/30/how-learn-anything-fast</id>
    <content type="html"><![CDATA[<p>En los trabajos creativos, como en el desarrollo de software, la capacidad para
aprender es un elemento diferenciador. A mí me encanta aprender. Cualquier
cosa. Aunque normalmente siempre elijo temas relacionados con la ciencia,
matemáticas, juegos de ingenio o, cómo no, el desarrollo de software. Cuando vi
el título de la charla (<a href="https://www.youtube.com/watch?v=EtJy69cEOtQ">How to learn anything... fast</a>) me interesó
bastante. ¿Aprender cualquier cosa rápidamente?. ¡Ya me ha cazado!.</p>

<p>En esta charla, <a href="http://joshkaufman.net/">Josh Kaufman</a> indica 5 pasos para aprender cualquier cosa en 20
horas. Típicamente se acepta que para dominar una habilidad, para ser maestro
en algún arte, hacen falta <strong>10.000 horas de práctica deliberada</strong> en esa habilidad
o arte. Josh dice que no tenemos que ir tan lejos, que con <strong>20 horas podemos ser
suficientemente competentes</strong> en cualquier cosa que nos propongamos.</p>

<!-- more -->




<iframe width="560"
        height="315"
        src="https://www.youtube.com/embed/EtJy69cEOtQ"
        frameborder="0"
        allowfullscreen></iframe>


<h2>Pasos</h2>

<ol>
<li>Decidir <strong>qué</strong> aprender.</li>
<li><strong>Dividir</strong> aquello que queremos aprender en habilidades más pequeñas y que
puedan ser practicadas de forma independiente, e identificar aquellas
habilidades más importantes, aquellas habilidades esenciales que te van a
permitir aprender lo que quieres.</li>
<li><strong>Investigar</strong> esas habilidades esenciales. Investiga lo justo y necesario para
saber las mejores formas de realizar las habilidades. Elige de 3 a 5
recursos y pasa rápido por ellos, no profundices (en esta fase) en ellos, ya lo
harás cuando practiques. No uses esta fase para procrastinar, para retrasar el
aprendizaje.</li>
<li>Hacer fácil la práctica. <strong>Elimina distraciones</strong> (TV, móvil, internet,
familiares,...), elimina fricciones, reduce el esfuerzo de comenzar a
practicar, que sea fácil ponerte a ello.</li>
<li>Antes de comenzar, <strong>comprometerse</strong> a realizar al menos 20 horas de práctica
deliberada y enfocada, sin distracciones. Con este compromiso se trata de
eliminar la frustración de todo comienzo, donde somos patéticos con la nueva
habilidad, pero que después de unas prácticas deliberadas, podremos comprobar
nuestro avance.</li>
</ol>


<h2>Conclusión</h2>

<p>Bueno, no creo que 20 horas sean suficientes para aprender <em>cualquier</em> cosa.
Creo que hay materias, habilidades, que necesitan más que eso. Yo no me tomo al
pie de la letra lo que afirma Josh, pero creo que parte de razón sí que tiene.
Puede que 20 horas no sean suficientes para dominar una materia, pero los
consejos que encontramos en esta charla sí me parecen fundamentales para
aprender cualquier cosa, específicamente dividir en partes esenciales aquello
que queremos aprender, eliminar distracciones y fricción y comprometernos con
nosotros mismos a realizar un mínimo de horas de práctica deliberada y
enfocada.</p>

<p>En todo el proceso, echo de menos la recogida de feedback y la medida del
progreso. Quizá el autor lo ha diseñado así para mantener el proceso lo más
simple y más corto posible. Pero aún así, yo añadiría alguna forma de saber si
al final de todo el proceso he llegado donde quería.</p>
]]></content>
  </entry>
  
</feed>
