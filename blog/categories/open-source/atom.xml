<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: open source | R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/blog/categories/open-source/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2018-03-23T20:18:34+01:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Se aceptan mejoras]]></title>
    <link href="http://rchavarria.github.io/blog/2015/11/22/se-aceptan-mejoras/"/>
    <updated>2015-11-22T22:27:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/11/22/se-aceptan-mejoras</id>
    <content type="html"><![CDATA[<p>Existe una cosa maravillosa en el mundo de open source, y es que personas que
ni siquiera sabes que existen, usan tu trabajo, lo mejoran con el suyo, y te lo
donan a tí para que otra gente se beneficie del trabajo de ambos.</p>

<p><img class="left" src="/images/2015/contribution.png"></p>

<p>Imagina que tienes una librería y tienes una base de usuarios. Ningún software
se adapta a todos sus usuarios, así que lo más seguro es que los usuarios de tu
librería encuentren algún detalle que no encaja a la perfección con sus
necesidades. ¿No sería incríble que tus propios usuarios mejoraran la librería y
te dieran su trabajo así como les das tú el tuyo? Pues eso es lo que pasa
precisamente con el open source.</p>

<p>Y algo parecido pasa cuando contribuyes a algún proyecto open source. Tus
contribuciones son usadas por los usuarios del proyecto. Y algunos de ellos
proponen nuevas mejoras al proyecto. Quizá algunas de estas mejoras sean sobre
el trabajo que tú has realizado. Gente que ni conoces está aportando su
experiencia para mejorar tu trabajo. Hay que ser muy tonto para no aprovechar
esta oportunidad para aprender.</p>

<!-- more -->


<p>Este artículo describe el proceso a seguir para aceptar mejoras en un proyecto
publicado en <a href="https://github.com/">Github</a>, donde [<code>git</code>] es usada como herramienta de control de
versiones. Estas mejoras son propuestas por usuarios externos al proyecto a
través de <a href="https://help.github.com/articles/using-pull-requests/">Pull Requests</a> (o también PR). Github te ayuda a la hora de
incorporar esas mejoras a tu proyecto, pero hacerlo así deja la historia de tu
control de versiones hecha unos zorros (en <a href="http://blog.differential.com/best-way-to-merge-a-github-pull-request/">Best way to merge a pull request</a>
lo cuentan más detalladamente).</p>

<p>Ésta es la secuencia de comandos mediante los cuales se incoroporarían los
cambios propuestos en un Pull Request con número <code>pr-number</code> desde una rama
creada por el autor llamada <code>user-working-branch</code>:</p>

<p>```
rchavarria@proyect$ git checkout master
rchavarria@proyect$ git fetch origin
rchavarria@proyect$ git reset --hard origin/master</p>

<p>rchavarria@proyect$ git fetch origin refs/pull/<pr-number>/head
rchavarria@proyect$ git checkout -b <user-working-branch> FETCH_HEAD
rchavarria@proyect$ git rebase master</p>

<p>rchavarria@proyect$ git checkout master
rchavarria@proyect$ git merge --no-ff <user-working-branch>
rchavarria@proyect$ git push origin master
```</p>

<h2>Limpiar el espacio de trabajo</h2>

<p><code>
rchavarria@proyect$ git checkout master
Already on 'master'
Your branch is up-to-date with 'origin/master'.
rchavarria@proyect$ git fetch origin
remote: Counting objects: 66, done.
remote: Compressing objects: 100% (43/43), done.
remote: Total 66 (delta 14), reused 6 (delta 6), pack-reused 17
Unpacking objects: 100% (66/66), done.
From https://github.com/exercism/xecmascript
   9b32d79..de450d0  master     -&gt; origin/master
 * [new branch]      new-exercise-raindrops -&gt; origin/new-exercise-raindrops
</code></p>

<p>Con estos comandos simplemente se cambia a la rama <code>master</code> y se descargan los
cambios que existan en el repositorio remoto (sin aplicar los cambios a ningún
archivo todavía). En este caso, el repositorio es uno de Github. En el código
anterior se puede ver cómo existe una nueva rama en remoto,
<code>new-exercise-raindrops</code>, que se corresponde con el Pull Request que vamos a
incorporar al repositorio.</p>

<p><code>
rchavarria@proyect$ git reset --hard origin/master
HEAD is now at de450d0 Merge pull request #78 from rchavarria/new-exercise-roman-numerals
</code></p>

<p>Este comando elimina cualquier cambio en local y lo sobreescribe exactamente
con los cambios que ha tomado del repositorio remoto. De esta forma <strong>se tiene
en local exactamente lo mismo que en remoto</strong>, y es un punto de partida seguro.</p>

<h2>Descargar las mejoras</h2>

<p>Anteriormente git ha avisado de que hay una nueva rama, un nuevo Pull Request.</p>

<p><code>
rchavarria@proyect$ git fetch origin refs/pull/80/head
From https://github.com/exercism/xecmascript
 * branch            refs/pull/80/head -&gt; FETCH_HEAD
</code></p>

<p>El anterior comando descarga los cambios contenido en el Pull Request con
número <code>&lt;pr-number&gt;</code>, que podría ser por ejemplo el <code>80</code>.</p>

<p><code>
rchavarria@proyect$ git checkout -b new-exercise-raindrops FETCH_HEAD
Switched to a new branch 'new-exercise-raindrops'
</code></p>

<p>Así, se crea una nueva rama, llamada <code>new-exercise-raindrops</code> que contiene los
cambios del Pull Request.</p>

<p>Y ahora llega un momento delicado. Se debe hacer que el commit por el que
comienza la rama recién creada sea el último commit que existía en <code>master</code>. De
esta forma se consigue que la historia del control de versiones sea la más
legible. En este punto es posible que se produzcan conflictos. Ese es otro tema
que daría para muchas explicaciones. Si se quiere profundizar, se puede echar
un vistazo a la propia [documentación de <code>git</code> sobre el comando <code>rebase</code>].</p>

<p><code>
rchavarria@proyect$ git rebase master
Current branch new-exercise-raindrops is up to date.
</code></p>

<p>Si no hay conflictos, perfecto, ya está.</p>

<h2>Comprobar las mejoras</h2>

<p>Ahora es el momento de hacer comprobaciones:</p>

<ul>
<li>Se deberían ejecutar los tests del proyecto</li>
<li>Chequear los cambios, comparándolos con versiones anteriores</li>
<li>Comprobar que se siguen las reglas de estilo en el código</li>
<li>En general, asegurarse de que el código a incorporar es un código con el que
estamos contentos</li>
</ul>


<p>En esta fase se pueden hacer nuevos cambios o pedir al programador que
contribuye que realice algunos cambios por sí mismo y que actualize el Pull
Request.</p>

<p><img class="center" src="/images/2015/github-diff.png"></p>

<h2>Incorporar los cambios</h2>

<p>Una vez está todo comprobado y se está de acuerdo con los cambios, ha llegado
la hora de incorporar los cambios a la rama <code>master</code> para que finalmente formen
parte del código del proyecto.</p>

<p><code>
rchavarria@proyect$ git checkout master
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.
rchavarria@proyect$ git merge --no-ff new-exercise-raindrops
Merge made by the 'recursive' strategy.
 config.json                 |  3 ++-
 raindrops/example.js        | 17 +++++++++++++++++
 raindrops/gulpfile.js       | 42 ++++++++++++++++++++++++++++++++++++++++++
 raindrops/package.json      | 24 ++++++++++++++++++++++++
 raindrops/raindrops.spec.js | 38 ++++++++++++++++++++++++++++++++++++++
 5 files changed, 123 insertions(+), 1 deletion(-)
 create mode 100644 raindrops/example.js
 create mode 100644 raindrops/gulpfile.js
 create mode 100644 raindrops/package.json
 create mode 100644 raindrops/raindrops.spec.js
</code></p>

<p>Los comandos cambian el espacio de trabajo a la rama <code>master</code> e incorporan los
cambios a la misma. Se deberá proporcionar un mensaje para el commit que va a
generar <code>git merge</code>. Un ejemplo sería:</p>

<p>```
Merge pull request #80 from matthewmorgan/new-exercise-raindrops</p>

<p>Closes #80
```</p>

<p>Donde <code>80</code> es el número del Pull Request, <code>matthewmorgan</code> es el nombre del
programador que contribuye y <code>new-exercise-raindrops</code> es el nombre de la rama
que le dió el programador y el que se ha utilizado para la incorporación de los
cambios.</p>

<p>Finalmente, se suben los cambios al repositorio remoto y ...</p>

<p><code>
rchavarria@proyect$ git push origin master
Username for 'https://github.com': rchavarria
Password for 'https://rchavarria@github.com':
Counting objects: 1, done.
Writing objects: 100% (1/1), 273 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To https://github.com/exercism/xecmascript.git
   de450d0..eae366a  master -&gt; master
</code></p>

<p>... ¡magia!</p>

<p><img class="center" src="/images/2015/pull-request-merged.png"></p>

<h2>Referencias</h2>

<ul>
<li><a href="http://blog.differential.com/best-way-to-merge-a-github-pull-request/">Best way to merge a pull request</a></li>
<li><a href="https://www.youtube.com/watch?v=1ffBJ4sVUb4">Git for 4 and up</a></li>
<li><a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">Better commit messages</a></li>
<li><a href="https://www.youtube.com/watch?v=8YjSty6bfog">Do your commits suck?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You've got commit!]]></title>
    <link href="http://rchavarria.github.io/blog/2015/10/25/youve-got-commit/"/>
    <updated>2015-10-25T15:18:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/10/25/youve-got-commit</id>
    <content type="html"><![CDATA[<p>Una de las mejores formas de aprender es haciendo cosas (<em>learning by doing</em>,
que está muy de moda ahora). Y otra forma muy buena es manteniendo
conversaciones con profesionales de tu sector. Por todo lo aprendido hay que
estar agradecido, y qué mejor forma de agradecer que contribuir a la comunidad,
a tu profesión, realizando algún trabajo del que se puedan beneficiar otros. La
siguiente historia cuenta un camino que estoy recorriendo, de cómo empezé algo
por el simple hecho de aprender y terminé participando en un proyecto open
source como es <a href="http://exercism.io/">exercism.io</a>.</p>

<p><img class="center" style="width: 225px" src="http://rchavarria.github.io/images/2015/exercism-logo.svg"/></p>

<!-- more -->


<h2>El origen</h2>

<p>Llevaba un tiempo utilizando <a href="http://www.solveet.com/">solveet.com</a> para practicar con pequeños
ejercicios de programación. De hecho, utilicé la plataforma con distintos
lenguajes que estaba interesado en aprender. Pero poco a poco fui perdiendo la
motivación para usarla. No recibía feedback de mis soluciones, de lo cual se
pueden deducir dos cosas: que mis soluciones eran penosas o que la mayoría de
los usuarios no estaban por la labor de compartir.</p>

<p>En realidad, creo que la causa principal era que yo aportaba mi solución tiempo
después de la última aportada, así que los usuarios probablemente ya habrían
perdido interés en ese problema en concreto. No le puedo echar la culpa a
Solveet, es una plataforma estupenda. Si estás buscando algo para practicar, y
en español, te lo recomiendo. Disfrutarás de lo lindo.</p>

<h2>Expandiendo horizontes</h2>

<p>Con esa falta de motivación, llevaba rondando por la cabeza probar otras
plataformas similares, y me decidí por <a href="https://projecteuler.net/">Project Euler</a>. Hablaban muy bien de
ella, lleva mucho tiempo en funcionamiento y goza de fama, así que tenía que
ser buena. Pero no duré mucho. Una de las <em>normas</em> de la casa pide que no hagas
público tu código con el que resuelves los problemas. Pero ese es uno de los
objetivos que busco, que la gente critique mi código y poco a poco vaya
aprendiendo.</p>

<p>Por casualidad, vi esta <a href="http://passionatevoices.org/2015/06/27/episode-3-katrina-owen/">entrevista a Katrina Owen</a>, creadora de exercism.io y
me pareció que sería buena idea probar la plataforma. Uno de los requisitos es
instalar un programa, para poder bajarte problemas a tu ordenador, resolverlos
y poder subirlos a la plataforma, lo cual no me llamaba mucho la atención. Pero
<a href="http://garajeando.blogspot.com.es/">Manuel Rivero, en Garajeando</a>, un blog que sigo, tiene varios post de sus
soluciones en exercism.io, así que malo no podía ser.</p>

<h2>Los baches del camino</h2>

<p>Yo quería practicar resolviendo problemas con ECMAScript 2015. Ahí me llevé el
primer chasco. Existía un track para JavaScript, pero no para ES2015. No se por
qué, pero miré el código fuente en GitHub de exercism.io. Vi que había un
repositorio para ECMAScript, pero en la página no existían esos ejercicios.
Descubrí que era porque todavía no tenía el número de problemas necesarios para
ser público. Hice un fork del proyecto, y me puse a juguetear.</p>

<p>Me encontré con unos cuantos problemas para ser capaz de montar el entorno de
desarrollo y ejecutar los tests: dependencias desactualizadas, comandos que no
se ejecutaban bien en Windows (parecía que solo funcionaba en Mac). Después de
pelearme un poco con el código y la configuración, con unas pequeñas
modificaciones solucioné los problemas que tenía. Subí el código a
<a href="https://github.com/rchavarria">mi cuenta de GitHub</a> e hize un <em>Pull Request</em> al proyecto.</p>

<h2>Sorpresa</h2>

<p>¡Y contestaron!  Después de pulir un par de detalles (es bastante común para
primerizos y también la razón por la que muchos se echan para atrás a la hora
de contribuir al open source) aceptaron mi solución. ¡Había contribuido a un
proyecto open source!</p>

<p>Pero todavía había cosas que me molestaban. Detalles. <em>El diablo está en los
detalles</em>, dicen. La verdad es que no recuerdo exactamente qué era, pero tenía
<em>trabajo</em> por hacer. Pregunté un par de cosas a Katrina, arreglé un par de
detalles más, algún Pull Request más, y sin esperarlo:</p>

<blockquote><p>You've got commit!</p></blockquote>

<p>¿Qué es eso? ¿Qué significa? Tuve que leer el correo varias veces. No entendía.
bla bla bla, <em>te han añadido a un par de grupos en GitHub</em>, bla bla bla,
<em>permisos de escritura</em>, bla bla bla, ... ¡Me estaban dando permisos de
escritura en el proyecto! Sienta bastante bien saber que estás contribuyendo a
un proyecto open source, y que lo están utilizando muchos usuarios.</p>

<h2>¿El final?</h2>

<p>¿Y ahora qué? Tenía que seguir. No podía dejarlo ahí. Asi que me puse como
objetivo que exercism.io tendría su <a href="http://exercism.io/languages/ecmascript">track de ECMAScript 2015</a>.</p>

<p>Un punto para lograrlo era incorporar al menos 10 ejercicios al track. Fácil.
Un poco de trabajo... y conseguido. Pero otro punto requería de varias
personas. La idea es que haya varias personas encargadas de gestionar el track,
dando feedback a los primeros usuarios, para que no se sientan desamparados, e
ir manteniendo el código con nuevos cambios provenientes del proyecto global.
Pequeñas tareas comunes a todos los lenguages.</p>

<p>¡Me quedé flipado! Cuando contacté por email con varios usuarios de
exercism.io, sin conocerlos de nada,... ¡Me respondieron todos! ¡Todos! Algunos
de ellos no podían embarcarse en el proyecto, pero respondieron. Flipando. Con
su ayuda, el track se hizo público y el trabajo duro acaba de comenzar. Ahora
toca dar feedback a los usuarios y seguir incorporando ejercicios, para que los
usuarios vean que el track está vivo y se animen a seguir practicando sus
habilidades como programadores.</p>

<h2>¿Te animas?</h2>

<p>Así que, ya hay <a href="http://exercism.io/languages/ecmascript">track de ECMAScript 2015</a> en exercism.io. Os animo a probar la
plataforma, a practicar, a mejorar y a comentar las soluciones de los demás.
Espero veros por allí. Si decidis probarlo, veréis mi careto.</p>
]]></content>
  </entry>
  
</feed>
