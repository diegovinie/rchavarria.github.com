<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: agile | R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/blog/categories/agile/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2018-03-06T22:26:42+01:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The nature of software developent]]></title>
    <link href="http://rchavarria.github.io/blog/2017/03/05/the-nature-of-software-developent/"/>
    <updated>2017-03-05T16:06:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2017/03/05/the-nature-of-software-developent</id>
    <content type="html"><![CDATA[<h5>de Ron Jeffries</h5>

<p><img class="left" src="https://imagery.pragprog.com/products/363/rjnsd.jpg?1409862136" width="260" height="392" title="The nature of software development" ></p>

<h2>Por qué lo he leído</h2>

<p>Como casi todos los libros, por recomendación. Ví que lo recomendaba
<a href="https://carlosbuenosvinos.com/">Carlos Buenosvinos</a>, y no pude resistirme. Además, el autor es una leyenda
viva del desarrollo del software y del manifiesto Agile, así que tenía que ser
un libro de aúpa.</p>

<p>¿Un libro que trata sobre la <strong>naturaleza</strong> de la profesión a la que te
dedicas? A leerlo casi, casi, sin pensarlo.</p>

<!-- more -->


<h2>Qué esperaba y qué encontré</h2>

<p>Esperaba un libro largo, pesado. Tipo como una biblia o enciclopedia. Un
compendio de mejores prácticas, de leyes no escritas, los 101 mandamientos del
desarrollo del sofware.</p>

<p>De eso nada. <a href="https://pragprog.com/book/rjnsd/the-nature-of-software-development">The nature of sofware development</a> es un libro que se lee con una
facilidad pasmosa. Es increíble como <a href="http://ronjeffries.com/">Ron Jeffries</a> simplifica hasta los
conceptos más complejos de explicar. Hace que el proceso de desarrollo que él
explica parezca el único que debe existir, el natural, al que se debería tender
si dejáramos que las fuerzas actuaran solas (tipo naturaleza, no sé si se me
entiende la metáfora).</p>

<p>Es un libro relativamente corto, con muchas (y muy buenas) ilustraciones.
Dividido en capìtulos digeribles muy fácilmente. Un lenguaje llano, sencillo,
pero preciso.</p>

<h2>Conclusiones</h2>

<p>Por supuesto que es un libro donde se describe muchas mejores prácticas. A mí
me parece que describe el ideal de cómo se debería desarrollar un proyecto
software. Casi tan bueno, que me parece un sueño.</p>

<p>Es un libro que recomendaría leer a todo aquel que su trabajo esté relacionado
con cualquier fase en el desarrollo del software: diseño, programador, dueño de
producto,...</p>

<h2>Qué he aprendido</h2>

<blockquote><p>Las cosas van mejor si cada funcionalidad, también llamada <em>historia</em>, sólo
tardamos <strong>dos o tres</strong> días en implementarla.</p></blockquote>

<p>Coincido totalmente con esa visión. La sufro cada día. Si algo dentro del
equipo nos lleva más de 2/3 días, comenzamos a perder el foco, empiezan a
aparecer pequeñas tareas (pues ya que...) que nos hacen desviarnos del objetivo
inicial. Y al final, se hace muy difícil dar una historia por zanjada. Si
dividimos el trabajo en pequeñas historias entregables y que podamos
materializar en menos de 3 días, todo va mejor la mayor parte del tiempo.</p>

<blockquote><p>Para obtener la mejor calidad, un progreso continuado y una gran
predictabilidad, los tests y las refactorizaciones son la mejor forma
conocida de trabajar.</p></blockquote>

<!-- split -->


<blockquote><p>Necesitamos un progreso constante, regular e ininterrumpido. Para mantener un
progreso ininterrumpido, necesitamos un diseño claro y limpio todo el tiempo.
Y para conseguirlo, necesitamos refactorizar nuestro código.</p></blockquote>

<p>Dos grandes pilares del desarrollo: <strong>tests</strong> y <strong>refactorizaciones</strong></p>

<h2>Frases que quiero recordar</h2>

<blockquote><p>Valor es lo que uno quiere</p></blockquote>

<!-- split -->


<blockquote><p>Un experto excelentemente remunerado no debería ser remunerado solamente
porque es un experto. Debería ser excelentemente remunerado por ayudar a
otras personas a que se conviertan en expertos.</p></blockquote>

<!-- split -->


<blockquote><p>El estilo de <em>funcionalidad a funcionalidad</em> incluye un ciclo completo de
desarrollo en cada iteración: requisitos, diseño, codificación y testeo.</p></blockquote>

<!-- split -->


<blockquote><p>Podemos construir todo el diseño primero, o podemos construir cada
funcionalidad completamente de una en una, cada una con su base. Lo que no
podemos hacer es construir toda la base al principio, así como tampoco
podemos construir todas las funcionalidades al principio. Es de lejos mucho
más seguro construir una versión simple pero funcional de cada funcionalidad
primero.</p></blockquote>

<!-- split -->


<blockquote><p>Trabajamos incrementalmente. Necesitamos un buen diseño relativamente pronto,
pero solo necesitamos un <strong>pequeño</strong> buen diseño.</p></blockquote>

<!-- split -->


<blockquote><p>Toma cada posible idea como una posible forma de comenzar a hacer cosas
durante un tiempo. Luego, haz tuyo el proceso, y construye tus propias ideas.
¡Pero mantenlo simple!</p></blockquote>

<!-- split -->


<blockquote><p>Nuestro trabajo no es ceñirnos al plan, es ir corrigiendo el curso para
obtener el mejor resultado, no llegar a algún punto fijo.</p></blockquote>

<!-- split -->


<blockquote><p>Lo hacemos mejor no cuando predecimos cuándo habremos terminado, si no cuando
elegimos cuándo está terminado (pero es que debemos mantenernos siempre en un
estado de <em>terminado</em> de forma constante)</p></blockquote>

<!-- split -->


<blockquote><p>La palabra refactorizar se refiere al proceso simple y regular de mantener el
código limpio. Cuando la carretera se convierte en un camino intrincado, lo
enderezamos refactorizando el código.</p></blockquote>

<h2>Referencias</h2>

<ul>
<li><a href="https://vimeo.com/79106557">The fundamental theorem of Agile Software Development</a>, de J.B.Rainsberger</li>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/the-nature-of-software-development-by-ron-jeffries.markdown">Notas sobre The nature of Software development</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Phoenix project]]></title>
    <link href="http://rchavarria.github.io/blog/2017/01/19/the-phoenix-project/"/>
    <updated>2017-01-19T22:23:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2017/01/19/the-phoenix-project</id>
    <content type="html"><![CDATA[<h5>de Gene Kim</h5>

<p><img class="left" src="/images/2017/phoenix-project.png" width="200" height="246"></p>

<h2>Por qué lo he leído</h2>

<p>Había visto varias referencias al libro por Twitter, blogs y distintos
podcasts. Sabía que el libro era muy similar a <a href="/blog/2013/04/10/la-meta">La meta</a>, de Eliyahu M.
Goldratt, un libro que me gustó bastante.</p>

<p>Así que, tras ver que <a href="http://www.eferro.net/2016/03/some-books-i-recently-read.html">Eduardo Ferro</a> también lo había leído, me decidí a
leerlo yo también.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>No creo que se pudiera esperar tanto como de <a href="/blog/2013/04/10/la-meta">La meta</a>. Ese libro es un recurso
más que recomendable para conocer la <a href="https://es.wikipedia.org/wiki/Teor%C3%ADa_de_las_limitaciones">Teoría de las restricciones</a>. Pero
esperaba algo similar enfocado en el mundo del software.</p>

<p>Esperaba una historia de éxito de una persona o grupo de personas que van
superando problemas, uno tras otro, donde el autor los aproveche para explicar
su punto de vista y dar forma a las teorías que quiere explorar.</p>

<h2>Qué encontre</h2>

<p>Más o menos lo que esperaba. A través de una historia llena de problemas a
solucionar, el autor expone las teorías que quiere difundir. Estas teorías
están relacionadas con el desarrollo de software y más concretamente con el
mundillo DevOps.</p>

<p>En realidad, el autor defiende unas prácticas que son la fundación del
movimiento DevOps, pero para llegar hasta ahí, el protagonista de la historia
comienza con un ascenso que le lleva a ser el director del departamento de TI
de una empresa que no destaca por su gestión de servicios tecnológicos, pero
que solucionando problema tras problema, y con la ayuda de una figura un poco
enigmática (muy al estilo de <em>La meta</em>), va mejorando hasta hacer del
departamento y la empresa un lugar mucho mejor.</p>

<h2>Conclusiones</h2>

<p>Por un lado, el libro me ha gustado. Es un libro sobre el mundo del desarrollo
de software, muy al estilo de <em>La meta</em>, que también me gustó. Y describe el
proceso que sigue una empresa ficticia de ser un desastre, a ser una empresa
envidiable en su sector.</p>

<p>Pero por otro, me ha decepcionado un poco. Esperaba que estuviera más centrado
en el desarrollo, pero está más centrado en la gestión y provisión de servicios
de TI. No es nada malo, pero estoy más interesado en lo primero.</p>

<p>De todas formas, el libro es interesante, sobre todo si quieres conocer cómo
hacer bien las cosas en un departamento de TI. Creo que este libro es una buena
aproximación al mundo DevOps. Pero no deja a los desarrolladores en muy buen
lugar, así que si eres desarrollador, no te tomes todas las cosas que dicen
sobre nosotros muy a pecho.</p>

<h2>Qué he aprendido</h2>

<blockquote><p>La única cosa más peligrosa que un desarrollador, es un desarrollador
conspirando sobre temas de seguridad</p></blockquote>

<!-- space -->


<blockquote><p>Eliyahu M. Goldratt, quien creó la teoría de las restricciones, nos mostró
que cualquier mejora echa en cualquier sitio que no sea el cuello de botella
es una ilusión, es inútil</p></blockquote>

<!-- space -->


<blockquote><p>Los tiempos de espera dependen de la utilización del recurso</p></blockquote>

<!-- space -->


<blockquote><p>La necesidad reducir contínuamente los ciclos de tiempo es parte del <em>Primer
Camino</em>. La necesidad de la amplificación de los bucles de <em>feedback</em> (o
realimentación), idealmente desde el cliente, es parte del <em>Segundo Camino</em>.
El <em>Tercer Camino</em> va de asegurarnos de estar introduciendo tensión
continuamente en el sistema, de forma que estamos contínuamente reforzando
hábitos y mejorando algo</p></blockquote>

<h2>Recursos relacionados</h2>

<ul>
<li><a href="/blog/2013/04/10/la-meta">La meta</a>, de Eliyahu M. Goldratt</li>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/phoenix-project-by-gene-kim.markdown">Notas sobre el libro</a></li>
<li>Blog de <a href="http://www.eferro.net/2016/03/some-books-i-recently-read.html">Eduardo Ferro</a></li>
<li><a href="https://es.wikipedia.org/wiki/Teor%C3%ADa_de_las_limitaciones">Teoría de las restricciones</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla sobre eXtreme Programming]]></title>
    <link href="http://rchavarria.github.io/blog/2014/09/20/charla-sobre-extreme-programming/"/>
    <updated>2014-09-20T01:27:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2014/09/20/charla-sobre-extreme-programming</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/2014/xppractices.jpg" width="360" height="270" title="Prácticas de eXtreme Programming" ></p>

<p>Recientemente he dado una charla en el trabajo acerca de <a href="http://www.extremeprogramming.org">eXtreme Programming</a>.
No es nada del otro mundo, tampoco pretendo dar lecciones a nadie y tampoco
he descubierto nada que no estuviera escrito ya. Pero al hacer la charla he
reunido un poco de información de aquí y de allá, y ya que he hecho ese
pequeño esfuerzo, ¿por qué no plasmarlo aquí?</p>

<p>A continuación os dejo el guión que escribí mientras la preparaba. No conté
todo lo que está, ni está todo lo que conté, pero este fue mi pequeño trabajo
de campo.</p>

<!-- more -->


<h2>Introducción al desarrollo ágil de software</h2>

<p>El desarrollo de software comenzó siendo hecho por ingenieros, de los de toda
la vida (que no quiere decir que sea malo, pero como veremos fue diferente),
lo que condicionó su forma de hacerlo, pero construir software es más parecido
a crear una obra de arte: requiere <em>creatividad</em> y <em>artesanía</em>.</p>

<p>A diferencia de otros productos de la ingeniería, el software es maleable,
muchas veces ilógico y siempre se encuentra incompleto (por eso se parece
a una obra de arte).</p>

<p>Al entender estas diferencias es cuando empiezan a surgir nuevas forma de
desarrollar software, como el desarrollo ágil de software.</p>

<p>No existen metodologías o procesos ágiles (en contra de todo lo que se vende
últimamente), sólo existen <strong>equipos ágiles</strong>. Eso que se describe como
metodología ágil no es más que la construcción de un entorno para que los
equipos aprendan a ser ágiles.</p>

<p>Diferencias con lo que se venía haciendo hasta ahora:</p>

<ul>
<li>La forma en la que el equipo trabaja junto es más importante que cualquier
proceso (gente y comunicación frente a procesos y herramientas).</li>
<li>El cliente, el usuario, pasa a ser un miembro esencial del equipo.</li>
<li>El mayor problema con el desarrollo de software son los requisitos
cambiantes. Para la mayoría de los proyectos, aceptar los cambios puede
costar menos que asegurar que los requisitos no van a cambiar nunca.</li>
</ul>


<p>Al cambiar la forma de ver los cambios, resulta que es más fácil cambiar cómo
se gestionan los proyectos. En lugar de gestionar actividades y esperar al
final del todo a tener una aplicación, los agilistas gestionan los requisitos
(aceptando que éstos van a cambiar) y se muestra al cliente cómo la aplicación
va cambiando con el tiempo.</p>

<h2>Gestión por funcionalidades</h2>

<p>En la gestión tradicional, se planifican las actividades una detrás de otra,
cuando finaliza una comienza la siguiente. Así hasta el final del proyecto.
Es entonces la única vez donde se muestra el software creado.</p>

<p>¿Cómo funciona? Los requisitos son constantes a lo largo del tiempo, y fluyen a
través de las actividades como por una línea de montaje. Cada actividad finaliza
con los requisitos a la vez  y al final de la línea se entrega un software.
Podemos tener gente especializada en cada actividad, e ir cambiando de equipo
según vamos cambiando de actividad. La única pega que tiene es que los requisitos
no son constantes, por lo que todo lo demás no sirve de nada.</p>

<p>¿Y Agile? Agile considera que los requisitos no son constantes. Cada requisito,
cada funcionalidad se presenta al cliente como una Historia de Usuario. El gráfico
anterior se gira 90º y el proceso en sí mismo es el que permanece constante. Se
planifican los requisitos por prioridad, y se va trabajando uno a uno pasándolo por
todas las actividades, por lo que vamos teniendo requisitos completos poco a poco.
Tener los requisitos priorizados permite cambiarlos a antojo. Y no solo eso,
también permite finalizar el proyecto en el momento en el que queramos.</p>

<p>Este giro de 90º permite a los managers a tener una estimación de coste por
requisito, no por actividad.</p>

<p>Uno de los costes de gestionar requisitos es que siempre hay que estar listo para
nuevas funcionalidades, por lo que se debe mantener una calidad muy alta tanto en
diseño como en código.</p>

<h2>Cómo evoluciona el software</h2>

<p>En todo desarrollo de software llega un momento en el al que arreglar un bug,
resulta que se crean uno o varios pequeños bugs por ahí dispersos.</p>

<p>Barry Boehm ya encontró que según va avanzando un proyecto software en su ciclo
de vida, el coste de un cambio se vuelve cada vez más y más grande. Un concepto
que lo explica mejor podría ser el Principio de Oxidación del Software.</p>

<p>Esta curva se comenzó interpretando de forma que se debían crear documentos de
requisitos lo más detallados y lo más estáticos posibles. Agile no lo considera
así, en lugar de eso se prepara para que los cambios en los requisitos cuesten
poco.</p>

<p>Para eso, y para combatir la oxidación del software, Agile propone:</p>

<ul>
<li>Refactorizar: hacerlo sin descanso, sin límites, sin parar, sin excusas…
refactoriza</li>
<li>Tests: unitarios y de aceptación. También se aceptan otros: de integración,
de sistema, de lo que sea, pero tests. Automáticos, eso si. Con ellos se logra
eliminar el miedo a los cambios.</li>
<li>Entrega temprana y frecuente: con ello se aumenta el feedback del cliente y
ayuda a identificar cambios. Y cuanto antes se detecten estos cambios, menor
coste tendrán.</li>
</ul>


<p>¿Cómo mantener la capacidad de poder realizar cambios manteniendo el coste en
niveles aceptables? Sólo porque el cliente no vea el código no significa que
no tengamos que hacer esfuerzo para mantener la capacidad de realizar cambios.
Y esto se consigue manteniendo un alto nivel de calidad, una baja complejidad
y una cobertura de tests lo más alta posible.</p>

<h2>Introducción a XP</h2>

<p>El primer proyecto en el que se usó eXtreme Programming comenzó el 6 de marzo
de 1996. XP es uno de los famosos Procesos Ágiles, entre los que se encuentran
Scrum, Kanban,…</p>

<p>En lugar de entregar todo lo que el cliente desea en un futuro lejano, XP va
entregando el software trocito a trocito, según se va necesitando.</p>

<p>XP hace hincapié en el trabajo en equipo. Managers, clientes y programadores
forman parte del mismo equipo. Los clientes se sienten bien siendo parte del
equipo, los programadores contribuyen activamente y los managers se encargan
de que exista una buena comunicación.</p>

<p>¿Por qué extremo? Por una serie de reglas y prácticas las lleva a su máxima
expresión, mucho más que en proyectos tradicionales.</p>

<h2>De vuelta a lo básico, qué es lo que en realidad importa</h2>

<p>Como ya sabemos, crear software es muy complicado. Por lo que no tiene sentido
perder el tiempo en tareas que no importan. XP se deshace de tareas o actividades
que se consideran que no aportan valor.</p>

<p>XP tiene una serie de reglas que se pueden englobar en estos cuatro aspectos:</p>

<ul>
<li><em>Escuchar</em>: hay que aprender, hay que conocer el problema. Eso te dirá qué es
lo que debes testear. Como probablemente no lo averigües tú solo, deberás
escuchar a los clientes, a los usuarios, managers y demás gente de negocio.</li>
<li><em>Diseñar</em>: hay que escuchar lo que el código nos cuenta acerca de cómo quiere
estar estructurado, y darle forma poco a poco.</li>
<li><em>Codificar</em>: si al final del día no hay un software ejecutable, no habrás
hecho nada.</li>
<li><em>Testear</em>: hay que saber cuándo hemos terminado. De otra forma, estarás atascado
pensando si todo cumple con lo establecido o no. Pero lo peor de todo, es que
tampoco vas a saber cómo de cerca estás de tu destino.</li>
</ul>


<h2>Reglas</h2>

<p>Algunas reglas sueltas quizá no tengan sentido, pero combinadas se puede ver
hacia dónde van, qué es lo que quieren conseguir.</p>

<h3>Escuchar</h3>

<p>Se escriben Historias de Usuario (las cuales son el corazón de la planificación
en un proyecto XP).</p>

<p>El proyecto se divide en iteraciones o sprints.</p>

<p>Al final de cada iteración, se realiza una pequeña entrega de funcionalidades.</p>

<p>Se crean tres niveles de planificación:</p>

<ul>
<li>Release plan: mira hacia el futuro unos cuantos meses y agrupa historias
en grandes entregas.</li>
<li>Next Iteration plan: se agrupan las historias que se van a realizar en
la próxima iteración.</li>
<li>Current Iteration plan: las historias definidas para esta iteración se
dividen hasta que se encuentran tareas que se pueden acometer fácilmente.
Los planes se toman como algo vivo, no como algo estático. Si el cliente
cambia de idea, se cambian los planes. Si el equipo se retrasa en una entrega,
se cambian los planes.</li>
</ul>


<p>Se intenta conseguir un Ritmo Sostenible.</p>

<p>Cada dia comienza con un Stand-up Meeting.</p>

<p>Se mide la Velocidad del Proyecto.</p>

<p>Se favorecen los Espacios Abiertos y se fomenta la Movilidad de las Personas.</p>

<h3>Diseñar</h3>

<p>Simplicidad, se busca siempre lo más sencillo posible. Para poder mostrárselo
al cliente lo antes posible y obtener feedback.</p>

<p>Siempre se usa una Metáfora del Sistema, se busca usar el lenguaje propio
del negocio, la jerga que se usa en el entorno para el cual se está
desarrollando el software.</p>

<p>Se crean Spikes, para reducir riesgos.</p>

<p>Ninguna funcionalidad se añade prematuramente (yagni).</p>

<p>Se Refactoriza en cualquier momento y en cualquier lugar que sea posible.</p>

<p>Se usan Tarjetas CRC para las decisiones de diseño. Así, todos los miembros
del equipo entienden y contribuyen al diseño.</p>

<h3>Codificar</h3>

<p>El cliente siempre está disponible para resolver dudas sobre el software.</p>

<p>El código se escribe siguiendo unos Estándares consensuados por el equipo.</p>

<p>Primero, se escriben los Tests Unitarios, luego el código de producción.</p>

<p>Todo el código de producción se escribe mientras se Programa por Parejas.</p>

<p>Se Integra Frecuentemente, mejor con Integración Contínua.</p>

<p>El código es de todos, Collective Ownership.</p>

<h3>Testear</h3>

<p>En un proyecto XP, los programadores toman la actitud de ser ellos quien
demuestran al cliente que los requisitos funcionan, y no al revés, no es
el cliente quien demuestra que lo que pidió no funciona.</p>

<p>Todo el código debe tener Tests Unitarios. Y todos los tests pasan antes
de sacar una versión.</p>

<p>Cuando se encuentra un bug, se crea un test para reproducirlo, arreglarlo,
y que nunca vuelva a salir una versión con ese bug.</p>

<p>Se escriben Tests de Aceptación. Se ejecutan frecuentemente y su puntuación
se hace pública.</p>

<h2>Valores</h2>

<p>XP mejora un proyecto software en cinco aspectos fundamentales, que se han
convertido en los valores de XP. Las reglas que acabamos de ver son consecuencia
de maximizar estos valores.</p>

<ul>
<li>Simplicidad: se hace lo que es necesario, pero nada más. No se añade complejidad
extra porque sí. Se avanza a pasos pequeños pero firmes.</li>
<li>Comunicación: todo el mundo es parte del equipo. Siempre que se pueda, la
comunicación es cara a cara.</li>
<li>Feedback: al final de cada iteración se entrega un software ejecutable y
válido. Se demuestra el software pronto y frecuentemente.</li>
<li>Respeto: todo el mundo da y recibe respeto. Los programadores respetan la
experiencia de los clientes y al revés.</li>
<li>Coraje: siempre se dice la verdad sobre las estimaciones y el estado de las
tareas.</li>
</ul>


<h2>Para seguir leyendo</h2>

<ul>
<li><a href="http://www.adictosaltrabajo.com/detalle-noticia.php?noticia=379">Principio de oxidación del software (Spanish)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Barry_Boehm">Barry Boehm</a></li>
<li><a href="http://www.extremeprogramming.org/lessons.html">XP lessons learned</a></li>
<li><a href="http://www.extremeprogramming.org/when.html">When should XP be used</a></li>
<li><a href="http://www.agile-process.org">Agile process</a></li>
<li><a href="http://www.amazon.com/Extreme-Programming-Explained-Embrace-Edition/dp/0321278658">Extreme programming explained</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Curso de Scrum Master]]></title>
    <link href="http://rchavarria.github.io/blog/2013/10/08/curso-de-scrum-master/"/>
    <updated>2013-10-08T11:28:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/10/08/curso-de-scrum-master</id>
    <content type="html"><![CDATA[<p>Los días 3 y 4 de octubre de 2013 tuve una oportunidad única, la de asistir a
un curso <strong>GRATUITO</strong> de Scrum Master impartido por <a href="http://twitter.com/adiazmaroto">Ángel Diaz-Maroto</a> en las oficinas de
<a href="http://www.ingdirect.es">ING Direct</a>. Fue un curso espectacular, con otras 14-15 personas magníficas y
que estoy muy agradecido tanto a ING como a Ángel por hacerlo posible. Fue una
auténtica pasada.</p>

<p>Este post es para agradecérselo públicamente y para tener unas pequeñas notas y
no olvidarme de la fabulosa experiencia vivida.</p>

<!-- more -->


<h2>El curso</h2>

<p>El curso fueron 2 días muy intensos, donde aprendimos el funcionamiento de Scrum y el
papel que juega el rol del Scrum Master (porque es un rol, nunca un puesto o un título).
Por supuesto, una vez realizado el curso no eres realmente un Scrum Master, pero yo
lo veo un poco como sacarse el carnet de conducir. Es lo que te da la posibilidad
de conducir y aprender realmente a conducir en situaciones de la vida real. Este curso
es algo así, <strong>nos ha habilitado para aprender a ser Scrum Master en proyectos de la vida
real</strong>.</p>

<p>Muy pronto aprendimos la primera lección: ¿Cómo se hace Scrum? ¿Cómo se hace <em>agile</em>?.
Me quedo con la frase de Ángel:</p>

<blockquote><p>Agilear se hace aligerando</p></blockquote>

<p>La diferencia fundamental de las metodologías ágiles frente a las tradicionales,
es que las ágiles se basan en eliminar, mientras que las tradicionales se
basan en añadir capas de complejidad.</p>

<h2>Acuerdos de trabajo</h2>

<p>Lo primero de todo, antes de empezar a trabajar, lo primordial es establecer unos
acuerdos de trabajo. Sin ellos, cualquier proyecto, empresa, lo que sea, que necesite
de un trabajo en grupo, no podrá saber si todo el mundo avanza en la misma dirección.</p>

<p>Nosotros es lo primero que hicimos al comenzar el curso, y éstos fueron nuestros
<em>Acuerdos de Trabajo</em>:</p>

<p><img class="left" src="/images/2013/curso-scrum-master/01-acuerdos-trabajo.jpg" width="194" height="260"></p>

<ul>
<li>Speak up! (¡Habla!): Los problemas se deben resolver cuanto antes. Si te molesta
cualquier cosa, por pequeña que sea, si crees que va a haber un problema con algo...
Dilo en voz alta, que se sepa. Esta es la única forma de que se resuelvan rápidamente.</li>
<li>Compañerismo: sin él, difícilmente se podrá crear un buen ambiente de trabajo.</li>
<li>Objetivo común: todos debemos ir en la misma dirección, si no, estaremos despediciando
esfuerzos.</li>
</ul>


<h2>Crear una visión</h2>

<p><img class="right" src="/images/2013/curso-scrum-master/02-vision.jpg" width="194" height="260"></p>

<p>Uno de los acuerdos de trabajo es el de tener un objetivo común, y para ello es
necesario crear una visión.</p>

<p>La nuestra la creamos a través de una dinámica de grupo, y al final, el resultado
consensuado al que llegamos fue que nuestra visión para este curso sería:</p>

<blockquote><p>Aprender, en grupo, métodos y buenas prácticas y bases de Scrum, divirtiéndonos.</p></blockquote>

<h2>Manifiesto ágil</h2>

<p><img class="right" src="/images/2013/curso-scrum-master/03-clover.jpg" width="194" height="260"></p>

<p>Una vez sentadas las bases de cómo vamos a trabajar y qué es lo que vamos a
esperar del curso, comenzamos. Y qué mejor punto para empezar que conociendo
los cuatro valores del <a href="http://www.agilemanifesto.org/iso/es/">manifiesto ágil</a>:</p>

<ul>
<li><strong>Individuos e interacciones</strong> sobre procesos y herramientas</li>
<li><strong>Software funcionando</strong> sobre documentación extensiva</li>
<li><strong>Colaboración con el cliente</strong> sobre negociación contractual</li>
<li><strong>Respuesta ante el cambio</strong> sobre seguir un plan</li>
</ul>


<h2>Scrum</h2>

<p><img class="left" src="/images/2013/curso-scrum-master/04-scrum.jpg" width="194" height="260"></p>

<p>Existen multitud de metodologías que se pueden considerar ágiles, entre ellas
está <em>Scrum</em>. Aunque Scrum no es una metodología en sí, es un marco de trabajo.
No es una lista de prácticas que debes hacer, si no una serie de recomendaciones,
que puedes seguir o no, y que son totalmente independientes del campo en que
se apliquen. Y puede que estos sean los factores que han hecho que Scrum se
haya adoptado tanto en todo el mundo.</p>

<p>En el curso, aprendimos cuáles son los actores de Scrum (Product Owner, Scrum
Master, Team, ...), qué elementos forman parte de él (Backlog, Spring,
Entregable, ...) y qué reuniones lo hacen posible (Diaria, Retrospectiva,
Demo, ...).</p>

<p>Todo se podría resumir en <em>Inspección y Adaptación</em>. Inspeccionar qué se está
haciendo y cómo, detectar dónde se podría mejorar y adaptarse para atajar
esos impedimentos para conseguir una mejora contínua.</p>

<h2>Principios y valores</h2>

<p>Luego pasamos a ver cuáles son los principios y valores de Scrum.</p>

<p>Todos ellos se podrían resumir en uno <strong>Respeto</strong>. A partir de él se pueden
ir concretando alguno más, por mencionar algunos (que surgieron a partir de
nosotros y fueron completados por Ángel):</p>

<p><img class="left" src="/images/2013/curso-scrum-master/05-principios-valores.jpg" width="194" height="260"></p>

<ul>
<li>Transparencia: no esconder nada, mostrar toda la información importante acerca
del avance del proyecto, que los problemas salgan a la luz, ...</li>
<li>Confianza: esto da libertad a los integrantes del equipo para trabajar a su
manera y dar lo mejor de sí mismos.</li>
<li>Foco: trabajar con un objetivo común, y no desperciar esfuerzos.</li>
<li>Coraje: porque para cambiar las cosas y trabajar de forma auto-organizada,
sin un <em>jefismo</em> que te las imponga, se necesita mucho coraje.</li>
</ul>


<h2>Roles</h2>

<p>Los dos roles de Scrum que vimos en el curso son el <em>Product Owner</em> y el <em>Scrum
Master</em>. Existe una relación muy fuerte entre ellos, y de ellos depende en
gran medida el éxito del proyecto.</p>

<p>Estuvimos discutiendo qué características deberían tener estos roles:</p>

<p><img class="right" src="/images/2013/curso-scrum-master/06-scrum-master.jpg" width="194" height="260"></p>

<p><img class="right" src="/images/2013/curso-scrum-master/07-product-owner.jpg" width="194" height="260"></p>

<ul>
<li>Scrum Master

<ul>
<li>dialogante</li>
<li>tenaz</li>
<li>empático</li>
</ul>
</li>
<li>Product Owner

<ul>
<li>accesible</li>
<li>priorizador</li>
<li>estratega</li>
</ul>
</li>
</ul>


<h2>Retrospectiva</h2>

<p>Durante todo el curso aplicamos la siguiente máxima:</p>

<blockquote><p>Learn by doing</p></blockquote>

<p><img class="left" src="/images/2013/curso-scrum-master/08-retro.jpg" width="194" height="260"></p>

<p>Es decir, <em>aprender haciendo</em>. De esta forma, aprendimos Scrum haciendo Scrum.
Y Scrum no existe sin una retrospectiva.</p>

<p>La retrospectiva es una parte fundamental de Scrum. Lo más importante, lo que
proporciona la retro, es que al terminar la reunión, se ha tenido que tomar una
decisión:</p>

<blockquote><p>Qué acciones vamos a tomar para solucionar alguno de los problemas que tenemos</p></blockquote>

<p>Y así, poco a poco, problema a problema, con un ritmo sostenible, sin agobios,
ir mejorando contínuamente. Nunca llegarás a la perfección, siempre aparecerán
nuevos problemas, pero ahí estará la retro para identificarlos, sacarlos a la
luz y darles solución.</p>

<h2>Referencias</h2>

<p>A lo largo del curso, hicimos referencia a multitud de autores, libros y recursos,
así que aquí iré dejando aquellas referencias que vayan surgiendo de conversaciones
futuras acerca de este curso:</p>

<ul>
<li><a href="http://scrummasters.com/">Scrum Masters Community</a></li>
<li><a href="https://www.scrum.org/">The home of Scrum</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La meta]]></title>
    <link href="http://rchavarria.github.io/blog/2013/04/10/la-meta/"/>
    <updated>2013-04-10T10:06:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/04/10/la-meta</id>
    <content type="html"><![CDATA[<h4>La meta</h4>

<h5>Eliyahu Goldratt</h5>

<p><img class="right" src="http://ecx.images-amazon.com/images/I/51E50P52AXL.<em>SY300</em>.jpg" width="195" height="300" title="La meta" ></p>

<h2>Por qué lo he leído</h2>

<p>Nunca había oído hablar de este libro, pero cuando asistí a la CAS2012, el año pasado en Cáceres,
varias personas que allí conocí (<a href="https://twitter.com/rferlei">Roberto</a> y
<a href="https://twitter.com/anuskiaranda">Ana</a>) me hablaron maravillas de él, así que decidí
ponerlo en la lista de libros a leer.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Bueno, en realidad ya me habían contado de qué iba el libro, así que ya llevaba una buena idea
de lo que se iba a tratar. Y tenía bastantes buenas espectativas.</p>

<h2>Qué encontre</h2>

<p>Encontré un magnífico libro. La verdad es que es muy ameno y divertido. También es intrigante
ir leyendo cómo el autor va relatando a través del protagonista un proceso de descubrimiento de
soluciones a todos sus problemas.</p>

<p>La verdad es que se hace muy fácil de leer y comprender los principios Lean y la teoría de las
restricciones a través de la historia contada a través del protagonista.</p>

<h2>Conclusiones</h2>

<p>El libro me ha encantado, aunque me hubiera gustado mucho más haberlo leído un tiempo atrás, ya
que trabajé en una fábrica como Ingeniero de Desarrollo (para desarrollar nuevos productos). Por
lo menos ha sido divertido revivir experiencias de aquel trabajo, ya que muchos de los principios
(y problemas también) expuestos en el libro ya los viví en mis propias carnes.</p>

<p>Así pues, este es un libro recomendado sobre todo a todos aquellos interesados en mejorar procesos
de producción. No parece un tema muy de desarrollo de software, que es a lo que me dedico, pero
estos principios son la base de las metodologías Lean, y por ende, Agile. Además, es un libro
que se lee relativamente rápido, y, de verdad, es muy divertido, así que tampoco cuesta tanto.</p>

<h2>Pasajes que quiero recordar de este libro</h2>

<blockquote><p>Comprar a precios económicos no es la meta.</p>

<p>La meta no es vender, hay veces que se vende perdiendo dinero o con márgenes ínfimos.</p>

<p>Qué es lo que la gente piensa que son las metas: compras baratas, contratación de gente adecuada,
tecnología punta, fabricacón de bienes de calidad, venta de bienes de calidad,
conquista tasa de mercado, comunciaciones o cumplimiento de los deseos del cliente.
Pero esos son medios para alcanzar la meta.</p>

<p>La calidad sola, es importante, pero no es la meta.</p>

<p>Tecnologia, es importatne, pero no es la meta.</p>

<p>Trabajar no es sinónimo de ganar dinero.</p>

<p>Ésta es la meta: ganar dinero aumentando los beneficios netos y al mismo tiempo el rendimiento
de la inversión (ROI) y la liquidez.</p>

<p>Parámetros que expresan la meta y que permiten establecer procedimientos operativos para
dirigir la fábrica: ingresos, inventarios y gastos de operación.</p>

<p>Una fabrica, en la que todo el mundo produce ininterrumpidamente, es muy poco productiva.</p>

<p>Una regla que expresa la relación entre cuellos de botella y los demas recursos: equilibrar
el flujo, no la capacidad.</p>

<p>El grado de utilización de un recuros 'no-cuello' de botella no vendrá dado por su propia
capacidad sino por alguna otra restricción del sistema.</p>

<p>Se pueden distinguir 4 tipos de tiempos desde que el material entra en la fábrica hasta
que sale de ella: de preparación, de proceso, en cola y de espera.</p>

<p>Tres consejos sobre cómo dirigir: Saber convencer a otras personas, desprender las capas
de la práctica común y vencer la resistencia al cambio.</p>

<p>Nunca des las respuestas, solo plantea las preguntas.</p>

<p>¿Qué cabmiar? ¿Hacia qué cambiar? ¿Cómo provocar el cambio? Basicamente estamos pidiendo
las habiliades fundamentales que uno debería esperar de un directivo.</p></blockquote>

<h2>Conceptos</h2>

<ul>
<li><p>Productividad: significa hacer las cosas de tal manera que, en el caso de la empresa, ésta
se aproxime lo más posible a su meta. Todo aquello que lleve a una compañía más cerca de su meta
es productivo, todo aquello que no la lleve es imprductivo.</p></li>
<li><p>Ingresos: tasa de generacion de dinero a traves de las ventas.</p></li>
<li><p>Inventario: todo el dinero que el sistema ha invertido en adquierrir cosas que pretende vender.</p></li>
<li><p>Gastos de operación: todo el dienro que el sistema gasta para convertir el inventario en ingresos netos.</p></li>
</ul>


<h2>Otras lecturas y enlaces relacionadas</h2>

<ul>
<li><a href="/blog/2012/10/10/lean-software-development/">Lean software development</a>, de Mary y Tom Poppendiek.</li>
<li><a href="https://plus.google.com/105077077543737057709">Roberto Hens</a> también lo ha leído, y esto es lo que le parece:</li>
<li><a href="http://robertohens.blogspot.com.es/2013/04/Kanban-el-Origen-The-Goal.html">Kanban, el origen</a>.</li>
</ul>

]]></content>
  </entry>
  
</feed>
