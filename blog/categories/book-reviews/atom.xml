<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: book reviews | R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/blog/categories/book-reviews/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2014-10-17T00:21:51+02:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Planifica tu éxito: de aprendiz a empresario]]></title>
    <link href="http://rchavarria.github.io/blog/2014/02/18/planifica-tu-exito/"/>
    <updated>2014-02-18T22:00:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2014/02/18/planifica-tu-exito</id>
    <content type="html"><![CDATA[<h5>de Roberto Canales Mora</h5>

<p><img class="right" src="http://ecx.images-amazon.com/images/I/810ghYlRMFL.<em>SL1500</em>.jpg" width="229" height="330" title="Planifica tu exito: de aprendiz a empresario" ></p>

<h2>Por qué lo he leído</h2>

<p>Tenía pensado leer <a href="http://www.amazon.es/Planifica-tu-%C3%A9xito-aprendiz-empresario/dp/841545757X/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1392882947&amp;sr=1-1">Planifica tu éxito</a> porque estoy muy interesado en mejorar como profesional
y en avanzar en mi carrera como tal. Ya simplemente el título te da una idea de progreso y tenía
curiosidad por conocer un poco más allá de mi perfil profesional actual. Si a esto le añadimos
que el autor pertenece a una empresa llena de profesionales a los que admiro y que
además el libro es un regalo, pues ya no hay excusa.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Me esperaba una descripción de una carrera profesional plena, desde <em>currito</em> hasta
magnate de empresas multinacionales. Una descripción de todas las fases por las que
pasaría una persona a lo largo de toda su trayectoria profesional, y por supuesto,
cómo pasar de una fase a la siguiente, aunque ya se que no hay ninguna
receta mágica para ello.</p>

<h2>Qué encontre</h2>

<p>Por supuesto encontré más o menos lo que esperaba, pero mucho más práctico y
adaptado al mundo real.</p>

<p>Encontré una descripción de varias fases de la carrera profesional que se puede
encontrar cualquier desarrollador software (o cualquier trabajador del conocimiento),
y una serie de pautas para brillar en cada una de esas fases. Está claro que un
directivo no tiene que tener las mismas características que un trabajador o un mando
intermedio, pero eso no quiere decir que no puedan ser la misma persona en distintos
momentos de su trayectoria laboral.</p>

<p>En el desarrollo del software existen básicamente dos caminos: el técnico y el de gestión.
Ambos perfectamente válidos y no necesariamente excluyentes, pero se necesitan
distintas aptitudes para cada uno de los caminos.</p>

<h2>Conclusiones</h2>

<p>Me parece un libro fantástico, muy recomendable, especialmente para todas aquellas
personas que desean avanzar en su carrera profesional (por el camino técnico o de
gestión). No va a tener una receta mágica, pero seguro que va a encontrar consejos
muy útiles.</p>

<p>En ocasiones me parece muy autobiográfico (al menos muy personal) y otras veces me
recuerda a los consejos que me daba mi padre (y tienen pinta que yo le daré a mi hijo).</p>

<p>Me parece un libro muy práctico, con los pies en la tierra y que no divaga con
filosofías o con idealismos. Eso hace que haya ciertas partes con las que no estoy
de acuerdo, porque echa por tierra ciertas <em>creencias</em> personales, pero creo que eso
es bueno, y comprendo totalmente el punto de vista del autor.</p>

<h2>Qué he aprendido</h2>

<p>Lo esencial, la idea principal que me ha transmitido el libro es que, para triunfar,
para ser un profesional reconocido, al menos hay que:</p>

<ul>
<li>trabajar duro, muy duro, constantemente</li>
<li>apoyarse en otros profesionales como tú, de dentro o fuera de tu empresa, de
dentro o fuera de tu ciudad, de dentro o fuera de tu pais, pero apoyarse en
otros profesinales</li>
</ul>


<h2>Frases que me gustaría recordar</h2>

<p>Hay muchas frases y conceptos que me gustaría recordar de este libro, pero las
más importantes serían:</p>

<blockquote><p>Para conseguir X hay que ser Y (pero serlo un poco más que los demás)</p>

<p>Hay dos caminos hacia el éxito: técnico o gestión</p>

<p>Lee, lee, lee y aprende nuevas habilidades, tanto técnicas como no técnicas</p>

<p>Atesora conocimiento, no dinero. Gasta poco y podrás cambiar de aires con facilidad</p>

<p>Permítete cambiar de rumbo, de objetivos y de opinión</p>

<p>En trabajos intelectuales, no valen métodos militares</p>

<p>La gente no dejará de sorprenderte por las cosas estúpidas que hace</p>

<p>Déjate encontrar: blog, comentar, publicar en medios de terceros, eventos locales
y/o internacionales</p></blockquote>

<p>El resto las he reunido en un gist:
<a href="https://gist.github.com/rchavarria/8997378">notas sobre Planifica tu éxito</a></p>

<h2>Recursos relacionados</h2>

<ul>
<li>Book crossing, conoce dónde ha estado este libro: <a href="http://bookcrossing.com">BookCrossing</a>,
introduce el BCID: 659-11704854</li>
<li>Puntero propuesto por el autor para comentar acerca del libro:
<a href="www.adictosaltrabajo.com/book_section.inc.php?book=2">Adictos al trabajo</a></li>
<li><a href="http://www.profiteditorial.com/libros-para-vivir-mejor/habilidades-personales/c%C3%B3mo-iniciar-una-conversaci%C3%B3n-y-hacer-amigos">Cómo iniciar una conversación y hacer amigos</a></li>
<li>Vídeo explicativo acerca de
<a href="http://www.youtube.com/watch?v=vCbfJGCda7E">«eficacia vs. eficiencia»</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Instant Markdown]]></title>
    <link href="http://rchavarria.github.io/blog/2013/10/07/instant-markdown/"/>
    <updated>2013-10-07T09:38:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/10/07/instant-markdown</id>
    <content type="html"><![CDATA[<h4>Instant Markdown</h4>

<h5>Arturo Herrero</h5>

<p><img class="right" src="http://www.packtpub.com/sites/default/files/9145OT_Instant%20Markdown_cov_0.jpg" width="195" height="300" title="Instant Markdown" ></p>

<h2>Por qué lo he leído</h2>

<p>El lenguaje Markdown me interesa, me parece una forma sencilla de formatear documentos
sin usar grandes pomposidades, y <a href="http://twitter.com/arturoherrero">Arturo</a>, a través de twitter, dió la posibilidad
de conseguir una copia (¡muchas gracias por cierto!). Había leído alguna <em>review</em>
del libro, como la de <a href="http://kinisoftware.com/2013/09/revisando-el-libro-instant-markdown">Kinisoftware</a>, por lo que no podía desperdiciar la oportunidad.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Ya conocía por encima la sintaxis de Markdown, la utilizo para escribir este post
y cada vez más para tomar notas rápidas. También, al haber leído ya un par de
revisiones, ya tenía más o menos una idea de lo que era el libro. Pero hasta que
no lo lees no sabes con certeza si has acertado o no, así que allá que fui.</p>

<h2>Qué encontre</h2>

<p>Es un libro conciso, directo al grano y facilísimo de leer. Está en ingles, vale,
pero de verdad que es sencillo de leer. Arturo expone el tema con claridad y sin
andarse con rodeos.</p>

<p>Aquí podrás encontrar una referencia rápida pero completa de la sintaxis oficial de
Markdown así como algunos añadidos que ofrecen páginas como <a href="http://github.com">Github</a>, por ejemplo.</p>

<p>También conocerás herramientas para trabajar con Markdown para tu día a día y para
tareas tan comunes como escribir emails (está genial poder escribir un email, con
formato, sin tener que levantar las manos del teclado).</p>

<h2>Conclusiones</h2>

<p><em>Instant Markdown</em> es un libro muy fácil de leer, y que te da unas cuantas ideas
para profundizar en el tema, así que no decepciona. <strong>¿Quieres tener una referencia
rápida del lenguaje?</strong> Aquí la encontrarás. <strong>¿Quieres conocer posibles usos diarios
de una sintaxis sencillísima para escribir documentos formateado?</strong> Alimenta tu
curiosidad con este libro.</p>

<p>Una vez que pruebes la sencillez y rapidez de Markdown, querrás utilizarlo para
todo, y este libro te indica unas cuantas herramientas para ello.</p>

<h2>Qué he aprendido con este libro</h2>

<ul>
<li>Se pueden dibujar líneas horizontales, simplemente escribiendo 3 o más de estos
carácteres en la misma línea: <code>-</code>, <code>*</code>, <code>_</code>. Así:</li>
</ul>


<hr />

<ul>
<li><p>Puedes escribir emails con la herramienta <a href="http://markdown-here.com">Markdown Here</a>.</p></li>
<li><p>Puedes escribir listas de cosas por hacer, muy útil. <a href="http://cheddarapp.com">Cheddar</a>.</p></li>
<li><p>Con la herramienta <a href="http://johnmacfarlane.net/pandoc">pandoc</a> podrás generar múltiples
formatos a partir de Markdown: HTML, docx, odt, ebook, latex y pdf.</p></li>
<li><p>Y si Markdown se queda corto en alǵun momento: <a href="http://fletcherpenney.net/multimarkdown">MultiMarkdown</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La meta]]></title>
    <link href="http://rchavarria.github.io/blog/2013/04/10/la-meta/"/>
    <updated>2013-04-10T10:06:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/04/10/la-meta</id>
    <content type="html"><![CDATA[<h4>La meta</h4>

<h5>Eliyahu Goldratt</h5>

<p><img class="right" src="http://ecx.images-amazon.com/images/I/51E50P52AXL.<em>SY300</em>.jpg" width="195" height="300" title="La meta" ></p>

<h2>Por qué lo he leído</h2>

<p>Nunca había oído hablar de este libro, pero cuando asistí a la CAS2012, el año pasado en Cáceres,
varias personas que allí conocí (<a href="https://twitter.com/rferlei">Roberto</a> y
<a href="https://twitter.com/anuskiaranda">Ana</a>) me hablaron maravillas de él, así que decidí
ponerlo en la lista de libros a leer.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Bueno, en realidad ya me habían contado de qué iba el libro, así que ya llevaba una buena idea
de lo que se iba a tratar. Y tenía bastantes buenas espectativas.</p>

<h2>Qué encontre</h2>

<p>Encontré un magnífico libro. La verdad es que es muy ameno y divertido. También es intrigante
ir leyendo cómo el autor va relatando a través del protagonista un proceso de descubrimiento de
soluciones a todos sus problemas.</p>

<p>La verdad es que se hace muy fácil de leer y comprender los principios Lean y la teoría de las
restricciones a través de la historia contada a través del protagonista.</p>

<h2>Conclusiones</h2>

<p>El libro me ha encantado, aunque me hubiera gustado mucho más haberlo leído un tiempo atrás, ya
que trabajé en una fábrica como Ingeniero de Desarrollo (para desarrollar nuevos productos). Por
lo menos ha sido divertido revivir experiencias de aquel trabajo, ya que muchos de los principios
(y problemas también) expuestos en el libro ya los viví en mis propias carnes.</p>

<p>Así pues, este es un libro recomendado sobre todo a todos aquellos interesados en mejorar procesos
de producción. No parece un tema muy de desarrollo de software, que es a lo que me dedico, pero
estos principios son la base de las metodologías Lean, y por ende, Agile. Además, es un libro
que se lee relativamente rápido, y, de verdad, es muy divertido, así que tampoco cuesta tanto.</p>

<h2>Pasajes que quiero recordar de este libro</h2>

<blockquote><p>Comprar a precios económicos no es la meta.</p>

<p>La meta no es vender, hay veces que se vende perdiendo dinero o con márgenes ínfimos.</p>

<p>Qué es lo que la gente piensa que son las metas: compras baratas, contratación de gente adecuada,
tecnología punta, fabricacón de bienes de calidad, venta de bienes de calidad,
conquista tasa de mercado, comunciaciones o cumplimiento de los deseos del cliente.
Pero esos son medios para alcanzar la meta.</p>

<p>La calidad sola, es importante, pero no es la meta.</p>

<p>Tecnologia, es importatne, pero no es la meta.</p>

<p>Trabajar no es sinónimo de ganar dinero.</p>

<p>Ésta es la meta: ganar dinero aumentando los beneficios netos y al mismo tiempo el rendimiento
de la inversión (ROI) y la liquidez.</p>

<p>Parámetros que expresan la meta y que permiten establecer procedimientos operativos para
dirigir la fábrica: ingresos, inventarios y gastos de operación.</p>

<p>Una fabrica, en la que todo el mundo produce ininterrumpidamente, es muy poco productiva.</p>

<p>Una regla que expresa la relación entre cuellos de botella y los demas recursos: equilibrar
el flujo, no la capacidad.</p>

<p>El grado de utilización de un recuros 'no-cuello' de botella no vendrá dado por su propia
capacidad sino por alguna otra restricción del sistema.</p>

<p>Se pueden distinguir 4 tipos de tiempos desde que el material entra en la fábrica hasta
que sale de ella: de preparación, de proceso, en cola y de espera.</p>

<p>Tres consejos sobre cómo dirigir: Saber convencer a otras personas, desprender las capas
de la práctica común y vencer la resistencia al cambio.</p>

<p>Nunca des las respuestas, solo plantea las preguntas.</p>

<p>¿Qué cabmiar? ¿Hacia qué cambiar? ¿Cómo provocar el cambio? Basicamente estamos pidiendo
las habiliades fundamentales que uno debería esperar de un directivo.</p></blockquote>

<h2>Conceptos</h2>

<ul>
<li><p>Productividad: significa hacer las cosas de tal manera que, en el caso de la empresa, ésta
se aproxime lo más posible a su meta. Todo aquello que lleve a una compañía más cerca de su meta
es productivo, todo aquello que no la lleve es imprductivo.</p></li>
<li><p>Ingresos: tasa de generacion de dinero a traves de las ventas.</p></li>
<li><p>Inventario: todo el dinero que el sistema ha invertido en adquierrir cosas que pretende vender.</p></li>
<li><p>Gastos de operación: todo el dienro que el sistema gasta para convertir el inventario en ingresos netos.</p></li>
</ul>


<h2>Otras lecturas y enlaces relacionadas</h2>

<ul>
<li><a href="/blog/2012/10/10/lean-software-development/">Lean software development</a>, de Mary y Tom Poppendiek.</li>
<li><a href="https://plus.google.com/105077077543737057709">Roberto Hens</a> también lo ha leído, y esto es lo que le parece:</li>
<li><a href="http://robertohens.blogspot.com.es/2013/04/Kanban-el-Origen-The-Goal.html">Kanban, el origen</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile estimating and planning]]></title>
    <link href="http://rchavarria.github.io/blog/2013/02/13/agile-estimating-and-planning/"/>
    <updated>2013-02-13T13:08:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2013/02/13/agile-estimating-and-planning</id>
    <content type="html"><![CDATA[<h4>Agile estimating and planning</h4>

<h5>Mike Cohn</h5>

<p><img class="right" src="http://www.mcwherter.net/Portals/McWherter/9780131479418.jpg" width="245" height="324" title="Agile estimating and planning" ></p>

<h2>Por qué lo he leído</h2>

<p>últimamente estoy leyendo muchos libros relacionados con las metodologías ágiles, y en muchos de ellos se hacía referencia a este libro, así que pensé que debía ser un libro imprescindible. Y así es.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Esperaba encontrar muchas técnicas de estimación, métricas para controlar que una planificación no se desvía del plan inicial y cosas así.</p>

<p>También esperaba encontrar una serie de consejos a aplicar a la hora de hacer las estimaciones, y la verdad es que el libro no me ha defraudado para nada.</p>

<h2>Qué encontre</h2>

<p>Encontré todo eso y mucho más. Descubrí nuevos conceptos (ver último apartado) y conocí de primera mano técnicas que hasta ahora solo había conocido por encima, como los diagramas <em>burndown</em>, para registrar los puntos de historia que se han implementado en una iteración.</p>

<h2>Conclusiones</h2>

<p>El libro me ha encantado. Creo que es una lectura obligatoria para cualquier persona que esté relacionada con las planificaciones de los proyectos software. Estoy seguro de que aprendería muchísimas cosas. Claro, que si eres desarrollador también te conviene conocer las técnicas explicadas en este libro.</p>

<p>Una cosa que me ha gustado muchísimo es que al final de cada capítulo hay un resumen exponiendo las ideas principales del capítulo. Muy útil por si tienes que ojearlo una vez leído.</p>

<h2>Pasajes que quiero recordar de este libro</h2>

<blockquote><p>En 1981, Barry Boehm dibujó su primera versión del <a href="https://raw.github.com/tapichu/scrum/gh-pages/img/03%20-%20cono%20de%20incertidumbre.png"><em>cono de incertidumbre</em></a>. La imagen del enlace muestra los rangos iniciales de incertidumbre en diferentes puntos de un proceso de desarrollo secuencial ("en cascada")</p>

<p>El "cono de incertidumbre" se va estrechando conforme el proyecto va avanzando.</p>

<p>Un plan <em>ágil</em> is aquel que no es que no queramos cambiar, sino que estamos ansiosos de hacerlo, y queremos
cambiarlo porque eso significa que hemos aprendido algo o que hemos sorteado una dificultad.</p>

<p>Las funcionalidades son la unidad de valor para el cliente, y no las actividades, aunque nosotros
planificamos basándonos en actividades, por eso muchos proyectos fallan.</p>

<p>La multitarea se convierte en un problema para los proyectos planificados tradicionalmente porque
incentiva enfocarse en la máxima utilzizacion de todos los individuos en lugar de mantener un margen
suficiente para poder manejar la variabilidad típica de las tareas de los proyectos software.</p>

<p>Un equipo <em>ágil</em> trabaja como una unidad, no hay espacio para la mentalidad "ahí lo dejo y ya está". Un
buen equipo <em>ágil</em> debe tener una mentalidad de estamos todos juntos en esto.</p>

<p>Las <em>historias de usuario</em> son una técnica poco pesada para expresar los requisitos del software.</p>

<p>Los equipos ágiles planifican a tres niveles: release, iteración y dia. <strong>release</strong>: determina el alcance,
las fechas y los recursos de un proyecto. <strong>iteración</strong>: identfica tareas de alta prioridad que el equipo
debería realizar en la siguiente iteración. <strong>dia</strong>: coordina el trabajo y sincroniza los esfuerzos
del dia a dia.</p>

<p>Los proyectos se deberían ver como una forma de generar un flujo de nuevas capacidades y conocimientos,
conocimientos sobre el producto y sobre el proyecto (equipo, tecnología, personas, ...)</p>

<p>Al igual que en los restaurantes las medidas de las raciones son relativas entre sí, en el mundo software
sólo necesito saber si una funcionalidad es mayor o menor respecto a otra.</p>

<p>Además de saber que las estimaciones son más fiables si son indicadas por aquellos que realizarán la tarea,
las estimaciones son aún mejores si se basan en la colaboración del equipo al completo.</p>

<p>Las tres formas más comunes de dar una estimación son: opinión de un experto, analogía y disgregación (o
dividir una tarea en otras más pequeñas).</p>

<p>La cantidad de tiempo que llevará implementar una funcionalidad es función de su tamaño (puntos historia) y
el ratio de progreso del equipo (velocidad)</p>

<p>Se deben tener en cuenta cuatro factores a la hora de priorizar tareas: valor de las funcionalidades, coste
del desarrollo, nuevo conocimiento que generará y riesgos que eliminará la realización de la tarea.</p>

<p>Kano (link al torpedo este, con imagen y todo si es posible) nos da una forma de separar funcionalidades en tres categorías: indispensables,
lineales y excitantes/sorprendentes.</p>

<p>Entregar un subconjunto coherente de todas las capas de una funcionalidad is siempre mejor que entregar
una capa entera pero sin conexión con el resto de ellas.</p>

<p>Así como un corazón bate a un ritmo regular que mantienen el cuerpo funcionando, un duración de iteración
fija proporciona una constante que ayuda a establecer un ritmo de desarrollo y entregas ~ Simon Baker</p>

<p>Un <em>buffer</em> es un margen de error alrededor de una estimación. Hay dos tipos de buffers: de funcionalidad
(un 25-40% de las funcionalidades son opcionales) y de planificación (se añade un 30% de tiempo a lo que
creo que me va a costar).</p>

<p>Un buffer de planificación no es un alargamiento consciente. Las personas alargan conscientemente sus
estimaciones si creen que se les reprochará no terminar a tiempo. Un buffer es un margen de seguridad
necesario que sumar al conjunto de estimaciones.</p>

<p>Algo que el autor encuentra muy útil como trabajo a realizar antes de una iteración son las <em>condiciones de
satisfacción</em> de las historias de usuario a desarrollar en dicha iteración por parte del cliente.</p>

<p>Un <em>release burndown chart</em> muestra la cantidad de trabajo que queda por realizar al inicio de cada iteración.
Esto se convierte en un indicador visual de cómo y a qué velocidad se está acercando el equipo al objetivo
del proyecto.</p>

<p>La variabilidad es parte da cada estimación. No importa cuánto esfuerzo se ponga en mejorarlas, un equipo nunca
será capaz de estimar perfectamente.</p>

<p>No gestionar la velocidad individualmente. Se debe incentivar siempre que sea posible que todos los miembros
del equipo trabajen como un todo, como un único equipo.</p>

<p>Las estimaciones y planificaciones ágiles funcionan porque se separan las estimaciones de tamaño y de duración:
puntos historia * velocidad = duración</p>

<p>Las planficaciones tradicionales se enfocan en las tareas para crear el producto, mientras que las planificaciones
ágiles se centran en las funcionalidades que desea el usuario.</p>

<p>Cuando creamos un plan al principio de un proyecto y no lo actualizamos con los nuevos conocimiento adquiridos,
estamos perdiendo la oportunidad de sincronizar nuestro proyecto con la realidad.</p></blockquote>

<h2>Conceptos</h2>

<ul>
<li><a href="http://gzurita.blogspot.com.es/2006/07/idea-valiosa-el-cono-de-incertidumbre.html">Cono de incertidumbre</a></li>
<li><a href="http://ow.ly/hFQSx">Velocidad</a></li>
<li><a href="www.youtube.com/watch?v=lGXLe9RiJyY">Commitment-driven iteration planning</a>:
Una aproximación guiado por el compromiso is una alternativa a la
planificación de la iteración. El equipo va añadiendo historias a la iteración de una en una mientras que ellos
se puedan comprometer a entregarlas. Las historias son seleccionadas, descompuestas en tareas y éstas estimadas.
De una en una. En la aproximación de planificar basándose en la velocidad, se eligen un conjunto de historias
cuyas estimaciones sean iguales o menores que la velocidad del equipo.</li>
<li><a href="http://stackoverflow.com/a/3700855/1111676">Condiciones de satisfacción</a></li>
<li><a href="https://www.google.es/search?q=burndown+bar+chart&amp;tbm=isch">burndown bar chart</a></li>
</ul>


<h2>Otras lecturas y enlaces relacionadas</h2>

<ul>
<li><a href="http://jmbeas.es/guias/">Guía de conceptos ágiles</a></li>
<li><a href="http://twitter.com/joserra_diaz/">Jose Ramón Díaz</a>, de <a href="http://www.agilar.org/">Agilar</a>,
habla de <a href="http://najaraba.blogspot.com.es/2013/02/la-estimacion-agil-de-proyectos-puntos.html">estimaciones ágiles</a>
en su blog.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile principles, patterns and practices in C#]]></title>
    <link href="http://rchavarria.github.io/blog/2012/11/22/agile-principles-patterns-and-practices-in-c/"/>
    <updated>2012-11-22T11:22:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2012/11/22/agile-principles-patterns-and-practices-in-c</id>
    <content type="html"><![CDATA[<h4>Agile principles, patterns and practices in C#</h4>




<h5>Robert C. Martin</h5>


<p><img class="right" src="http://vig-fp.prenhall.com/bigcovers/0131857258.jpg" width="300" height="222" title="Agile principles, patterns and practices" ></p>

<h2>Por qué lo he leído</h2>


<p>Lo he leido porque me he encontrado referencias a este libro en libros anteriores que he leído, en blogs sobre desarrollo de software que suelo leer y en otros muchos sitios relacionados con el software. Si encuentro tantas referencias, será por algo, ¿no? Además, el autor es muy conocido y valorado, así que no había excusa para no leerlo.</p>

<!-- more -->




<h2>Qué esperaba</h2>


<p>Me esperaba un libro de <em>Uncle Bob™</em>. Ya he leído alguno del mismo autor, y me gusta su estilo. Algunas veces me parece un poco extremista, pero creo que es así porque cree en lo que hace y eso es lo que predica. Cuando creo que exagera, no le hago mucho caso y sigo hacia adelante, ya está.</p>

<p>Esperaba una descripción de las metodologías ágiles aplicadas al momento de escribir software y encontré ...</p>

<h2>Qué encontré</h2>


<p>... un pedazo de ladrillo! Me asusté cuando vi la extensión del libro, pero enseguida entendí el porqué. El libro está lleno de diagramas <a href="http://es.wikipedia.org/wiki/Lenguaje_Unificado_de_Modelado">UML</a> y de código fuente (primero los tests, por supuesto). Así que es normal que sea tan largo.</p>

<p>En cuanto al contenido, me gustó mucho la descripción que hace de muchos patrones de diseño, (incluso he aprendido alguno que no conocía). En el libro también podrás encontrar una descripción detallada de los principios <a href="http://es.wikipedia.org/wiki/SOLID_(object-oriented_design)">SOLID</a> y de otros principios sobre cómo organizar y empaquetar los distintos componentes de tu aplicación (clases, paquetes, namespaces, lo que sea).</p>

<h2>Conclusiones</h2>


<p>Aunque el libro sea muy extenso, me ha gustado por varias razones:</p>

<ul>
    <li>He aprendido nuevos patrones de diseño.</li>
    <li>He podido profundizar sobre el patrón Model-View-Controller (ver enlaces más abajo).</li>
    <li>He encontrado una descripción muy detallada de los principios <a href="http://es.wikipedia.org/wiki/SOLID_(object-oriented_design)">SOLID.</a></li>
</ul>


<h2>Pasajes que quiero recordar de este libro</h2>


<blockquote>Un módulo que es difícil de cambiar, está roto y necesita ser arreglado, aunque funcione.</blockquote>


<blockquote>Un módulo que no comunica está roto y necesita ser arreglado.</blockquote>


<blockquote>Cuanto más conocen los programadores sobre <em>todo</em> el proyecto, más sano y más informado está el equipo que lo desarrolla.</blockquote>


<blockquote>Es el <em>big picture</em> lo que mantiene unido el sistema. Es la visión del sistema lo que hace obvia la localización y la forma de los módulos individuales. Si la forma de un módulo es inconsistente con la <em>metáfora</em>, es el módulo quien está mal, no la metáfora.</blockquote>


<blockquote>Al final, el código fuente <em>es</em> el diseño.</blockquote>


<blockquote>Se sabe que el software se está pudriendo cuando empieza a mostrar alguno de los siguientes síntomas: rigidez, fragilidad, inmovilidad, viscosidad, complejidad innecesaria, repetición innecesaria u opacidad.</blockquote>


<blockquote>El elemento más volatil en los proyectos software son los requisitos. Vivimos en un mundo de requisitos cambiantes, y nuestro trabajo es estar seguros de que nuestros software puede sobrevivir a esos cambios, así que no culpes a los requisitos cambiantes por los fallos en el software.</blockquote>


<blockquote>Los principios SOLID: <strong>S</strong>ingle responsability principle, <strong>O</strong>pen close principle, <strong>L</strong>iskov substitution principle, <strong>I</strong>nterface segregation principle, <strong>D</strong>ependency inversion principle.</blockquote>


<blockquote>Un motivo de cambio es un motivo de cambio sólo cuando el cambio ocurre, mientras tanto no.</blockquote>


<blockquote><em>Strategy </em>and <em>Template method</em> son las formas más comunes de satisfacer Open closed principle. Estos patrones representan una clara separación de la funcionalidad genérica de la implementación detallada de esa funcionalidad.</blockquote>


<blockquote><em>Fool me once, shame on you. Fool me twice, shame on me.</em> Inicialmente, escribimos nuestro código pensando que no va a cambiar. Cuando ocurre un cambio, implementamos abstraciones que nos protegen de futuros cambios de esa misma naturaleza.</blockquote>


<blockquote>Liskov substitution principle nos lleva a una importante conclusión: un modelo, visto aisladamente, no puede ser validado significativamente. La validez de un modelo puede ser expresado solo en términos de sus clientes.</blockquote>


<blockquote>Liskov substitution principle clarifica que en la programación orientada a objetos, una relación de herencia pertenece al comportamiento que puede ser asumido y que los clientes dependen de este comportamiento, lo contrario de lo que normalmente se cree, que la herencia pertenece al estado</blockquote>


<blockquote>El diseño de grandes sistemas depende críticamente de un buen diseño de componentes (paquetes, entregables, ...), de esta forma, los equipos individuales puede enfocarse en componentes aislados en lugar de preocuparse por el sistema completo.</blockquote>


<blockquote>Las interfaces pertenecen al cliente que las usa, no a la implementación. El enlace lógico entre el cliente y el interfaz es más fuerte que la relación entre el interfaz y sus implementaciones. Es tan fuerte que no tiene sentido desplegar el cliente sin el interfaz, pero sí que lo tiene desplegar el interfaz sin sus implementaciones.</blockquote>




<h2>Otras lecturas y enlaces relacionadas</h2>


<ul>
    <li>[pdf] <a href="http://www.objectmentor.com/resources/articles/TheHumbleDialogBox.pdf">The humble dialog box</a>: cómo separar la lógica de negocio de la interfaz gráfica, de Michael Feathers.</li>
    <li><a href="http://www.martinfowler.com/eaaDev/ModelViewPresenter.html">Patrón model-view-presenter</a>: artículo de Martin Fowler que me llevó a éste de <a href="http://www.martinfowler.com/eaaDev/uiArchs.html">Arquitecturas GUI</a>.</li>
    <li><a href="http://apagayvuelveaencender.blogspot.com.es/2012/11/metodologias-agiles-me-las-creo-o-no-me.html">Metodologías ágiles: ¿me las creo o no me las creo?</a>: excelente post de <a href="http://twitter.com/andres_viedma">Andrés Viedma</a> que me viene ni al pelo como enlace relacionado con el libro y donde se explican los cuatro principios del desarrollo de software ágil</li>
    <li>Hace ya un tiempo, leí sobre <a href="http://rchavarria.github.io/blog/2010/03/04/principios-y-patrones-de-diseno/">principios y patrones de diseño</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
