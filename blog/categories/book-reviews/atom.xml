<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: book reviews | R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/blog/categories/book-reviews/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2015-08-09T19:30:20+02:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[JavaScript patterns]]></title>
    <link href="http://rchavarria.github.io/blog/2015/07/19/javascript-patterns/"/>
    <updated>2015-07-19T21:10:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/07/19/javascript-patterns</id>
    <content type="html"><![CDATA[<h5>de Stoyan Stefanov</h5>

<p><img class="left" src="http://akamaicovers.oreilly.com/images/9780596806767/lrg.jpg" width="250" height="328" title="JavaScript patterns" ></p>

<h2>Por qué lo he leído</h2>

<p>Cuando leí <a href="/blog/2015/05/29/learning-javascript-design-patterns/">Learning JavaScript design patterns</a>, de Addy Osmany, me quedé con
ganas de más, me equivoqué de libro. El que realmente quería leerme para
aprender sobre patrones en JavaScript era éste. Pero me dejé llevar por la
<em>fama</em> de Addy.</p>

<p>El objetivo de leer estos dos libros era el de profundizar en el uso de patrones
en JavaScript, poder trasladar conocimientos adquiridos en Java, a JavaScript.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Esperaba que fuera un libro muy parecido al mítico <a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented-ebook/dp/B000SEIBB8">Design patterns</a>, como si
fuera un catálogo de patrones disponibles, con sus descripciones, situaciones
donde es recomendable usarlos y también, por qué no, ejemplos de proyectos
reales.</p>

<h2>Qué encontré</h2>

<p>Por supuesto, encontré muchos patrones, pero eso no es lo más llamativo.</p>

<p>El autor comenta varios aspectos del lenguaje que son cuanto menos, curiosos. No
sé si llegan al nivel de <a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript, the good parts</a>, pero deben de andar
cerca.</p>

<p>Además, alguno de los patrones difieren de la idea que yo tenía, son muy
distintos a patrones con el mismo nombre, pero en otros lenguajes de
programación.</p>

<h2>Conclusiones</h2>

<p>Junto con <a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript, the good parts</a>, considero que éste es un libro imprescindible
para cualquier desarrollador que quiera dominar el lenguaje.</p>

<p>Explica en profundidad algunos de los patrones más usados en todo tipo de
proyectos. Quizá, con el nuevo estándard recién aprobado, algunos de ellos
(como la <em>herencia por prototipos</em>) queden algo obsoletos, creo que es
un libro imprescindible para entender el lenguaje.</p>

<h2>Qué he aprendido</h2>

<p>Puedes consultar mis <a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/javascript-patterns-by-stoyan-stefanov.markdown">notas sobre el libro</a> si quieres ver todo lo que me
ha llamado la atención de el mismo. Pero destacaría lo siguiente:</p>

<ul>
<li>Una regla que se repite en muchos patrones: <strong>los miembros a compartir deben
ir en el prototipo, nunca en el <code>this</code></strong></li>
<li>Los constructors implícitamente devuelven <code>this</code>, incluso si no hay un
<code>return</code>, pero tu puedes devolver lo que quieras, incluso puedes redefinir el
constructor. Esto se hace, por ejemplo, en el patrón Singleton</li>
<li>En la declaración de una función, su definición también sufre <em>hoisting</em>, no
solo la declaración</li>
<li>Métodos clásicos de herencia y herencia de prototipos, aunque esto vaya a
cambiar con nuevas versiones del lenguaje, con la aparición de clases</li>
<li>Unas cuantas sugerencias para desplegar grandes aplicaciones: combinar scripts,
minificarlos, utilizar compresión de archivos, uso de cabeceras HTML, uso de
CDNs, dónde situar las etiquetas <code>&lt;script&gt;</code>, enviar en trozos grandes ficheros
HTML.</li>
</ul>


<h2>Recursos relacionados</h2>

<ul>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/javascript-patterns-by-stoyan-stefanov.markdown">notas sobre el libro</a></li>
<li><a href="/blog/2015/05/29/learning-javascript-design-patterns/">Learning JavaScript design patterns</a>, libro de Addy Osmany</li>
<li><a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented-ebook/dp/B000SEIBB8">Design patterns</a>, libro de The Gang of Four</li>
<li><a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript, the good parts</a>, libro de Douglas Crockford</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning JavaScript design patterns]]></title>
    <link href="http://rchavarria.github.io/blog/2015/05/29/learning-javascript-design-patterns/"/>
    <updated>2015-05-29T01:04:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/05/29/learning-javascript-design-patterns</id>
    <content type="html"><![CDATA[<h5>de Addy Osmany</h5>

<h2>Por qué lo he leído</h2>

<p><img class="left" src="http://www.addyosmani.com/resources/essentialjsdesignpatterns/cover/cover.jpg" width="206" height="271" title="JavaScript desing patterns" ></p>

<p>Ya llevo un tiempo programando con JavaScript de forma profesional, y empiezo
a sentir que necesito ir un paso más allá con el lenguaje. No creo que conozca
todo lo que ofrece el lenguaje, todo lo contrario, a veces siento que me queda
mucho por aprender y que necesito profundizar en muchos y muchos temas. Con
este libro pretendía trasladar mis conocimientos sobre patrones de diseño con
Java a JavaScript.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Esperaba grandes cosas de este libro. Ya tenía referencias anteriores del autor,
creo que es un profesional como la copa de un pino. Así que un libro escrito
por él, pues tenía buena pinta.</p>

<p>Supongo que esperar encontrar una estructura de libro muy parecido a otros:
clasificaciones, descripciones, catalogaciones,...</p>

<h2>Qué encontré</h2>

<p>Encontré un libro con mucho código, cosa que no tiene que ser ni bueno, ni malo.
En el caso de este libro, es una ayuda muy buena. Las explicaciones de Addy son
clarísimas y hay multitud de ejemplos y casos reales.</p>

<h2>Conclusiones</h2>

<p>Aunque es un libro que no miente, trata sobre patrones de diseño, el libro me
ha defraudado un poco. Esperaba más del autor. Quizá no he sabido aprovechar
el contenido del libro, pero me ha parecido superficial en algunos capítulos,
y en otros ha entrado a describir con mucho detalle librerías como jQuery o
plugins para él.</p>

<p>En realidad, el libro que andaba buscando era <a href="http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752">JavaScript patterns</a>, de
Stoyan Stefanov, pero me daba más confianza Addy porque era un autor que ya
conocía. Toca ponerle remedio y ya me he puesto con el libro de Stoyan.</p>

<p>Eso sí, tengo que reconocer que es el primer lugar donde he encontrado una buena
descripción de lo que son cada una de las arquitecturas MVx (MVC, MVP, MVVM,...)</p>

<h2>Qué he aprendido</h2>

<ul>
<li>Se pueden añadir propiedades a objetos a través del método
<code>Object.defineProperties()</code></li>
<li>Los métodos de un objeto, no se deben declarar en la función constructor, sino
modificando el prototipo de la misma</li>
<li>Se debe intentar conseguir un bajo acoplamiento, algunos patrones (Observer,
Mediator,...) ayudan a ello</li>
<li>Mixins</li>
<li>Patrón Flyweight, consiste en agrupar o manejar conjuntamente funcionalidades
que pueden compartir un subconjunto de sus datos</li>
<li><p>Diferencias entre los distintos MVx</p>

<ul>
<li>En MVC, las Vistas tienen acceso directo al Modelo</li>
<li>En MVP, los Presentadores escuchan eventos de la Vista y del Modelo y median en la acciones entre ellos</li>
<li>MVVM nos permite crear partes específicas de las Vistas de un Modelo en concreto</li>
</ul>
</li>
<li><p>Expresiones de Función Inmediatamente Invocadas (IIFE - Immediately-Invoked Function Expressions)</p></li>
</ul>


<h2>Recursos relacionados</h2>

<ul>
<li><a href="http://www.addyosmani.com/resources/essentialjsdesignpatterns/book">Learning JavaScript design patterns</a>, by Addy Osmani</li>
<li><a href="http://www.2ality.com/2014/09/es6-modules-final.html">Sintaxis definitiva de módulos</a></li>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/learning-javascript-design-patterns.markdown">Notas tomadas</a></li>
<li><a href="http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752">JavaScript patterns</a>, de Stoyan Stefanov</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop stealing dreams]]></title>
    <link href="http://rchavarria.github.io/blog/2015/03/13/stop-stealing-dreams/"/>
    <updated>2015-03-13T00:39:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/03/13/stop-stealing-dreams</id>
    <content type="html"><![CDATA[<h5>de Seth Godin</h5>

<h2>Por qué lo he leído</h2>

<p><img class="right" src="http://s1.hubimg.com/u/11789820_f260.jpg" width="200" height="300" title="Stop stealing dreams" ></p>

<p>Decidí leerlo básicamente porque tengo un hijo. Empezó el <em>colegio de mayores</em>
el pasado mes de septiembre, y desde un tiempo atrás ya me empezó a preocupar
el tema de su educación.</p>

<p>Y la verdad, con todos las reformas que ha sufrido la educación en España en
los últimos años, creo que la calidad de la misma se ha visto bastante reducida.</p>

<p>Por otra parte, he leído algún libro de Seth Godin, y sigo su blog, y creo que
tiene muchas ideas revolucionarias (con otras no estoy muy de acuerdo, o
simplemente no me interesan mucho), pero tenía ganas de saber qué piensa Seth
sobre la educación.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Viniendo de Seth Goding, me esperaba una serie de ideas revolucionarias sobre
cómo educar a los hijos, o consejos sobre cómo comportarse para intentar conseguir
que los pequeños sean más independientes, estén más preparados para un mundo
cambiante, que sean más individuales pero colaborativos.</p>

<h2>Qué encontre</h2>

<p>En parte encontré lo que buscaba, pero gran parte del libro (o <em>manifiesto</em> como
le llama el autor) está dedicado a criticar el sistema educativo (está centrado
en el norteamericano, pero es extrapolable a otros, por lo menos al
español sí lo es, más o menos), desde primaria hasta la universidad.</p>

<h2>Conclusiones</h2>

<p>Es un libro que no defraudará a ningún padre, y tampoco a ningún profesor de
escuela, instituto o universidad que esté preocupado hacia dónde va la educación.
La idea principal es que la escuela pública, o la educación para la mayoría,
nació como una necesidad de crear obreros, de crear una clase obrera. Pero
ya no existe esa necesidad de la era industrial, ahora las necesidades han
cambiado, y la escuela debe cambiar.</p>

<p>No estoy seguro de si el autor tiene toda la razón en su idea principal, pero
de lo que sí estoy seguro es que existen iniciativas distintas para la educación
(<a href="https://www.khanacademy.org">Khan Academy</a>, <a href="http://online.stanford.edu">Stanford University online</a>, <a href="http://ocw.mit.edu/index.htm">MIT open courses</a>,...) y que pueden ser pioneras
en el cambio que la educación necesita.</p>

<p>Estoy de acuerdo en que el profesor no debería malgastar su tiempo en dar una
clase estándar, para todos igual, si no que cada alumno disponga de toda la
información de la materia a estudiar, haga el progreso a su ritmo, y que el
profesor sea la persona que le guie, le ayude cuando se encuentre en un callejón
sin salida. Sentí algo parecido en la universidad, las clases parecían una
pérdida de tiempo, pero no llegué a ver el problema expuesto por Seth.</p>

<h2>Frases que me gustaría recordar</h2>

<ul>
<li>La educación a gran escala no fue desarrollada para motivar a los niños o para crear eruditos, fue para crear adultos sumisos, trabajadores para líneas de montaje en las fábricas</li>
<li>¿Para qué es la escuela?

<ol>
<li>Para crear una sociedad culturalmente coordinada. La televisión gana</li>
<li>Para llevar más lejos la ciencia y el conocimineto y perseguir la información por placer. Eso está bien, pero luego asociamos leer libros con los exámenes, poca gente lee por el placer de leer y aprender</li>
<li>Para mejorar la civilización mientras le damos a la gente herramientas para tomar decisiones conscientes e informadas. Pero fallamos al elevar los estándares del pensamiento racional, investigación escéptica, y la toma de decisiones financieras de utilidad</li>
<li>Para entrenar a gente en ser trabajadores productivos. Este punto es en el que hemos destacado en los últimos tiempos, según el autor.</li>
</ol>
</li>
<li>Podemos enseñar a la gente a comprometerse, a superar sus miedos, a negociar transarentemente, a iniciar y planificar un curso, a desear tener una vida de contínuo aprendizaje, a expresarse por sí mismos y a innovar. Pero en lugar de eso, hemos hecho que se olviden del coraje, la creatividad y la iniciativa</li>
<li>He aquí 12 formas en las que la escuela puede ser reformada:

<ol>
<li>Deberes por el día, en clase; las clases orales del profesor por la noche, en casa</li>
<li>Libro abierto, cuaderno abierto, todo el tiempo</li>
<li>Acceso a cualquier curso y asignatura, desde cualquier parte del mundo</li>
<li>Instruciones precisas y focalizadas, en lugar de instrucciones generalizadas y en masa</li>
<li>Prohibidos exámenes tipo test</li>
<li>Experiencias en lugar de notas en los examenes como medida de logros</li>
<li>Dejemos de medir como un resultado la obediencia (el silencio, el aceptar las cosas porque sí)</li>
<li>Cooperacion en lugar de aislamiento (en lugar de aislar estudiantes, deberiamos conectarlos : trabajo en grupo, clases intractivas, ...)</li>
<li>Amplificacion de los estudiantes sobresalientes, de los profesores y de las ideas</li>
<li>Transformación del rol del profesor</li>
<li>Aprendizaje contínuo, trabajo más temprano</li>
<li>Dejemos de pensar que la universidad famosa, la que tiene fama, es la mejor en cuanto a educación</li>
</ol>
</li>
<li><em>Economía conectada</em>: los estudiantes tienen la habilidad y la facilidad de investigar lo que hay fuera y descubrir que el profesor (o libro de texto) está equivocado</li>
<li>El atajo para alcanzar el objetivo de las escuelas (crear ciudadanos sumisos) es el <strong>miedo</strong>. Haz esto y ..., "se lo diremos a tus padres", "o te suspenderemos",...</li>
<li>El atrevimiento (a probar cosas nuevas, a salirse del guión) en la escuela está castigado, no recompensado</li>
<li>Tener habilidades que escasean combinadas con actitudes aún más escasas casi siempre llevan a un desempleo bajo y altos salarios</li>
<li>Solía ser sencillo: el profesor era el policía, el maestro, la fuente de todas las respuestas y el guardián de los recursos. Ahora, no necesitamos un humano a nuestro lado para enseñarnos como buscar la raiz cuadrada de un número, o cómo afilar un hacha. Lo que necesitamos es alguien que nos convenza de que queremos aprender esas cosas</li>
<li>Estamos entrando en una revolución de ideas mientras producimos una generación que, en lugar de ideas, lo que quiere son instrucciones</li>
<li>¿Es muy peligroso hacer lo correcto? ¿Pueden los padres hacerlo bien? ¿Porqué debería la escuela hacer ese trabajo y no los padres? Lo que importa es que buscar un camino que <em>podría</em> ser mejor es demasiado riesgo para alquien que sólo tiene una oportunidad de educar a sus hijos correctamente</li>
<li>La única forma para un estudiante de obtener respeto en la escuela es ganarse la aprovación temporal de un profesor al que probablemente no volverá a ver en un futuro cercano. Si el profesor es temperamental, inconsistente, mal profesor, el estudiante está obligado a aguantarle. ¿No te parece que debe ser muy frustrante tener que contentar a alquien a quien no vas a volver a ver en la vida?</li>
<li>Lo que se necesita de los profesores no es dar cuantas más clases mejor, o corregir exámenes o gestionar una clase de estudiantes. Lo que se necesita es una atención individualizada, trabajo emocional y la habilidad de motivar</li>
<li>Debemos tener en cuenta que no hay que valorar simplemente la habilidad, porque el niño mayor tiene ventaja, hay que valorar pasión, los sueños del niño</li>
<li>Debemos inculcar a los niños la pasión por leer</li>
<li>La universidad proporciona 4 cosas:

<ol>
<li>Acceso a la información. Pero ya tenemos acceso online, por lo que no necesitamos a la universidad para esto</li>
<li>Acreditación o un título (que antes era escaso). Pero ahora todo el mundo puede tener un título</li>
<li>Membresía a una tribu. Esta es quizá la mejor razón por la que mudarse a un campus universitario para conseguir una carrera</li>
<li>Una situación para el crecimiento y desarrollo. Ésta sería la razón por la que elegir la universidad, porque es imposible de imitar en una experiencia online. La universidad adecuada es la última y mejor oportunidad para multitud de adolescentes de encontrarse a sí mismos en situaciones donde no hay otra opción nada más que la de crecer, y rápido</li>
</ol>
</li>
<li><strong>¿Qué enseñamos?</strong>:

<ol>
<li>Cuando enseñamos a un niño a tomar buenas decisiones, nos beneficiamos de una vida llena de buenas decisiones</li>
<li>Cuando enseñamos a un niño a amar el aprendizaje, la cantidad de aprendizaje se volverá ilimitada</li>
<li>Cuando enseñamos a un niño a lidiar con un mundo cambiante, nunca se quedará obsoleto</li>
<li>Cuando somos lo suficientemente valientes como para enseñar a un niño que cuestione la autoridad, incluso la nuestra, nos protegemos a nosotros mismos de quien usaría su autoridad en contra de cada uno de nosotros</li>
<li>Y cuando le damos a los estudiantes el deseo de hacer cosas, aunque sean elecciones, creamos un mundo repleto de gente que consigue crear e inventar cosas</li>
</ol>
</li>
</ul>


<h2>Recursos relacionados</h2>

<ul>
<li><a href="https://github.com/rchavarria/book-notes/tree/master/published/stop-stealing-dreams-by-seth-godin.md">Notas extendidas sobre el libro</a></li>
<li><a href="https://www.khanacademy.org">Khan Academy</a></li>
<li><a href="http://online.stanford.edu">Stanford University online</a></li>
<li><a href="http://ocw.mit.edu/index.htm">MIT open courses</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extreme Programming explained]]></title>
    <link href="http://rchavarria.github.io/blog/2015/01/02/extreme-programming-explained/"/>
    <updated>2015-01-02T10:24:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/01/02/extreme-programming-explained</id>
    <content type="html"><![CDATA[<h5>de Kent Beck</h5>

<p><img class="right" src="http://ecx.images-amazon.com/images/I/71kDsLjbnsL.jpg" width="240" height="300"></p>

<h2>Por qué lo he leído</h2>

<p>Estoy muy interesado en las metodologías ágiles, pero yo osy más una persona
técnica, un ingeniero preocupado por los aspectos técnicos de los proyectos,
más que por los aspectos de gestión. Creo que Extreme Programming explica lo
básico, los inicios de Agile.</p>

<p>Ya conocía algunas prácticas de XP, pero quería conocerlas más a fondo.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Sencillo, buscaba un libro que me explicara los valores, principios y prácticas
de XP. Existe un recurso online donde poder encontrar estos recursos,
<a href="http://www.extremeprogramming.org">http://www.extremeprogramming.org</a>,
pero buscaba algún recurso que los tratara con más profundidad.</p>

<h2>Qué encontre</h2>

<p>Justamente lo que buscaba. El libro trata XP a fondo, no sólo explicando y
dando sentido a los valores, principios y prácticas, sino también multitud
de experiencias reales.</p>

<p>También encontré mucha información acerca de <em>pair programming</em>, práctica
en la que estoy muy interesado, así como la forma en que las distintas
prácticas se interconectan entre sí.</p>

<p><img class="center" src="/images/2015/xp-practices.jpg" title="Cómo están interconectadas las prácticas XP" ></p>

<h2>Conclusiones</h2>

<p>Un libro totalmente recomendable. Trata el tema de Extreme Programming con
mucha claridad, exponiendo todas las partes que lo componen, explica cada
uno de los papeles que juegan los integrantes de un equipo XP (aunque se
ha quedado un poco obsoleto para hoy en día, pero puesto en perspectiva
toma mucho sentido).</p>

<p>La verdad es que parece mentira que el autor esté hablando sobre estos
temas por el año 1999/2000 y que todavía en 2015 estemos como estamos.</p>

<h2>Frases que me gustaría recordar</h2>

<blockquote><p>XP es un experimento para responder a la pregunta: ¿Cómo programarías si
tuvieras suficiente tiempo? Donde se explica la diferencia entre la <em>Mentalidad
de la suficiencia</em> frente a la <em>Mentalidad de la escasez</em> (parábola de la
tribu del bosque y de la montaña)</p>

<p>Si no cambiaran los requisitos o no aprendiéramos nada durante el proceso
sería mejor diseñar para el futuro pero <strong>yo no me
arriesgo</strong> a que no haya cambios y mucho menos a no aprender nada.</p>

<p>Los Programadores confiados y agresivos son valiosos precisamente porque ellos
son confiados y agresivos</p>

<p>Primordialmente las emociones (especialmente el miedo) son lo que hace que XP
sea tan duro de practicar y aplicar</p>

<p>Los cuatro valores de XP: comunicación, simplicidad, feedback y coraje</p>

<p>Cuatro actividades básicas: codificar, testear, escuchar y diseñar</p>

<p>El trabajo del programador no se acaba cuando el ordenador entiende qué es lo
que tiene que hacer. Su trabajo más importante es la comunicación con el resto
de la gente</p>

<p>Una habilidad necesaria para los programadores es <em>pair programming</em></p>

<p>Otra habilidad necesaria es el hábito de la simplicidad</p></blockquote>

<h2>Recursos relacionados</h2>

<ul>
<li><a href="https://github.com/rchavarria/book-notes/blob/master/published/extreme-programming-explained-by-kent-beck.md">Extensas notas sobre el libro</a></li>
<li><a href="http://www.amazon.es/Extreme-Programming-Explained-Embrace-Embracing/dp/0321278658/ref=sr_1_1?ie=UTF8&amp;qid=1420044502&amp;sr=8-1&amp;keywords=extreme+programming+explained">Extreme Programming explained, en Amazon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to start conversations and make friends]]></title>
    <link href="http://rchavarria.github.io/blog/2014/12/05/how-to-start-conversations-and-make-friends/"/>
    <updated>2014-12-05T18:11:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2014/12/05/how-to-start-conversations-and-make-friends</id>
    <content type="html"><![CDATA[<h5>de Don Gabor</h5>

<p><img class="left" src="/images/2014/how-to-start-conversation.jpg" width="200" height="306" title="Portada del libro How to start a conversation" ></p>

<h2>Por qué lo he leído</h2>

<p>En el mundo del software se suele hablar mucho de la excelencia técnica, de
tecnologías, de las últimas buenas prácticas,... Y también de las personas.
Yo soy de esos que está convencido de que en esta profesión (en realidad en
todas las profesiones) las relaciones personales son una parte vital de la
misma.</p>

<p>Como buen técnico, se me da mejor tratar con las máquinas que con las personas,
así que, ¿por qué no aprender un poco más acerca de ellas?</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Por un lado me apetecía leer el libro, para aprender cosas nuevas y leer algo
<em>no-técnico</em>, pero por otro lado me daba pereza porque esperaba algún tipo
de libro de autoayuda, de <em>buenrrollismo</em>,... Bueno, un poco de americanada
para vender la moto, poco más.</p>

<h2>Qué encontre</h2>

<p>Bueno, pues un libro un poco de autoayuda la verdad es que sí. Pero también
encontré trucos útiles para recordar nombres, por ejemplo, y algún que
otro consejo que sirve perfectamente para la vida real.</p>

<h2>Conclusiones</h2>

<p>Aunque el libro lo veo ahora como un poquitín de autoayuda, no se me hizo
pesado de leer, y tampoco muy repetitivo (como suelen pecar aquellos).
El autor enfatiza algunos aspectos una y otra vez, pero está bien.</p>

<p>También utiliza algunos conceptos propios, pero son sencillos de compreder,
y aunque el libro está lleno de conceptos de sentido común, creo que
cualquier persona encontrará ideas que, o no se había dado cuenta, o no
se había planteado.</p>

<h2>Qué he aprendido</h2>

<p>Sobretodo he recordado algo que ya sabía: para conectar con la gente hay que
ser educado y detallista.</p>

<p>Aparte de esto, estas son unas ideas que debería tener en cuenta a partir de
ahora:</p>

<ol>
<li>Mira a los ojos, sonríe y saluda</li>
<li>Se el primero en decir <em>Hola</em></li>
<li>Preséntate a los demás</li>
<li>Deja que los demás te conozcan</li>
<li>Que no te importe responder a <em>preguntas rituales</em> cotidianas</li>
<li>Mantén el contacto con los amigos y conocidos</li>
<li>Pregunta a los demás acerca de temas que hablásteis la última vez que os vísteis</li>
<li>Escucha atentamente acerca de <em>información gratuita</em></li>
</ol>


<h2>Frases que me gustaría recordar</h2>

<p>Como son muchísimas las notas que he tomado de este libro, y básicamente lo
que quiero recordar ya lo he escrito antes, aquí dejo un enlace a
<a href="https://github.com/rchavarria/book-notes/blob/master/published/how-start-conversation-make-friends-by-don-gabor.md">Mis notas sobre How to start conversations and make friends</a>.</p>

<h2>Recursos relacionados</h2>

<ul>
<li><a href="http://www.amazon.com/How-Start-Conversation-Make-Friends/dp/1451610998">Comprar el libro en Amazon</a></li>
<li><a href="https://github.com/rchavarria/book-notes/blob/master/published/how-start-conversation-make-friends-by-don-gabor.md">Mis notas sobre How to start conversations and make friends</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
