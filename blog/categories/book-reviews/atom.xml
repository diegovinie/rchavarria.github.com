<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: book reviews | R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/blog/categories/book-reviews/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2017-02-23T23:12:43+01:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Phoenix project]]></title>
    <link href="http://rchavarria.github.io/blog/2017/01/19/the-phoenix-project/"/>
    <updated>2017-01-19T22:23:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2017/01/19/the-phoenix-project</id>
    <content type="html"><![CDATA[<h5>de Gene Kim</h5>

<p><img class="left" src="/images/2017/phoenix-project.png" width="200" height="246"></p>

<h2>Por qué lo he leído</h2>

<p>Había visto varias referencias al libro por Twitter, blogs y distintos
podcasts. Sabía que el libro era muy similar a <a href="/blog/2013/04/10/la-meta">La meta</a>, de Eliyahu M.
Goldratt, un libro que me gustó bastante.</p>

<p>Así que, tras ver que <a href="http://www.eferro.net/2016/03/some-books-i-recently-read.html">Eduardo Ferro</a> también lo había leído, me decidí a
leerlo yo también.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>No creo que se pudiera esperar tanto como de <a href="/blog/2013/04/10/la-meta">La meta</a>. Ese libro es un recurso
más que recomendable para conocer la <a href="https://es.wikipedia.org/wiki/Teor%C3%ADa_de_las_limitaciones">Teoría de las restricciones</a>. Pero
esperaba algo similar enfocado en el mundo del software.</p>

<p>Esperaba una historia de éxito de una persona o grupo de personas que van
superando problemas, uno tras otro, donde el autor los aproveche para explicar
su punto de vista y dar forma a las teorías que quiere explorar.</p>

<h2>Qué encontre</h2>

<p>Más o menos lo que esperaba. A través de una historia llena de problemas a
solucionar, el autor expone las teorías que quiere difundir. Estas teorías
están relacionadas con el desarrollo de software y más concretamente con el
mundillo DevOps.</p>

<p>En realidad, el autor defiende unas prácticas que son la fundación del
movimiento DevOps, pero para llegar hasta ahí, el protagonista de la historia
comienza con un ascenso que le lleva a ser el director del departamento de TI
de una empresa que no destaca por su gestión de servicios tecnológicos, pero
que solucionando problema tras problema, y con la ayuda de una figura un poco
enigmática (muy al estilo de <em>La meta</em>), va mejorando hasta hacer del
departamento y la empresa un lugar mucho mejor.</p>

<h2>Conclusiones</h2>

<p>Por un lado, el libro me ha gustado. Es un libro sobre el mundo del desarrollo
de software, muy al estilo de <em>La meta</em>, que también me gustó. Y describe el
proceso que sigue una empresa ficticia de ser un desastre, a ser una empresa
envidiable en su sector.</p>

<p>Pero por otro, me ha decepcionado un poco. Esperaba que estuviera más centrado
en el desarrollo, pero está más centrado en la gestión y provisión de servicios
de TI. No es nada malo, pero estoy más interesado en lo primero.</p>

<p>De todas formas, el libro es interesante, sobre todo si quieres conocer cómo
hacer bien las cosas en un departamento de TI. Creo que este libro es una buena
aproximación al mundo DevOps. Pero no deja a los desarrolladores en muy buen
lugar, así que si eres desarrollador, no te tomes todas las cosas que dicen
sobre nosotros muy a pecho.</p>

<h2>Qué he aprendido</h2>

<blockquote><p>La única cosa más peligrosa que un desarrollador, es un desarrollador
conspirando sobre temas de seguridad</p></blockquote>

<!-- space -->


<blockquote><p>Eliyahu M. Goldratt, quien creó la teoría de las restricciones, nos mostró
que cualquier mejora echa en cualquier sitio que no sea el cuello de botella
es una ilusión, es inútil</p></blockquote>

<!-- space -->


<blockquote><p>Los tiempos de espera dependen de la utilización del recurso</p></blockquote>

<!-- space -->


<blockquote><p>La necesidad reducir contínuamente los ciclos de tiempo es parte del <em>Primer
Camino</em>. La necesidad de la amplificación de los bucles de <em>feedback</em> (o
realimentación), idealmente desde el cliente, es parte del <em>Segundo Camino</em>.
El <em>Tercer Camino</em> va de asegurarnos de estar introduciendo tensión
continuamente en el sistema, de forma que estamos contínuamente reforzando
hábitos y mejorando algo</p></blockquote>

<h2>Recursos relacionados</h2>

<ul>
<li><a href="/blog/2013/04/10/la-meta">La meta</a>, de Eliyahu M. Goldratt</li>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/phoenix-project-by-gene-kim.markdown">Notas sobre el libro</a></li>
<li>Blog de <a href="http://www.eferro.net/2016/03/some-books-i-recently-read.html">Eduardo Ferro</a></li>
<li><a href="https://es.wikipedia.org/wiki/Teor%C3%ADa_de_las_limitaciones">Teoría de las restricciones</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The 4 hour body]]></title>
    <link href="http://rchavarria.github.io/blog/2016/12/04/the-4-hour-body/"/>
    <updated>2016-12-04T18:14:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2016/12/04/the-4-hour-body</id>
    <content type="html"><![CDATA[<h6>de Tim Ferriss</h6>

<p><img class="left" src="https://raw.githubusercontent.com/rchavarria/blog-post-incubator/master/published-book-notes/img/4-hour-body-cover.jpeg" width="200" height="250"></p>

<h3>Por qué lo he leído</h3>

<p>Soy un oyente del podcast de <a href="http://fourhourworkweek.com/about/">Tim Ferriss</a>, <a href="http://fourhourworkweek.com/podcast/">the 4 hour workweek podcast</a>, y me parece una persona bastante peculiar, con unas ideas bastante rompedoras, y muy preocupado por el aprender y dominar muy distintas disciplinas rápidamente. No estoy de acuerdo con todo lo que Tim <em>predica</em>, pero la verdad es que muchas de sus ideas me parecen muy buenas y les han dado resultados a muchos de sus seguidores. Entiendo que eso no quiere decir que funcionen en todos los casos, pero al menos las ideas locas de Tim han sido probadas más de una vez.</p>

<p><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/4-hour-body-by-tim-ferriss.markdown">The 4 hour body</a>, o <em>El cuerpo perfecto en 4 horas</em> que es su título en español, trata de dos cosas básicamente: cómo perder peso, y cómo ganar músculo. Y yo estoy interesado en perder peso, asi que ¿por qué no conocer algunas ideas de una persona seguida por millones?</p>

<!-- more -->


<h3>De qué trata el libro</h3>

<p>El libro trata de enseñarte cómo conseguir un cuerpo perfecto en 4 horas. Bueno, el título creo que está más escogido para cuadrar con otros libros del autor como <em>La semana laboral de 4 horas</em> y otros con títulos similares.</p>

<p>Trata temas relacionados con la pérdida de peso, otros temas sobre cómo ganar músculos de forma brutal o de cómo tener sexo increíble. En el libro propone seguir una dieta que llama <em>de bajos hidratos de carbono</em> y sugiere seguir una serie de ejercicios para ganar músculo basado en el concepto de <em>mínima dosis efectiva</em>.</p>

<p>Al tratar temas muy diversos y con objetivos casi contradictorios (no puede ser que quieras perder peso y que quieras tener cuerpo de culturista a la vez), el autor explica que no es necesario leer el libro de principio a fin, basta con concentrarte en los aspectos que a uno más le interesen.</p>

<h3>Conclusiones y valoración</h3>

<p>Como ya he dicho, el tema que me interesaba (y me interesa) es el de la pérdida de peso. Por eso no puedo valorar el libro al completo, pero la parte de la pérdida de peso es algo controvertida.</p>

<p>A lo largo de su vida, el autor ha experimentado con varios alimentos y técnicas para conseguir reducir la grasa corporal y con ejercicios para ganar músculo. Son métodos fuera de lo común y no parecen estar basados en datos muy científicos. En realidad, creo que el autor se queda con los estudios científicos que apoyan sus creencias.</p>

<p>Aún así, con todo lo inusual de sus consejos, algunos me parece que tienen su lógica, y cogiéndolos con cuidado, creo que se pueden aprovechar algunas ideas. Aunque hay otras, como por ejemplo el consejo de no comer nada de fruta si se quiere perder grasa corporal (porque se supone que la fructosa es un azúcar que se absorve rápidamente y luego se convertirá en grasa) no me gusta mucho. Una cosa es estar interesado en perder peso y otra cosa es dejar de comer alimentos saludables por conseguirlo más rápido. Además, parece ser que la carencia de vitaminas debido a dejar de comer fruta, la aconseja suplir tomando complementos vitamínicos. Y eso no me mola, no tengo ganas de tomar pastillas para suplir un alimento que tengo al alcance de la mano.</p>

<h3>Qué he aprendido</h3>

<p>Dieta para perder peso, ejercicio para ganar musculo</p>

<p>Concepto de <strong>Mínima Dosis Efectiva</strong>: la mínima dosis que produce el resultado esperado. Cualquiercosa por encima de MED es desperdicio. Por ejemplo, para hervir agua necesitas hasta 100ºC. Todo lo que sobrepases esa temperatura no va a hacer que hierba más. O si necesitas 15 minutos de sol para activar la melanina, 4 horas friéndote en la playa no te van a poner mucho más moreno.</p>

<p>Dieta básica baja en carbohidratos: evita carbohidratos blancos, come las mismas pequeñas comidas una y otra vez, no hagas menús complicados, no bebas calorías, no comas fruta, tómate un día de descanso a la semana</p>

<h3>Frases que me gustaría recordar</h3>

<blockquote><p>Cualquier dieta popular se puede resumir en estos 4 puntos: comer más verdura, comer menos grasa saturada, hacer más ejercicio y quemar más calorías, comer más ácidos grasos omega-3</p></blockquote>

<!-- more -->


<blockquote><p>Es <strong>tu responsabilidad</strong>, no la de tu médico o dietista, aprender a qué es lo que mejor responde tu cuerpo (<em>algo así como: experimenta con tu cuerpo</em>)</p></blockquote>

<!-- more -->


<blockquote><p>En el contexto del libro, hay dos dosis mínimas a tener en cuenta: para eliminar grasa acumulada: hacer lo mínimo necesario para disparar una cascada de hormonas específicas de pérdida de grasa, y que para añadir músculo: hacer lo mínimo necesario para disparar mecanismos de crecimiento específicos (músculos) y sistémicos (hormonales)</p></blockquote>

<!-- more -->


<blockquote><p>Tu peso viene y va, como un yo-yo. Acéptalo, búscalo, eso es mejor buscar un balance fijo.</p></blockquote>

<!-- more -->


<blockquote><p>Diferentes fuentes de calorías producen diferentes resultados. Influyen 3 variables: digestión, la proporción hidratos-proteína-grasa y el tiempo.</p></blockquote>

<!-- more -->


<blockquote><p>4 principios de comportamientos anti-fallos: hazlo consciente (diario de ingestas, foto de comida que vas a comer), hazlo como un juego (medidas, motivacion,...), hazlo competitivo (acepta la presión de otros como tú), hazlo pequeño y temporal (en lugar de correr 1h todos los días, corre 5min los primeros días)</p></blockquote>

<!-- more -->


<blockquote><p>Dieta básica baja en carbohidratos: evita carbohidratos blancos, come las mismas pequeñas comidas una y otra vez, no hagas menús complicados, no bebas calorías, no comas fruta, tómate un día de descanso a la semana</p></blockquote>

<!-- more -->


<blockquote><p>Alimentos que bajan el nivel de glucosa en sangre (aunque no quiere decir que adelgacen por sí mismos): alimentos con alto contenido graso, fructosa, zumo de limòn y canela</p></blockquote>

<!-- more -->


<blockquote><p>Más que la cantidad, es el tamaño y la velocidad de las comidas que determina el nivel de glucosa. Lo mejor que puedes hacer es comer despacio.</p></blockquote>

<h3>Recursos relacionados</h3>

<ul>
<li>Todas las <a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/4-hour-body-by-tim-ferriss.markdown">notas sobre el libro</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zen y el arte en el mantenimiento de motocicletas]]></title>
    <link href="http://rchavarria.github.io/blog/2016/09/18/zen-arte-mantenimiento-motocicletas/"/>
    <updated>2016-09-18T16:56:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/09/18/zen-arte-mantenimiento-motocicletas</id>
    <content type="html"><![CDATA[<h6>de Robert M. Pirsig</h6>

<p><img class="left" src="https://raw.githubusercontent.com/rchavarria/blog-post-incubator/master/published-book-notes/img/zen.jpg"></p>

<h3>Por qué lo he leído</h3>

<p>El título no es que sea muy llamativo, parece más un libro sobre filosofía (con
un subtítulo un poco extraño eso sí). Pero estaba recomendado por Mattias
(<a href="https://twitter.com/mpjme">@mpjme</a>) en el capítulo 18 de
<a href="https://www.youtube.com/watch?v=lrf6xuFq1Ms&amp;t=90">FunFunFunction</a>, su <em>canal</em>
de YouTube, y no era la primera vez que oía hablar de
<a href="https://www.amazon.es/Arte-Mantenimiento-Motocicleta-Narrativa-Sexto/dp/8415601956/">Zen y el arte en el mantenimiento de motocicletas</a>.</p>

<p>Así que... si recibes varias referencias de un libro por distintas personas y
en distintas ocasiones, es que puede ser un libro interesante.</p>

<!-- more -->


<h3>De qué trata el libro</h3>

<p>Me esperaba una historia, una novela, que sirviera de hilo conductor para que
el autor fuera exponiendo una serie de consejos sobre la vida en general y
sobre cómo mantener las cosas materiales en esta vida, ya fueran motocicletas,
ordenadores,... cualquier cosa. De echo, las personas que hablaban del libro
decían que varias ideas eran bastante trasladables al área del desarrollo del
software.</p>

<p>Y sí, en parte el libro va de eso. Cuenta una historia, un viaje de un padre y
su hijo, en busca de algo, o alguien. Y durante el viaje, el autor cuenta
multitud de historias de <em>abuelo cebolleta</em>.</p>

<h3>Conclusiones y valoración</h3>

<p>El libro está lleno de historias interesantes, e incluso divertidas. Hay
multitud de consejos sobre la vida, y en general estoy muy de acuerdo con
ellos. Me gusta cuidar las cosas, me gusta disfrutar de ellas. Cojo cariño a
mis máquinas, me acostumbro a ellas, tiendo a aceptarlas como son, con sus
deficiencias. Me siento muy identificado con muchos aspectos de los que habla
el protagonista.</p>

<p>Pero el libro no ha calado en mi. ¿El inglés? ¿Muchas historias? ¿La filosofía
detrás de ellas? No sé, pero no he podido terminarlo.</p>

<p>Podría recomendar el libro a gente joven, que tiene toda una vida por delante,
para que aprendiera a disfrutar de las cosas sencillas de la vida. Podría
recomendárselo a gente no tan joven, para que aprendiera lo mismo (nunca es
tarde). Pero tendría que advertirles que tiene un componente muy filosófico, y
que al menos a mí, creo que es lo que me ha hechado hacia atrás a la hora de
terminarlo. No diría que el libro es malo, simplemente que no ha suscitado el
interés suficiente en mí.</p>

<h3>Frases que me gustaría recordar</h3>

<blockquote><p>Diferencias entre <em>pensamiento clásico</em> (o científico, basado en hechos, con el
que me siento más identificado) y el <em>pensamiento romático</em> (más idílico, más
centrado en la belleza, más artístico)</p></blockquote>

<!-- -->


<blockquote><p>Cada motocicleta (o máquina) tiene su personalidad propia y única. Según vas
manteniendo las cosas, vas cogiéndoles cariño, las vas haciendo tuyas según va
pasando el tiempo, las vas conociendo.</p></blockquote>

<p>Varios pasos a la hora de hacer un análisis lógico:</p>

<ol>
<li>Describir el problema</li>
<li>Describir diferentes hipótesis que describan el problema</li>
<li>Crear experimentos para testear cada una de las hipótesis</li>
<li>Predecir los resultados de los experimentos</li>
<li>Anotar los resultados obtenidos de los experimentos</li>
<li>Realizar conclusiones a partir de los resultados de los experimentos</li>
</ol>


<h3>Recursos relacionados</h3>

<ul>
<li>Mis <a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/zen-and-the-art-of-motorcycle-maintenance-by-robert-m-pirsig.markdown">notas sobre Zen y el arte en el mantenimiento de motocicletas</a></li>
<li>El libro <a href="https://www.amazon.es/Arte-Mantenimiento-Motocicleta-Narrativa-Sexto/dp/8415601956/">Zen y el arte en el mantenimiento de motocicletas</a> en Amazon</li>
<li><a href="https://twitter.com/mpjme">Mattias P. Johansson</a> en twitter</li>
<li><a href="https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q">Canal de YouTube FunFunFunction</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Practical Vim]]></title>
    <link href="http://rchavarria.github.io/blog/2016/07/17/practical-vim/"/>
    <updated>2016-07-17T23:15:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/07/17/practical-vim</id>
    <content type="html"><![CDATA[<h6>de Drew Neil</h6>

<h3>Por qué lo he leído</h3>

<p><img class="left" src="https://raw.githubusercontent.com/rchavarria/blog-post-incubator/master/published-book-notes/img/practical-vim.jpg"></p>

<p>Hace un tiempo decidí que quería <a href="http://rchavarria.github.io/blog/2014/10/11/aprendiendo-vim/">aprender a utilizar Vim</a>. Entre los muchos
recursos para aprender se encontraba este libro, pero encontré más prácticos
una serie de videos. Pero más adelante, escuchando el podcast <a href="http://giantrobots.fm/">Giant Robots</a>,
hablaron de este libro, y cuando recibes varias señales, quiere decir algo.</p>

<!-- more -->


<h3>De qué trata el libro</h3>

<p>El libro no es un manual desde cero. Tampoco es un manual avanzado. Es un
conjunto de trucos, de sugerencias, que trata de explicar y convencer al lector
de la filosofía y bondades del editor. Entre estos trucos encontrarás muchos
que te sean de utilidad, y otros tantos tan extraños que ni te molestarás en
entenderlos. Pero lo más importante es que describe una <em>forma de pensar en
Vim</em>. A la hora de editar ficheros de texto no hay una única forma de hacer las
cosas, ni tampoco una forma superior a otras alternativas, pero en Vim sí que
hay una filosofía, una idea de atacar cada edición. Este libro te sumerge en
ella.</p>

<h3>Conclusiones y valoración</h3>

<p>El libro es una maravilla. Está lleno de trucos. Muchos de ellos los conocía, y
otros ni siquiera sabía que existían. En cambio, otros, después de llevar un
tiempo usando Vim, tenía una ligera sospecha de que se podrían hacer, pero no
había invertido el tiempo en averiguar cómo.</p>

<p>Si tienes ganas de incarle el diente a un editor que sobrevive al paso del
tiempo, échale un vistazo al libro.</p>

<p>Debería echar un vistazo al proyecto de Mozilla <a href="https://github.com/mozilla/doctorjs">Doctor JS</a>, que contiene la
herramienta <code>jsctags</code>, para generar ficheros ctags de proyectos JavaScript.</p>

<h3>Frases que me gustaría recordar</h3>

<blockquote><p>La fórmula del punto: una pulsación de tecla para mover, una pulsación de
tecla para ejecutar la edición</p></blockquote>

<!-- -->


<blockquote><p>La estrategia óptima de edición es hacer que tanto el cambio como el
movimiento sean repetibles</p></blockquote>

<!-- -->


<blockquote><p>Podemos hacer que el comando deshacer opere en palabras, frases o párrafos
enteros solamente haciendo un uso corrrecto de la tecla <code>Esc</code></p></blockquote>

<!-- -->


<blockquote><p>La combinación de operadores con movimientos forman una especie de gramática.
Aprender nuevos movimientos y operadores is como aprender el vocabulario de
Vim. Si seguimos las reglas sencillas de la gramática, podremos expresar más
y mejores ideas según vaya creciendo nuestro vocabulario</p></blockquote>

<!-- -->


<blockquote><p>Una buena forma de trabajar con macros sería: normalizar la posición del
cursor, llegar hasta el objetivo con un movimiento repetible, hacer que la
macro aborte cuando el movimiento falle y no encuentre el objetivo</p></blockquote>

<!-- -->


<blockquote><p>La sintaxis para definir un rango en los Ex commands es muy flexible. Se
pueden mezclar números de línea, marcas y patrones de búsqueda. Y se puede
aplicar un offset a cada uno de ellos</p></blockquote>

<!-- -->


<blockquote><p>Intenta crear el hábito de crear una marca global (<code>m{capital letter}</code>) antes
de usar cualquier comando que interacciones con la lista de arreglos rápidos,
lista de buffers o lista de argumentos</p></blockquote>

<!-- -->


<blockquote><p>Para editar una macro grabada en el registro <code>q</code>, simplemente podemos pegar
el contenido de dicho registro con <code>"qy</code>, editar la línea y modificar el
registro <code>q</code> con <code>"qy$</code></p></blockquote>

<h3>Qué he aprendido</h3>

<p>Hay toda una serie de nuevos comandos, combinaciones de ellos y herramientas
que todavía no conocía o que he encontrado muy útiles:</p>

<ul>
<li><code>~</code>: intercambia el carácter actual de mayúsculas a minúsculas y viceversa</li>
<li><code>g~</code>, <code>gu</code>, <code>gU</code>: intercambia mayúsculas/minúsculas en la selección, pasa a minúsculas, pasa a mayúsculas, respectivamente.</li>
<li><code>&lt;C-h&gt;</code>, <code>&lt;C-w&gt;</code>, <code>&lt;C-u&gt;</code>: en modo inserción o modo comando, borra hacia atrás un carácter, una palabra o la línea completa, respectivamente.</li>
<li><code>&lt;C-r&gt;{register}</code>: en modo inserción, inserta el texto desde el registro <code>register</code></li>
<li><code>&lt;C-r&gt;&lt;C-p&gt;{register}</code>: idem, pero más inteligentemente, ya que arregla cualquier error de indentación por descuido</li>
<li><code>&lt;C-v&gt;{code}</code>: en modo inserción, inserta un carácter especial por su código <code>code</code></li>
<li><code>R</code>: nos lleva del modo normal al <em>modo de reemplazo</em>, donde cada carácter insertado reemplaza a un carácter existente</li>
<li><code>v</code>, <code>V</code>, <code>&lt;C-v&gt;</code>: entra en los distintos modos visuales: de carácter, de línea o de bloque.</li>
<li><code>o</code>: dentro del modo visual, la selección tiene dos extremos, con este comando intercambiamos entre ellos, de forma que podemos expandir la selección hacia adelante o hacia atrás</li>
<li><code>.</code>, <code>%</code>: en el modo comando tienen significado especial cuando se especifica un rango. Significan la línea actual y todas las líneas, respectivamente.</li>
<li><code>:t</code>: comando para duplicar líneas. <code>:3t 5</code> copia la línea 3 y la pega en la 5. <code>:.+2t .</code> copia dos líneas más abajo y la pega en la línea actual</li>
<li><code>:m</code>: comando para mover líneas</li>
<li><code>@:</code>: repite el último Ex Command, lo cual es muy útil cuando estamos haciendo cambios en múltiples ficheros, o vamos recorriendo la lista de búferes</li>
<li>en modo comando, se pueden ejecutar comandos del modo normal, con el Ex Command <code>normal</code>. Por ejemplo, <code>:%normal A;</code> hace lo siguiente: <code>:</code> entramos en modo comando, <code>%</code> indica que afectará a todas las líneas del fichero, <code>normal</code> indica que introduciremos un comando del modo normal, <code>A;</code> es un comando del modo normal, y lo que hace es añadir al final de la línea el carácter <code>;</code>.</li>
<li><code>&lt;C-o&gt;</code>: vuelve atrás en la lista de saltos (cambios de buffer, grandes saltos de líneas, búsquedas,...)</li>
<li><code>&lt;Tab&gt;</code>, <code>&lt;C-n&gt;</code>, <code>&lt;Left&gt;</code> y <code>&lt;S-Tab&gt;</code>, <code>&lt;C-p&gt;</code>, <code>&lt;Right&gt;</code>: para movernos adelante y atrás durante el autocompletado</li>
<li><code>&lt;C-r&gt;&lt;C-w&gt;</code>: en modo comando, copia la palabra debajo del cursor y la pega en la línea de comandos</li>
<li><code>&lt;C-p&gt;</code>, <code>&lt;C-n&gt;</code>: después de entrar en el modo comando con <code>:</code> o <code>/</code>, podemos pulsarlos para ir hacia adelante o atrás en el historial de comandos o búsquedas</li>
<li><code>q/</code>: abre la ventana <em>línea de comandos</em> con el historial de búsquedas</li>
<li><code>q:</code>: abre la ventana <em>línea de comandos</em> con el historial de comandos</li>
<li><code>&lt;C-f&gt;</code>: en modo comando, cambia a la ventana de línea de comandos</li>
<li><code>:read !{shell command}</code>: pone el resultado del comando shell en el buffer actual</li>
<li><code>:write !{shell command}</code>: usa el contenido del buffer actual como entrada para el comando shell</li>
<li><code>:bnext</code>, <code>:bprevious</code>, <code>:bfirst</code>, <code>:blast</code>: para moverse por los buffers</li>
<li><code>:edit {path to a dir}</code>: abre el contenido del directorio en un buffer, de forma que podemos navegar el sistema de ficheros sin necesidad de ningún plugin. <code>.</code> significa el actual directorio de trabajo. <code>:explore</code> o <code>:E</code> hace lo mismo. <code>:Sexplore</code> divide los buffers horizontalmente, <code>:Vexplore</code> divide los buffers verticalmente</li>
<li>igual que existen <code>w</code>, <code>b</code>, <code>e</code> y <code>ge</code> (mueve al final de la palabra anterior), existen <code>W</code>, <code>B</code>, <code>E</code> y <code>gE</code> para hacerlo con PALABRAS, no con palabras</li>
<li><code>is</code>, <code>as</code>, <code>ip</code>, <code>ap</code>: son movimientos (que se pueden usar con los comandos <code>d</code>, <code>c</code>, <code>y</code>,...) que engloban la actual frase (sentencia) o párrafo</li>
<li><code>&lt;C-o&gt;</code>, <code>&lt;C-i&gt;</code>: para movernos adelante y atrás en los saltos que vamos dando</li>
<li><code>:changes</code>: muestra el historial de cambios</li>
<li><code>g;</code>, <code>g,</code>: para movernos adelante y atrás por el historial de cambios</li>
<li><code>gi</code>: vuelve al último punto donde abandonamos el modo de inserción, entrando en dicho modo</li>
<li><code>"_d{motion}</code>: borra lo indicado pero no copia el contenido en ningún sitio (bueno, sí, en el registro <code>_</code>, pero éste no guarda el contenido). Si no se indica nada, los comandos <code>x</code>, <code>s</code>, <code>d</code> y <code>c</code> modifican el registro sin nombre, con lo que pueden eliminar el contenido que hayamos copiado con <code>y</code>.</li>
<li>el registro de copiado es el <code>0</code>, y éste no es modificado nunca por los comandos <code>x</code>, <code>s</code>, <code>d</code> y <code>c</code>.</li>
<li>si al copiar o borrar nombramos un registro con mayúsculas, el contenido se añadirá a lo que contenga el registro</li>
<li><code>\v</code>: activa la magia en los patrones de búsqueda. Hace que todos los carácteres excepto los alfanuméricos y <code>_</code> tengan un significado especial</li>
<li><code>:%s///gn</code>: cuenta las ocurrencias del patrón actual de búsqueda</li>
<li>flags del comando de sustitución: <code>g</code> reemplaza todas las ocurrencias en una línea, no solo la primera; <code>c</code> pide confirmación, <code>n</code> cuenta las ocurrencias, <code>&amp;</code> reusa los últimos flags</li>
<li><code>:%s//\=@0/g</code>: sustituye todas las ocurrencias (flag <code>g</code>) de todas las filas (rango <code>%</code>) del último patrón buscado (<code>//</code>) con el contenido del registro <code>0</code> (<code>\=</code> evalúa una expresión, <code>@0</code> accede al registro <code>0</code>)</li>
<li><code>&amp;</code>: repite los cambios hechos por el último comando de sustitución <code>:s/pattern/.../</code></li>
<li><code>g&amp;</code>: repite el último comando de sustitución en todo el fichero</li>
<li><code>:vimgrep {pattern} {file pattern}</code>: busca el patrón en la lista de ficheros y rellena la lista <em>quickfix</em>. Luego podemos pasar el resultado a la lista de argumentos con el plugin <em>qargs</em></li>
<li><code>:global/{pattern}/{command}</code> o <code>:g</code>: permite ejecutar un comando en cada línea que cumpla con el patrón</li>
<li><code>&lt;C-]&gt;</code>: mover hasta la definición de la palabra clave (tag) donde se encuentra el cursor</li>
<li><code>&lt;C-t&gt;</code>: vuelve atrás en la última tag visitada</li>
<li><code>:copen</code>, <code>:cclose</code>: abre/cierra la ventana de lista <em>quickfix</em></li>
<li><code>:cnext</code>, <code>:cprevious</code>, <code>:cfirst</code>, <code>:clast</code>: para moverse por los marcadores de la lista quickfix</li>
<li><code>:colder</code>, <code>:cnewer</code>: para pasar de listas quickfix más nuevas a las más viejas y viceversa</li>
</ul>


<h3>Recursos relacionados</h3>

<ul>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/practical-vim-by-drew-neil.markdown">Notas tomadas sobre Practical Vim</a>, y en <a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/practical-vim-by-drew-neil.en.markdown">inglés</a> también</li>
<li>Debería echar un vistazo al proyecto de Mozilla <a href="https://github.com/mozilla/doctorjs">Doctor JS</a>, que contiene la
herramienta <code>jsctags</code>, para generar ficheros ctags de proyectos JavaScript.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Software Craftsman]]></title>
    <link href="http://rchavarria.github.io/blog/2016/03/15/the-software-craftsman/"/>
    <updated>2016-03-15T22:08:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2016/03/15/the-software-craftsman</id>
    <content type="html"><![CDATA[<h6>de Sandro Mancuso</h6>

<p><img class="left" src="http://www.informit.com/ShowCover.aspx?isbn=0134052501" width="230" height="295" title="The Software Craftsman" ></p>

<h3>Por qué lo he leído</h3>

<p>Me encanta programar, me encanta escribir software, escribir código. Me encanta
resolver problemas, puzles. Me encanta la tecnología. Y me encanta hacer las
cosas bien, poner cariño en lo que hago. La ideología de Software Craftsmanship
va de todo esto. Y me gusta la metáfora. Mi padre es carpintero, artesano, y me
gustaría poner el mismo cuidado en mi trabajo que él pone en el suyo. La
excelencia técnica es lo que más me gusta del desarrollo software.</p>

<!-- more -->


<h3>Qué esperaba</h3>

<p>Me esperaba un libro donde se hablara de buenas prácticas, de ningún lenguaje
de programación en particular, si no de todos en general. De qué significa ser
un artesano, de dedicar tu vida a una profesión, de hacer lo que te gusta, de
pasión, de profesionalidad.</p>

<p>Esperaba consejos sobre qué hacer, qué no hacer, a quién considerar un modelo.
¿Una guía paso a paso de cómo ser considerado un craftsman? Nooo, pero sí
muchas acciones que me acercaría a ello.</p>

<h3>Qué encontré</h3>

<p>Todo eso y más. Aparte de todo lo esperado, Sandro tiene muchísimas
<em>batallitas</em> que contar. No solamente encontré conceptos ampliamente aceptados,
también encontré multitud de experiencias personales de una persona que ha
trabajado y trabaja muy duro para hacer de la profesión una profesión mucho
mejor.</p>

<p>Un capítulo interesantísimo es el que trata sobre la historia del Software
Craftsmanship.</p>

<h3>Conclusiones</h3>

<p>Sandro ha escrito un libro espectacular y soberbio. El libro cubre el concepto
de Craftsmanship de arriba a abajo y está ejemplificado con experiencias
personales. El libro está recomendado por muchísimo profesionales muy valorados
en la industria del software, y con razón. Es un placer leerlo.</p>

<p>De acuerdo, el tema me interesa, y me apasiona, así que yo encuentro normal que
el libro me haya encantado. Lo recomendaría a todos aquellos que estén
preocupados por escribir software de calidad, para aquellos que les preocupe
los aspectos técnicos del desarrollo del software.</p>

<h3>Qué he aprendido</h3>

<p>Escribir temas técnicos en tu blog ayudarán a quien venga después de ti. Porque
encontrarán los conceptos descritos con los mismos ojos que tienen ellos ahora.
Incluso si programadores más experimentados han escrito sobre el tema
anteriormente, siempre merece la pena escribir sobre lo que estamos aprendiendo
en este momento.</p>

<p>Es muy fácil decir que un software está muy mal escrito. Es más fácil quejarse,
o incluso reírse del autor. Pero la pregunta es: eres lo suficientemente bueno
como para hacerlo mejor?</p>

<p>¿Qué motiva al trabajor del conocimiento? <strong>Autonomía</strong>, <strong>maestría</strong> y
<strong>propósito</strong>.</p>

<h3>Frases que me gustaría recordar</h3>

<blockquote><p>Sin excelencia técnica, cualquier proyecto software será una experiencia
dolorosa, frustrantte y cara.</p></blockquote>

<!-- -->


<blockquote><p>Las metodologías ágiles ayudan a las empresas a hacer lo correcto, mientras
que Software Craftsmanship ayuda a los programadores y empresas a hacer las
cosas de la forma correcta.</p></blockquote>

<!-- -->


<blockquote><p>Software Craftsmanship es poner toda la responsabilidad, profesionalidad,
pragmatismo y orgullo de vuelta al desarrollo de software.</p></blockquote>

<!-- -->


<blockquote><p>Descubrimiento deliberado: hay que intentar expandir el conocimiento que
tenemos en lo que estemos trabajando, aunque creamos que lo conocemos siempre
habrá algún asunto que podemos explorar. Debemos exponernos constantemente a
situaciones donde podamos aprender algo nuevo acerca del contexto en el que
estamos.</p></blockquote>

<!-- -->


<blockquote><p>Incluso teniendo tiempo, algunos programadores deciden no automatizar sus
tests. <strong>Esto es ser egocéntrico</strong>. Sólo piensa en sus tareas, no en el resto
de la gente involucrada en el proyecto y todo el tiempo que les consumirá no
tener tests.</p></blockquote>

<!-- -->


<blockquote><p>Un código limpio y mantenible permite a los programadores ir rápido y reducir
las probabilidades de introducir bugs.</p></blockquote>

<!-- -->


<blockquote><p>¿Qué motiva al trabajor del conocimiento? Autonomía, maestría y propósito.</p></blockquote>

<!-- -->


<blockquote><p>En lugar de decir a los demás qué hacer, los software craftsmen se sientan y
trabajan con otros desarrolladores, compartiendo su conocimiento, experiencia
y pasión. Los software craftsman están deseando compartir las cosas que hacen
para mejorar ellos mismos.</p></blockquote>

<!-- -->


<blockquote><p>Ser buenos en lo que hacemos, ser capaces de comunicarlo claramente, y lo más
importante, ser capaces de generar confianza, son habilidades esenciales para
cualquier desarrollador que esté dispuesto a liderar cambios.</p></blockquote>

<!-- -->


<blockquote><p>Lo que distingue a grandes programadores de los mediocres es cómo hacen que
el software funcione, no si el software funciona o no, si no el cómo.</p></blockquote>

<!-- -->


<blockquote><p>Sobre craftsmanship y pragmatismo: TDD no hace que los programadores vayan
más lentos. Escribir el código no es el cuello de botella. Lo que sí que lo
es es aprender y dominar una nueva habilidad, práctica o tecnología.</p></blockquote>

<!-- -->


<blockquote><p>No tengas miedo de ser <em>viejo</em> y seguir programando. No tengas miedo de hacer
lo que te gusta.</p></blockquote>

<!-- -->


<blockquote><p>Para muchos programadores, buscar un trabajo es solo una forma de vender sus
habilidades al mejor postor. Para profesionales que están interesados en una
carrera larga y próspera, un trabajo es algo más que eso. Es una inversión
constante en sus carreras. Aparte de las cosas por las que se nos paga,
deberíamos invertir toda nuestra dedicación, pasión, compromiso y
conocimiento que adquirimos fuera del trabajo en hacer nuestro actual entorno
de trabajo un lugar mejor.</p></blockquote>

<!-- -->


<h3>Recursos relacionados</h3>

<ul>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/the-software-craftsman-by-sandro-mancuso.markdown">Notas tomadas sobre The Software Craftsman</a></li>
<li>Charla de Sandro Mancuso, <a href="https://vimeo.com/167722761">The long road</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
