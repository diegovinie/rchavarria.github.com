<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: book reviews | R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/blog/categories/book-reviews/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2015-12-28T21:57:23+01:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Soft skills]]></title>
    <link href="http://rchavarria.github.io/blog/2015/11/08/soft-skills/"/>
    <updated>2015-11-08T18:36:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/11/08/soft-skills</id>
    <content type="html"><![CDATA[<h6>de John Sonmez</h6>

<p><img class="left" src="/images/2015/soft-skills.jpg" width="239" height="300" title="Soft skills" ></p>

<h3>Por qué lo he leído</h3>

<p>Creo recordar que vi que Miguel, autor del blog <a href="http://ocana.github.io/">Dev's kitchen</a>, lo marcaba
como pendiente para leer y le di un vistazo. Por aquel momento seguía
el blog del autor del libro, y tenía varios posts interesantes. Y el libro
también me lo pareció: ¿Mejorar en tu carrera? ¿Aprender habilidades no
técnica?</p>

<p>Me gusta intercalar libros técnicos y no técnicos, y este libro parecía estar a
medio camino entre ambos. Parecía una buena elección, así que me decidí leerlo.</p>

<!-- more -->


<h3>Qué esperaba</h3>

<p>Esperaba consejos e historias relacionadas con el software, pero ninguna
historia técnica: cómo relacionarte con tus compañeros, cómo resolver
conflictos, cómo negociar con tu jefe. Esperaba más temas relacionados con la
relación de las persona que otra cosa. Bueno, y también un poco de
productividad. Quién sabe.</p>

<h3>Qué encontre</h3>

<p>Encontré todo eso y más, mucho más. El libro trata temas tan dispares que hay
veces que no sabes qué tipo de libro estas leyendo. Hay tantos consejos, y de
temáticas tan variadas, que es imposible no encontrar algún consejo o idea
nuevos.</p>

<p>El libro está dividido en secciones, englobando cada uno una temática general:
carrera profesional, marca personal, aprendizaje, producividad, economía,
salud y espiritualidad. Cada sección está formada por una serie de capítulos, y
cada capítulo contiene varios <em>artículos</em>. La verdad es casi como leer su blog,
pero un post detrás de otro y organizados por temáticas.</p>

<h3>Conclusiones</h3>

<p>El libro es tan variado que cualquier persona encontraría algún consejo
valioso. John Sonmez se gana la vida de esta forma, aconsejando a programadores
acerca de cómo mejorar en su carrera. En este libro encontrarás consejos de lo
más variopintos: desde cómo aprender, a cómo invertir en el negocio
inmoviliario, pasando por practicar deporte. Incluso hay consejos espirituales.
En ese punto el libro me dejó un poco de piedra, creo que ahí se pasó, y el
libro pierde un poco su identidad.</p>

<p>Destacaría las primeras secciones: cuando habla de la carrera profesional y el
aprendizaje. También me gustó el apartado dedicado a temas financieros, siempre
es intersante conocer cómo funciona el dinero.</p>

<p>El que menos me gustó fue el espiritual, lleno de buenrollismo y autoayuda. No
sé, no le cogí el punto. Aún así, en general, me parece un libro bastante recomendable.</p>

<h3>Qué he aprendido</h3>

<p>Casi todo el libro habla de ponerse objetivos, de establecer metas intermedias
y de hacer seguimiento, de empezar poco a poco, de ser constante, y de trabajar
duro. Conceptos aplicables a cualquier aspecto de la vida. Cuando habla de
objetivos, éstos pueden estar formados por tareas demasiado grandes, que
parece imposible de realizar. El truco está en dividir esa gran tarea en tareas
secuenciales más pequeñas. Lo más importante aquí es la palabra
<strong>secuenciales</strong>.</p>

<p>Cómo hackear una entrevista de trabajo: la idea es no tener que mandar
currículums a las empresas, si no que ellas te contacten. Te contacten porque
han tenido noticias tuyas de alguien <em>de dentro</em>. Para ello, deberás establecer
relaciones personales con trabajadores de la empresa en la que deseas trabajar:
lee sus blogs,... Piensa diferente y encuentra formas de acercarte a ellos.</p>

<p>Algunas de las habilidades que necesitarás para tu próximo trabajo no las
tienes todavía. La clave es <strong>todavía</strong>. Hay que ir con la confianza de que las
conseguirás.</p>

<p>John habla mucho de construir una marca personal, para ello necesitarías: un
mensaje (la frase por la que te reconocerán), elementos visuales (un logo,...),
consistencia y una exposición contínua (no necesariamente en Twitter
solamente).</p>

<p>Me ha encantado los capítulos donde describe su proceso de aprendizaje en 10
pasos. Parece mucho de libro de autoayuda, pero la verdad es que cuenta muy
buenas ideas. El proceso sería algo tal que así:</p>

<ol>
<li>Entender la habilidad que se quiere aprender</li>
<li>Delimitar el ámbito</li>
<li>Definir qué se va a considerar como éxito</li>
<li>Encontrar recursos</li>
<li>Crear un plan de aprendizaje</li>
<li>Filtrar los recursos</li>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido, y repetir desde el paso 7</li>
</ol>


<p>Me ha interesado mucho el concepto de <em>cuotas</em> para conseguir objetivos.
Funciona para los objetivos en los que hay que ir haciendo pequeñas acciones a
lo largo de mucho tiempo, por ejemplo, a la hora de hacer ejercicio. La idea es
crear una cuota de cuánto hay que conseguir tener hecho para un determinado
período de tiempo. Por ejemplo: salir a correr 3 veces por semana, o hacer
100km en bicicleta cada semana, o leer 3 artículos técnicos al mes.</p>

<h3>Frases que me gustaría recordar</h3>

<blockquote><p>Un profesional comprende qué trabajo ha de hacerse, lo prioriza y se pone
manos a la obra</p></blockquote>

<!-- -->


<blockquote><p>Divide un gran objetivo en pequeños objectivos que puedan corresponder a
meses, semanas o días. Escribe el gran objetivo donde lo veas todos los días
para recordarte en qué tienes que trabajar</p></blockquote>

<!-- -->


<blockquote><p>Por enésima vez: si quieres se un buen programador, debes aprender a cómo
trabajar de forma efectiva con gente, incluso si la mayor parte de tu trabajo
es escribir código</p></blockquote>

<!-- -->


<blockquote><p>Cuando el foco de una compañía no es el software, normalmente los
programadores no son muy respetados. Aquellas empresas que dependen de un
producto software tienen muchas más probabilidades de valorar mucho mejor a
los profesionales que contratan</p></blockquote>

<!-- -->


<blockquote><p>Si debes elegir entre dinero o responsabilidad, la mejor opción (para el
largo plazo) es siempre más responsabilidad</p></blockquote>

<!-- -->


<blockquote><p>Deberías estar siempre aprendiendo algo nuevo o mejorando de alguna forma tus
habilidades</p></blockquote>

<!-- -->


<blockquote><p>¿Cómo crear un producto? Identifica unas cuantas audiencias objetivo para las
que puedas crear un producto potencial. Elige una de estas audiencias e
identifica donde puedes encontrar a miembros de ese grupo. Contacta con ellos
y averigua si puedes resolver alguno de sus problemas</p></blockquote>

<!-- -->


<blockquote><p>La manera correcta de promocionarse a sí mismo es proporcionar valor a los
demás</p></blockquote>

<!-- -->


<blockquote><p>Tu objectivo principal debería ser proporcionar valor a los demás. Si lo que
dices o haces no ayuda a nadie, todo el mundo te ignorará. Cada vez que
decidas crear algo (escribir un artículo, grabar un podcast o screencast,...)
deberías mirarlo desde la perspectiva de cómo estás creando valor para los
demás</p></blockquote>

<!-- -->


<blockquote><p>El enfoque es una cosa del momento: es muy difícil conseguir el foco, pero
relativamente sencillo mantenerlo una vez que lo has adquirido</p></blockquote>

<!-- -->


<blockquote><p>La multitarea es posible. Es posible combinar una tarea que no requiere
concentración con algunas tareas que sí lo requieran</p></blockquote>

<!-- -->


<blockquote><p><em>Burnout</em>: Tendemos a estar ilusionados y motivados sobre las cosas nuevas al
principio, pero cuanto más avanzamos, más rápido nos acercamos a ese
sentimiento de no poder más. En realidad, estamos topándonos con una pared.
¿Cuál es la solución? Intentarlo más fuerte. Esforzándonos contra la
dificultad es el secreto para superar ese sentimiento</p></blockquote>

<!-- -->


<blockquote><p>Los hábitos consisten básicamente de tres cosas: una señal (qué causa la
acción del hábito), una rutina (el hábito en sí mismo) y una recompensa (es
lo que hace que el hábito se mantenga interesante)</p></blockquote>

<!-- -->


<blockquote><p>Una razón para el salario que estás demandando nunca puede ser <em>porque lo
necesito</em>. En vez de eso, debes enfocarlo desde la perspectiva de demostrar
que vales esa cantidad de dinero o que lo vale el beneficio que estás
poniendo encima de la mesa</p></blockquote>

<!-- -->


<blockquote><p>De todos los errores financieros que se pueden cometer, el mayor de ellos es
incurrir en una deuda</p></blockquote>

<h3>Recursos relacionados</h3>

<ul>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/soft-skills-by-john-sonmez.markdown">Notas tomadas sobre Soft skills</a></li>
<li>Blog <a href="http://ocana.github.io/">Dev's kitchen</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The passionate programmer]]></title>
    <link href="http://rchavarria.github.io/blog/2015/09/20/passionate-programmer/"/>
    <updated>2015-09-20T19:07:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/09/20/passionate-programmer</id>
    <content type="html"><![CDATA[<h5>de Chad Fowler</h5>

<p><img class="left" src="http://chadfowler.com/images/books/passionate-programmer.jpg" width="200" height="300" title="The passionate programmer" ></p>

<h2>Por qué lo he leído</h2>

<p>Suelo elegir los libros por el título, por lo que me sugiera. Y el título de
este libro me sugiere todo: pasión y programación. ¿Qué más se puede pedir?.
Uno de mis libros favoritos es <a href="https://pragprog.com/book/tpp/the-pragmatic-programmer">The pragmatic programmer</a>, que más adelante
dió lugar a una editorial de libros técnicos. <em>The passionate programmer</em> tenía
la misma pinta, así que seguro que lo tenía que leer, tarde o temprano.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Me esperaba un libro con una estructura parecida a <em>The pragmatic programmer</em>,
con capítulos cortos, y cada capítulo finalizando con una serie de posibles
acciones para mejorar en tu carrera profesional. Bueno, esta vez, en lugar de
mejorar, esperaba que estuviera relacionado con sentir la pasión por la
programación.</p>

<h2>Qué encontre</h2>

<p>El libro está organizado en 5 grandes secciones:</p>

<ol>
<li>Elige tu mercado</li>
<li>Invierte en tu producto</li>
<li>Ejecución</li>
<li>El marketing... no es sólo para los trajeados</li>
<li>Manteniéndote al día</li>
</ol>


<p>Cada uno de ellos está dividido en capítulos más pequeños (lo que me
imaginaba), y cada uno de ellos termina en uno o varios consejos para que
aprendas el concepto que desarrolla el capítulo. Idéntica estructura a <em>The
pragmatic programmer</em> que tanto me gustó y tanto me ayudó.</p>

<p>Cada una de las secciones anteriores explorar un aspecto de la carrera de un
profesional del desarrollo software, aunque no cubre todos. Guía al lector
sobre cómo y por qué debe elegir un mercado, una industria, ya que el software
se encuentra en todas partes hoy en día. Hay consejos sobre cómo deberías
trabajar, qué actitud deberías tener, tanto si trabajas por cuenta ajena como
por tu propia cuenta y también cómo poder <em>venderte</em> dentro y fuera de tu
empresa.</p>

<h2>Conclusiones</h2>

<p>Me parece un libro muy recomendable. Está enfocado al desarrollo del software,
pero podría ser aplicable (más o menos) a otras profesiones. De lo que trata es
de buscar la pasión por lo que haces.</p>

<p>Cada capítulo termina con una o varias acciones a tomar, algunas son sencillas,
otras te llevarán cierto tiempo, otras son arriesgadas y no todo el mundo se
sentiría cómodo llevándolas a cabo. No creo que tenga tiempo ni energía para
llevarlas todas a cabo, pero sí que me gustaría poner en práctica algunas de
ellas: comunicarme más con gente de negocio, ponerme en situaciones donde yo
sea el <em>peor</em>, invertir en mi conocimiento, encontrar un mentor, seguir alguno
de los consejos para contribuir a algún proyecto de software libre,...</p>

<p>Creo que este es un libro para tener al lado de <em>The pragmatic programmer</em> y
releerlos de vez en cuando.</p>

<h2>Qué he aprendido</h2>

<blockquote><p>No puedes competir en precio, pero puedes competir en habilidad.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Tienes que ser apasionado sobre tu trabajo si quieres ser excelente
en tu trabajo.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Un aprendiz no se encuentra saliendo por ahí y declarándote un <em>gurú</em>, si no
acumulando conocimiento y teniendo la voluntad y paciencia para compartirlo.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Es mucho más fácil encontrar alguien que haga que el software funciona que
encontrar a alguien que haga que funcione el <em>hacer software</em> (It’s much
easier to find someone who can make software work than it is to find someone
who can make the making of software work).</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Crea movimiento. Se de los que empujan hacia adelante. No te acomodes.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>La mayor barrera entre nosotros, los mortales, y aquellos a los que admiramos
son nuestros propios miedos.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>El proceso aquí descrito es un bucle que se repite hasta que te jubilas:
investiga, invierte, ejecuta, anúncialo, repite.</p></blockquote>

<h2>Frases que me gustaría recordar</h2>

<blockquote><p>At least when starting out, greatness is binary in the music world. A
musician wants to either be great (and famous for it!) or not do it at all.
I’m often asked why it is that there are so many good musicians who are also
good software developers. That’s the reason.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Think of your career as if it is the life cycle of a product that you are
creating. That product is made up of you and your skills.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>If you want to stay relevant, you’re going to have to dive into the domain of
the business you’re in.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Legendary jazz guitarist Pat Metheny: “Always be the worst guy in every band
you’re in.”</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Fear-driven advice is geared toward not losing. Thinking about not losing is
not the way to win!</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Teaching is one of the best ways to learn.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Cuando estudias soluciones de código abierto, en lugar de propietarias, en
profundidad empiezas a reconocer patrones que te sirven más allá de la
tecnología.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>The most obvious place to start your lifelong learning is in learning the
tools of your trade.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Without a role model, there’s no incentive to get better.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>You have to make time for practice. It’s your responsibility.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Studying the work of masters is an essential part of becoming a master.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>I learned that no matter how cool the technology seemed to be, it was
valuable only if it solved a real problem that was urgent and provided
quantifiable benefits. Over time, this helped me change my way of thinking
from being technology-centric to being solution-centric.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Attempting to be irreplaceable is a defensive maneuver that creates a hostile
relationship with your employer.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>We judge each other on how we deal with those inevitable mistakes.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>If you don’t have a deadline, you don’t have any pressure or much incentive
to finish something.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>There is no way to objectively measure the quality of a knowledge worker, and
there is no way to objectively measure the quality of their work. That means
you are always going to be measured based on someone else’s perception of
you.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>You need to make it personal. Try to actually learn about the people you work
with.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Set big goals, but make constant corrections along the way. Learn from the
experience, and change the goals as you go.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Software development is both challenging and rewarding. It’s creative like an
art-form, but (unlike art) it provides concrete, measurable value.</p></blockquote>

<h2>Recursos relacionados</h2>

<ul>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/passionate-programmer-by-chad-fowler.markdown">Notas tomadas sobre el libro</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Martian]]></title>
    <link href="http://rchavarria.github.io/blog/2015/09/06/the-martian/"/>
    <updated>2015-09-06T16:05:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/09/06/the-martian</id>
    <content type="html"><![CDATA[<h5>de Andy Weir</h5>

<p><img class="right" src="http://www.ew.com/sites/default/files/i/2014/02/04/The-Martian.jpg" width="201" height="306"></p>

<h2>Por qué lo he leído</h2>

<p>Hace un tiempo que escucho semanalmente los podcasts de Scott Hanselman:
<a href="http://www.hanselminutes.com/">Hanselminutes</a>. Son unos podcasts muy variados que tratan temas relacionados
con el mundo del software y la tecnología en general: lenguajes de programación,
iniciativas,...</p>

<p>En varios de sus podcasts, y probablemente en varios de sus posts, Scott dice
que uno de los libros que más recomienda es <a href="http://www.amazon.es/gp/product/B00OXYQR38/">El marciano</a>, que es un libro
que le encanta. No creo que se lleve ninguna comisión por hacer publicidad,
pero si alguien como Scott recomienda una y otra vez un libro, será por algo.
Además, es un libro no técnico, por lo que me serviría para desconectar un poco
en vacaciones.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Al estar tan recomendado, esperaba una novela muy bien escrita. Según Scott, es
una novela de ciencia ficción, pero que es mucho más de ciencia que de ficción,
de hecho, con el estado actual de la tecnología, se podría dar la situación
perfectamente. Lo único que quizá no se ha invertido el tiempo y el dinero en
hacerlo realidad, pero podría serlo.</p>

<h2>Qué encontre</h2>

<p>Evidentemente, encontré todo lo que esperaba. Una novela de ciencia ficción, con
más ciencia que ficción, describiendo una situación que podría ser totalmente
cierta actualmente. Una novela magníficamente escrita, con muchos tecnicismos,
llena de vocabulario aeroespacial, describiendo personalidades muy distintas,
pero que el autor usa inteligentemente.</p>

<h2>Conclusiones</h2>

<p>Sin duda, una novela a recomendar. Si te gusta el espacio, si te gusta la ciencia,
y si te gusta la ficción; ésta es una novela para tí. O película, porque mientras
estaba a mitad del libro, me entero de que van a <em>sacar</em> la película y que ya hay
disponible algún <a href="https://www.youtube.com/watch?v=ej3ioOneTy8">trailer</a>. Así que eso me animó a terminarme antes aún el
libro, a devorarlo en vacaciones.</p>

<p>Aunque la situación podría darse hoy en día, también hay que hacer un acto de fe
para creerse todo lo que cuenta. En muchas ocasiones, el protagonista describe
procesos químicos, o físicos, que pueden funcionar por casualidad, pero que al
final, por <em>necesidades del guión</em>, terminan funcionando. No son situaciones
increíbles, pero sí que uno tiene que relajarse un poco y creer en la fortuna
del protagonista.</p>

<h2>Qué he aprendido</h2>

<p>No es que pueda sacar lecciones aprendidas, como si fuera un libro técnico
describiendo un proceso o una tecnología, pero sí que he aprendido un montón
de cosas sobre Marte: lugares, condiciones en la superficie, cómo viajar al
planeta, cómo funcionan las comunicaciones, un poco sobre viajes
interplanetarios, cómo funciona la NASA por dentro. Aunque sé que es una novela,
no me lo tengo que tomar todo al pie de la letra.</p>

<h2>Recursos relacionados</h2>

<ul>
<li><a href="http://www.hanselminutes.com/">Hanselminutes podcast</a></li>
<li><a href="http://www.amazon.es/gp/product/B00OXYQR38/">El marciano</a>, de Andy Weir, o en versión original: <a href="http://www.amazon.com/The-Martian-Novel-Andy-Weir-ebook/dp/B00EMXBDMA">The Martian</a></li>
<li><a href="https://www.youtube.com/watch?v=ej3ioOneTy8">Trailer de The Martian</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes to a software team leader]]></title>
    <link href="http://rchavarria.github.io/blog/2015/08/23/notes-software-team-leader/"/>
    <updated>2015-08-23T18:16:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/08/23/notes-software-team-leader</id>
    <content type="html"><![CDATA[<h5>de Roy Osherove</h5>

<p><img class="left" src="https://s3.amazonaws.com/titlepages.leanpub.com/teamleader/large?1438389048" width="200" height="260" title="Notes to a software team leader" ></p>

<h2>Por qué lo he leído</h2>

<p>Ya tengo unos años de experiencia en esto de desarrollar software. No me veo
capaz todavía de liderar un gran equipo de desarrollo, pero me siento más
inclinado hacia un liderazgo técnico que un liderazgo <em>de gestión</em>. Así que,
¿por qué no aprender un poco sobre un rol que tengo ganas de hacer?</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>El nombre del autor me sonaba de algo, no sé exactamente de qué, pero no recuerdo
haber leído algún otro libro suyo. Pero me sonaba que era un autor muy práctico,
con muchísima experiencia en la industria del software, por lo que esperaba un
libro de lleno de vivencias y experiencias. Quizá una historia que guiara al lector
por el camino de crear un equipo autoorganizado (que está tan de moda ahora con
las metodologías ágiles).</p>

<h2>Qué encontré</h2>

<p>Encontré una descripción de las fases en las que se puede encontrar un equipo de
desarrollo, bueno, la visión del autor, pero algo es algo. El libro también está
lleno de ejemplos y consejos sobre cómo mejorar el equipo, cómo hacer que
miembros de un equipo mejoren en su carrera profesional.</p>

<p>También, una sección del libro está dedicada a <em>testimonios</em> de absolutos expertos
en la materia. Estos últimos capítulos están llenos de experiencias reales y de
consejos de gente brillante y con una ingente cantidad de experiencia en el
desarrollo de software.</p>

<h2>Conclusiones</h2>

<p>El libro consta de varias partes. Comienza describiendo las fases en las que se
puede encontrar un equipo de desarrollo, y cómo avanzar de una a otra, hasta
conseguir el equipo perfecto.</p>

<p>Es un libro muy <em>buen-rollista</em>, tanto que a veces da la impresión de ser un
libro de autoayuda. Pero el libro está lleno de consejos super útiles. Quizá
se echa de menos la parte contraria, por ningún lado se encuentra cómo arreglar
problemas dentro del equipo. Supongo que no era el objetivo del libro.</p>

<p>La última sección del libro, la dedicada a los testimonios, tiene muchísimo
valor. Los mejores de los mejores ponen su granito de arena en el libro y
dedican unos consejos al lector que de otra forma sería imposible recopilar.</p>

<p>Si lo que te interesa es el aspecto técnico del desarrollo, éste puede ser un
libro para ti. Puedes leer mis notas en
<a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/notes-software-team-leader-by-roy-osherove.markdown">Notas sobre Notes to a software team leader</a>.</p>

<h2>Qué he aprendido</h2>

<ul>
<li>Usar la autoridad debe ser el último recurso. Ayudar a cada uno a encontrar
su camino ayuda a que ambas partes ganen.</li>
<li>Comunicación y traducción de información son habilidades críticas de un líder.</li>
<li>Necesitas discutir, influenciar, negociar y no decirle a la gente lo que debe
hacer.</li>
<li>Dar feedback es una técnica muy efectiva, pero debe ser de confianza, concreto,
constructivo, e incluir contexto.</li>
<li>Un líder técnico debería programar, aunque no mucho, pero sobre todo debería
practicar pair programming, design y code reviews y también debería buscar que
no se genere demasiada deuda técnica.</li>
</ul>


<h2>Frases que me gustaría recordar</h2>

<ul>
<li>El autor identifica tres formas de liderar un equipo: comando y control, coach
y facilitador. Simétricamente, identifica tres fases en las que se puede
encontrar un equipo: supervivencia, aprendizaje, auto-organización.</li>
<li>Para salir de la fase de supervivencia, hay que preocuparse de una cosa: crear
tiempo libre (<em>slack time</em>) como un estándar en tu flujo de trabajo.</li>
<li>Esto es por lo que te pagan: para hacer las cosas mejor y de la forma más
profesional, clara y transparente posible. Te pagan por llevar al equipo a un
nivel donde hacen las cosas profesionalmente, para llevar al equipo al próximo
nivel de rendimiento y profesionalismo. Para ello, quizá tengas que tomar
algunos riesgos.</li>
<li>Para salir del modo de supervivencia, debes pasar al menos el 50% del tiempo
con ellos. Lo primero que hay que hacer es una inversión de tiempo, y el que
debe comenzar eres tú (no reuniones, quizá horas extra,...)</li>
<li>El aprendizaje más rico y verdadero es cuando damos un salto en el conocimiento,
no estando seguros en la parte plana del gráfico (hace referencia a un gráfico
de aprendizaje de planicies seguidos de saltos, como escalones).</li>
<li>Sumergirse en una nueva cultura de formas de trabajar es dar un salto
cualitativo de conocimiento. Jugar a lo seguro no lo es.</li>
<li>Crear un <em>lenguaje de compromiso</em> es un paso esencial para que los miembros
del equipo mantengan sus promesas con los demás.</li>
<li>Cuando la gente se te acerque con un problema, rétale a que lo resulva por
sí mismo, pero que sepa que te tiene a tí como mentor, pero déjale claro que
tú no vas a solucionar el problema.</li>
<li>Miembros del equipo se pueden llevar deberes a casa, pero tiene que ser
voluntario, no lo deben tomar como trabajo.</li>
<li>Los problemas más difíciles de resolver nunca son técnicos, suelen involucrar
a las personas.</li>
<li>Un buen líder técnico mantiene siempre un ojo puesto en la calidad. Cuando el
equipo crece, las personas de más confianza cumplen parte de esta misión.</li>
<li>Una buena táctica para tener un equipo feliz es animar al equipo a usar un
período de tiempo semanal para aprender nuevas habilidades o tecnologías.</li>
<li>Las ideas de cambio deberían venir tanto de tí como de miembros del equipo.</li>
</ul>


<h2>Referencias y enlaces relacionados</h2>

<ul>
<li><a href="https://leanpub.com/teamleader">Notes to a software team leader</a> en Lean Pub</li>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/notes-software-team-leader-by-roy-osherove.markdown">Notas que he tomado sobre el libro</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript patterns]]></title>
    <link href="http://rchavarria.github.io/blog/2015/07/19/javascript-patterns/"/>
    <updated>2015-07-19T21:10:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/07/19/javascript-patterns</id>
    <content type="html"><![CDATA[<h5>de Stoyan Stefanov</h5>

<p><img class="left" src="http://akamaicovers.oreilly.com/images/9780596806767/lrg.jpg" width="250" height="328" title="JavaScript patterns" ></p>

<h2>Por qué lo he leído</h2>

<p>Cuando leí <a href="/blog/2015/05/29/learning-javascript-design-patterns/">Learning JavaScript design patterns</a>, de Addy Osmany, me quedé con
ganas de más, me equivoqué de libro. El que realmente quería leerme para
aprender sobre patrones en JavaScript era éste. Pero me dejé llevar por la
<em>fama</em> de Addy.</p>

<p>El objetivo de leer estos dos libros era el de profundizar en el uso de patrones
en JavaScript, poder trasladar conocimientos adquiridos en Java, a JavaScript.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Esperaba que fuera un libro muy parecido al mítico <a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented-ebook/dp/B000SEIBB8">Design patterns</a>, como si
fuera un catálogo de patrones disponibles, con sus descripciones, situaciones
donde es recomendable usarlos y también, por qué no, ejemplos de proyectos
reales.</p>

<h2>Qué encontré</h2>

<p>Por supuesto, encontré muchos patrones, pero eso no es lo más llamativo.</p>

<p>El autor comenta varios aspectos del lenguaje que son cuanto menos, curiosos. No
sé si llegan al nivel de <a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript, the good parts</a>, pero deben de andar
cerca.</p>

<p>Además, alguno de los patrones difieren de la idea que yo tenía, son muy
distintos a patrones con el mismo nombre, pero en otros lenguajes de
programación.</p>

<h2>Conclusiones</h2>

<p>Junto con <a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript, the good parts</a>, considero que éste es un libro imprescindible
para cualquier desarrollador que quiera dominar el lenguaje.</p>

<p>Explica en profundidad algunos de los patrones más usados en todo tipo de
proyectos. Quizá, con el nuevo estándard recién aprobado, algunos de ellos
(como la <em>herencia por prototipos</em>) queden algo obsoletos, creo que es
un libro imprescindible para entender el lenguaje.</p>

<h2>Qué he aprendido</h2>

<p>Puedes consultar mis <a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/javascript-patterns-by-stoyan-stefanov.markdown">notas sobre el libro</a> si quieres ver todo lo que me
ha llamado la atención de el mismo. Pero destacaría lo siguiente:</p>

<ul>
<li>Una regla que se repite en muchos patrones: <strong>los miembros a compartir deben
ir en el prototipo, nunca en el <code>this</code></strong></li>
<li>Los constructors implícitamente devuelven <code>this</code>, incluso si no hay un
<code>return</code>, pero tu puedes devolver lo que quieras, incluso puedes redefinir el
constructor. Esto se hace, por ejemplo, en el patrón Singleton</li>
<li>En la declaración de una función, su definición también sufre <em>hoisting</em>, no
solo la declaración</li>
<li>Métodos clásicos de herencia y herencia de prototipos, aunque esto vaya a
cambiar con nuevas versiones del lenguaje, con la aparición de clases</li>
<li>Unas cuantas sugerencias para desplegar grandes aplicaciones: combinar scripts,
minificarlos, utilizar compresión de archivos, uso de cabeceras HTML, uso de
CDNs, dónde situar las etiquetas <code>&lt;script&gt;</code>, enviar en trozos grandes ficheros
HTML.</li>
</ul>


<h2>Recursos relacionados</h2>

<ul>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/javascript-patterns-by-stoyan-stefanov.markdown">notas sobre el libro</a></li>
<li><a href="/blog/2015/05/29/learning-javascript-design-patterns/">Learning JavaScript design patterns</a>, libro de Addy Osmany</li>
<li><a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented-ebook/dp/B000SEIBB8">Design patterns</a>, libro de The Gang of Four</li>
<li><a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript, the good parts</a>, libro de Douglas Crockford</li>
</ul>

]]></content>
  </entry>
  
</feed>
