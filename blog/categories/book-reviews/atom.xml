<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: book reviews | R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/blog/categories/book-reviews/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2013-10-22T14:40:06+02:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Instant Markdown]]></title>
    <link href="http://rchavarria.github.io/blog/2013/10/07/instant-markdown/"/>
    <updated>2013-10-07T09:38:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/10/07/instant-markdown</id>
    <content type="html"><![CDATA[<h4>Instant Markdown</h4>

<h5>Eliyahu Goldratt</h5>

<p><img class="right" src="http://www.packtpub.com/sites/default/files/9145OT_Instant%20Markdown_cov_0.jpg" width="195" height="300" title="Instant Markdown" ></p>

<h2>Por qué lo he leído</h2>

<p>El lenguaje Markdown me interesa, me parece una forma sencilla de formatear documentos
sin usar grandes pomposidades, y <a href="http://twitter.com/arturoherrero">Arturo</a>, a través de twitter, dió la posibilidad
de conseguir una copia (¡muchas gracias por cierto!). Había leído alguna <em>review</em>
del libro, como la de <a href="http://kinisoftware.com/2013/09/revisando-el-libro-instant-markdown">Kinisoftware</a>, por lo que no podía desperdiciar la oportunidad.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Ya conocía por encima la sintaxis de Markdown, la utilizo para escribir este post
y cada vez más para tomar notas rápidas. También, al haber leído ya un par de
revisiones, ya tenía más o menos una idea de lo que era el libro. Pero hasta que
no lo lees no sabes con certeza si has acertado o no, así que allá que fui.</p>

<h2>Qué encontre</h2>

<p>Es un libro conciso, directo al grano y facilísimo de leer. Está en ingles, vale,
pero de verdad que es sencillo de leer. Arturo expone el tema con claridad y sin
andarse con rodeos.</p>

<p>Aquí podrás encontrar una referencia rápida pero completa de la sintaxis oficial de
Markdown así como algunos añadidos que ofrecen páginas como <a href="http://github.com">Github</a>, por ejemplo.</p>

<p>También conocerás herramientas para trabajar con Markdown para tu día a día y para
tareas tan comunes como escribir emails (está genial poder escribir un email, con
formato, sin tener que levantar las manos del teclado).</p>

<h2>Conclusiones</h2>

<p><em>Instant Markdown</em> es un libro muy fácil de leer, y que te da unas cuantas ideas
para profundizar en el tema, así que no decepciona. <strong>¿Quieres tener una referencia
rápida del lenguaje?</strong> Aquí la encontrarás. <strong>¿Quieres conocer posibles usos diarios
de una sintaxis sencillísima para escribir documentos formateado?</strong> Alimenta tu
curiosidad con este libro.</p>

<p>Una vez que pruebes la sencillez y rapidez de Markdown, querrás utilizarlo para
todo, y este libro te indica unas cuantas herramientas para ello.</p>

<h2>Qué he aprendido con este libro</h2>

<ul>
<li>Se pueden dibujar líneas horizontales, simplemente escribiendo 3 o más de estos
carácteres en la misma línea: <code>-</code>, <code>*</code>, <code>_</code>. Así:</li>
</ul>


<hr />

<ul>
<li><p>Puedes escribir emails con la herramienta <a href="http://markdown-here.com">Markdown Here</a>.</p></li>
<li><p>Puedes escribir listas de cosas por hacer, muy útil. <a href="http://cheddarapp.com">Cheddar</a>.</p></li>
<li><p>Con la herramienta <a href="http://johnmacfarlane.net/pandoc">pandoc</a> podrás generar múltiples
formatos a partir de Markdown: HTML, docx, odt, ebook, latex y pdf.</p></li>
<li><p>Y si Markdown se queda corto en alǵun momento: <a href="http://fletcherpenney.net/multimarkdown">MultiMarkdown</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La meta]]></title>
    <link href="http://rchavarria.github.io/blog/2013/04/10/la-meta/"/>
    <updated>2013-04-10T10:06:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/04/10/la-meta</id>
    <content type="html"><![CDATA[<h4>La meta</h4>

<h5>Eliyahu Goldratt</h5>

<p><img class="right" src="http://ecx.images-amazon.com/images/I/51E50P52AXL.<em>SY300</em>.jpg" width="195" height="300" title="La meta" ></p>

<h2>Por qué lo he leído</h2>

<p>Nunca había oído hablar de este libro, pero cuando asistí a la CAS2012, el año pasado en Cáceres,
varias personas que allí conocí (<a href="https://twitter.com/rferlei">Roberto</a> y
<a href="https://twitter.com/anuskiaranda">Ana</a>) me hablaron maravillas de él, así que decidí
ponerlo en la lista de libros a leer.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Bueno, en realidad ya me habían contado de qué iba el libro, así que ya llevaba una buena idea
de lo que se iba a tratar. Y tenía bastantes buenas espectativas.</p>

<h2>Qué encontre</h2>

<p>Encontré un magnífico libro. La verdad es que es muy ameno y divertido. También es intrigante
ir leyendo cómo el autor va relatando a través del protagonista un proceso de descubrimiento de
soluciones a todos sus problemas.</p>

<p>La verdad es que se hace muy fácil de leer y comprender los principios Lean y la teoría de las
restricciones a través de la historia contada a través del protagonista.</p>

<h2>Conclusiones</h2>

<p>El libro me ha encantado, aunque me hubiera gustado mucho más haberlo leído un tiempo atrás, ya
que trabajé en una fábrica como Ingeniero de Desarrollo (para desarrollar nuevos productos). Por
lo menos ha sido divertido revivir experiencias de aquel trabajo, ya que muchos de los principios
(y problemas también) expuestos en el libro ya los viví en mis propias carnes.</p>

<p>Así pues, este es un libro recomendado sobre todo a todos aquellos interesados en mejorar procesos
de producción. No parece un tema muy de desarrollo de software, que es a lo que me dedico, pero
estos principios son la base de las metodologías Lean, y por ende, Agile. Además, es un libro
que se lee relativamente rápido, y, de verdad, es muy divertido, así que tampoco cuesta tanto.</p>

<h2>Pasajes que quiero recordar de este libro</h2>

<blockquote><p>Comprar a precios económicos no es la meta.</p>

<p>La meta no es vender, hay veces que se vende perdiendo dinero o con márgenes ínfimos.</p>

<p>Qué es lo que la gente piensa que son las metas: compras baratas, contratación de gente adecuada,
tecnología punta, fabricacón de bienes de calidad, venta de bienes de calidad,
conquista tasa de mercado, comunciaciones o cumplimiento de los deseos del cliente.
Pero esos son medios para alcanzar la meta.</p>

<p>La calidad sola, es importante, pero no es la meta.</p>

<p>Tecnologia, es importatne, pero no es la meta.</p>

<p>Trabajar no es sinónimo de ganar dinero.</p>

<p>Ésta es la meta: ganar dinero aumentando los beneficios netos y al mismo tiempo el rendimiento
de la inversión (ROI) y la liquidez.</p>

<p>Parámetros que expresan la meta y que permiten establecer procedimientos operativos para
dirigir la fábrica: ingresos, inventarios y gastos de operación.</p>

<p>Una fabrica, en la que todo el mundo produce ininterrumpidamente, es muy poco productiva.</p>

<p>Una regla que expresa la relación entre cuellos de botella y los demas recursos: equilibrar
el flujo, no la capacidad.</p>

<p>El grado de utilización de un recuros 'no-cuello' de botella no vendrá dado por su propia
capacidad sino por alguna otra restricción del sistema.</p>

<p>Se pueden distinguir 4 tipos de tiempos desde que el material entra en la fábrica hasta
que sale de ella: de preparación, de proceso, en cola y de espera.</p>

<p>Tres consejos sobre cómo dirigir: Saber convencer a otras personas, desprender las capas
de la práctica común y vencer la resistencia al cambio.</p>

<p>Nunca des las respuestas, solo plantea las preguntas.</p>

<p>¿Qué cabmiar? ¿Hacia qué cambiar? ¿Cómo provocar el cambio? Basicamente estamos pidiendo
las habiliades fundamentales que uno debería esperar de un directivo.</p></blockquote>

<h2>Conceptos</h2>

<ul>
<li><p>Productividad: significa hacer las cosas de tal manera que, en el caso de la empresa, ésta
se aproxime lo más posible a su meta. Todo aquello que lleve a una compañía más cerca de su meta
es productivo, todo aquello que no la lleve es imprductivo.</p></li>
<li><p>Ingresos: tasa de generacion de dinero a traves de las ventas.</p></li>
<li><p>Inventario: todo el dinero que el sistema ha invertido en adquierrir cosas que pretende vender.</p></li>
<li><p>Gastos de operación: todo el dienro que el sistema gasta para convertir el inventario en ingresos netos.</p></li>
</ul>


<h2>Otras lecturas y enlaces relacionadas</h2>

<ul>
<li><a href="/blog/2012/10/10/lean-software-development/">Lean software development</a>, de Mary y Tom Poppendiek.</li>
<li><a href="https://plus.google.com/105077077543737057709">Roberto Hens</a> también lo ha leído, y esto es lo que le parece:
<a href="http://robertohens.blogspot.com.es/2013/04/Kanban-el-Origen-The-Goal.html">Kanban, el origen</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile estimating and planning]]></title>
    <link href="http://rchavarria.github.io/blog/2013/02/13/agile-estimating-and-planning/"/>
    <updated>2013-02-13T13:08:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2013/02/13/agile-estimating-and-planning</id>
    <content type="html"><![CDATA[<h4>Agile estimating and planning</h4>

<h5>Mike Cohn</h5>

<p><img class="right" src="http://www.mcwherter.net/Portals/McWherter/9780131479418.jpg" width="245" height="324" title="Agile estimating and planning" ></p>

<h2>Por qué lo he leído</h2>

<p>últimamente estoy leyendo muchos libros relacionados con las metodologías ágiles, y en muchos de ellos se hacía referencia a este libro, así que pensé que debía ser un libro imprescindible. Y así es.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Esperaba encontrar muchas técnicas de estimación, métricas para controlar que una planificación no se desvía del plan inicial y cosas así.</p>

<p>También esperaba encontrar una serie de consejos a aplicar a la hora de hacer las estimaciones, y la verdad es que el libro no me ha defraudado para nada.</p>

<h2>Qué encontre</h2>

<p>Encontré todo eso y mucho más. Descubrí nuevos conceptos (ver último apartado) y conocí de primera mano técnicas que hasta ahora solo había conocido por encima, como los diagramas <em>burndown</em>, para registrar los puntos de historia que se han implementado en una iteración.</p>

<h2>Conclusiones</h2>

<p>El libro me ha encantado. Creo que es una lectura obligatoria para cualquier persona que esté relacionada con las planificaciones de los proyectos software. Estoy seguro de que aprendería muchísimas cosas. Claro, que si eres desarrollador también te conviene conocer las técnicas explicadas en este libro.</p>

<p>Una cosa que me ha gustado muchísimo es que al final de cada capítulo hay un resumen exponiendo las ideas principales del capítulo. Muy útil por si tienes que ojearlo una vez leído.</p>

<h2>Pasajes que quiero recordar de este libro</h2>

<blockquote><p>En 1981, Barry Boehm dibujó su primera versión del <a href="https://raw.github.com/tapichu/scrum/gh-pages/img/03%20-%20cono%20de%20incertidumbre.png"><em>cono de incertidumbre</em></a>. La imagen del enlace muestra los rangos iniciales de incertidumbre en diferentes puntos de un proceso de desarrollo secuencial ("en cascada")</p>

<p>El "cono de incertidumbre" se va estrechando conforme el proyecto va avanzando.</p>

<p>Un plan <em>ágil</em> is aquel que no es que no queramos cambiar, sino que estamos ansiosos de hacerlo, y queremos
cambiarlo porque eso significa que hemos aprendido algo o que hemos sorteado una dificultad.</p>

<p>Las funcionalidades son la unidad de valor para el cliente, y no las actividades, aunque nosotros
planificamos basándonos en actividades, por eso muchos proyectos fallan.</p>

<p>La multitarea se convierte en un problema para los proyectos planificados tradicionalmente porque
incentiva enfocarse en la máxima utilzizacion de todos los individuos en lugar de mantener un margen
suficiente para poder manejar la variabilidad típica de las tareas de los proyectos software.</p>

<p>Un equipo <em>ágil</em> trabaja como una unidad, no hay espacio para la mentalidad "ahí lo dejo y ya está". Un
buen equipo <em>ágil</em> debe tener una mentalidad de estamos todos juntos en esto.</p>

<p>Las <em>historias de usuario</em> son una técnica poco pesada para expresar los requisitos del software.</p>

<p>Los equipos ágiles planifican a tres niveles: release, iteración y dia. <strong>release</strong>: determina el alcance,
las fechas y los recursos de un proyecto. <strong>iteración</strong>: identfica tareas de alta prioridad que el equipo
debería realizar en la siguiente iteración. <strong>dia</strong>: coordina el trabajo y sincroniza los esfuerzos
del dia a dia.</p>

<p>Los proyectos se deberían ver como una forma de generar un flujo de nuevas capacidades y conocimientos,
conocimientos sobre el producto y sobre el proyecto (equipo, tecnología, personas, ...)</p>

<p>Al igual que en los restaurantes las medidas de las raciones son relativas entre sí, en el mundo software
sólo necesito saber si una funcionalidad es mayor o menor respecto a otra.</p>

<p>Además de saber que las estimaciones son más fiables si son indicadas por aquellos que realizarán la tarea,
las estimaciones son aún mejores si se basan en la colaboración del equipo al completo.</p>

<p>Las tres formas más comunes de dar una estimación son: opinión de un experto, analogía y disgregación (o
dividir una tarea en otras más pequeñas).</p>

<p>La cantidad de tiempo que llevará implementar una funcionalidad es función de su tamaño (puntos historia) y
el ratio de progreso del equipo (velocidad)</p>

<p>Se deben tener en cuenta cuatro factores a la hora de priorizar tareas: valor de las funcionalidades, coste
del desarrollo, nuevo conocimiento que generará y riesgos que eliminará la realización de la tarea.</p>

<p>Kano (link al torpedo este, con imagen y todo si es posible) nos da una forma de separar funcionalidades en tres categorías: indispensables,
lineales y excitantes/sorprendentes.</p>

<p>Entregar un subconjunto coherente de todas las capas de una funcionalidad is siempre mejor que entregar
una capa entera pero sin conexión con el resto de ellas.</p>

<p>Así como un corazón bate a un ritmo regular que mantienen el cuerpo funcionando, un duración de iteración
fija proporciona una constante que ayuda a establecer un ritmo de desarrollo y entregas ~ Simon Baker</p>

<p>Un <em>buffer</em> es un margen de error alrededor de una estimación. Hay dos tipos de buffers: de funcionalidad
(un 25-40% de las funcionalidades son opcionales) y de planificación (se añade un 30% de tiempo a lo que
creo que me va a costar).</p>

<p>Un buffer de planificación no es un alargamiento consciente. Las personas alargan conscientemente sus
estimaciones si creen que se les reprochará no terminar a tiempo. Un buffer es un margen de seguridad
necesario que sumar al conjunto de estimaciones.</p>

<p>Algo que el autor encuentra muy útil como trabajo a realizar antes de una iteración son las <em>condiciones de
satisfacción</em> de las historias de usuario a desarrollar en dicha iteración por parte del cliente.</p>

<p>Un <em>release burndown chart</em> muestra la cantidad de trabajo que queda por realizar al inicio de cada iteración.
Esto se convierte en un indicador visual de cómo y a qué velocidad se está acercando el equipo al objetivo
del proyecto.</p>

<p>La variabilidad es parte da cada estimación. No importa cuánto esfuerzo se ponga en mejorarlas, un equipo nunca
será capaz de estimar perfectamente.</p>

<p>No gestionar la velocidad individualmente. Se debe incentivar siempre que sea posible que todos los miembros
del equipo trabajen como un todo, como un único equipo.</p>

<p>Las estimaciones y planificaciones ágiles funcionan porque se separan las estimaciones de tamaño y de duración:
puntos historia * velocidad = duración</p>

<p>Las planficaciones tradicionales se enfocan en las tareas para crear el producto, mientras que las planificaciones
ágiles se centran en las funcionalidades que desea el usuario.</p>

<p>Cuando creamos un plan al principio de un proyecto y no lo actualizamos con los nuevos conocimiento adquiridos,
estamos perdiendo la oportunidad de sincronizar nuestro proyecto con la realidad.</p></blockquote>

<h2>Conceptos</h2>

<ul>
<li><a href="http://gzurita.blogspot.com.es/2006/07/idea-valiosa-el-cono-de-incertidumbre.html">Cono de incertidumbre</a></li>
<li><a href="http://ow.ly/hFQSx">Velocidad</a></li>
<li><a href="www.youtube.com/watch?v=lGXLe9RiJyY">Commitment-driven iteration planning</a>:
Una aproximación guiado por el compromiso is una alternativa a la
planificación de la iteración. El equipo va añadiendo historias a la iteración de una en una mientras que ellos
se puedan comprometer a entregarlas. Las historias son seleccionadas, descompuestas en tareas y éstas estimadas.
De una en una. En la aproximación de planificar basándose en la velocidad, se eligen un conjunto de historias
cuyas estimaciones sean iguales o menores que la velocidad del equipo.</li>
<li><a href="http://stackoverflow.com/a/3700855/1111676">Condiciones de satisfacción</a></li>
<li><a href="https://www.google.es/search?q=burndown+bar+chart&amp;tbm=isch">burndown bar chart</a></li>
</ul>


<h2>Otras lecturas y enlaces relacionadas</h2>

<ul>
<li><a href="http://jmbeas.es/guias/">Guía de conceptos ágiles</a></li>
<li><a href="http://twitter.com/joserra_diaz/">Jose Ramón Díaz</a>, de <a href="http://www.agilar.org/">Agilar</a>,
habla de <a href="http://najaraba.blogspot.com.es/2013/02/la-estimacion-agil-de-proyectos-puntos.html">estimaciones ágiles</a>
en su blog.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[En el principio... fue la l&iacute;nea de comandos]]></title>
    <link href="http://rchavarria.github.io/blog/2012/10/25/en-el-principio-fue-la-linea-de-comandos/"/>
    <updated>2012-10-25T10:25:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2012/10/25/en-el-principio-fue-la-linea-de-comandos</id>
    <content type="html"><![CDATA[<h4>En el principio... fue la línea de comandos</h4>




<h5>Neal Stephenson</h5>


<p><img class="right" src="http://curiosoperoinutil.com/wp-content/uploads/2006/12/Neal-Stephenson-En-el-principio-era-la-linea-de-comandos.jpg" width="198" height="296" title="En el principo fue la linea de comandos" ></p>

<h2>Por qué lo he leído</h2>




<p>Había oído hablar de este libro en la universidad, y me picó la curiosidad, pero nunca me había decidido a encontrarlo y leerlo. Pero hace poco, viendo uno de los <a href="http://www.youtube.com/user/desarrollowebcom?feature=watch">hangouts de Desarrollo Web</a>, lo comentaron y no perdí ni un minuto. Lo descargué y a leer se ha dicho.</p>


<p></p>

<!-- more -->




<h2>Qué esperaba</h2>




<p>No recuerdo muy bien qué esperaba. Siempre había oído hablar de este libro en contextos de sistemas operativos, ordenadores antiguos. Temas más bien históricos. Así que, lo que esperaba era una especie de <em>Historia de los sistemas operativos</em></p>




<h2>Qué encontré</h2>




<p>Neal Stephenson cuenta una historia, la historia de los sistemas operativos, no hasta nuestros días, porque el libro tiene sus añitos, pero sí una historia que resulta bastante actualizada. La verdad es que todo aquello que cuenta sobre Apple y Microsoft, todavía sigue vigente hoy en día. Hay más actores, sí (Google por ejemplo), el hardware es muy distinto (móviles, tablets), pero la esencia persiste todavía.</p>




<h2>Conclusiones</h2>




<p>En definitiva, el libro me ha encantado. No es sólo porque el autor critica a varias super-empresas (que siempre gusta ver cómo reciben los poderosos), no es sólo por el tono de humor que usa Neal, no es sólo porque es un libro muy geek. Es por todo eso y además porque es un clásico, y sólo leyéndolo se entiende por qué es un clásico.</p>


<p>Si a eso le añadimos que lo puedes adquirir libremente y que está disponible una traducción al castellano, ya no hay escusa para no leerlo.</p>


<p>Un libro muy recomendable, que se puede leer de una sentada (o casi)</p>




<h2>Pasajes que quiero recordar de este libro</h2>




<blockquote>Solo hay dos modos de vender un producto (software): precio y funcionalidades. Cuando los sistemas operativos son gratuitos, las compañías de sistemas operativos no pueden competir mediante precio, así que compiten mediante las funcionalidades. [...] Esto explica por qué Microsoft añadió un navegador a su sistema operativo, por ejemplo.</blockquote>




<blockquote>Así como la interfaz de línea d ecomandos abre un canal mucho más direcot y explícito entre usuario y máuqina que la GUI, lo mismo suced con palabras, escritor y lector comparado con Disney (que es todo imagen)</blockquote>




<blockquote>La Disney y Apple/Microsoft están en el mismo negocio: cortocircuitar la laboriosa y explícita comunicción verbal con interfaces de disño caro.</blockquote>




<blockquote>El problema es que una vez que nos hemos librado d ela capacidad de juzgar lo bueno y lo malo, loverdadero y lo falso, ya no queda cultura. La capacidad de juicio, de creencia, es el fin mismo d etener una cultura.</blockquote>




<blockquote>¿Por qué triunfan Miscrosoft y Apple si nos engañan con sus GUI's? Porque estamos demasiado ocupados hoy en día como para comprenderlo todo con detalle. Y es mejor comprenderlo por una interfaz, oscuramente, que no comprenderlo en absoluto.</blockquote>




<blockquote>Lo primero que hicieron los hackerrs de Apple cuando consiguieron que MacOS fuese funcional fue recrear la interfaz de Unix, para poder hacer algún trabajo útil. En aquel momento, en lo que concernía a los hackers de Apple, la muy pregonada GUI del Mac era un impedimento, algo a evitar [...]</blockquote>




<blockquote>Unix es el <a href="https://www.google.es/search?q=hole+hawg&amp;hl=es&amp;sa=X&amp;prmd=imvns&amp;tbm=isch&amp;tbo=u&amp;source=univ&amp;ei=xMF-UJ_zNJOyhAfVr4G4Bw&amp;ved=0CCMQsAQ&amp;biw=1280&amp;bih=933">hole hawg</a> de los sistemas operativos.</blockquote>


<p></p>

<blockquote>Al tratar de comprender el fenómeno Linux tenemos que contemplar no a un único innovador, sino na especia de extraña Trinidad: Linus Torvals (por Linux), Richard Stallman (por las herramientas GNU) y Bill Gates (por el abaratamiento del hardware). Elimínese cualquiera d elos 3, y Linux no existiría.</blockquote>




<blockquote>A menudo, este tipo de archivos pueden encontrarse en un directorio con el nombre <code>/src</code>, que es la <em>abreviatura hebraica</em> del hacker para source, fuente.</blockquote>




<blockquote>Si hubiera algún ordenador, en algún lugar, que pudiera escupir unikversos con valores aleatoriamente escogidos para sus constantes fundamentales, por cada universo como el nuestro produciría 10^229 universos fallidos [...] así que cada vez que tu meñique pulsa ENTER, lo estás intentando.</blockquote>




<h2>Otras lecturas y enlaces relacionadas</h2>




<ul>
    <li>Página de <a href="http://biblioweb.sindominio.net/telematica/command_es">descarga del libro</a></li>
    <li><a href="http://es.wikipedia.org/wiki/En_el_principio_fue_la_l%C3%ADnea_de_comandos">Entrada del libro en la Wikipedia</a></li>
    <li>Otro libro bastante conocido de Neal Stephenson es <a href="http://es.wikipedia.org/wiki/Criptonomic%C3%B3n">Criptonomicón</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lean software development]]></title>
    <link href="http://rchavarria.github.io/blog/2012/10/10/lean-software-development/"/>
    <updated>2012-10-10T10:10:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2012/10/10/lean-software-development</id>
    <content type="html"><![CDATA[<h4>Lean software development</h4>




<h5>Mary Poppendieck, Tom Poppendiek:</h5>


<p><img class="right" src="http://www.poppendieck.com/images/Agiletoolkit.jpg" width="250" height="332" title="Lean software development" ></p>

<h2>Por qué lo he leído</h2>


<p>Después de leer <a href="http://rchavarria.wordpress.com/2012/07/06/scrum-y-xp-desde-las-trincheras/">Scrum y XP desde las trincheras</a>, me quedé con ganas de leer algún libro más de temática Agile, de desarrollo de software siguiendo prácticas lean. Me llaman mucho la atención las metodologías ágiles de desarrollo de software, y creo que son una buena alternativa a las metodologías tradicionales (aunque voy descubriendo otras como <a href="http://www.javiergarzas.com/2012/09/metodologia-gil-fdd-1.html">FDD</a> que parecen igualmente interesantes).</p>

<p>Busqué un libro <em>antiguo</em>, alguno donde pudiera leer los inicios de estas metodologías, para así poder contextualizar todo lo que escucho y leo de las metodologías ágiles a diario.</p>

<!-- more -->




<h2>Qué esperaba</h2>


<p>Esperaba un libro dedicado exclusivamente al software, que expusiera ideas que podían parecer pasadas de moda, pero que siguieran de actualidad en algún sentido.</p>

<p>No había oído nunca nada de los autores, así que tampoco me había formado grandes espectativas, simplemente, quería conocer los inicios de las metodologías ágiles.</p>

<h2>Qué encontré</h2>


<p>Me encontré un libro muy útil, y aunque es de hace bastantes años (para tratar sobre desarrollo de software), es de total actualidad. De hecho, me sorprende que todavía haya empresas, personas, organizaciones, que no hayan oido hablar de los conceptos que se hablan en el libro.</p>

<h2>Conclusiones</h2>


<p>Me sorprendió mucho que el origen de las metodologías ágiles esté en la industria de la manufactura. Me parece difícil que una metodología haya pasado de esa industria a la del desarrollo del software. Pero como indican los autores (y es la idea principal del libro), no se pueden transladar <strong>prácticas</strong> de un entorno a otro, hay que transladar <strong>principios</strong> (ideas) y crear las nuevas prácticas para el nuevo entorno.</p>

<p>Y es de lo que trata este libro, de exponer una serie de herramientas, un <em>toolkit</em>, para ayudar a comprender y a transladar una serie de principios, que está demostrado que funcionan en una industria, al desarrollo del software.</p>

<h2>Otras lecturas y enlaces relacionadas</h2>


<ul>
    <li><a href="http://www.amazon.com/Lean-Software-Development-Agile-Toolkit/dp/0321150783">Lean software development</a>, en Amazon</li>
    <li><a href="es.wikipedia.org/wiki/Lean_software_development">Lean software development</a>, en la Wikipedia (español)</li>
    <li>Web de los autores del libro, los <a href="http://www.poppendieck.com">Poppendieck</a></li>
</ul>


<h2>Pasajes que quiero recordar de este libro</h2>


<blockquote>Los siete principios del pensamiento Lean:
<ol>
    <li>Elimina desperdicios</li>
    <li>Amplifica el aprendizaje</li>
    <li>Decide tan tarde como sea posible</li>
    <li>Entrega tan rápido como sea posible</li>
    <li>Fortalece al equipo</li>
    <li>Trabajar para que haya integridad</li>
    <li>Centrarse en el todo</li>
</ol>
</blockquote>


<blockquote>Cualquier cosa que no crea valor para el cliente es desperdicio. Y, sí, los defectos (bugs, incidencias, ...) son desperdicion.</blockquote>


<blockquote>Es difícil encontrar control sin realimentación (feedback), porque la realimentación de mucho mejor control y determinismo que complicados procesos de control con algoritmos predefinidos.</blockquote>


<blockquote>En la mayoría de los casos, incrementar la realimentación, en lugar de reducirla con rigurosos procesos secuenciales, es la forma más efectiva de lidiar con entornos y proyectos de desarrollo de software en problemas.</blockquote>


<blockquote><em>Set-based software development</em>: se desarrollan varias alternativas, se comunican las restricciones (en lugar de las soluciones) y se deja que la solución emerja cumpliendo todas las restricciones.</blockquote>


<blockquote>Retrasar decisiones irreversibles mientras se reduce la incertidumbre tiene valor económico. Esto lleva a tomar mejores decisiones, limita los riesgos, ayuda a gestionar la complejidad, reduce el desperdicio y hace felices a los clientes.</blockquote>


<blockquote>Los procesos de desarrollo ágiles se pueden entender como la creación de opciones que permiten retrasar las decisiones hasta que las necesidades del cliente son mejor entendidas y haya menos riesgo.</blockquote>


<blockquote>Los marines planifican, pero no predicen. Comprenden la esencia de las situaciones, buscan simplificar las suposiciones y alternan aproximaciones. Cuando entran en una misión, la estructura organizativa se diluye, y aquellos que están en el frente, quienes tienen acceso a la información más directa, son los responsables de tomar las decisiones.</blockquote>


<blockquote>El principio 'entrega tan rápido como sea posible' complemente a 'decide tan tarde como sea posible'. Cuanto más rápido entregues, más podrás retrasar tus decisiones.</blockquote>


<blockquote>(hablando de los <em>pull systems</em>) en lugar de planificar, sistemas como Kanban consiguen que los jefes no intervengan porque cada persona sabe qué hacer en cada momento.</blockquote>


<blockquote>Creemos que transferir prácticas de un entorno a otro es, casi siempre, un error. En lugar de ello, uno debe entender los principios fundamentales detrás de las prácticas y transformar esos principios en nuevas prácticas para el nuevo entorno.</blockquote>


<blockquote>El mejor modo de mantener el conocimiento sobre un sistema y que sea mantenible es entregar, junto con el código, un conjunto de tests automáticos, complementados por un modelo superficial de alto nivel creado al final del esfuerzo inicial de desarrollo.</blockquote>


<blockquote>Integridad conceptual significa que los conceptos centrales de un sistema son vistos contínuos, como un todo cohesionado. La clave para alcanzarla es la efectividad en los mecanismos de comunicación desarrollados por los grupos que conforman el sistema según se van tomando las decisiones que afectan al resto de grupos.</blockquote>


<blockquote>¿De dónde ha tomado la genete la idea de que todo buen diseño ocurre al inicio de un proyecto? Mucha gente encargada de desarrollar productos entiende que los grandes diseños evolucionan con el tiempo.</blockquote>


<blockquote>¿Refactorizar es rehacer el trabajo? Mejorar un diseño durante el proceso de desarrollo no es rehacer el trabajo, es una buena práctica de diseño.</blockquote>


<blockquote>Los tests proporcionan una base en la que apoyarse para que los desarrolladores realizen cambios a lo largo de todo el proceso de desarrollo.</blockquote>


<blockquote>La metodologías tradicionales de desarrollo software tienen la manía de medir tareas complejas y desestructuradas a través de partir la tarea en otras más pequeñas. La forma de estar seguro de que todo está medido es mediante agregación, es decir, mover la medida a un nivel superior, no a un nivel inferior.</blockquote>


<blockquote>Un contrato con precio fijado donde el vendedor espera obtener beneficios de los cambios pedidos, combinado con mecanismos rigurosos de aceptación de cambios para controlar el gasto, puede doblar aproximadamente el coste y tiempo que se tarda en desarrollar un proyecto a la vez que produce un resultado de pésima calidad.</blockquote>


<blockquote>Un contrato de precio flexible está diseñado para lidiar con la incertidumbre y complejidad, pero esto no elimina el riesgo, sino que lo traslada del vendedor al cliente.</blockquote>


<h2></h2>

]]></content>
  </entry>
  
</feed>
