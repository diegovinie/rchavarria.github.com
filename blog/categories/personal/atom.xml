<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: personal | R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/blog/categories/personal/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2016-11-07T22:30:29+01:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Practical Vim]]></title>
    <link href="http://rchavarria.github.io/blog/2016/07/17/practical-vim/"/>
    <updated>2016-07-17T23:15:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/07/17/practical-vim</id>
    <content type="html"><![CDATA[<h6>de Drew Neil</h6>

<h3>Por qué lo he leído</h3>

<p><img class="left" src="https://raw.githubusercontent.com/rchavarria/blog-post-incubator/master/published-book-notes/img/practical-vim.jpg"></p>

<p>Hace un tiempo decidí que quería <a href="http://rchavarria.github.io/blog/2014/10/11/aprendiendo-vim/">aprender a utilizar Vim</a>. Entre los muchos
recursos para aprender se encontraba este libro, pero encontré más prácticos
una serie de videos. Pero más adelante, escuchando el podcast <a href="http://giantrobots.fm/">Giant Robots</a>,
hablaron de este libro, y cuando recibes varias señales, quiere decir algo.</p>

<!-- more -->


<h3>De qué trata el libro</h3>

<p>El libro no es un manual desde cero. Tampoco es un manual avanzado. Es un
conjunto de trucos, de sugerencias, que trata de explicar y convencer al lector
de la filosofía y bondades del editor. Entre estos trucos encontrarás muchos
que te sean de utilidad, y otros tantos tan extraños que ni te molestarás en
entenderlos. Pero lo más importante es que describe una <em>forma de pensar en
Vim</em>. A la hora de editar ficheros de texto no hay una única forma de hacer las
cosas, ni tampoco una forma superior a otras alternativas, pero en Vim sí que
hay una filosofía, una idea de atacar cada edición. Este libro te sumerge en
ella.</p>

<h3>Conclusiones y valoración</h3>

<p>El libro es una maravilla. Está lleno de trucos. Muchos de ellos los conocía, y
otros ni siquiera sabía que existían. En cambio, otros, después de llevar un
tiempo usando Vim, tenía una ligera sospecha de que se podrían hacer, pero no
había invertido el tiempo en averiguar cómo.</p>

<p>Si tienes ganas de incarle el diente a un editor que sobrevive al paso del
tiempo, échale un vistazo al libro.</p>

<p>Debería echar un vistazo al proyecto de Mozilla <a href="https://github.com/mozilla/doctorjs">Doctor JS</a>, que contiene la
herramienta <code>jsctags</code>, para generar ficheros ctags de proyectos JavaScript.</p>

<h3>Frases que me gustaría recordar</h3>

<blockquote><p>La fórmula del punto: una pulsación de tecla para mover, una pulsación de
tecla para ejecutar la edición</p></blockquote>

<!-- -->


<blockquote><p>La estrategia óptima de edición es hacer que tanto el cambio como el
movimiento sean repetibles</p></blockquote>

<!-- -->


<blockquote><p>Podemos hacer que el comando deshacer opere en palabras, frases o párrafos
enteros solamente haciendo un uso corrrecto de la tecla <code>Esc</code></p></blockquote>

<!-- -->


<blockquote><p>La combinación de operadores con movimientos forman una especie de gramática.
Aprender nuevos movimientos y operadores is como aprender el vocabulario de
Vim. Si seguimos las reglas sencillas de la gramática, podremos expresar más
y mejores ideas según vaya creciendo nuestro vocabulario</p></blockquote>

<!-- -->


<blockquote><p>Una buena forma de trabajar con macros sería: normalizar la posición del
cursor, llegar hasta el objetivo con un movimiento repetible, hacer que la
macro aborte cuando el movimiento falle y no encuentre el objetivo</p></blockquote>

<!-- -->


<blockquote><p>La sintaxis para definir un rango en los Ex commands es muy flexible. Se
pueden mezclar números de línea, marcas y patrones de búsqueda. Y se puede
aplicar un offset a cada uno de ellos</p></blockquote>

<!-- -->


<blockquote><p>Intenta crear el hábito de crear una marca global (<code>m{capital letter}</code>) antes
de usar cualquier comando que interacciones con la lista de arreglos rápidos,
lista de buffers o lista de argumentos</p></blockquote>

<!-- -->


<blockquote><p>Para editar una macro grabada en el registro <code>q</code>, simplemente podemos pegar
el contenido de dicho registro con <code>"qy</code>, editar la línea y modificar el
registro <code>q</code> con <code>"qy$</code></p></blockquote>

<h3>Qué he aprendido</h3>

<p>Hay toda una serie de nuevos comandos, combinaciones de ellos y herramientas
que todavía no conocía o que he encontrado muy útiles:</p>

<ul>
<li><code>~</code>: intercambia el carácter actual de mayúsculas a minúsculas y viceversa</li>
<li><code>g~</code>, <code>gu</code>, <code>gU</code>: intercambia mayúsculas/minúsculas en la selección, pasa a minúsculas, pasa a mayúsculas, respectivamente.</li>
<li><code>&lt;C-h&gt;</code>, <code>&lt;C-w&gt;</code>, <code>&lt;C-u&gt;</code>: en modo inserción o modo comando, borra hacia atrás un carácter, una palabra o la línea completa, respectivamente.</li>
<li><code>&lt;C-r&gt;{register}</code>: en modo inserción, inserta el texto desde el registro <code>register</code></li>
<li><code>&lt;C-r&gt;&lt;C-p&gt;{register}</code>: idem, pero más inteligentemente, ya que arregla cualquier error de indentación por descuido</li>
<li><code>&lt;C-v&gt;{code}</code>: en modo inserción, inserta un carácter especial por su código <code>code</code></li>
<li><code>R</code>: nos lleva del modo normal al <em>modo de reemplazo</em>, donde cada carácter insertado reemplaza a un carácter existente</li>
<li><code>v</code>, <code>V</code>, <code>&lt;C-v&gt;</code>: entra en los distintos modos visuales: de carácter, de línea o de bloque.</li>
<li><code>o</code>: dentro del modo visual, la selección tiene dos extremos, con este comando intercambiamos entre ellos, de forma que podemos expandir la selección hacia adelante o hacia atrás</li>
<li><code>.</code>, <code>%</code>: en el modo comando tienen significado especial cuando se especifica un rango. Significan la línea actual y todas las líneas, respectivamente.</li>
<li><code>:t</code>: comando para duplicar líneas. <code>:3t 5</code> copia la línea 3 y la pega en la 5. <code>:.+2t .</code> copia dos líneas más abajo y la pega en la línea actual</li>
<li><code>:m</code>: comando para mover líneas</li>
<li><code>@:</code>: repite el último Ex Command, lo cual es muy útil cuando estamos haciendo cambios en múltiples ficheros, o vamos recorriendo la lista de búferes</li>
<li>en modo comando, se pueden ejecutar comandos del modo normal, con el Ex Command <code>normal</code>. Por ejemplo, <code>:%normal A;</code> hace lo siguiente: <code>:</code> entramos en modo comando, <code>%</code> indica que afectará a todas las líneas del fichero, <code>normal</code> indica que introduciremos un comando del modo normal, <code>A;</code> es un comando del modo normal, y lo que hace es añadir al final de la línea el carácter <code>;</code>.</li>
<li><code>&lt;C-o&gt;</code>: vuelve atrás en la lista de saltos (cambios de buffer, grandes saltos de líneas, búsquedas,...)</li>
<li><code>&lt;Tab&gt;</code>, <code>&lt;C-n&gt;</code>, <code>&lt;Left&gt;</code> y <code>&lt;S-Tab&gt;</code>, <code>&lt;C-p&gt;</code>, <code>&lt;Right&gt;</code>: para movernos adelante y atrás durante el autocompletado</li>
<li><code>&lt;C-r&gt;&lt;C-w&gt;</code>: en modo comando, copia la palabra debajo del cursor y la pega en la línea de comandos</li>
<li><code>&lt;C-p&gt;</code>, <code>&lt;C-n&gt;</code>: después de entrar en el modo comando con <code>:</code> o <code>/</code>, podemos pulsarlos para ir hacia adelante o atrás en el historial de comandos o búsquedas</li>
<li><code>q/</code>: abre la ventana <em>línea de comandos</em> con el historial de búsquedas</li>
<li><code>q:</code>: abre la ventana <em>línea de comandos</em> con el historial de comandos</li>
<li><code>&lt;C-f&gt;</code>: en modo comando, cambia a la ventana de línea de comandos</li>
<li><code>:read !{shell command}</code>: pone el resultado del comando shell en el buffer actual</li>
<li><code>:write !{shell command}</code>: usa el contenido del buffer actual como entrada para el comando shell</li>
<li><code>:bnext</code>, <code>:bprevious</code>, <code>:bfirst</code>, <code>:blast</code>: para moverse por los buffers</li>
<li><code>:edit {path to a dir}</code>: abre el contenido del directorio en un buffer, de forma que podemos navegar el sistema de ficheros sin necesidad de ningún plugin. <code>.</code> significa el actual directorio de trabajo. <code>:explore</code> o <code>:E</code> hace lo mismo. <code>:Sexplore</code> divide los buffers horizontalmente, <code>:Vexplore</code> divide los buffers verticalmente</li>
<li>igual que existen <code>w</code>, <code>b</code>, <code>e</code> y <code>ge</code> (mueve al final de la palabra anterior), existen <code>W</code>, <code>B</code>, <code>E</code> y <code>gE</code> para hacerlo con PALABRAS, no con palabras</li>
<li><code>is</code>, <code>as</code>, <code>ip</code>, <code>ap</code>: son movimientos (que se pueden usar con los comandos <code>d</code>, <code>c</code>, <code>y</code>,...) que engloban la actual frase (sentencia) o párrafo</li>
<li><code>&lt;C-o&gt;</code>, <code>&lt;C-i&gt;</code>: para movernos adelante y atrás en los saltos que vamos dando</li>
<li><code>:changes</code>: muestra el historial de cambios</li>
<li><code>g;</code>, <code>g,</code>: para movernos adelante y atrás por el historial de cambios</li>
<li><code>gi</code>: vuelve al último punto donde abandonamos el modo de inserción, entrando en dicho modo</li>
<li><code>"_d{motion}</code>: borra lo indicado pero no copia el contenido en ningún sitio (bueno, sí, en el registro <code>_</code>, pero éste no guarda el contenido). Si no se indica nada, los comandos <code>x</code>, <code>s</code>, <code>d</code> y <code>c</code> modifican el registro sin nombre, con lo que pueden eliminar el contenido que hayamos copiado con <code>y</code>.</li>
<li>el registro de copiado es el <code>0</code>, y éste no es modificado nunca por los comandos <code>x</code>, <code>s</code>, <code>d</code> y <code>c</code>.</li>
<li>si al copiar o borrar nombramos un registro con mayúsculas, el contenido se añadirá a lo que contenga el registro</li>
<li><code>\v</code>: activa la magia en los patrones de búsqueda. Hace que todos los carácteres excepto los alfanuméricos y <code>_</code> tengan un significado especial</li>
<li><code>:%s///gn</code>: cuenta las ocurrencias del patrón actual de búsqueda</li>
<li>flags del comando de sustitución: <code>g</code> reemplaza todas las ocurrencias en una línea, no solo la primera; <code>c</code> pide confirmación, <code>n</code> cuenta las ocurrencias, <code>&amp;</code> reusa los últimos flags</li>
<li><code>:%s//\=@0/g</code>: sustituye todas las ocurrencias (flag <code>g</code>) de todas las filas (rango <code>%</code>) del último patrón buscado (<code>//</code>) con el contenido del registro <code>0</code> (<code>\=</code> evalúa una expresión, <code>@0</code> accede al registro <code>0</code>)</li>
<li><code>&amp;</code>: repite los cambios hechos por el último comando de sustitución <code>:s/pattern/.../</code></li>
<li><code>g&amp;</code>: repite el último comando de sustitución en todo el fichero</li>
<li><code>:vimgrep {pattern} {file pattern}</code>: busca el patrón en la lista de ficheros y rellena la lista <em>quickfix</em>. Luego podemos pasar el resultado a la lista de argumentos con el plugin <em>qargs</em></li>
<li><code>:global/{pattern}/{command}</code> o <code>:g</code>: permite ejecutar un comando en cada línea que cumpla con el patrón</li>
<li><code>&lt;C-]&gt;</code>: mover hasta la definición de la palabra clave (tag) donde se encuentra el cursor</li>
<li><code>&lt;C-t&gt;</code>: vuelve atrás en la última tag visitada</li>
<li><code>:copen</code>, <code>:cclose</code>: abre/cierra la ventana de lista <em>quickfix</em></li>
<li><code>:cnext</code>, <code>:cprevious</code>, <code>:cfirst</code>, <code>:clast</code>: para moverse por los marcadores de la lista quickfix</li>
<li><code>:colder</code>, <code>:cnewer</code>: para pasar de listas quickfix más nuevas a las más viejas y viceversa</li>
</ul>


<h3>Recursos relacionados</h3>

<ul>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/practical-vim-by-drew-neil.markdown">Notas tomadas sobre Practical Vim</a>, y en <a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/practical-vim-by-drew-neil.en.markdown">inglés</a> también</li>
<li>Debería echar un vistazo al proyecto de Mozilla <a href="https://github.com/mozilla/doctorjs">Doctor JS</a>, que contiene la
herramienta <code>jsctags</code>, para generar ficheros ctags de proyectos JavaScript.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Software Craftsman]]></title>
    <link href="http://rchavarria.github.io/blog/2016/03/15/the-software-craftsman/"/>
    <updated>2016-03-15T22:08:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2016/03/15/the-software-craftsman</id>
    <content type="html"><![CDATA[<h6>de Sandro Mancuso</h6>

<p><img class="left" src="http://www.informit.com/ShowCover.aspx?isbn=0134052501" width="230" height="295" title="The Software Craftsman" ></p>

<h3>Por qué lo he leído</h3>

<p>Me encanta programar, me encanta escribir software, escribir código. Me encanta
resolver problemas, puzles. Me encanta la tecnología. Y me encanta hacer las
cosas bien, poner cariño en lo que hago. La ideología de Software Craftsmanship
va de todo esto. Y me gusta la metáfora. Mi padre es carpintero, artesano, y me
gustaría poner el mismo cuidado en mi trabajo que él pone en el suyo. La
excelencia técnica es lo que más me gusta del desarrollo software.</p>

<!-- more -->


<h3>Qué esperaba</h3>

<p>Me esperaba un libro donde se hablara de buenas prácticas, de ningún lenguaje
de programación en particular, si no de todos en general. De qué significa ser
un artesano, de dedicar tu vida a una profesión, de hacer lo que te gusta, de
pasión, de profesionalidad.</p>

<p>Esperaba consejos sobre qué hacer, qué no hacer, a quién considerar un modelo.
¿Una guía paso a paso de cómo ser considerado un craftsman? Nooo, pero sí
muchas acciones que me acercaría a ello.</p>

<h3>Qué encontré</h3>

<p>Todo eso y más. Aparte de todo lo esperado, Sandro tiene muchísimas
<em>batallitas</em> que contar. No solamente encontré conceptos ampliamente aceptados,
también encontré multitud de experiencias personales de una persona que ha
trabajado y trabaja muy duro para hacer de la profesión una profesión mucho
mejor.</p>

<p>Un capítulo interesantísimo es el que trata sobre la historia del Software
Craftsmanship.</p>

<h3>Conclusiones</h3>

<p>Sandro ha escrito un libro espectacular y soberbio. El libro cubre el concepto
de Craftsmanship de arriba a abajo y está ejemplificado con experiencias
personales. El libro está recomendado por muchísimo profesionales muy valorados
en la industria del software, y con razón. Es un placer leerlo.</p>

<p>De acuerdo, el tema me interesa, y me apasiona, así que yo encuentro normal que
el libro me haya encantado. Lo recomendaría a todos aquellos que estén
preocupados por escribir software de calidad, para aquellos que les preocupe
los aspectos técnicos del desarrollo del software.</p>

<h3>Qué he aprendido</h3>

<p>Escribir temas técnicos en tu blog ayudarán a quien venga después de ti. Porque
encontrarán los conceptos descritos con los mismos ojos que tienen ellos ahora.
Incluso si programadores más experimentados han escrito sobre el tema
anteriormente, siempre merece la pena escribir sobre lo que estamos aprendiendo
en este momento.</p>

<p>Es muy fácil decir que un software está muy mal escrito. Es más fácil quejarse,
o incluso reírse del autor. Pero la pregunta es: eres lo suficientemente bueno
como para hacerlo mejor?</p>

<p>¿Qué motiva al trabajor del conocimiento? <strong>Autonomía</strong>, <strong>maestría</strong> y
<strong>propósito</strong>.</p>

<h3>Frases que me gustaría recordar</h3>

<blockquote><p>Sin excelencia técnica, cualquier proyecto software será una experiencia
dolorosa, frustrantte y cara.</p></blockquote>

<!-- -->


<blockquote><p>Las metodologías ágiles ayudan a las empresas a hacer lo correcto, mientras
que Software Craftsmanship ayuda a los programadores y empresas a hacer las
cosas de la forma correcta.</p></blockquote>

<!-- -->


<blockquote><p>Software Craftsmanship es poner toda la responsabilidad, profesionalidad,
pragmatismo y orgullo de vuelta al desarrollo de software.</p></blockquote>

<!-- -->


<blockquote><p>Descubrimiento deliberado: hay que intentar expandir el conocimiento que
tenemos en lo que estemos trabajando, aunque creamos que lo conocemos siempre
habrá algún asunto que podemos explorar. Debemos exponernos constantemente a
situaciones donde podamos aprender algo nuevo acerca del contexto en el que
estamos.</p></blockquote>

<!-- -->


<blockquote><p>Incluso teniendo tiempo, algunos programadores deciden no automatizar sus
tests. <strong>Esto es ser egocéntrico</strong>. Sólo piensa en sus tareas, no en el resto
de la gente involucrada en el proyecto y todo el tiempo que les consumirá no
tener tests.</p></blockquote>

<!-- -->


<blockquote><p>Un código limpio y mantenible permite a los programadores ir rápido y reducir
las probabilidades de introducir bugs.</p></blockquote>

<!-- -->


<blockquote><p>¿Qué motiva al trabajor del conocimiento? Autonomía, maestría y propósito.</p></blockquote>

<!-- -->


<blockquote><p>En lugar de decir a los demás qué hacer, los software craftsmen se sientan y
trabajan con otros desarrolladores, compartiendo su conocimiento, experiencia
y pasión. Los software craftsman están deseando compartir las cosas que hacen
para mejorar ellos mismos.</p></blockquote>

<!-- -->


<blockquote><p>Ser buenos en lo que hacemos, ser capaces de comunicarlo claramente, y lo más
importante, ser capaces de generar confianza, son habilidades esenciales para
cualquier desarrollador que esté dispuesto a liderar cambios.</p></blockquote>

<!-- -->


<blockquote><p>Lo que distingue a grandes programadores de los mediocres es cómo hacen que
el software funcione, no si el software funciona o no, si no el cómo.</p></blockquote>

<!-- -->


<blockquote><p>Sobre craftsmanship y pragmatismo: TDD no hace que los programadores vayan
más lentos. Escribir el código no es el cuello de botella. Lo que sí que lo
es es aprender y dominar una nueva habilidad, práctica o tecnología.</p></blockquote>

<!-- -->


<blockquote><p>No tengas miedo de ser <em>viejo</em> y seguir programando. No tengas miedo de hacer
lo que te gusta.</p></blockquote>

<!-- -->


<blockquote><p>Para muchos programadores, buscar un trabajo es solo una forma de vender sus
habilidades al mejor postor. Para profesionales que están interesados en una
carrera larga y próspera, un trabajo es algo más que eso. Es una inversión
constante en sus carreras. Aparte de las cosas por las que se nos paga,
deberíamos invertir toda nuestra dedicación, pasión, compromiso y
conocimiento que adquirimos fuera del trabajo en hacer nuestro actual entorno
de trabajo un lugar mejor.</p></blockquote>

<!-- -->


<h3>Recursos relacionados</h3>

<ul>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/the-software-craftsman-by-sandro-mancuso.markdown">Notas tomadas sobre The Software Craftsman</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mi CAS 2015]]></title>
    <link href="http://rchavarria.github.io/blog/2015/12/13/mi-cas-2015/"/>
    <updated>2015-12-13T21:48:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/12/13/mi-cas-2015</id>
    <content type="html"><![CDATA[<p>Me quedé sin chapa. Sin chapa de "Mi primera CAS". Conocí a varias personas que
la llevaban orgullosos. Espero que para ellos significara lo mismo que
significó para mí <a href="/blog/2012/11/08/mi-experiencia-en-la-cas2012/">mi primera CAS</a>.</p>

<p>Ésta, como aquella, ha sido una gran experiencia. La de este año ha sido
enooorme, comparada con la de Cáceres. Hemos asistido más de 700 personas. Ha
tenido que ser un trabajo monumental organizarla, así que desde aquí mis
agradecimientos y admiración a todos los que la han hecho posible:
organizadores, patrocinadores y voluntarios. Olé!</p>

<!-- more -->


<p>La conferencia fueron dos intensos días llenos de charlas interesantísimas. Dos
días que saben a poco. Sobretodo porque no he podido disfrutar de las cañas de
después, o las quedadas fuera del evento. Y también porque, a pesar de que
todos los asistentes estuviéramos en la misma sala para tomar café y comer, me
ha resultado imposible entablar conversaciones con todas las personas que
quería. ¡Agotador! Pero muy motivador a la vez.</p>

<p>Sigamos con las charlas a las que asistí, y qué me llevé de ellas:</p>

<h2><a href="http://www.slideshare.net/carlosble/cas2015-opening-improving-the-software">Apertura</a>, <a href="https://twitter.com/carlosble">Carlos Blé</a></h2>

<p>Carlos habló de la necesidad de hablar inglés, no porque sí, si no para
aprender de las fuentes. También habló de la importancia de hablar otro
lenguaje, extraño para los desarrolladores, el de negocio. De esta forma nos
entenderemos mejor ambas partes. Fue una charla muy inspiradora, fenommenal
como apertura. Me quedaría con la frase:</p>

<blockquote><p>Tú eres el único responsable de tu carrera</p></blockquote>

<h2><a href="https://www.youtube.com/watch?v=C6Sy0v19RAc&amp;t=2h14m00s">Your application is not your framework</a>, de <a href="https://twitter.com/ecomba">Enrique Comba</a></h2>

<p>¿Por qué cuando te preguntan por tu applicación dices qué framework estás
usando? Habla sobre qué hace de verdad tu aplicación. Enrique habló de muchos
conceptos alrededor de los frameworks: <em>convention over configuration</em>, mezcla
de lógica de negocio con la lógica impuesta por el framework. ¿Qué beneficios
trae separar la lógica de tu aplicación del framework? Separación de
responsabilidades, velocidad en los tests automáticos y sobretodo claridad en
el <strong>propósito</strong> y <strong>estructura</strong> de tu aplicación.</p>

<h2><a href="http://www.slideshare.net/PeterMarshall10/pete-marshall-casmadrid2015-continuous-delivery-in-legacy-environments">Continuous delivery</a>, de <a href="https://twitter.com/petemar5hall">Peter Marshal</a></h2>

<p>Peter compartió su experiencia en llevar a un equipo desde el desarrollo de una
aplicación <em>a la vieja usanza</em> hasta alcanzar puestas en producción diarias. En
las slides de la presentación encontrarás multitud de consejos para llevarlo a
cabo, pero yo me quedaría con estos conceptos o enseñanzas:</p>

<ul>
<li>La entrega contínua es enfocarse en la excelencia técnica</li>
<li>Conforme avanza el tiempo, el mayor problema de las aplicaciones con
problemas es que los bugs aumentan mientras que las funcionalidades
desplegadas disminuyen.</li>
<li>La clave está en la simplicidad</li>
<li>Lleva su tiempo madurar (equipo, producto, compañía,...)</li>
</ul>


<h2><a href="http://cas2015.agile-spain.org/charlas/">Building resilient integrations</a>, de <a href="https://twitter.com/cuvuligio">Dave Moore</a></h2>

<p>Esta charla tuvo su parte teórica y su parte práctica. De la parte teórica,
decir que debemos entender que los fallos están en todas partes, por lo que es
nuestro trabajo hacer software que no falle, que sea tolerante a fallos de
sistemas externos. Algunas técnicas para hacerlo podrían ser: tests automáticos
(no mienten, la documentación sí), aislar integraciones que herramientas de
terceros (creando interfaces que las separen de nuestra applicación), utilizar
nuestro propio modelo de datos, política de reintentos de conexión,...</p>

<p>En el taller de después tuvimos la oportunidad de poner todo esto en prática.
Un taller super divertido.</p>

<h2><a href="http://es.slideshare.net/juanignaciosl/continuous-integration-at-cartodb">Continuous integration in CartoBD</a>, de <a href="https://twitter.com/juanignaciosl">Juan Ignacio Sánchez</a></h2>

<p>Juan Ignacio empezó fuerte, comentando que, aunque hay millones de
herramientas, es el <strong>equipo</strong> quien realmente puede hacer que la integración,
entrega y despliegue contínuo funcionen.</p>

<p>¿Cómo lo hacen en CartoDB? Planeándolo desde antes que la gente entre a
trabajar con ellos, despligando desde el primer día, planes iterativos e
incrementales, tests, code reviews, pull requests, feature toggles, pequeñas
releases a grupos controlados de usuarios (canary releases), posibilidad de
hacer rollback rápidamente (pequeños despliegues llevan a que esto sea
posible), análisis post-mortem de grandes fallos, mucha instrumentación y
monitorización.</p>

<h2><a href="http://www.slideshare.net/lantoli/believe-it-or-not-keynote-cas-2015-55802209">Keynote técnica</a>, de <a href="https://twitter.com/lantoli">Leo Antolí</a></h2>

<p>Leo hizo incapié en lo más profundo de agile y lean: no te creas lo que te
cuenten, pruébalo y si te funciona úsalo, si no te funciona, descártalo. Hay
mucho estudios que dicen que una práctica es X veces mejor. Analiza esos
estudios y te darás cuenta de que son humo. Pon en duda el pair programming,
TDD, mejoras en productividad, code dojos, code retreats, craftsmanship, deuda
técnica, tasa de proyectos software fallidos,...</p>

<p>Como buena keynote, lo que me llevo de esta charla son pensamientos, dudas,
cuestiones. Debo entender que el software no es el fin, es un medio para
conseguir un fin. Deja de usar números no probados. Cuenta experiencias propias
(no sirven para demostrar nada, pero son algo real). Y sobretodo, mantén un
<strong>espiritu crítico</strong>.</p>

<h2><a href="https://www.youtube.com/watch?v=_CcO9upHiDU&amp;t=9m20s">Keynote viernes</a>, de <a href="https://twitter.com/rachelcdavies">Rachel Davis</a></h2>

<p>Esta keynote trató de introducir cambios, de introducir tiempo para el
aprendizaje. Debemos crear tiempo para ello a lo largo de nuestra semana. No
tengas prisa en introducir cambios, la gente necesita <strong>tiempo</strong>.</p>

<p>De esta keynote quiero recordar dos consejos de Rachel: comparte lo aprendido
(por ejemplo en esta CAS), invierte tiempo en profundizar en lo aprendido.</p>

<h2><a href="https://medium.com/@borillo/el-modelo-de-desarrollo-mete-saca-be17304ad1df#.b0vwf7ben">Escapando del modelo mete-saca</a>, de <a href="https://twitter.com/borillo">Ricardo Borillo</a></h2>

<p>¿Estamos seguros de que lo que quiere el usuario es un simple sistema CRUD? ¿No
hay una forma de aportar más valor? Un CRUD es muy genérico, seguro que no
resuelve las necesidades del usuario con la mejor eficiencia.</p>

<p>Ricardo analizó qué nos lleva a este modelo: pobres historias de usuario, mal
definidas, que nos llevan a hacer cosas generales; los frameworks (como ORMs);
y arquitecturas de usuario pobres, con componentes maestro-detalle, consumo de
apis REST,... todo esto nos conduce al modelo mete-saca.</p>

<p>La solución propuesta por Ricardo, un único punto de entrada (en contraposición
a los múltiples endpoints REST) con una arquitectura <a href="https://en.wikipedia.org/wiki/Command%E2%80%93query_separation#Command_Query_Responsibility_Segregation">CQRS</a>. Cada <em>comando</em>
correspondería con una acción del usuario, una historia de usuario, un caso de
uso muy específico, que nos conduciría a tener las mínimas funcionalidades
desarrolladas con la máxima eficiencia y la mejor usabilidad para el usuario.</p>

<h2><a href="http://www.slideshare.net/programania/software-economics-tradeoffs-of-decoupled-softwre">Economía del software</a>, de <a href="https://twitter.com/artolamola">Luis Artola</a> y <a href="https://twitter.com/ggalmazor">Guillermo Gutierrez</a></h2>

<p>Luis y Guillermo nos condujeron en un viaje apasionante desde las necesidades
de negocio hasta detalles del código, tales como las dependencias. En el
camino, comentaron multitud de conceptos, de buenas prácticas, hicieron
referencia a charlas de todo el evento (lo que pone de manifiesto lo amplio de
su charla).</p>

<p>Concepto clave: negocio quiere entrega de <strong>valor</strong>, minimizando <strong>costes</strong> y
<strong>riesgos</strong> pero manteniendo <strong>opciones</strong> abiertas. El mayor en el software es
el coste de evolución. Cuanto más difícil sea cambiar algo, más costoso será a
lo largo del tiempo. El desarrollo iterativo e incremental reduce los riestos.
El despliegue de pequeñas funcionalidades, interfaces, inversión de control son
formas de crear opciones.</p>

<h2><a href="http://eamodeorubio.github.io/effective-ui-bdd-with-js/short.html#/">Effective UI testing</a>, de <a href="https://twitter.com/eamodeorubio">Enrique Amodeo</a></h2>

<p>Todo comenzó con el dilema: ¿debo testear cada clase individual o todo el
sistema? Pues ni lo uno, ni lo otro. En cuanto a la interfaz gráfica, la
podríamos dividir en dos dominios: la presentación y la lógica de usabilidad.</p>

<p>¿Como testear cada parte? Para testear la presentación debemos mockear el DOM
del navegador. Para testear la lógica de usabilida, debemos mockear el acceso
al servidor. Basándose en eso, Enrique recomienda seguir dos prácticas:
encapsular los accesos al servidor y los accesos al DOM.</p>

<h2>Trabajo para casa</h2>

<ul>
<li>Parece que integración, entrega y despliegue contínuos son prácticas básicas para empresas exitosas.</li>
<li>Prepara las conferencias a las que asistas: busca el lugar donde se va a
celebrar e imprime un plano de las salas que se van a utilizar, crea una
checklist con las cosas que hacer antes de asistir a un evento. Como por
ejemplo prepar preguntas a hacer a gente interesante que quiero conocer (me
gustó aquello que hiciste/dijiste, discrepo con aquello que ...)</li>
<li>Echar un vistazo a la herramienta Screen Hero</li>
<li>Libro recomendado por Leo Antolí: Pensar rápido, pensar despacio</li>
<li>Libro recomendado por Rachel Davis: Drive (cómo introducir cambios)</li>
<li>Busca slide de Rachel Davis sobre <em>Sources of learning</em></li>
<li>Busca referencia a lo que falta de SOLID: RCCASS</li>
<li>¿Qué es el patrón Page Object?</li>
<li>Slide con las <em>mejores prácticas</em> recomendadas por Enrique Amodeo</li>
</ul>


<h2>Recursos</h2>

<ul>
<li><a href="https://gist.github.com/nhpatt/89f90a27042e4fd1db7b">Charlas, artículos y más sobre la CAS 2015</a></li>
<li><a href="https://www.youtube.com/watch?v=C6Sy0v19RAc">Streaming del día 1</a></li>
<li><a href="https://www.youtube.com/watch?v=_CcO9upHiDU">Streaming del día 2</a></li>
<li><a href="http://martinfowler.com/bliki/CQRS.html">Martin Fowler acerca de CQRS</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mi fracción del Codemotion 2015]]></title>
    <link href="http://rchavarria.github.io/blog/2015/11/29/mi-fraccion-codemotion/"/>
    <updated>2015-11-29T19:09:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/11/29/mi-fraccion-codemotion</id>
    <content type="html"><![CDATA[<p>Por 4º año consecutivo he tenido el placer de asistir a <a href="http://2015.codemotion.es/">Codemotion</a>, un evento
donde todas las comunidades tecnológicas tienen cabida, un evento con más de
2000 asistentes (este año hablan de 2500), con 8 tracks en paralelo mas 4
talleres.</p>

<p>En esta entrada trato de mostrar mi pequeña porción de lo vivido, por lo que no
esperes que coincida con la tuya si has estado allí, y no esperes que coincida
completamente con la realidad, porque lo que aquí leerás es solo una mínima
parte de todo lo ocurrido.</p>

<!-- more -->


<p>En un evento de este calibre no solo hay que valorar las charlas técnicas que
te inspiran, te enseñan y te encienden la chispa de la curiosidad. También hay
que valorar lo que pasa fuera de las charlas. Este año me he centrado más en
las charlas. Aún así, he conocido en persona a <a href="http://ocana.github.io/">Miguel</a>, que ya tenía ganas, y
he vuelto a ver a antiguos amigos de profesión que estamos convirtiendo en
costumbre lo de encontranos cada año en el Codemotion.</p>

<p>Otros años me ha parecido que han asistido más estudiantes, este año, la
impresión que he tenido es que el porcentaje de estudiantes/profesionales ha
estado bastante igualado.</p>

<p>Charlas a las que he asistido:</p>

<h2><a href="http://2015.codemotion.es/agenda.html#5677904553836544/43004005">El arte de ser vago</a>, de <a href="http://cjgaliana.com/">Camilo Galiana</a></h2>

<p>Esta charla fue un calentamiento perfecto. Camilo se expresa perfectamente, y
llevó un ritmo bastante bueno en su charla. Se podría resumir la charla como:</p>

<blockquote><p>Se programa para personas, no para las máquinas</p></blockquote>

<p>Se hizo un repaso de multitud de principios de programación imprescindibles
para un buen desarrollo de aplicaciones. Me quedaría con una frase graciosa.
Imagínate en una entrevista:</p>

<blockquote><p>¿Cuál es tu mayor fortaleza?
Soy vago</p></blockquote>

<h2><a href="http://2015.codemotion.es/agenda.html#5677904553836544/50404003">Technical debt for developers... and managers!</a>, de <a href="https://twitter.com/luiyo">Luis García Castro</a></h2>

<p>Charla completísima acerca del concepto de <a href="/blog/2015/10/12/deuda-tecnica/">deuda técnica</a>. Luis cubrió casi
todos los aspectos relacionados con la deuda técnica (y otras deudas):
metáfora, síntomas, ventajas, inconvenientes, cómo evitarla, cómo pagarla,...</p>

<p>La charla estuvo bastante bien, y muy bien amenizada por Luis. Hubo debate, por
lo que estuvo bastante animada.</p>

<p>Como punto gracioso, Luis expuso una serie de frases que todos hemos dicho u
oido en el trabajo, como por ejemplo:</p>

<blockquote><p>Pon un comentario y lo arreglamos luego</p></blockquote>

<h2><a href="http://2015.codemotion.es/agenda.html#5677904553836544/48514002">Dando amor a los tests</a>, de <a href="https://twitter.com/kinisoftware">Joaquín Engelmo</a></h2>

<p>Esta es la segunda parte de una charla de Kini (creo recordar que se titulaba
«Adicto al verde». Como segunda parte, los conceptos tratados en esta charla
son más avanzados y por las pequeñas preguntas para responder a mano alzada, no
toda la audiencia estaba familiarizada con ellos, por lo que seguro que hubo
mucha gente que aprendió mucho de la charla.</p>

<p>De la charla me llevo la confirmación de una sospecha que tenía: cuantos más
tests tienes y más grande es tu aplicación, más debes tratar a los tests como
código de producción y seguir los mismos principios, de lo contrario, cualquier
pequeño cambio requerirá múltiples cambios en los tests y supondrán más un
lastre que una ayuda.</p>

<h2><a href="http://2015.codemotion.es/agenda.html#5699289732874240/49544011">Del infierno al cielo</a>, de <a href="https://twitter.com/rrequero">Raúl Requero</a></h2>

<p>Para ser una charla a primera hora, Raúl fue valiente y fue directo al grano,
sin rodeos. Prometía ser una charla dura. Y lo fue, pero fue genial. Charla muy
práctica, llena de ejemplos y de código (¡bien!).</p>

<p>La charla se centró en una funcionalidad introducida en ECMAScript 2015, los
generadores. Y Raúl los destripó de arriba a abajo: qué son, cuándo
utilizarlos, cuándo no, librerías que hacen su uso más sencillo (si quieres que
te duela la cabeza busca <a href="https://github.com/thunks/thunks">thunks</a> y <a href="https://github.com/tj/co">co</a>, increíbles).</p>

<h2><a href="http://2015.codemotion.es/agenda.html#5699289732874240/50504009">Coding culture</a>, de <a href="https://twitter.com/svenpet">Sven Peters</a></h2>

<p>Estaba deseando ver esta charla, no me la perdería por nada del mundo. Había
visto algunas charlas grabadas de Sven, y es un ponente con muchas tablas. Unos
gráficos espectaculares y una historia muy depurada. Con giros argumentales
inesperados y con mucho sentido del humor.</p>

<p>Sven presentó distintos conceptos relacionados con la cultura de empresa y
distintas actividades que se realizan en Attlassian. Habló de la cultura de la
innovación, de la felicidad, del balance de la pasión (producto o cliente), de
equipo y cultura que escala.</p>

<p>Si tienes ganas, aquí encontrarás todas las <a href="http://svenpet.com/talks/">charlas de Sven</a>.</p>

<h2><a href="http://2015.codemotion.es/agenda.html#5699289732874240/49534007">Programando en diferido</a>, de <a href="https://twitter.com/flipper83">Jorge Juan Barroso</a></h2>

<p>En un principio no tenía pensado entrar en esta charla, pero no me arrepiento
de nada. Jorge es un ponente increíble, fue una sorpresa muy positiva para mí.
Explicó conceptos muy complejos de una manera muy clara y sencilla. Esta charla
también me sirvió para refrescar un poco mi cada vez más aturdido <em>sentido
Javero</em>, conociendo de mano de un crack conceptos como <em>Streams</em> en Java,
observables (cold y hot), la librería RxJava y el <em>Reactive manifesto</em></p>

<p>De la charla me llevo un consejo que me pareció buenísimo</p>

<blockquote><p>Primero resuelve el problema, luego escribe el código</p></blockquote>

<h2><a href="http://2015.codemotion.es/agenda.html#5699289732874240/45634007">Navegando con el piloto automático con CasperJS</a>, de <a href="https://twitter.com/asanzdiego">Adolfo Sanz</a></h2>

<p>En esta charla Adofo nos presentó CasperJS, que no es una herramienta que corre
en NodeJS, si no que es una herramienta de scripting, y que entre otras cosas
sirve para programar o automatizar tus navegaciones web. Aunque el uso que más
interesó a la gente, a la vista de la cantidad de preguntas al ponente, fue la
posibilidad de escribir y ejecutar tests de aceptación con la herramienta.</p>

<p>Fue un charlas super práctica, toda con código en vivo y con demostraciones.</p>

<h2><a href="http://2015.codemotion.es/agenda.html#5699289732874240/44774010">Help, I need more women!</a>, de <a href="https://twitter.com/Laura_Morillo">Laura Morillo</a>, <a href="https://www.koliseo.com/anafvm">Ana Fernández</a> y <a href="https://www.koliseo.com/mlorenzosanchez">Marina Lorenzo</a></h2>

<p>El título de la charla lo dice todo, el discurso de la misma giró en torno al
hecho de la poca presencia femenina en el campo tecnológico y en el análisis de
sus posibles causas. Una de ellas se atribuye a la escasez de <em>referentes</em>, por
lo cual las niñas (las futuras ingenieras) no tienen quien les inspire y no
eligen carreras científicas o relacionadas con las ingenierías.</p>

<p>Las ponentes hicieron un repaso de las distintas mujeres destacadas en el campo
de la ingeniería de la historia y de cómo los medios de comunicación
representan a las mujeres en este campo, que por cierto, no es muy buena la
imagen que proyectan.</p>

<p>Finalmente, expusieron una serie de iniciativas que se están llevando a cabo a
nivel nacional e internacional, y creo que consiguieron que muchas mujeres
asistentes se interesaran por ellas, así que ¡FELICIDADES!</p>

<h2><a href="http://2015.codemotion.es/agenda.html#5699289732874240/48544008">Taiga, de 0 a 70.000 proyectos</a>, de <a href="https://twitter.com/diacritica">Pablo Ruiz</a></h2>

<p>En esta charla Pablo presentó Taiga, un gestor de proyectos ágiles. Soporta
Scrum y Kanban. Descrito así, parece que fue una charla absolutamente
publicitaria, pero para nada. Por supuesto, Pablo presentó la herramienta. Pero
después dió paso a una serie de peticiones de funcionalidad de los usuarios a
la herramienta y le dió un enfoque muy especial. Mezcló los valores y
principios ágiles con los valores y principios que defienden en Taiga y
justificó el porqué hacen caso, o no, a sus usuarios. Una clase absolutamente
magistral de lo que significa ser ágil y gestionar proyectos ágiles.</p>

<p>Algunas de las funcionalidades pedidas por usuarios <em>ágiles</em> serían: llevar una
cuenta de las horas consumidas, contabilizar historias no terminadas en un
sprint, poder representar personas asignadas a varios proyectos,...</p>

<h2><a href="http://2015.codemotion.es/agenda.html#5699289732874240/43004009">Gente que hace cosas con cacharros</a>, de <a href="https://www.koliseo.com/miguelangellv">Miguel Ángel López</a> y <a href="https://twitter.com/josejuansanchez">Jose Juan Sánchez</a></h2>

<p>Y para terminar, una charla que me sorprendió. Se podría resumir con algo que
dijo Miguel Ángel, que según él es a lo que se dedica en su tiempo libre:</p>

<blockquote><p>Hago cosas que, no sirven para nada, pero molan</p></blockquote>

<p>Así fue la charla. Llena de experimentos de <em>maker</em>, de pequeños inventos
curiosos, imaginativos, que no tenían valor útil, no iban a cambiar el mundo,
pero molaban mil. Fue la charla ideal para terminar dos días a tope. Divertida,
desenfada y llena de imaginación. ¡Qué ganas tengo de usar algo parecido con mi
hijo!</p>

<h2>Trabajo para casa</h2>

<p>Y esto fue más o menos mi Codemotion. Los organizadores del mismo no quieren
que Codemotion termine aquí, quieren que ahora empiece el #codemotion2015. La
idea de continuar es que lo aprendido no se quede en estos dos magníficos días,
si no que los extendamos en el tiempo. Por eso mismo, éstos son los deberes que
me llevo para casa:</p>

<ol>
<li>Conoce tus herramientas: ¿qué tal si empiezo a usar la consola de PhpStorm?</li>
<li>¿Existe alguna forma de cuantificar la deuda técnica?</li>
<li>Buscar acerca del concepto de <em>property-based testing</em>. Ha aparecido por mi
radar últimamente, pero no le he hecho mucho caso. Ha llegado el momento</li>
<li>Attlassian Mood App</li>
<li>¿Podrías encontrar alguna utilidad a CasperJS?</li>
<li>Serie <em>Halt &amp; Catch Fire</em></li>
<li>Proponer PI Week en el trabajo</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Soft skills]]></title>
    <link href="http://rchavarria.github.io/blog/2015/11/08/soft-skills/"/>
    <updated>2015-11-08T18:36:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/11/08/soft-skills</id>
    <content type="html"><![CDATA[<h6>de John Sonmez</h6>

<p><img class="left" src="/images/2015/soft-skills.jpg" width="239" height="300" title="Soft skills" ></p>

<h3>Por qué lo he leído</h3>

<p>Creo recordar que vi que Miguel, autor del blog <a href="http://ocana.github.io/">Dev's kitchen</a>, lo marcaba
como pendiente para leer y le di un vistazo. Por aquel momento seguía
el blog del autor del libro, y tenía varios posts interesantes. Y el libro
también me lo pareció: ¿Mejorar en tu carrera? ¿Aprender habilidades no
técnica?</p>

<p>Me gusta intercalar libros técnicos y no técnicos, y este libro parecía estar a
medio camino entre ambos. Parecía una buena elección, así que me decidí leerlo.</p>

<!-- more -->


<h3>Qué esperaba</h3>

<p>Esperaba consejos e historias relacionadas con el software, pero ninguna
historia técnica: cómo relacionarte con tus compañeros, cómo resolver
conflictos, cómo negociar con tu jefe. Esperaba más temas relacionados con la
relación de las persona que otra cosa. Bueno, y también un poco de
productividad. Quién sabe.</p>

<h3>Qué encontre</h3>

<p>Encontré todo eso y más, mucho más. El libro trata temas tan dispares que hay
veces que no sabes qué tipo de libro estas leyendo. Hay tantos consejos, y de
temáticas tan variadas, que es imposible no encontrar algún consejo o idea
nuevos.</p>

<p>El libro está dividido en secciones, englobando cada uno una temática general:
carrera profesional, marca personal, aprendizaje, producividad, economía,
salud y espiritualidad. Cada sección está formada por una serie de capítulos, y
cada capítulo contiene varios <em>artículos</em>. La verdad es casi como leer su blog,
pero un post detrás de otro y organizados por temáticas.</p>

<h3>Conclusiones</h3>

<p>El libro es tan variado que cualquier persona encontraría algún consejo
valioso. John Sonmez se gana la vida de esta forma, aconsejando a programadores
acerca de cómo mejorar en su carrera. En este libro encontrarás consejos de lo
más variopintos: desde cómo aprender, a cómo invertir en el negocio
inmoviliario, pasando por practicar deporte. Incluso hay consejos espirituales.
En ese punto el libro me dejó un poco de piedra, creo que ahí se pasó, y el
libro pierde un poco su identidad.</p>

<p>Destacaría las primeras secciones: cuando habla de la carrera profesional y el
aprendizaje. También me gustó el apartado dedicado a temas financieros, siempre
es intersante conocer cómo funciona el dinero.</p>

<p>El que menos me gustó fue el espiritual, lleno de buenrollismo y autoayuda. No
sé, no le cogí el punto. Aún así, en general, me parece un libro bastante recomendable.</p>

<h3>Qué he aprendido</h3>

<p>Casi todo el libro habla de ponerse objetivos, de establecer metas intermedias
y de hacer seguimiento, de empezar poco a poco, de ser constante, y de trabajar
duro. Conceptos aplicables a cualquier aspecto de la vida. Cuando habla de
objetivos, éstos pueden estar formados por tareas demasiado grandes, que
parece imposible de realizar. El truco está en dividir esa gran tarea en tareas
secuenciales más pequeñas. Lo más importante aquí es la palabra
<strong>secuenciales</strong>.</p>

<p>Cómo hackear una entrevista de trabajo: la idea es no tener que mandar
currículums a las empresas, si no que ellas te contacten. Te contacten porque
han tenido noticias tuyas de alguien <em>de dentro</em>. Para ello, deberás establecer
relaciones personales con trabajadores de la empresa en la que deseas trabajar:
lee sus blogs,... Piensa diferente y encuentra formas de acercarte a ellos.</p>

<p>Algunas de las habilidades que necesitarás para tu próximo trabajo no las
tienes todavía. La clave es <strong>todavía</strong>. Hay que ir con la confianza de que las
conseguirás.</p>

<p>John habla mucho de construir una marca personal, para ello necesitarías: un
mensaje (la frase por la que te reconocerán), elementos visuales (un logo,...),
consistencia y una exposición contínua (no necesariamente en Twitter
solamente).</p>

<p>Me ha encantado los capítulos donde describe su proceso de aprendizaje en 10
pasos. Parece mucho de libro de autoayuda, pero la verdad es que cuenta muy
buenas ideas. El proceso sería algo tal que así:</p>

<ol>
<li>Entender la habilidad que se quiere aprender</li>
<li>Delimitar el ámbito</li>
<li>Definir qué se va a considerar como éxito</li>
<li>Encontrar recursos</li>
<li>Crear un plan de aprendizaje</li>
<li>Filtrar los recursos</li>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido, y repetir desde el paso 7</li>
</ol>


<p>Me ha interesado mucho el concepto de <em>cuotas</em> para conseguir objetivos.
Funciona para los objetivos en los que hay que ir haciendo pequeñas acciones a
lo largo de mucho tiempo, por ejemplo, a la hora de hacer ejercicio. La idea es
crear una cuota de cuánto hay que conseguir tener hecho para un determinado
período de tiempo. Por ejemplo: salir a correr 3 veces por semana, o hacer
100km en bicicleta cada semana, o leer 3 artículos técnicos al mes.</p>

<h3>Frases que me gustaría recordar</h3>

<blockquote><p>Un profesional comprende qué trabajo ha de hacerse, lo prioriza y se pone
manos a la obra</p></blockquote>

<!-- -->


<blockquote><p>Divide un gran objetivo en pequeños objectivos que puedan corresponder a
meses, semanas o días. Escribe el gran objetivo donde lo veas todos los días
para recordarte en qué tienes que trabajar</p></blockquote>

<!-- -->


<blockquote><p>Por enésima vez: si quieres se un buen programador, debes aprender a cómo
trabajar de forma efectiva con gente, incluso si la mayor parte de tu trabajo
es escribir código</p></blockquote>

<!-- -->


<blockquote><p>Cuando el foco de una compañía no es el software, normalmente los
programadores no son muy respetados. Aquellas empresas que dependen de un
producto software tienen muchas más probabilidades de valorar mucho mejor a
los profesionales que contratan</p></blockquote>

<!-- -->


<blockquote><p>Si debes elegir entre dinero o responsabilidad, la mejor opción (para el
largo plazo) es siempre más responsabilidad</p></blockquote>

<!-- -->


<blockquote><p>Deberías estar siempre aprendiendo algo nuevo o mejorando de alguna forma tus
habilidades</p></blockquote>

<!-- -->


<blockquote><p>¿Cómo crear un producto? Identifica unas cuantas audiencias objetivo para las
que puedas crear un producto potencial. Elige una de estas audiencias e
identifica donde puedes encontrar a miembros de ese grupo. Contacta con ellos
y averigua si puedes resolver alguno de sus problemas</p></blockquote>

<!-- -->


<blockquote><p>La manera correcta de promocionarse a sí mismo es proporcionar valor a los
demás</p></blockquote>

<!-- -->


<blockquote><p>Tu objectivo principal debería ser proporcionar valor a los demás. Si lo que
dices o haces no ayuda a nadie, todo el mundo te ignorará. Cada vez que
decidas crear algo (escribir un artículo, grabar un podcast o screencast,...)
deberías mirarlo desde la perspectiva de cómo estás creando valor para los
demás</p></blockquote>

<!-- -->


<blockquote><p>El enfoque es una cosa del momento: es muy difícil conseguir el foco, pero
relativamente sencillo mantenerlo una vez que lo has adquirido</p></blockquote>

<!-- -->


<blockquote><p>La multitarea es posible. Es posible combinar una tarea que no requiere
concentración con algunas tareas que sí lo requieran</p></blockquote>

<!-- -->


<blockquote><p><em>Burnout</em>: Tendemos a estar ilusionados y motivados sobre las cosas nuevas al
principio, pero cuanto más avanzamos, más rápido nos acercamos a ese
sentimiento de no poder más. En realidad, estamos topándonos con una pared.
¿Cuál es la solución? Intentarlo más fuerte. Esforzándonos contra la
dificultad es el secreto para superar ese sentimiento</p></blockquote>

<!-- -->


<blockquote><p>Los hábitos consisten básicamente de tres cosas: una señal (qué causa la
acción del hábito), una rutina (el hábito en sí mismo) y una recompensa (es
lo que hace que el hábito se mantenga interesante)</p></blockquote>

<!-- -->


<blockquote><p>Una razón para el salario que estás demandando nunca puede ser <em>porque lo
necesito</em>. En vez de eso, debes enfocarlo desde la perspectiva de demostrar
que vales esa cantidad de dinero o que lo vale el beneficio que estás
poniendo encima de la mesa</p></blockquote>

<!-- -->


<blockquote><p>De todos los errores financieros que se pueden cometer, el mayor de ellos es
incurrir en una deuda</p></blockquote>

<h3>Recursos relacionados</h3>

<ul>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/soft-skills-by-john-sonmez.markdown">Notas tomadas sobre Soft skills</a></li>
<li>Blog <a href="http://ocana.github.io/">Dev's kitchen</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
