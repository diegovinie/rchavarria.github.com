<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: swing worker | R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/blog/categories/swing-worker/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2015-10-12T19:21:02+02:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Uso avanzado de SwingWorker]]></title>
    <link href="http://rchavarria.github.io/blog/2010/01/26/uso-avanzado-de-swingworker/"/>
    <updated>2010-01-26T09:44:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2010/01/26/uso-avanzado-de-swingworker</id>
    <content type="html"><![CDATA[<div style="margin:2%; padding:2%; background-color:#E0E0E0; ">
  <p>Este post pertenece a mi antiguo blog en <a href="http://rchavarria.wordpress.com">wordpress</a>, pero decidí pasarme a github:pages por las siguientes <a href="http://rchavarria.github.io/blog/2012/12/03/por-que-cambie-mi-blog-en-wordpress-com">razones</a></p>
</div>


<p>En una entrada anterior vimos cómo hacer un <a href="http://rchavarria.github.io/blog/2010/01/08/swingworker-en-java-5/">uso básico de SwingWorker</a> así como cuándo usarlo. Vimos que había dos métodos de recuperar el resultado de nuestros cálculos o tarea de larga duración.</p>

<p>Aquí veremos un uso avanzado de <code>SwingWorker</code>. Para ello realizaremos una sencilla aplicación que calcule los <strong>N</strong> primeros números de la serie de fibonacci, los vaya mostrando en un área de texto según los vaya calculando y mostraremos el progreso de la tarea un una barra de progreso.</p>

<!-- more -->


<p>La clase <code>SwingWorker</code> tiene la siguiente definición: <code>SwingWorker&lt;T, V&gt;</code>. En la entrada anterior vimos que la forma básica de recuperar el resultado de nuestros cálculos era a través del método <code>get()</code>, el cuál retorna un valor de tipo genérico <strong>T</strong>. El genérico <strong>V</strong> es el tipo de datos que admiten los métodos <code>publish</code> y <code>process</code> y es el tipo de datos en el que generaremos los resultados intermedios.</p>

<p>Para realizar nuestra tarea del cálculo de los números de fibonacci crearemos una clase <code>FibonacciWorker</code> que herede de <code>SwingWorker</code> y que haga uso de los métodos adecuados para notificar el progreso hecho en los cálculos. Esta notificación la haremos a través de eventos de cambios en una propiedad. Es posible utilizar <code>PropertyChangelListeners</code> con propiedades definidas por nosotros y utilizar el método <code>firePropertyChange</code> para lanzar estos eventos. Para este ejemplo utilizaremos la propiedad <code>progress</code> que es una propiedad que ya está enlazada por defecto. La propiedad <code>state</code> (indica el estado de la ejecución de la tarea: <em>INCIADA</em>, <em>CANCELADA</em>, <em>COMPLETADA</em>, ...) también lo está.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Nuestra tarea hereda de SwingWorker </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>class FibonacciWorker extends SwingWorker&lt;List&lt;Integer&gt;, Integer&gt; {
</span><span class='line'>  PrimeNumbersTask(JTextArea textArea, int numbersToCalculate) {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>//initialize
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  @Override
</span><span class='line'>  public List&lt;Integer&gt; doInBackground() {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>while (numbers.size &amp;lt;= numberstoCalculate &amp;amp;&amp;amp; !isCancelled()) {
</span><span class='line'>  number = nextFibonacciNumber();
</span><span class='line'>  numbers.add(number);
</span><span class='line'>  publish(number);
</span><span class='line'>  setProgress(100 * numbers.size() / numbersToCalculate);
</span><span class='line'>}
</span><span class='line'>return numbers;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  @Override
</span><span class='line'>  protected void process(List&lt;Integer&gt; chunks) {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>for (Integer number : chunks) {
</span><span class='line'>  textArea.append(number + &amp;quot;\n&amp;quot;);
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  }&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>  private Integer nextFibonacciNumber(){&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>//  calculate next fibonacci number and return it
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>En el código anterior se han omitido detalles de implementación para no desviar la atención. Del código anterior cabe destacar la llamada a <code>publish</code> en la línea <strong>11</strong>, la llamada a <code>setProgress</code> (línea <strong>12</strong>) y la implementación del método <code>process</code>.</p>

<p>Mediante la llamada al método <code>publish</code> indicamos a <code>SwingWorker</code> que vaya almacenando resultados intermedios con los cuales llamará al método <code>process</code>, el cual hemos sobrescrito y lo usaremos para mostrar esos resultados intermedios. Es muy importante recalcar que mientras el método <code>publish</code> se ejecuta en el hilo (thread) del cálculo exhaustivo, el método <code>process</code> se invoca en el <strong>Event Dispatching Thread (EDT)</strong>, y es por ello por lo que es seguro actualizar el interfaz de usuario.</p>

<p>Con la llamada al método <code>setProgress()</code> estamos indicando que se lance un evento de cambio sobre la propiedad <code>progress</code> (propiedad creada por defecto junto con <code>state</code> para la notificación de cambios en propiedades). El evento propagado incluirá entre sus datos el parámetro que recibe la función. Para mostrar ese progreso utilizaremos una barra de progreso, la cual la registraremos como interesada en recibir eventos de cambios en las propiedades de <code>FibonacciWorker</code>.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Actualizar una barra de progreso </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>final JProgressBar progressBar = new JProgressBar(0, 100);
</span><span class='line'>FibonacciWorker task = new FibonacciWorker(textArea, numbersToCalculate);
</span><span class='line'>task.addPropertyChangeListener(
</span><span class='line'>  new PropertyChangeListener() {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>public  void propertyChange(PropertyChangeEvent evt) {
</span><span class='line'>  if ("progress".equals(evt.getPropertyName())) {
</span><span class='line'>    progressBar.setValue((Integer)evt.getNewValue());
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  });</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>En el siguiente enlace es posible ver una aplicación demostrando lo aprendido. Si se desea descargar el código fuente en forma de proyecto de NetBeans: <a href="http://kenai.com/projects/rchavarria/downloads/download/fibonacci%252FFibonacciCalculator%2520NB%2520project.zip"><strong>FibonacciWorker NetBeans project</strong></a>.</p>

<p><a href="http://kenai.com/projects/rchavarria/downloads/download/fibonacci%252Flaunch.jnlp"><img class="center" title="Ejecutar FibonacciCalculator" src="http://rchavarria.github.io/images/wordpress/launch.png" alt="" width="88" height="23" /></a></p>

<div id="_mcePaste" style="overflow:hidden;position:absolute;left:-10000px;top:285px;width:1px;height:1px;">http://rchavarria.wordpress.com/2010/01/08/swingworker-en-java-5/</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SwingWorker en Java 5]]></title>
    <link href="http://rchavarria.github.io/blog/2010/01/08/swingworker-en-java-5/"/>
    <updated>2010-01-08T19:44:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2010/01/08/swingworker-en-java-5</id>
    <content type="html"><![CDATA[<div style="margin:2%; padding:2%; background-color:#E0E0E0; ">
  <p>Este post pertenece a mi antiguo blog en <a href="http://rchavarria.wordpress.com">wordpress</a>, pero decidí pasarme a github:pages por las siguientes <a href="http://rchavarria.github.io/blog/2012/12/03/por-que-cambie-mi-blog-en-wordpress-com">razones</a></p>
</div>


<p>SwingWorker es una clase de utilidad incluida en Java SE 6 que soluciona el problema de utilizar un hilo (thread) separado al de Swing para realizar tareas de larga duración. Anteriormente ya existían implementaciones que realizaban esta tarea, pero en la versión 6 de Java SE se ha decidido incluirla en la propia distribución de Java. Existe un <a href="https://swingworker.dev.java.net/">backport de SwingWorker</a> para utilizar los mismos conceptos en Java SE 5. Esta entrada es aplicable tanto para SwingWorker incluido en Java SE 6 como para el backport.</p>

<!-- more -->


<h2>El hilo manejador de eventos (Event Dispatching Thread)</h2>

<p>Durante el desarrollo de interfaces gráficas suelen aparecer tareas cuya realización conllevan mucho tiempo, por ejemplo, leer un archivo XML cuando el usuario pulse un botón. La forma más rápida y sencilla de realizar esta tarea podría ser los siguiente:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>JButton button = new JButton(&quot;Cargar fichero XML&quot;);
</span><span class='line'>button.addActionListener(new ActionListener() {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>public void actionPerformed(ActionEvent e) {
</span><span class='line'>    xmlDocument = loadXML();
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>});</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>De esta forma, la carga del archivo se realiza en el hilo manejador de eventos (EDT - Event Dispatching Thread) de Swing, y como la tarea necesita mucho tiempo, no es posible manejar el resto de eventos que la interfaz gráfica genera y se quedara congelado, fijo, sin respuesta aparente, hasta que la tarea finalice. Esto produce un efecto indeseable de cara al usuario de la aplicación.</p>

<p>De hecho, a la hora de desarrollar interfaces gráficas se deberían respetar estas dos reglas básicas:</p>

<ul>
    <li>Las tareas de larga duración no deben ejecutarse nunca en el hilo manejador de eventos (EDT), de otra forma la aplicación no responderá al usuario.</li>
    <li>Los componentes gráficos se deben acceder <em>únicamente </em>desde el hilo manejador de eventos.</li>
</ul>


<p>Cualquier otra debería realizarse en un hilo separado (difícil pero es lo más recomendable).</p>

<h2>Solución</h2>

<p>Efectivamente, la solución pasa por utilizar un hilo distinto al EDT. SwingWorker nos proporciona la base para utilizar un hilo distinto para realizar tareas costosas en cuanto al tiempo de ejecución. SwingWorker permite ejecutar tareas de larga duración mientras la interfaz gráfica sigue respondiendo a la interacción con el usuario.</p>

<p>La forma más simple de utilizar SwingWorker es implementando el método <em>doInBackground </em>extendiendo la clase SwingWorker o creando una clase anónima:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>SwingWorker worker = new SwingWorker&lt;MyXMLFile, Void&gt;() {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>public MyXMLFile doInBackground() {
</span><span class='line'>    MyXMLFile myXMLDoc = loadXML();
</span><span class='line'>    return myXMLDoc;
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>};</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Para que la tarea se ejecute debemos invocar al método <em>execute</em> de SwingWorker. Dicho método se encarga de llamar a <em>doInBackground </em>asegurándose de que se ejecuta en un hilo diferente al EDT.</p>

<p>Pero, ¿cómo recupero el resultado de la larga tarea?. SwingWorker proporciona el método <em>get </em>para recuperar el resultado, pero sólo debe ser llamado una vez la tarea ha finalizado. Existen dos métodos para asegurarnos que la tarea ha finalizado:</p>

<ol>
    <li>Sobrescribiendo el método <em>done</em>, el cual es ejecutado en el hilo manejador de eventos después de que la tarea haya finalizado.
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private MyXMLFile doc;
</span><span class='line'>//...
</span><span class='line'>SwingWorker&lt;Document, Void&gt; worker = new SwingWorker&lt;MyXMLFile, Void&gt;() {
</span><span class='line'>    public MyXMLFile doInBackground() {
</span><span class='line'>        MyXMLFile myXMLDoc = loadXML();
</span><span class='line'>        return myXMLDoc;
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    public void done() {
</span><span class='line'>        doc = get();
</span><span class='line'>    }
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure></notextile></div></li>
    <li>Registrar un <em>listener </em>mediante el método <em>addPropertyChangeListener(PropertyChangeListener listener)</em> el cual será notificado de cambios en el estado de SwingWorker.</span></li>
</ol>


<p><em>Actualización (26-01-2010)</em>: <a href="http://rchavarria.github.io/blog/2010/01/26/uso-avanzado-de-swingworker/">Uso avanzado de SwingWorker</a></p>
]]></content>
  </entry>
  
</feed>
