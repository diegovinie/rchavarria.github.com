<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tutorials | R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/blog/categories/tutorials/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2013-10-22T14:40:06+02:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Entendiendo el ciclo de vida de entidades JPA]]></title>
    <link href="http://rchavarria.github.io/blog/2013/09/29/entendiendo-ciclo-vida-entidades-jpa/"/>
    <updated>2013-09-29T15:24:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/09/29/entendiendo-ciclo-vida-entidades-jpa</id>
    <content type="html"><![CDATA[<div style="margin:2%; padding:2%; background-color:#E0E0E0; ">
    Find an English version of this post directly in the <a href="https://github.com/rchavarria/javaee-6-demos/tree/master/jpa-entities">source code repository</a>.
</div>


<p>En esta demo aprenderemos en qué estados puede encontrarse una entidad JPA,
y qué métodos proporciona el estándar para transicionar una entidad de un
estado a otro.</p>

<p>Se puede ver el código fuente de la demostración en el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/jpa-entities"><code>jpa-entities</code></a>
del repositorio de las demos en github.</p>

<!-- more -->


<h2>Demo</h2>

<p>Esta demo pertenece a una serie de
<a href="/blog/2013/09/03/demos-tecnologias-javaee">tutoriales de demostración de tecnologías J2EE</a> y
en esta en particular aprenderemos los estados del ciclo de vida de una entidad
JPA y cómo transicionar entre ellos.</p>

<p>Una frase leída en uno de los enlaces que aparecen al final del post dice (traducción
libre):</p>

<blockquote><p>Si, a la hora de modificar entidades, piensas en ellas como transiciones de estados en lugar
de ejecuciones de sentencias SQL, harás tu desarrollo mucho más sencillo.</p></blockquote>

<p>Y es que alguna ventaja tendría que tener lo que proporciona JPA, que es la abstracción
de la base de datos. Si no dejamos de pensar en SQL, nunca podremos abstraernos de la
base de datos. Parece muy buena idea lo de ver la vida de una entidad como una serie
de transiciones de un estado a otro.</p>

<h2>Antes de comenzar</h2>

<p>Antes de nada, existen unas entidades y unos tests sencillos, de ejercitación y puesta a
punto de JPA, Hibernate (implementación de JPA para esta demo) y Derby (el motor de
base de datos utilizada aquí).</p>

<p>Echa un vistazo primero a estas clases (<code>Person</code>, <code>ContactablePerson</code>, <code>Phone</code>) y a los
tests (<code>BasicPersistenceTest</code> y <code>AdvancedPersistenceTest</code>) para poder comprender mejor
el ciclo de vida que describiremos a continuación.</p>

<h2>Estados de una entidad JPA</h2>

<p>Una entidad se puede encontrar en alguno de estos estados:</p>

<ul>
<li>No existe todavía: no es un estado en sí, pero podría verse con el origen de todo.</li>
<li><strong>Nueva</strong>: la entidad se acaba de instaciar con el operador <code>new</code>, como una clase Java
de toda la vida. No está asociado a ningún contexto de persistencia.</li>
<li><strong>Gestionada</strong>: tiene una identidad persistente y está asociada a un contexto de
persistencia.</li>
<li><strong>Separada</strong>: tiene una identidad persistente pero no está asociada a un contexto de
persistencia.</li>
<li><strong>Eliminada</strong>: tiene una identidad persistente, está asociada a un contexto de persistencia,
pero está marcada para ser eliminada de la base de datos.</li>
</ul>


<h2>Ciclo de vida, transiciones</h2>

<p>En el siguiente diagrama, de la documentación de Oracle, se pueden ver las transiciones
posibles de una manera gráfica.</p>

<p><img class="center" src="http://docs.oracle.com/cd/E16439_01/doc.1013/e13981/img/lifeent30.gif" title="Transiciones de una entidad JPA" ></p>

<h3>Transición de nueva a gestionada</h3>

<p>Fácilmente, con el método <code>persist</code>:</p>

<p>``` java
@Test
public void testFromNewToManaged() {</p>

<pre><code>ContactablePerson p = createContactablePerson();

em.persist(p);
assertTrue("entity's state is 'managed'", em.contains(p));
</code></pre>

<p>}
```</p>

<h3>Transición de gestionada a separada</h3>

<p>Existen dos formas:</p>

<ol>
<li>Mediante el método <code>detach</code>.</li>
<li>Cerrando el gestor de entidades, <code>EntityManager.close()</code>.</li>
</ol>


<p>Usando el método <code>detach</code>:</p>

<p>``` java
@Test
public void testFromManagedToDetachedUsingDetachMethod() {</p>

<pre><code>ContactablePerson p = createContactablePerson();
em.persist(p);

em.detach(p);
assertFalse("entity is not in persistence context", em.contains(p));
</code></pre>

<p>}
```</p>

<p>Cerrando el gestor:</p>

<p>``` java
@Test
public void testFromManagedToDetachedClosingEntityManager() {</p>

<pre><code>ContactablePerson p = createContactablePerson();
em.persist(p);

tx.commit();
em.close();

try {
    em.contains(p);
    fail("em should be closed, and the entity shouldn't be managed by him");
} catch (IllegalStateException e) { }
</code></pre>

<p>}
```</p>

<h3>Transición de separada a gestionada</h3>

<p>``` java
@Test
public void testFromDetachedToManaged() {</p>

<pre><code>ContactablePerson p = createContactablePerson();
em.persist(p);
em.detach(p);

ContactablePerson mergedPerson = em.merge(p);

assertFalse("original entity is not managed...", em.contains(p));
assertTrue("... but merged one is", em.contains(mergedPerson));
</code></pre>

<p>}
```</p>

<p>Una entidad previamente gestionada pero que fue separada, es posible actualizarla
a un nuevo contexto de persistencia. Pero hay que tener cuidado, el objeto original
no es el que pasa a ser gestionado, si no que es el devuelto por el método <code>merge</code>.</p>

<h3>Transición de gestionada a eliminada</h3>

<p>``` java
@Test
public void testFromManagedToRemoved() {</p>

<pre><code>ContactablePerson p = createContactablePerson();
em.persist(p);

em.remove(p);
assertFalse("entity has been removed and it is not managed", em.contains(p));
</code></pre>

<p>}
```</p>

<h3>Transición de eliminada a gestionada</h3>

<p>Aunqe esta transición no está documentada en el diagrama anterior de Oracle, es posible
transicionar una entidad a gestionada una vez ésta ya ha sido marcada como eliminada.
Dejo a elección del lector encontrarle utilidad y sentido a esta transición, ya que
aunque sea posible, dudo de su valor. Esta transición es posible si usamos el método
<code>persist</code> sobre la entidad eliminada.</p>

<p>``` java
@Test
public void testFromRemovedToManaged() {</p>

<pre><code>ContactablePerson p = createContactablePerson();
em.persist(p);
em.remove(p);
assertFalse("entity has been removed", em.contains(p));

em.persist(p);
assertTrue("entity is managed again", em.contains(p));
</code></pre>

<p>}
```</p>

<h2>Notas finales</h2>

<p>Antes de terminar, me gustaría recalcar algo acerca de la creación del <code>EntityManagerFactory</code>
y <code>EntityManager</code>, ya que es una cuestión muy importante a la hora de desarrollar nuestras
aplicaciones.</p>

<p>La creación de un <code>EntityManagerFactory</code> es <strong>muy</strong> costoso, y sólo se debería crear
<strong>una</strong> vez en toda la vida de nuestra aplicación. Es por esta razón, que su creación
está en un método estático, que se ejecuta antes que cualquier test, y que sólo se
ejecuta una vez para todos los tests de la suite:</p>

<p>``` java
@BeforeClass
public static void classSetUp() {</p>

<pre><code>emf = Persistence.createEntityManagerFactory("test-jpa");
</code></pre>

<p>}
```</p>

<p>Por otro lado, la creación de una <code>EntityManager</code> es mucho más ligero, y la recomendación
dada por la documentación es la de crear una de ellas por cada transacción que vayamos
a realizar. Pero cuidado, esto no quiere decir que debamos crear una de ellas en
cada consulta a la base de datos, si no más bien, una por cada petición de la aplicación
cliente, es decir, que es una buena práctica agrupar varias consultas siempre y
cuando estas consultas tengan el objetivo de crear un único resultado al cliente.</p>

<p>Por esta razón de que es poco costoso crear un <code>EntityManager</code>, su creación se
realiza en el método <code>setUp</code> del test, de forma que tendremos un contexto de persistencia
limpio en la ejecución de cada uno de nuestros tests, pero reaprovecharemos las
conexiones a la base de datos, ya que éstas se mantienen en el <code>EntityManagerFactory</code>.</p>

<p>``` java
@Before
public void setUp() throws Exception {</p>

<pre><code>em = emf.createEntityManager();
// ...
</code></pre>

<p>}
```</p>

<h2>Ejecución</h2>

<p>Esta demo se puede ejecutar como un test de JUnit, y estaría integrado en la ejecución
de <code>maven</code>, así que simplemente ejecuta el comando <code>mvn test</code> para ver los resultados.</p>

<h2>Enlaces para ampliar información</h2>

<ul>
<li><a href="https://github.com/rchavarria/javaee-6-demos/tree/master/jpa-entities">Código de la demo en github</a></li>
<li><a href="/blog/2011/05/19/uso-de-jpa-hibernate-y-derby">Usar JPA, Hibernate y Derby</a>:
un post en este mismo blog sobre cómo usar JPA, Hibernate como implementación del estándar
y Derby como base de datos.</li>
<li><a href="http://www.davidmarco.es/blog/entrada.php?id=144">An excellent JPA tutorial</a>:
uno de los mejores tutoriales sobre JPA que he encontrado en español.</li>
<li><a href="http://docs.jboss.org/hibernate/core/4.0/hem/en-US/html_single">Hibernate EntityManager</a>:
implementación de JPA dentro del framework Hibernate.</li>
<li><a href="http://docs.oracle.com/cd/E16439_01/doc.1013/e13981/undejbs003.htm">What is a JPA entity?</a>:
documentación de Oracle sobre entidades JPA.</li>
<li><a href="http://www.objectdb.com/java/jpa/persistence/managed">Working with JPA entities objects</a>:
más documentación sobre entidades JPA.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crear una applicación cliente para un servicio web]]></title>
    <link href="http://rchavarria.github.io/blog/2013/09/26/crear-cliente-servicio-web/"/>
    <updated>2013-09-26T07:41:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/09/26/crear-cliente-servicio-web</id>
    <content type="html"><![CDATA[<div style="margin:2%; padding:2%; background-color:#E0E0E0; ">
    Find a lightweight English version of this post directly in the <a href="https://github.com/rchavarria/javaee-6-demos/tree/master/ws-jaxws-client">source code repository</a>.
</div>


<p>En esta demo crearemos un cliente para el servicio web desarrollado en la demo
anterior. Para ello, utilizaremos una herramienta proporcionada por Java para
generar unas clases a partir del fichero WSDL de descripción del servicio web, y
usaremos dichas clases para invocar el servicio. Así de fácil.</p>

<p>Se puede ver el código fuente de la demostración en el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/ws-jaxws-client"><code>ws-jaxws-client</code></a>
del repositorio de las demos en github.</p>

<!-- more -->


<h2>Demo</h2>

<p>Esta demo pertenece a una serie de
<a href="/blog/2013/09/03/demos-tecnologias-javaee">tutoriales de demostración de tecnologías J2EE</a> y
en esta en particular crearemos en cliente que invocará a los métodos expuestos por el servicio
web desarrollado en la demo anterior. Estos métodos son:</p>

<ol>
<li>Añadir usuario: añadiremos un nombre de usuario al servicio.</li>
<li>Obtener usuario: mediante un identificador, obtendremos un nombre de usuario.</li>
</ol>


<p>Con lo cual, añadiremos y consultaremos usuarios.</p>

<h2>Pasos a seguir</h2>

<h3>Arrancar el servicio web</h3>

<p>Lo primero que debemos hacer es arrancar nuestro servicio web. Es necesario para que
el fichero WSDL, que describe el servicio, esté disponible y actualizado. También
es posible usar un fichero ya existente, por ejemplo, en el caso de que queramos
desarrollar un cliente para un servicio web de terceros. En definitiva, el elemento
realmente importante en un servicio web, es el fichero WSDL, que es quien define
de manera inequívoca el servicio en sí.</p>

<p>Para esta demo, arrancaremos el servicio web desarrollado en la
<a href="/blog/2013/09/19/crear-servicio-web-jaxws">demo anterior</a>. Básicamente, los comandos
para arrancarlo, partiendo del directorio raíz del código fuente de todas las demos:</p>

<p><code>
cd ws-jaxws-cxf
mvn jetty:run
</code></p>

<p>De esta forma tendremos el fichero WSDL disponible en <code>http://localhost:8080/Users?wsdl</code>.</p>

<h3>Generar las clases necesarias con <code>wsimport</code></h3>

<p>Java proporciona una herramienta, <code>wsimport</code>, que genera las clases necesarias
para poder consumir fácilmente un servicio web a partir de un fichero WSDL.</p>

<p>La sintaxis del comando es:</p>

<p><code>
wsimport [options] &lt;WSDL_URI&gt;
</code></p>

<p>Así, en nuestro caso, un ejemplo sería:</p>

<p><code>   
wsimport http://localhost:8080/Users?wsdl
</code></p>

<p>Este comando genera las clases, las compila y borra el código fuente. Esto no es
muy práctico a la hora de aprender, así que usaremos algunas opciones para
obtener el código fuente de las clases generadas.</p>

<ul>
<li><code>-d src/main/java</code>: indica el directorio donde queremos generar las clases.</li>
<li><code>-keep</code>: mantiene los ficheros <code>.java</code> generados.</li>
<li><code>-Xnocompile</code>: no compila los fuentes generados, ya se encargará nuestra
herramienta de ello, no os preocupéis.</li>
</ul>


<p>El comando completo quedaría:</p>

<p><code>
wsimport -d src/main/java -keep -Xnocompile http://localhost:8080/Users?wsdl
</code></p>

<p>Las clases generadas que más nos importan, son:</p>

<ul>
<li><code>UsersManagementService</code>: esta clase representa el servicio web en sí.</li>
<li><code>UsersManagement</code>: esta clase contiene los mismos métodos que el servicio web
definido por el fichero WSDL, y actúa como un proxy a la hora de invocar a nuestro
servicio. A esta clase se le denomina <code>port</code> (puerto), y es quien nos permite llamar
a los <em>métodos</em> web.</li>
</ul>


<h3>Crear un test de JUnit para invocar el servicio web</h3>

<p><img class="left" src="/images/2013/web-service-test.png" title="Ejecución de la demo como un test" ></p>

<p>Usaremos un sencillo test de JUnit para invocar a nuestro servicio. Se puede utilizar
una clase normal de Java, con un método <code>main</code>, pero haciéndolo con un test, podemos
integrar su ejecución en el ciclo de vida del proyecto gestionado por <code>maven</code> y
ejecutarlo muy fácilmente con <code>mvn test</code>.</p>

<p>Antes de nada, es necesario añadir la dependencia de JUnit a nuestro proyecto:</p>

<p>``` xml
<dependency></p>

<pre><code>&lt;groupId&gt;junit&lt;/groupId&gt;
&lt;artifactId&gt;junit&lt;/artifactId&gt;
&lt;version&gt;4.8.1&lt;/version&gt;
&lt;scope&gt;test&lt;/scope&gt;
</code></pre>

<p></dependency>
```</p>

<p>Crearemos el test en el paquete <code>es.rchavarria.ws.client</code>. En el método <code>setUp</code>
de nuestro test (el que se ejecutará antes que cualquier test) crearemos una
instancia del servicio, y a través de él, obtendremos una instancia de nuestra
clase <em>port</em>. Esta clase será quien nos permita invocar al servicio web.</p>

<p>``` java
//...
public class JaxWsClientTest {</p>

<pre><code>private UsersManagement port;

@Before
public void setUp() {
    UsersManagementService service = new UsersManagementService();
    port = service.getUsersManagementPort();
}
</code></pre>

<p>//...      <br/>
}
```</p>

<h3>Invocando el servicio web</h3>

<p>Ahora ya disponemos de la clase <em>port</em>, así que ya somos capaces de invocar los
métodos expuestos por el servicio: <code>addUser</code> y <code>getUser</code>. A por ellos!!</p>

<p>``` java
@Test
public void test() {</p>

<pre><code>assertEquals(1, port.addUser("The boss"));
assertEquals(2, port.addUser("The king"));
assertEquals(3, port.addUser("The queen"));

assertEquals("The boss", port.getUser(1));
assertEquals("The queen", port.getUser(3));
assertEquals("The king", port.getUser(2));
</code></pre>

<p>}
```</p>

<h2>Ejecución</h2>

<p>Esta demo se puede ejecutar como un test de JUnit, y estaría integrado en la ejecución
de <code>maven</code>, así que simplemente ejecuta el comando <code>mvn test</code> para ver los resultados.</p>

<p>He añadido también un plugin, surefire report, por lo que ejecutnado el comando
<code>mvn site</code>, la herramienta generará (entre otras cosas), un informe con los resultados
de la ejecución de nuestros tests. Ejecuta el comando y abre el fichero HTML que
encontrarás en esta ruta dentro del directorio raiz del proyecto <code>target/site/index.html</code>.</p>

<h2>Enlaces para ampliar información</h2>

<ul>
<li><a href="http://docs.oracle.com/javaee/6/tutorial/doc/bnayl.html">Building web services with JAX-WS</a></li>
<li><a href="http://docs.oracle.com/javaee/6/tutorial/doc/giepu.html">Building RESTful Web Services with JAX-RS</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crear un servicio web JAX-WS]]></title>
    <link href="http://rchavarria.github.io/blog/2013/09/19/crear-servicio-web-jaxws/"/>
    <updated>2013-09-19T08:49:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/09/19/crear-servicio-web-jaxws</id>
    <content type="html"><![CDATA[<div style="margin:2%; padding:2%; background-color:#E0E0E0; ">
    Find a lightweight English version of this post directly in the <a href="https://github.com/rchavarria/javaee-6-demos/tree/master/ws-jaxws-cxf">source code repository</a>.
</div>


<p>En esta demo crearemos un servicio web. Básicamente existen dos tipos de servicios
web: SOAP, basados en el intercambio de mensajes XML; y servicios web basados en
una interfaces REST, RESTful web services.</p>

<p>Aquí crearemos un servicio web SOAP, el cual establece que los mensajes XML pueden ser
transportados por diversos protocolos, aquí lo haremos sobre HTTP, ya que es lo más
común y sencillo. Ya que usaremos HTTP como protocolo de transporte, nuestro servicio web estará
gestionado por un servlet.</p>

<p>Se puede ver el código fuente de la demostración en el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/ws-jaxws-cxf"><code>ws-jaxws-cxf</code></a>
del repositorio de las demos en github.</p>

<!-- more -->


<h2>Demo</h2>

<p><img class="right" src="/images/2013/web-services-by-psd.jpg" width="320" height="213" title="Foto por el usuario de flickr psd" ></p>

<p>En esta demo no veremos nada funcionando, ya que vamos a crear un servicio web
pero no vamos a crear un cliente que lo consuma (eso para la siguiente). La forma
de comprobar que hemos creado un servicio web correcto será la visualización del
fichero WSDL generado por el servicio, el cual es el contrato entre el proveedor
del servicio (lo creado en esta demo) y el consumidor del mismo (el cliente que
crearemos más adelante).</p>

<p>La funcionalidad que nos ofrecerá el servicio se apoyarán en dos métodos:</p>

<ol>
<li>Añadir usuario: añadiremos un nombre de usuario al servicio.</li>
<li>Obtener usuario: mediante un identificiador, obtendremos un nombre de usuario.</li>
</ol>


<p>Para ejecutar la demo, simplemente hay que descargase el código fuente y ejecutar
<code>mvn jetty:run</code> desde el directorio raiz de la demo. Visitar la página de login
<a href="http://localhost:8080/Users?wsdl">http://localhost:8080/Users?wsdl</a> y veremos
el fichero WSDL con la definición del servicio.</p>

<h2>Pasos a seguir</h2>

<h3>Elegir un framework que implemente JAX-WS</h3>

<p>Según la <a href="http://docs.oracle.com/javaee/6/tutorial/doc/bnayl.html">documentación de Oracle</a>,
crear un servicio web parece realmente
sencillo y para toda la familia. Lo que no explican es que están dependiendo
de la implementación de los servicios web incluída en <em>su</em> contenedor Java EE,
Glassfish. No tengo nada en contra, pero me gusta tener cierta independencia,
por lo que vamos a elegir otro framework que implemente la especificación
JAX-WS.</p>

<p>He elegido <a href="http://cxf.apache.org">Apache CXF</a>, aunque hay otras implementaciones
disponibles, como <a href="http://projects.spring.io/spring-ws/">Spring WS</a>
(quizá en un futuro, veamos su uso).</p>

<h3>Dependencias del proyecto maven</h3>

<p>Como todas las demos, utilizaremos <code>maven</code> como gestor del ciclo de vida del
proyecto, y las dependencias son una parte muy importante de la vida del proyecto.</p>

<p>La aplicación depende de:</p>

<ul>
<li><code>javax.servlet-api</code>: el API de Java EE para servlets, ya que será un servlet
quien gestione las peticiones HTTP. Nuestro servicio web se basará en este servlet.</li>
<li><code>cxf-rt-frontend-jaxws</code>: la implementación de CXF de la especificación JAX-WS.</li>
<li><code>cxf-rt-transports-http</code>: HTTP será el protocolo de transporte.</li>
<li><code>spring-web</code>: CXF usa Spring internamente para su funcionamiento.</li>
</ul>


<h3>Crear el interfaz del servicio</h3>

<p>Nuestro servicio web servirá para almacenar nombres de usuarios, y se podrán
recuperar estos nombres a través de un identificador que devolverá el servicio
al añadirlos.</p>

<p>Por lo tanto, vemos que necesitaremos dos métodos:</p>

<ul>
<li><code>addUser</code>: para añadir un usuario al sistema.</li>
<li><code>getUser</code>: para recuperar un nombre de usuario.</li>
</ul>


<p>Nuestro interfaz de servicio sería algo así:</p>

<p>``` java
import javax.jws.WebService;
import javax.jws.WebParam;</p>

<p>@WebService
public interface UsersManagement {</p>

<pre><code>public String getUser(@WebParam(name="userId") int userId);
public int addUser(@WebParam(name="name") String name);
</code></pre>

<p>}
```</p>

<h3>Crear la implementación del servicio</h3>

<p>Ya tenemos la definición del servicio, ahora debemos implementarlo. Esta
implementación deberá estar anotada también con <code>@WebService</code>, y deberemos
proporcionar valores a algunos parámetros de la anotación. El más importante
es <code>endpointInterface</code>, que debe apuntar a la definición del servicio.</p>

<p>La implementación tendrá un aspecto similar a éste:</p>

<p>``` java
import javax.jws.WebService;</p>

<p>@WebService(endpointInterface = "es.rchavarria.ws.UsersManagement",</p>

<pre><code>        serviceName = "Users")
</code></pre>

<p>public class UsersManagementImpl implements UsersManagement {</p>

<pre><code> // ... implementación de los métodos
</code></pre>

<p>}
```</p>

<p>Invito a bucear en el código para ver la implementación de los métodos,
aunque no es muy interesante de ver, todo sea dicho.</p>

<h3>Establecer un servlet que gestione las peticiones HTTP</h3>

<p>El siguiente paso es establecer un servlet que gestione las peticiones HTTP.
Apache CXF nos proporciona dicho servlet, por lo que deberemos configurar
nuestro contenedor Java EE para que lo arranque. El servlet gestionará todas
las peticiones, con lo que estableceremos el patrón URL a <code>/*</code>.</p>

<p>Es muy importante que el patrón URL del servlet sea capaz de gestionar la URL
donde se despliegue el servicio web, en caso contrario, las peticiones no
llegarán al servicio web. Por ejemplo, si el patrón URL del servlet es
<code>/services/*</code> y nuestro servicio web se despliega en <code>/web-services/*</code>,
las peticiones a nuestro servicio no serán gestionadas por el servlet.</p>

<p>Para establecer el servlet, creamos un fichero descriptor de la aplicación web,
<code>web.xml</code>:</p>

<p>``` xml
<servlet></p>

<pre><code>&lt;servlet-name&gt;the-cxf-servlet&lt;/servlet-name&gt;
&lt;servlet-class&gt;org.apache.cxf.transport.servlet.CXFServlet&lt;/servlet-class&gt;
&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
</code></pre>

<p></servlet></p>

<p><servlet-mapping></p>

<pre><code>&lt;servlet-name&gt;the-cxf-servlet&lt;/servlet-name&gt;
&lt;url-pattern&gt;/*&lt;/url-pattern&gt;
</code></pre>

<p></servlet-mapping>
```</p>

<h3>Configurar el servlet de CXF</h3>

<p>El servlet de CXF arrancará con el servidor, pero no sabe qué servicios web puede
invocar. Debemos configurarlo. CXF proporciona un mecanismo para ello, a través
de un fichero XML.</p>

<p>Podríamos utilizar un fichero por defecto, y guardarlo en <code>WEB-INF/cxf-servlet</code>,
o podemos configurarlo manualmente. Lo haremos de forma manual, e indicaremos al
servlet donde está su fichero de configuración. Se lo indicaremos a través de un
parámetro de inicialización de servlet, por lo que modificaremos nuestro <code>web.xml</code>:</p>

<p>``` xml</p>

<!-- ... -->


<p><servlet></p>

<pre><code>&lt;servlet-name&gt;the-cxf-servlet&lt;/servlet-name&gt;
&lt;servlet-class&gt;org.apache.cxf.transport.servlet.CXFServlet&lt;/servlet-class&gt;

&lt;init-param&gt;
    &lt;param-name&gt;config-location&lt;/param-name&gt;
    &lt;param-value&gt;/WEB-INF/services.xml&lt;/param-value&gt;   
&lt;/init-param&gt;        

&lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
</code></pre>

<p></servlet></p>

<!-- ... -->


<p>```</p>

<p>También debemos añadir el fichero de configuración del servlet CXF, el cual hemos
llamado <code>WEB-INF/services.xml</code>:</p>

<p>``` xml
&lt;?xml version="1.0" encoding="UTF-8"?>
&lt;beans xmlns="http://www.springframework.org/schema/beans"</p>

<pre><code>  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:jaxws="http://cxf.apache.org/jaxws"
  xmlns:soap="http://cxf.apache.org/bindings/soap"
  xsi:schemaLocation="
</code></pre>

<p>http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
http://cxf.apache.org/bindings/soap http://cxf.apache.org/schemas/configuration/soap.xsd
http://cxf.apache.org/jaxws
http://cxf.apache.org/schemas/jaxws.xsd"></p>

<p>  &lt;jaxws:server id="aServer" serviceClass="es.rchavarria.ws.UsersManagement" address="/Users"></p>

<pre><code>&lt;jaxws:serviceBean&gt;
    &lt;bean class="es.rchavarria.ws.UsersManagementImpl" /&gt;
&lt;/jaxws:serviceBean&gt;
</code></pre>

<p>  &lt;/jaxws:server>
</beans>
```</p>

<p>Esto es un fichero de configuración de Spring, y es que CXF usa Spring internamente. Se
añade un nuevo namespace, <code>jaxws</code>, proporcionado por CXF y que viene con etiquetas XML
para configurar un servidor que responda a las peticiones dirigidas a nuestro servicio web.</p>

<h3>Listos</h3>

<p>La demo ya está lista para ser ejecutada. Si la ejecutamos con el comando <code>mvn jetty:run</code>
podremos visitar <a href="http://localhost:8080/Users?wsdl">http://localhost:8080/Users?wsdl</a>
y veremos el fichero WSDL que define el servicio web.</p>

<p>En la próxima demo, crearemos un cliente a partir de este fichero WSDL, y comprobaremos
cómo funciona.</p>

<h2>Código fuente</h2>

<p>Para echar un ojo al código fuente, visitar el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/ws-jaxws-cxf"><code>ws-jaxws-cxf</code></a>.</p>

<h2>Enlaces para ampliar información</h2>

<ul>
<li><a href="http://docs.oracle.com/javaee/6/tutorial/doc/bnayl.html">Construir servicios web con JAX-WS</a></li>
<li><a href="http://docs.oracle.com/javaee/6/tutorial/doc/giepu.html">Construir servicios web REST con JAX-RS</a></li>
<li><a href="http://cxf.apache.org/docs/index.html">Guía de uso de Apache CXF</a></li>
</ul>


<p><em>Imagen obtenida de <a href="http://www.flickr.com/photos/psd">psd</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Servlet redirecciona a una JSP]]></title>
    <link href="http://rchavarria.github.io/blog/2013/09/17/servlet-redirecciona-jsp/"/>
    <updated>2013-09-17T13:27:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/09/17/servlet-redirecciona-jsp</id>
    <content type="html"><![CDATA[<div style="margin:2%; padding:2%; background-color:#E0E0E0; ">
    Find a lightweight English version of this post directly in the <a href="https://github.com/rchavarria/javaee-6-demos/tree/master/request-parameters-jsp">source code repository</a>.
</div>


<p>Este post es una pequeña extensión del anterior, un servlet que leía los parámetros
de una petición HTTP. La demo anterior presentaba los parámetros leídos de una
forma muy tosca y básica. En esta demo, la información se va a presentar al usuario
de una forma más trabajada. Además, orientándonos hacia una arquitectura MVC,
separaremos las tareas de lectura de los parámetros y presentación de los datos.</p>

<p>Se puede ver el código fuente de la demostración en el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/request-parameters-jsp"><code>request-parameters-jsp</code></a>
del repositorio de las demos en github.</p>

<!-- more -->


<h2>Demo</h2>

<p>La demostración va a ser muy sencilla: crearemos en servlet, lo configuraremos
para que responda cuando un usuario envíe los campos de un formulario de login,
y haremos que redireccione a una página JSP, esta página se encargará de renderizar
los datos que viajarán como atributos de la petición.</p>

<p>Para ejecutar la demo, simplemente hay que descargase el código fuente y ejecutar
<code>mvn jetty:run</code> desde el directorio raiz de la demo. Visitar la página de login
<a href="http://localhost:8080/login.html">http://localhost:8080/login.html</a>, introducir
unos valores cualquiera y enviar los datos del formulario. Como resultado, veremos
el renderizado de la página JSP en el navegador.</p>

<p><img class="center" src="/images/2013/request-parameters-jsp.png" title="Respuesta del servlet" ></p>

<h2>Dependencias</h2>

<p>Como viene siendo habitual, para la demostración usaremos
<a href="http://maven.apache.org/">Apache Maven</a> para la gestión de dependencias.
En nuestro fichero <code>pom.xml</code> incluiremos la única dependencia del proyecto,
<code>javax-servlet-api</code> y listo.</p>

<h2>El servlet</h2>

<p>Nuestro servlet se trata de un servlet HTTP, luego heredará de <code>javax.servlet.http.HttpServlet</code>.
Lo configuraremos mediante anotaciones, con <code>@WebServlet</code>. Primero leerá los parámetros
enviados en la petición HTTP, igual que vimos en la anterior demo, y lo almacenará como un
atributo del objeto <code>request</code>, para que pueda ser leído por nuestra página JSP.</p>

<p><code>java
//...
List&lt;Parameter&gt; params = buildParamList(request);
request.setAttribute("params", params);
//...
</code></p>

<p>Luego, redireccionará la petición a nuestra página JSP. Se ha decidido hacer un
<code>forward</code> de la petición en lugar de hacer una redirección completa,
ya que la redirección provocaría una nueva petición HTTP y perderíamos los parámetros
de la petición original, y esto es algo que no deseamos.</p>

<p><code>java
//...
request.getRequestDispatcher("/params.jsp").forward(request, response);
//...
</code></p>

<h2>La página JSP</h2>

<p>Finalmente, la página JSP se encarga de presentar la información. De esta forma tenemos
construida nuestra demo siguiendo un patrón MVC (aunque es muy sencillo en este caso, ya
que solo contamos con un servlet y una página JSP), donde la página JSP juega el papel
de <em>vista</em>.</p>

<p>El código que nos interesa dentro del JSP es el que se encarga de iterar el
atributo que estableció el servlet, al que hemos llamado <code>params</code>.</p>

<p>``` html
&lt;%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %></p>

<ul>
    <c:forEach var="p" items="${params}">
        <li>${p.key}: ${p.value}</li>
    </c:forEach>
</ul>


<p>```</p>

<h2>Código fuente</h2>

<p>Para echar un ojo al código fuente, visitar el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/request-parameters-jsp"><code>request-parameters-jsp</code></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leer parámetros desde un servlet]]></title>
    <link href="http://rchavarria.github.io/blog/2013/09/13/servlet-lee-parametros/"/>
    <updated>2013-09-13T12:39:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/09/13/servlet-lee-parametros</id>
    <content type="html"><![CDATA[<div style="margin:2%; padding:2%; background-color:#E0E0E0; ">
    Find a lightweight English version of this post directly in the <a href="https://github.com/rchavarria/javaee-6-demos/tree/master/request-parameters">source code repository</a>.
</div>


<p>En este post veremos cómo un servlet puede leer los parámetros que vienen
encapsulados en la petición HTTP que realiza un usuario a nuestra aplicación web.
La configuración de dicho servlet la haremos mediante anotaciones para tener un
proyecto más sencillo.</p>

<p>Se puede ver el código fuente de la demostración en el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/request-parameters"><code>request-parameters</code></a>
del repositorio de las demos en github.</p>

<!-- more -->


<h2>Demo</h2>

<p>La demostración va a ser muy sencilla: crearemos en servlet, lo configuraremos
para que responda cuando un usuario envíe los campos de un formulario de login,
y haremos que responda con una página HTML que incluye una lista con los valores
de los campos de dicho formulario.</p>

<p>Para ejecutar la demo, simplemente hay que descargase el código fuente y ejecutar
<code>mvn jetty:run</code> desde el directorio raiz de la demo. Visitar la página de login
<a href="http://localhost:8080/login.html">http://localhost:8080/login.html</a>, introducir
unos valores cualquiera y enviar los datos del formulario. Veremos el resultado
que devuelve el servlet al leer los parámetros de la petición HTTP que hemos
enviado al servidor.</p>

<p><img class="center" src="/images/2013/request-parameters.png" title="Respuesta del servlet" ></p>

<h2>Dependencias</h2>

<p>Para esta demostración usaremos <a href="http://maven.apache.org/">Apache Maven</a> para
la gestión de dependencias. Esto nos facilitará enormemente nuestra labor de
programación. Si echamos un vistazo al fichero <code>pom.xml</code> de la demo, podremos
ver que solamente existe una dependencia externa, <code>javax-servlet-api</code>, que es
la que nos permitirá crear nuestro servlet.</p>

<h2>Página de login</h2>

<p><img class="right" src="/images/2013/login-form.png" title="Respuesta del servlet" ></p>

<p>La entrada a nuestra demo será la página de login, la cual contiene un formulario
muy simple, con dos campos principales: email del usuario y contraseña.</p>

<p>En el código HTML de la página, se ha establecido la acción del formulario a
<code>RequestParametersServlet</code>. Ésta va a ser la URL a la que nuestro servlet deberá responder.</p>

<p>``` html
<form action="RequestParametersServlet"></p>

<pre><code>&lt;input type="text" name="email" placeholder="Email address" autofocus /&gt;
&lt;input type="password" name="password" placeholder="Password" /&gt;

&lt;button type="submit"&gt;Log me in&lt;/button&gt;
</code></pre>

<p></form>
```</p>

<h2>El servlet</h2>

<p>Nuestro servlet se trata de un servlet HTTP, luego heredará de <code>javax.servlet.http.HttpServlet</code>.
Lo configuraremos mediante anotaciones, con <code>@WebServlet</code>. Y retornará un sencillo
código HTML que mostrará al usuario el valor de los parámetros enviados desde el
formulario de login.</p>

<p>La definión del servlet quedaría así:</p>

<p>``` java
@WebServlet(urlPatterns = {"/RequestParametersServlet"})
public class RequestParametersServletDemo extends HttpServlet {</p>

<pre><code>//...
</code></pre>

<p>}
```</p>

<p>Mientras que el código que lee los parámetros de la petición HTTP estaría agrupado en un
método con esta pinta:</p>

<p>``` java
private String outputParametersList(HttpServletRequest request) {</p>

<pre><code>Enumeration&lt;String&gt; names = request.getParameterNames();
if(!names.hasMoreElements()) return "";

StringBuilder sb = new StringBuilder();

sb.append("&lt;ul&gt;");
while(names.hasMoreElements()) {
    String name = names.nextElement();
    String value = request.getParameter(name);

    sb.append("&lt;li&gt;");
    sb.append(name + ": " + value);
    sb.append("&lt;/li&gt;");
}
sb.append("&lt;/ul&gt;");

return sb.toString();
</code></pre>

<p>}
```</p>

<p>Para echar un ojo al código fuente, visitar el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/request-parameters"><code>request-parameters</code></a>.</p>

<h2>Enlaces relacionados</h2>

<ul>
<li><a href="http://theopentutorials.com/examples/java-ee/servlet/get-all-parameters-in-html-form-using-getparameternames">The open tutorials</a>: cómo leer todos los campos de un formulario en un servlet.</li>
<li><a href="https://baurdotnet.wordpress.com/2011/01/31/getting-a-request-parameter-in-a-servlet">Leer un parámetro en un servlet</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
