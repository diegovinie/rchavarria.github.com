<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: gridbaglayout | R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/blog/categories/gridbaglayout/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2013-09-26T09:29:14+02:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Uso de GridBagLayout (y II)]]></title>
    <link href="http://rchavarria.github.io/blog/2010/01/20/uso-de-gridbaglayout-y-ii/"/>
    <updated>2010-01-20T07:54:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2010/01/20/uso-de-gridbaglayout-y-ii</id>
    <content type="html"><![CDATA[<div style="margin:2%; padding:2%; background-color:#E0E0E0; ">
  <p>Este post pertenece a mi antiguo blog en <a href="http://rchavarria.wordpress.com">wordpress</a>, pero decidí pasarme a github:pages por las siguientes <a href="http://rchavarria.github.io/blog/2012/12/03/por-que-cambie-mi-blog-en-wordpress-com">razones</a></p>
</div>


<p>Antes de leer esta entrada deberías leer <a title="Uso de GridBagLayout (I)" href="http://rchavarria.github.io/blog/2009/12/21/uso-de-gridbaglayout-i" target="_self">Uso de GridBagLayout (I)</a>, si no lo has hecho ya.</p>

<p>Veamos algunos parámetros que nos permitirán configurar cómo se verán nuestros componentes con más flexibilidad que la conseguida con los parámetros vistos en el post anterior:</p>

<!-- more -->


<h2>fill</h2>

<p>Define la forma en la que el componente crecerá o no cuando se cambie el tamaño del panel al que pertenece. Los valores posibles están definidas como constantes en <code>GridBagConstraints</code> y son:</p>

<ul>
    <li><code>NONE</code>: valor por defecto. Indica que el componente no cambiará su tamaño.</li>
    <li><code>HORIZONTAL</code>: hará crecer el componente hasta completar el tamaño horizontal de la celda o celdas donde se encuentra el componente.</li>
    <li><code>VERTICAL</code>: igual que <code>HORIZONTAL</code> pero en sentido vertical.</li>
</ul>


<h2>anchor</h2>

<p>Este parámetro se utiliza cuando el componente es más pequeño que su área de dibujo - la celda o celdas donde yace el componente - e indica el lugar al que el componente quedará fijado cuando se modifique el tamaño del panel. Los valores están definidos como constantes en <code>GridBadConstraints</code>. Podemos ver los valores y el lugar donde el componente quedará fijado en la siguiente tabla:</p>

<div style="display: block; margin: 0 auto">
<table style="text-align:center;border:solid black;background-color:#f0f0f0;">
<tbody>
<tr>
<td>FIRST_LINE_START</td>
<td>PAGE_START</td>
<td>FIRST_LINE_END</td>
</tr>
<tr>
<td>LINE_START</td>
<td>CENTER</td>
<td>LINE_END</td>
</tr>
<tr>
<td>LAST_LINE_START</td>
<td>PAGE_END</td>
<td>LAST_LINE_END</td>
</tr>
</tbody>
</table>
</div>


<h2>weightx y weighty</h2>

<p>Estos parámetros especifican cómo distribuir el espacio entre las columnas - weightx -  y las filas - weighty -. Los valores que pueden tomar varían entre 0.0 y 1.0, siendo 1.0 el de más peso, lo que indicaría que ese componente ocuparía el mayor espacio posible. Si no se indica lo contrario, ambos parámetros toman el valor 0.0, lo que indica a <code>GridBagLayout</code> que el espacio extra al cambiar el tamaño al panel se dibujará entre el borde de las fila y columnas y el borde del contenedor, dejando un espacio libre entre ellos.</p>

<p>Ahora veamos el código que genera el panel con el gestor <code>GridBagLayout</code>:</p>

<p>{% codeblock Generando el panel %}
package es.rchavarria.gridbaglayouthowto;</p>

<p>public class GridBagLayoutDemo extends javax.swing.JPanel {
  public GridBagLayoutDemo() {</p>

<pre><code>initComponents();
</code></pre>

<p>  }</p>

<p> private void initComponents() {
   java.awt.GridBagConstraints gridBagConstraints;</p>

<p>   btn5 = new javax.swing.JButton();
   btn1 = new javax.swing.JButton();
   btn2 = new javax.swing.JButton();
   btn4 = new javax.swing.JButton();
   btn6 = new javax.swing.JButton();
   btn3 = new javax.swing.JButton();</p>

<p>   setLayout(new java.awt.GridBagLayout());</p>

<p>   btn1.setText(&quot;btn 01&quot;);
   add(btn1, new java.awt.GridBagConstraints());</p>

<p>   btn2.setText(&quot;btn 02&quot;);
   gridBagConstraints = new java.awt.GridBagConstraints();
   gridBagConstraints.gridwidth = 2;
   add(btn2, gridBagConstraints);</p>

<p>   btn3.setText(&quot;btn 03&quot;);
   gridBagConstraints = new java.awt.GridBagConstraints();
   gridBagConstraints.gridx = 0;
   gridBagConstraints.gridy = 1;
   add(btn3, gridBagConstraints);</p>

<p>   btn4.setText(&quot;btn 04&quot;);
   gridBagConstraints = new java.awt.GridBagConstraints();
   gridBagConstraints.gridx = 0;
   gridBagConstraints.gridy = 2;
   gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
   gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTH;
   add(btn4, gridBagConstraints);</p>

<p>   btn5.setText(&quot;btn 05&quot;);
   gridBagConstraints = new java.awt.GridBagConstraints();
   gridBagConstraints.gridx = 2;
   gridBagConstraints.gridy = 3;
   gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
   add(btn5, gridBagConstraints);</p>

<p>   btn6.setText(&quot;large btn&quot;);
   gridBagConstraints = new java.awt.GridBagConstraints();
   gridBagConstraints.gridx = 1;
   gridBagConstraints.gridy = 1;
   gridBagConstraints.gridwidth = 2;
   gridBagConstraints.gridheight = 2;
   gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
   gridBagConstraints.weightx = 1.0;
   gridBagConstraints.weighty = 1.0;
   add(btn6, gridBagConstraints);
 }</p>

<p> private javax.swing.JButton btn1;
 private javax.swing.JButton btn2;
 private javax.swing.JButton btn3;
 private javax.swing.JButton btn4;
 private javax.swing.JButton btn5;
 private javax.swing.JButton btn6;
}
{% endcodeblock %}</p>

<p>Mediante las líneas del código del tipo: <code>add(componente, gridBagConstraint);</code> se especifican las restricciones para cada componente. Es posible utilizar el mismo objeto para especificar las restricciones pero es recomendable utilizar distintas instancias.</p>

<p>Para ver el resultado de este código, simplemente podemos probarlo mediante la siguiente clase:</p>

<p>{% codeblock Codigo de prueba %}
package es.rchavarria.gridbaglayouthowto;</p>

<p>import javax.swing.JFrame;
import javax.swing.SwingUtilities;</p>

<p>public class RunDemo {
public static void main(String[] args) {
  SwingUtilities.invokeLater(new Runnable() {</p>

<pre><code>public void run() {
  JFrame frm = new JFrame(&amp;quot;GridBagLayout HowTo&amp;quot;);
  frm.getContentPane().add(new GridBagLayoutDemo());
  frm.pack();
  frm.setVisible(true);
}
</code></pre>

<p>  });
}
}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Uso de GridBagLayout (I)]]></title>
    <link href="http://rchavarria.github.io/blog/2009/12/21/uso-de-gridbaglayout-i/"/>
    <updated>2009-12-21T22:01:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2009/12/21/uso-de-gridbaglayout-i</id>
    <content type="html"><![CDATA[<div style="margin:2%; padding:2%; background-color:#E0E0E0; ">
  <p>Este post pertenece a mi antiguo blog en <a href="http://rchavarria.wordpress.com">wordpress</a>, pero decidí pasarme a github:pages por las siguientes <a href="http://rchavarria.github.io/blog/2012/12/03/por-que-cambie-mi-blog-en-wordpress-com">razones</a></p>
</div>


<p>En esta entrada veremos el uso básico de <code>GridBagLayout</code>, si se desea profundizar más en el tema se puede consultar la siguiente dirección: <a title="How to use GridBagLayout" href="http://java.sun.com/docs/books/tutorial/uiswing/layout/gridbag.html" target="_blank">How to use GridBagLayout</a>.</p>

<p><code>GridBagLayout</code> es uno de los gestores de layout que proporciona Java/Swing. En mi opinión es el gestor más flexible, pero también el más complejo, de hecho parece pensado para ser usado por constructores de interfaces gráficas, como por ejemplo Matisse para NetBeans.</p>

<!-- more -->


<p>Lo primero de todo veamos qué se puede conseguir con este gestor de layout:</p>

<p>{% img center /images/wordpress/gridbaglayout-frame1.png 250 142 Ventana usando <code>GridBagLayout</code> %}</p>

<p><code>GridBagLayout</code> coloca los componentes en una serie de filas y columnas, permite a los componentes ocupar varias filas y/o columnas y las filas y las columnas no tienen porque tener la misma altura o anchura. Finalmente, <code>GridBagLayout</code> calcula estas alturas y anchuras dependiendo de los atributos preferredSize de los componentes. En la siguiente imagen podemos el diseño de cada una de las celdas en las que se divide <code>GridBagLayout</code>:</p>

<p>{% img center /images/wordpress/gridbaglayout-design.png 172 124 Diseñando un panel con GridBagLayout %}</p>

<p>Los componentes indican a <code>GridBagLayout</code> sus restricciones mediante un objeto del tipo <code>GridBagConstraints</code>. En esta primera entrada estudiaremos las restricciones básicas y dejaremos para la siguiente parámetros más avanzados que nos permitirán diseñar la posición y comportamiento de los componentes con máxima flexibilidad.</p>

<p><code>gridx</code> y <code>gridy</code>:
Indican la fila y la columna donde situar el componente. <code>gridx=0</code> y <code>gridy=0</code> indican la celda superior izquierda, mientras que, en nuestro ejemplo, <code>gridx=3</code> y <code>gridy=3</code> indican la celda inferior derecha.</p>

<p><code>gridwidth</code> y <code>gridheight</code>:
Indica el número de columnas o filas - respectivamente - que ocupa el componente. El valor por defecto es <code>1</code> y es posible que un componente ocupe varias filas y varias columnas a la vez, como por ejemplo <code>btn6</code>.</p>

<p><em>Actualización</em>: si te ha gustado, quizá deberías ver la segunda parte <a title="Uso de GridBagLayout (y II)" href="http://rchavarria.github.io/blog/2010/01/20/uso-de-gridbaglayout-y-ii" target="_self">Uso de GridBagLayout (y II)</a></p>
]]></content>
  </entry>
  
</feed>
