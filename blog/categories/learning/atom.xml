<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: learning | R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/blog/categories/learning/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2016-03-20T17:27:06+01:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elixir: primer asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2016/02/09/elixir-primer-asalto/"/>
    <updated>2016-02-09T21:57:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2016/02/09/elixir-primer-asalto</id>
    <content type="html"><![CDATA[<p>Éste es el primer asalto de mi aprendizaje de <a href="http://elixir-lang.org/">Elixir</a>. En él, no espero
resolver problemas súper complicados, es un primer contacto con el lenguaje. Me
conformaré con ser capaz de escribir un programa algo más complicado que un
simple hola mundo. En este primer asalto, lucho con tipos de datos, funciones
(anónimas y con nombre), pattern matching, claúsulas de guarda y módulos.</p>

<p>En estos asaltos, intentaré seguir los siguientes pasos:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="center" src="/images/2016/touch-gloves-derived-small.png"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/awy1vc">Touch Gloves</a> de <a href="https://www.flickr.com/photos/kaiban/">Jack Zallum</a>, <a href="https://creativecommons.org/licenses/by-nc/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by-nc/2.0/legalcode">CC BY-NC 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<p><strong>Instalación</strong></p>

<p>Instalar la máquina virtual de Erlang y el entorno de Elixir es extremadamente
sencillo. Aquí están los comandos para hacerlo en una máquina con Ubuntu como
sistema operativo. En la <a href="http://elixir-lang.org/install.html">documentación de Elixir</a> hay instrucciones para otros
sistemas operativos.</p>

<p><code>
$ wget https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb
$ sudo dpkg -i erlang-solutions_1.0_all.deb
$ sudo apt-get update
$ sudo apt-get install esl-erlang
$ sudo apt-get install elixir
</code></p>

<p><strong>Editores</strong></p>

<p>La comunidad de Elixir ha creado plugins para los editores de código más
famosos, entre ellos <a href="http://www.vim.org/">Vim</a>, que utilizo para mis <a href="http://rchavarria.github.io/pet-projects/">proyectos personales</a>.</p>

<p>Instalar el plugin <a href="https://github.com/elixir-lang/vim-elixir">vim-elixir</a> en Vim es facilísimo si instalas plugins con
pathogen:</p>

<p><code>
$ git clone https://github.com/elixir-lang/vim-elixir.git ~/.vim/bundle/vim-elixir
</code></p>

<p><strong>Herramientas</strong></p>

<p><code>iex</code> es una herramienta de tipo REPL (read, evaluate, print, loop), que nos
permite ejecutar código Elixir de forma rápida. El comando <code>iex &lt;fichero.exs&gt;</code>
compila un script de Elixir y lo carga en la herramienta. Si ya estamos dentro
de ella, el comando para compilar el código Elixir de un fichero sería <code>c
"&lt;fichero exs&gt;"</code>.</p>

<p><strong>Pattern matching</strong></p>

<p>El operador <code>=</code> es muy diferente a lo que esperamos de él los que estamos
acostumbrados a la programación orientada a objetos. Tiene una apariencia
similar, pero no se comporta de la misma forma. Con este operador, Elixir trata
de hacer coincidir los valores de la izquierda con los valores de la derecha.</p>

<p><code>
a = 2
[a, b, a] = [1, 2, 1]
[^a, b] = [2, 3]
[a, b, c] = [1, 2, [3, 4, 5]]   # c vale [3, 4, 5]
</code></p>

<p><strong>Inmutabilidad</strong></p>

<p>¿Es eficiente devolver una copia de los datos? En los lenguajes funcionales, no
se modifican los datos, se devuelve una copia de ellos transformados. Parece
ineficiente, pero es todo lo contrario. Al no modificarse los originales, éstos
pueden compartirse por muchas variables, y pueden estar tranquilos, ya que no
se va a modificar. En los lenguajes no funcionales, se devuelve una copia (no
eficiente), en los funcionales, en realidad no se devuelve una copia, se
comparte todo lo que se puede. Por lo que es más eficiente.</p>

<p>¿Qué pasa con el recolector de basura? ¿Consume muchos recursos para deshacerse
de todos esos datos transformados que ya no se utilizan? No consume mucho, en
Elixir (en Erlang en realidad), hay muchos procesos, cada uno con un <em>heap</em>
distinto, por lo que el heap es más pequeño que en otros lenguajes, y el
recolector de basura se ejecuta bastante más rápido.</p>

<p><strong>Tipos de datos</strong></p>

<p>Y por fin algo de código:</p>

<p>```</p>

<h1>enteros</h1>

<p>this_is_an_int = 1234
this_is_an_int = 0xcafe    # admite hexadecimal
this_is_an_int = 0o765     # octal
this_is_an_int = 0b01010   # binario
this_is_an_int = 1_000_000</p>

<h1>en coma flotante</h1>

<p>this_is_a_float = 1.0
this_is_a_float = 0.245
this_is_a_float = .342        # error
this_is_a_float = 314159.0e-5</p>

<h1>rangos</h1>

<p>this_is_a_range = 1..100</p>

<h1>expresiones regulares</h1>

<p>this_is_a_regexp = ~r{regexp}options</p>

<h1>tuplas</h1>

<p>this_is_a_tuple = { :ok, 42, "next" }</p>

<h1>listas: se parecen a los arrays de otros lenguajes, pero no</h1>

<h1>lo son. Son estructuras enlazadas. Una lista o está vacía, o</h1>

<h1>contiene un head y un tail, donde tail es otra lista</h1>

<p>this_is_a_list = [ 1, 2, 3 ]</p>

<h1>mapas: lista de parejas clave/valor</h1>

<p>this_is_a_map = %{ key => value, key => value }</p>

<h1>si las claves son Atoms, se puede escribir</h1>

<p>this_is_a_map = %{ red: 0xFF0000, green: 0x00FF00, blue: 0x0000FF }</p>

<h1>binarios: para acceder a datos como una secuencia de bits y bytes (para muy bajo nivel)</h1>

<p>```</p>

<p>Hay otros tipos de datos, como los PIDs (referencias a procesos locales o
remotos) o los puertos (referencias a recursos sobre los cuales leeremos o
escribiremos).</p>

<p>Un tipo de datos muy interesante (y que yo personalmente no conocía) son los
<em>Atoms</em>: constantes representando el nombre de algo. Su nombre es su valor. Dos
Atoms son igules si tienen el mismo nombre, vengan de donde vengan (incluso de
máquinas diferentes)</p>

<p>```</p>

<h1>atoms</h1>

<p>this_is_an_atom = :fred
this_is_an_atom = :is_binary?
this_is_an_atom = :var@32
this_is_an_atom = :&lt;>
this_is_an_atom = :"lo john silver"
```</p>

<p>Hay dos estructuras muy similares, la lista de palabras clave: <code>[red: 0xFF000,
green: 0x00FF00]</code>, que se transforma en <code>[{:red, 0xFF0000}, {:green,
0x00FF00}]</code> y un mapa <code>%{red: 0xFF000, green: 0x00FF00}</code>. Se recomienda usar la
lista de palabras clave para pasar parámetros y usar los mapas cuando se
necesite un array asociativo.</p>

<p>No hemos dicho nada de las cadenas. Pertenecen al tipo <em>Binario</em>. Existe
interpolación de cadenas, con <code>#{...}</code> se evalúa el código de dentro y se
formatea la cadena con el valor obtenido.</p>

<p><strong>Funciones anónimas</strong></p>

<p><code>
sum = fn (a, b) -&gt; a + b end
sum.(2, 3)   # devuelve 5
</code></p>

<p>Las funciones pueden devolver otras funciones. Las funciones recuerdan su
entorno original. Forman lo que se conoce como <em>closures</em>. Me recuerda mucho a
las funciones de JavaScript en este aspecto.</p>

<p>Existe una forma de crear funciones anónimas de una forma muy concisa, con el
operador <code>&amp;...</code></p>

<p>```
sum = fn (a, b) -> a + b end
sum2 = &amp;(&amp;1 + &amp;2)   # idéntica a la función anterior</p>

<h1>devuelve lista con dos elementos: doble del primer parámetro, y cuadrado del mismo</h1>

<p>returns_a_list = &amp;[2 * &amp;1, &amp;1 * &amp;1]</p>

<h1>esta notación viene muy bien para pasar funciones por parámetro</h1>

<p>Enum.map [1, 2, 3] &amp;(&amp;1 * &amp;1)   # devuelve [1, 4, 9]
```</p>

<p>Es normal ver la definición de una función como <code>&amp;map/2</code>, donde <code>map</code> es el
nombre de la función y <code>2</code> es el <em>arity</em>, el número de parámetros de la misma.</p>

<p><strong>Módulos, funciones con nombre y funciones privadas</strong></p>

<p>```
defmodule Times do
  ## define una función en una única línea
  def double(n), do: n * 2</p>

<p>  ## define una función en varias líneas
  def triple(n) do</p>

<pre><code>n * 3
</code></pre>

<p>  end</p>

<p>  ## define una función privada
  defp quadruple(n) do: n * 4
end
```</p>

<p>Las funciones con nombre pueden tener varios cuerpos. Eso ayuda a utilizar
<em>pattern matching</em> a la hora de implementar una solución.</p>

<p>```
defmodule Factorial do
  # el factorial de 0, siempre es 1, esta definición es quien para la recursividad
  def of(0), do: 1</p>

<p>  # el factorial de cualquier otro número, es recursivo
  def of(n), do: n * factorial(n - 1)
end</p>

<p>Factor.of(5)
  # => 120
```</p>

<p>También, las definiciones pueden tener claúsulas de guarda, mediante <code>when
&lt;condition&gt;</code>, lo que ayuda a tener un pattern matching más específico.</p>

<p>```
defmodule Guard do
  def what_is(x) when is_number(x) do</p>

<pre><code>IO.puts "#{x} is a number"
</code></pre>

<p>  end
  def what_is(x) when is_list(x) do</p>

<pre><code>IO.puts "#{x} is a list"
</code></pre>

<p>  end
  def what_is(x) when is_atom(x) do</p>

<pre><code>IO.puts "#{x} is an atom"
</code></pre>

<p>  end
end
```</p>

<p><strong>El operador tubería (pipe)</strong></p>

<p>El operador <code>|&gt;</code> toma el resultado de una función y lo pasa como primer
parámetro de la segunda función. <code>String.reverse "foobar" |&gt; String.capitalize</code></p>

<p>```
filing = DB.find_customers</p>

<pre><code>       |&gt; Orders.for_customers
       |&gt; sales_tax(2016)
       |&gt; prepare_filing
</code></pre>

<p>list
  |> sales_taxes(2016)
  |> prepare_filing</p>

<h1>es lo mismo que llamar</h1>

<p>prepare_filing( sales_taxes(list, 2016) )
```</p>

<p><strong>Parámetros por defecto</strong></p>

<p>```
defmodule DefaultParams do
  def func(p1, p2 \ 2) do</p>

<pre><code>IO.inspect [p1, p2]
</code></pre>

<p>  end
end</p>

<p>Example.func("a", "b")
  # => ["a", "b"]</p>

<p>Example.func("a")
  # => ["a", 2]
```</p>

<p><strong>Librerías</strong></p>

<p>Se pueden buscar módulos y librerías ya implementados para realizar ciertas
tareas que necesitemos, para ello, está la documentación de <a href="http://elixir-lang.org/docs.html">librerías de Elixir</a>.
Si no encontramos ahí lo que buscamos, lo podemos buscar en <a href="http://erlang.org/doc/">librerías de Erlang</a>.</p>

<h2>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</h2>

<p><strong>¿Qué hace <code>^</code> en el pattern matching?</strong></p>

<p>El operador <code>^</code> obliga a que el valor actual de una variable coincida con el
valor en la expresión de <em>pattern matching</em>. En caso de no coincidir, se
producirá un error.</p>

<p><code>
a = 2
[^a, b] = [2, 3]  ## no hay error, `a` valía `2` y aquí coinciden
[^a, b] = [1, 3]  ## error
</code></p>

<p><strong>Tuplas, <em>keyword list</em> y mapas</strong></p>

<p>Las <em>keyword list</em> son una lista usadas muy a menudo, tienen la forma:</p>

<p><code>
keyword_list = [ red: 0xFF0000, green: 0x00FF00, blue: 0x0000FF ]
</code></p>

<p>Pero no es más que una forma simplificada de escribir una lista de tuplas,
donde el primer valor de cada una de ellas es un Atom:</p>

<p><code>
tuple_list = [ {:red, 0xFF000}, {:green, 0x00FF00}, {:blue, 0x0000FF} ]
</code></p>

<p>Una estructura muy parecida a estas son los mapas, que no son más que un
conjunto de parejas clave-valor:</p>

<p><code>
a_map = %{ :red =&gt; 0xFF000, :green =&gt; 0x00FF00, :blue =&gt; 0x0000FF }
</code></p>

<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-01/round-01-exercise-01.exs">round-01-exercise-01.exs</a>: utilizar varios cuerpos de una función y
recursividad para implementar una función que calcule la suma de <code>1</code> hasta
<code>n</code></li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-01/round-01-exercise-02.exs">round-01-exercise-02.exs</a>: implementar la función <code>gcd(x, y)</code> que calcule el
máximo común divisor. Matemáticamente: <code>gcd(x, y)</code> es <code>x</code> si <code>y</code> es cero y es
<code>gcd(y, rem(x, y))</code> en caso contrario</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-01/round-01-exercise-03.exs">round-01-exercise-03.exs</a>: crear el juego <em>Estoy pensando en un número entre
el 1 y el 100</em>: rangos, div(a, b), claúsulas de guarda, pattern matching en
rangos: <code>a..b = 4..8</code>, funciones privadas</li>
</ul>


<h2>Enseñar lo aprendido</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta el siguiente asalto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aprendiendo Elixir]]></title>
    <link href="http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir/"/>
    <updated>2016-01-17T16:39:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/2016/elixir.png" width="200" height="266"></p>

<p>No es una propósito de año nuevo ni nada, pero me apetece aprender un lenguaje
puramente funcional por el simple hecho de aprender. He estado dudando entre
Clojure y Elixir. Al final me he decidido por Elixir porque lo <em>venden</em> como
divertido y porque sigo a varias personas en Twitter que están haciendo lo
mismo (durante la redacción de este post me he enterado que hay un meetup nuevo
del lenguaje en Madrid, <a href="http://www.meetup.com/Madrid-Elixir/">Madrid |> Elixir</a>), por lo que podré compartir lo
aprendido. Dicen de Elixir que se parece mucho a Ruby, y que es un lenguaje
moderno que se ejecuta la máquina virtual de Erlang. Con esos <em>hermanos
mayores</em> promete mucho, la verdad.</p>

<!-- more -->


<p>Para ir aprendiendo el lenguaje, voy a poner en práctica el proceso de
aprendizaje que descubrí leyendo el libro <a href="http://rchavarria.github.io/blog/2015/11/08/soft-skills/">Soft Skills</a>, de John Sonmetz:</p>

<ol>
<li>Entender la habilidad que se quiere aprender</li>
<li>Delimitar el ámbito</li>
<li>Definir qué se va a considerar como éxito</li>
<li>Encontrar recursos</li>
<li>Crear un plan de aprendizaje</li>
<li>Filtrar los recursos</li>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido, y repetir desde el paso 7</li>
</ol>


<p>Antes de llegar a los puntos 7-10, que son como un bucle, ahí van los primeros.</p>

<h2>¿Qué habilidad quiero aprender?</h2>

<p><strong>Quiero aprender a programar en Elixir</strong>. La frase es sencilla, pero ¿qué
significa? ¿Significa que solamente quiero aprender la sintaxis? No, eso no es
aprender un lenguaje de programación. ¿Significa que debo aprender todas las
herramientas, frameworks, librerías, sistemas,...? Tampoco. Eso es imposible.
He programado durante años en Java o JavaScript y lo que desconozco de ellos es
mucho más de lo que conozco.</p>

<p>Así pues, delimitaré el aprendizaje a conocer lo suficientemente el lenguaje y
su ecosistema para ser capaz de escribir la parte servidora de una aplicación
web.</p>

<h2>¿Qué voy a considerar como éxito?</h2>

<p>Tengo que poner algún límite. Creo que algo realmente interesante sería
considerar un éxito poder <strong>desarrollar la parte servidora de una aplicación web</strong>,
una API REST o algo así, que gestionara algún tipo de recurso (usuarios,
tareas,... todavía no lo se). Si además soy capaz de desplegar la aplicación en
alguna plataforma como Heroku o similar, el éxito sería rotundo.</p>

<p>No me planteo nada de conectarlo a una base de datos, porque por ahora no he
leído nada acerca de ello. Supongo que habrá alguna posibilidad, pero por ahora
lo voy a dejar fuera.</p>

<h2>Recursos</h2>

<p>Esta es una lista inicial de recursos que voy a ir consumiendo:</p>

<ul>
<li>Web <a href="http://elixir-lang.org/">elixir-lang.org</a>. Web oficial. Creo que me puede servir para tener
documentación rápida de forma online.</li>
<li>Libro <a href="https://pragprog.com/book/elixir/programming-elixir">Programming Elixir, de Dave Thomas</a>. Parece ser el libro de
referencia, así que es un recurso indispensable.
<a href="https://forums.pragprog.com/forums/322">Foros de discusión del libro</a>.</li>
<li>Libro <a href="https://pragprog.com/book/phoenix/programming-phoenix">Programming Phoenix</a>, también de la editorial The Pragmatic
Programmer. Phoenix es un framework para desarrollar aplicaciones web con
Elixir (<a href="https://twitter.com/_rubenfa/status/689356164082049024">recomendado por Rubén Fernández</a>, gracias).</li>
<li><a href="https://github.com/elixir-lang/elixir">Código elixir en GitHub</a>. Código, código, código.</li>
<li>Screencasts <a href="http://elixirsips.com/">elixir sips</a>. Videos sobre Elixir, muchos de ellos bajo
suscripción.</li>
<li><a href="https://www.learnelixir.tv/episodes">LearnElixitTV</a>. Más videos sobre Elixir, en este caso son de pago pero no de
suscripción.</li>
<li><a href="http://elixirdose.com/">Elixir Dose</a>. Un blog sobre este lenguaje de programación.</li>
<li>Blog de <a href="http://benjamintan.io/blog/">Benjamin Tan</a>. Un blog sobre Ruby y Elixir del autor de un libro
sobre Elixir. Parece venir del mundo Ruby. Tiene una charla en una
conferencia de Ruby que hay que ver.</li>
<li>Track de Elixir de <a href="http://exercism.io/languages/elixir">exercism.io</a>, una plataforma social donde resolver
problemas y comentar las soluciones del resto de usuarios.</li>
<li><a href="https://github.com/niftyn8/elixir_style_guide">Guía de estilo</a> para programar en Elixir. De obligado conocimiento para que
tu código sea más legible por la comunidad.</li>
<li><a href="https://www.youtube.com/watch?v=fklep3sUSWo">The climb experiencing the rise of Elixir from the inside</a>: una charla
impresionante de Dave Thomas y Bruce Tate sobre Elixir, comparando el
desarrollo de un lenguaje con subir al Everest. Todos somos Sherpas y debemos
compartir la carga (de José Valim y su equipo) para hacer de Elixr, Phoenix y
Elm un gran lenguaje y una gran plataforma. También hablan de QWAN (quality
without a name) en Elixir. <em>QWAN is two way</em>, nos sentimos inspirados por la
calidad</li>
</ul>


<p>Comparativa entre subir al Everest y desarrollar un lenguaje, Sherpas, todos somos Sherpas, y debemos compartir la carga (de José Valim y su equipo) para hacer de Elixir, Phoenix y Elm un gran lenguaje.</p>

<p>También espero que poco a poco, según vaya necesitando saber más sobre cómo
hacer cosas con el lenguaje, vaya descubriendo blogs y autores acerca del
lenguaje.</p>

<h2>Plan de aprendizaje</h2>

<p>Por ahora no tengo ningún plan. El más básico que tengo es empezar a leer el
libro Programming Elixir y cuando sea capaz de escribir algún programa más
complejo que un <em>Hola mundo</em> empezar a resolver problemas en exercism.io.</p>

<p>A partir de ahí, el tiempo dirá.</p>

<h2>Recursos filtrados</h2>

<p>Creo que no tengo tantos recursos como para filtrarlos. Empezando con el libro,
con exercism.io y de vez en cuando la web oficial del lenguaje puede ser
suficiente para ir cogiendo ritmo.</p>

<h2>Asaltos</h2>

<ol>
<li><a href="http://localhost:4000/blog/2016/02/09/elixir-primer-asalto/">Primer asalto</a>: tipos, funciones, pattern matching y módulos</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Se aceptan mejoras]]></title>
    <link href="http://rchavarria.github.io/blog/2015/11/22/se-aceptan-mejoras/"/>
    <updated>2015-11-22T22:27:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/11/22/se-aceptan-mejoras</id>
    <content type="html"><![CDATA[<p>Existe una cosa maravillosa en el mundo de open source, y es que personas que
ni siquiera sabes que existen, usan tu trabajo, lo mejoran con el suyo, y te lo
donan a tí para que otra gente se beneficie del trabajo de ambos.</p>

<p><img class="left" src="/images/2015/contribution.png"></p>

<p>Imagina que tienes una librería y tienes una base de usuarios. Ningún software
se adapta a todos sus usuarios, así que lo más seguro es que los usuarios de tu
librería encuentren algún detalle que no encaja a la perfección con sus
necesidades. ¿No sería incríble que tus propios usuarios mejoraran la librería y
te dieran su trabajo así como les das tú el tuyo? Pues eso es lo que pasa
precisamente con el open source.</p>

<p>Y algo parecido pasa cuando contribuyes a algún proyecto open source. Tus
contribuciones son usadas por los usuarios del proyecto. Y algunos de ellos
proponen nuevas mejoras al proyecto. Quizá algunas de estas mejoras sean sobre
el trabajo que tú has realizado. Gente que ni conoces está aportando su
experiencia para mejorar tu trabajo. Hay que ser muy tonto para no aprovechar
esta oportunidad para aprender.</p>

<!-- more -->


<p>Este artículo describe el proceso a seguir para aceptar mejoras en un proyecto
publicado en <a href="https://github.com/">Github</a>, donde [<code>git</code>] es usada como herramienta de control de
versiones. Estas mejoras son propuestas por usuarios externos al proyecto a
través de <a href="https://help.github.com/articles/using-pull-requests/">Pull Requests</a> (o también PR). Github te ayuda a la hora de
incorporar esas mejoras a tu proyecto, pero hacerlo así deja la historia de tu
control de versiones hecha unos zorros (en <a href="http://blog.differential.com/best-way-to-merge-a-github-pull-request/">Best way to merge a pull request</a>
lo cuentan más detalladamente).</p>

<p>Ésta es la secuencia de comandos mediante los cuales se incoroporarían los
cambios propuestos en un Pull Request con número <code>pr-number</code> desde una rama
creada por el autor llamada <code>user-working-branch</code>:</p>

<p>```
rchavarria@proyect$ git checkout master
rchavarria@proyect$ git fetch origin
rchavarria@proyect$ git reset --hard origin/master</p>

<p>rchavarria@proyect$ git fetch origin refs/pull/<pr-number>/head
rchavarria@proyect$ git checkout -b <user-working-branch> FETCH_HEAD
rchavarria@proyect$ git rebase master</p>

<p>rchavarria@proyect$ git checkout master
rchavarria@proyect$ git merge --no-ff <user-working-branch>
rchavarria@proyect$ git push origin master
```</p>

<h2>Limpiar el espacio de trabajo</h2>

<p><code>
rchavarria@proyect$ git checkout master
Already on 'master'
Your branch is up-to-date with 'origin/master'.
rchavarria@proyect$ git fetch origin
remote: Counting objects: 66, done.
remote: Compressing objects: 100% (43/43), done.
remote: Total 66 (delta 14), reused 6 (delta 6), pack-reused 17
Unpacking objects: 100% (66/66), done.
From https://github.com/exercism/xecmascript
   9b32d79..de450d0  master     -&gt; origin/master
 * [new branch]      new-exercise-raindrops -&gt; origin/new-exercise-raindrops
</code></p>

<p>Con estos comandos simplemente se cambia a la rama <code>master</code> y se descargan los
cambios que existan en el repositorio remoto (sin aplicar los cambios a ningún
archivo todavía). En este caso, el repositorio es uno de Github. En el código
anterior se puede ver cómo existe una nueva rama en remoto,
<code>new-exercise-raindrops</code>, que se corresponde con el Pull Request que vamos a
incorporar al repositorio.</p>

<p><code>
rchavarria@proyect$ git reset --hard origin/master
HEAD is now at de450d0 Merge pull request #78 from rchavarria/new-exercise-roman-numerals
</code></p>

<p>Este comando elimina cualquier cambio en local y lo sobreescribe exactamente
con los cambios que ha tomado del repositorio remoto. De esta forma <strong>se tiene
en local exactamente lo mismo que en remoto</strong>, y es un punto de partida seguro.</p>

<h2>Descargar las mejoras</h2>

<p>Anteriormente git ha avisado de que hay una nueva rama, un nuevo Pull Request.</p>

<p><code>
rchavarria@proyect$ git fetch origin refs/pull/80/head
From https://github.com/exercism/xecmascript
 * branch            refs/pull/80/head -&gt; FETCH_HEAD
</code></p>

<p>El anterior comando descarga los cambios contenido en el Pull Request con
número <code>&lt;pr-number&gt;</code>, que podría ser por ejemplo el <code>80</code>.</p>

<p><code>
rchavarria@proyect$ git checkout -b new-exercise-raindrops FETCH_HEAD
Switched to a new branch 'new-exercise-raindrops'
</code></p>

<p>Así, se crea una nueva rama, llamada <code>new-exercise-raindrops</code> que contiene los
cambios del Pull Request.</p>

<p>Y ahora llega un momento delicado. Se debe hacer que el commit por el que
comienza la rama recién creada sea el último commit que existía en <code>master</code>. De
esta forma se consigue que la historia del control de versiones sea la más
legible. En este punto es posible que se produzcan conflictos. Ese es otro tema
que daría para muchas explicaciones. Si se quiere profundizar, se puede echar
un vistazo a la propia [documentación de <code>git</code> sobre el comando <code>rebase</code>].</p>

<p><code>
rchavarria@proyect$ git rebase master
Current branch new-exercise-raindrops is up to date.
</code></p>

<p>Si no hay conflictos, perfecto, ya está.</p>

<h2>Comprobar las mejoras</h2>

<p>Ahora es el momento de hacer comprobaciones:</p>

<ul>
<li>Se deberían ejecutar los tests del proyecto</li>
<li>Chequear los cambios, comparándolos con versiones anteriores</li>
<li>Comprobar que se siguen las reglas de estilo en el código</li>
<li>En general, asegurarse de que el código a incorporar es un código con el que
estamos contentos</li>
</ul>


<p>En esta fase se pueden hacer nuevos cambios o pedir al programador que
contribuye que realice algunos cambios por sí mismo y que actualize el Pull
Request.</p>

<p><img class="center" src="/images/2015/github-diff.png"></p>

<h2>Incorporar los cambios</h2>

<p>Una vez está todo comprobado y se está de acuerdo con los cambios, ha llegado
la hora de incorporar los cambios a la rama <code>master</code> para que finalmente formen
parte del código del proyecto.</p>

<p><code>
rchavarria@proyect$ git checkout master
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.
rchavarria@proyect$ git merge --no-ff new-exercise-raindrops
Merge made by the 'recursive' strategy.
 config.json                 |  3 ++-
 raindrops/example.js        | 17 +++++++++++++++++
 raindrops/gulpfile.js       | 42 ++++++++++++++++++++++++++++++++++++++++++
 raindrops/package.json      | 24 ++++++++++++++++++++++++
 raindrops/raindrops.spec.js | 38 ++++++++++++++++++++++++++++++++++++++
 5 files changed, 123 insertions(+), 1 deletion(-)
 create mode 100644 raindrops/example.js
 create mode 100644 raindrops/gulpfile.js
 create mode 100644 raindrops/package.json
 create mode 100644 raindrops/raindrops.spec.js
</code></p>

<p>Los comandos cambian el espacio de trabajo a la rama <code>master</code> e incorporan los
cambios a la misma. Se deberá proporcionar un mensaje para el commit que va a
generar <code>git merge</code>. Un ejemplo sería:</p>

<p>```
Merge pull request #80 from matthewmorgan/new-exercise-raindrops</p>

<p>Closes #80
```</p>

<p>Donde <code>80</code> es el número del Pull Request, <code>matthewmorgan</code> es el nombre del
programador que contribuye y <code>new-exercise-raindrops</code> es el nombre de la rama
que le dió el programador y el que se ha utilizado para la incorporación de los
cambios.</p>

<p>Finalmente, se suben los cambios al repositorio remoto y ...</p>

<p><code>
rchavarria@proyect$ git push origin master
Username for 'https://github.com': rchavarria
Password for 'https://rchavarria@github.com':
Counting objects: 1, done.
Writing objects: 100% (1/1), 273 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To https://github.com/exercism/xecmascript.git
   de450d0..eae366a  master -&gt; master
</code></p>

<p>... ¡magia!</p>

<p><img class="center" src="/images/2015/pull-request-merged.png"></p>

<h2>Referencias</h2>

<ul>
<li><a href="http://blog.differential.com/best-way-to-merge-a-github-pull-request/">Best way to merge a pull request</a></li>
<li><a href="https://www.youtube.com/watch?v=1ffBJ4sVUb4">Git for 4 and up</a></li>
<li><a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">Better commit messages</a></li>
<li><a href="https://www.youtube.com/watch?v=8YjSty6bfog">Do your commits suck?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aprendiendo Ionic 2]]></title>
    <link href="http://rchavarria.github.io/blog/2015/11/15/aprendiendo-ionic-2/"/>
    <updated>2015-11-15T22:49:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/11/15/aprendiendo-ionic-2</id>
    <content type="html"><![CDATA[<p>Recientemente se ha celebrado la conferencia <a href="http://angularconnect.com/">Angular Connect</a> en Londres,
donde se ha hablado mucho de <a href="https://angular.io/">Angular 2</a>, framework de desarrollo de
aplicaciones web en el que estoy muy interesado (de hecho estoy desarrollando
una pequeña aplicación para diversión de mi hijo, <a href="https://play.google.com/store/apps/details?id=es.rchavarria.englishbyeinar">English by Einar</a>). También
estoy enteresado en el framework <a href="http://ionicframework.com/">Ionic</a>, que aúna los proyectos de Angular y
<a href="http://cordova.apache.org/">Cordova</a> y que permite desarrollar aplicaciones para móviles con herramientas
de desarrollo web: HTML5, CSS3 y JavaScript.</p>

<p>En dicha conferencia se hizo público la versión alpha de <a href="http://ionicframework.com/docs/v2/">Ionic 2</a>, la versión
de Ionic que incluye la nueva versión de Angular. Ionic es un framework para
desarrollo de aplicaciones cliente móviles híbridas con tecnologías web y en su
versión 2 siguen con la filosofía de estar muy preocupados por el rendimiento.
En este post veremos lo realmente fácil que es comenzar a desarrollar con estas
herrmientas.</p>

<p><img class="center" src="/images/2015/ionic-framework.jpg" width="350" height="185" title="Ionic Framework" ></p>

<!-- more -->


<h2>Requisitos</h2>

<p>Ionic se apoya en Cordova y en las plataformas de desarrollo nativas
dependiendo de la plataforma móvil en la que estemos enfocados, normalmente
Android o iOS. Antes de comenzar a desarrollar con él deberemos actualizar a
las versiones más modernas posibles, ya que la versión alpha de Ionic 2
requiere de los últimos avances.</p>

<p>En mi caso particular, he necesitado actualizar mi SDK de Android para Linux:</p>

<p><code>
rchavarria@home$ ./AndroidSDK/tools/android sdk
</code></p>

<p>para abrir la interfaz gráfica y poder actualizar algunos paquetes del SDK.</p>

<p>Y también he necesitado actualizar las versiones de NodeJS (a través de <code>nvm</code>,
Node Version Manager), la herramienta <code>npm</code> y Cordova:</p>

<p><code>
rchavarria@home$ nvm install v5.0.0
rchavarria@home$ npm install -g npm
rchavarria@home$ npm install -g cordova@5.3.3
</code></p>

<p>Por último, instalar la versión alpha de Ionic 2. No temas, no hay peligro de
romper proyectos desarrollados con la versión 1 de Ionic.</p>

<p><code>
rchavarria@home$ npm install -g ionic@alpha
</code></p>

<h2>Creación del primer proyecto</h2>

<p>Para mi primer proyecto he usado una plantilla desarrollada por la gente de
Ionic, <a href="https://github.com/driftyco/ionic2-starter-tutorial">tutorial</a>. Estas plantillas permiten tener una aplicación muy básica
funcionando en unos minutos. Esta plantilla contiene un menú deslizante
lateral, pero hay otras muchas plantillas. Crear el proyecto es un simple
comando:</p>

<p><code>
rchavarria@home$ ionic start MyFirstIonic2Project tutorial --v2
</code></p>

<p>Este comando descarga la plantilla indicada, <code>tutorial</code>, instala dependencias
de NodeJS y nos deja el proyecto listo para ser ejecutado. De hecho, para poder
probarlo en un navegador, basta con escribir los comandos:</p>

<p><code>
rchavarria@home$ cd MyFirstIonic2Project
rchavarria@home$ ionic serve
</code></p>

<h2>Estructura del proyecto</h2>

<p>Prácticamente todos los ficheros de la aplicación están localizados en el
directorio <code>www</code>, como en todo proyecto de Cordova.</p>

<p>El punto de entrada principal es <code>www/index.html</code>. Como página principal, carga
los ficheros CSS, incluye los JavaScript y arranca la aplicación. Ionic busca
una etiqueta <code>ion-app</code> dentro de esta primera página HTML.</p>

<p>Todo el código JavaScript que se encuentra en el directorio <code>www/app</code> se
transpila a la versión correcta de JavaScript que soporte el navegador para el
que está dirigida la aplicación. En este directorio podremos encontrar código
tanto TypeScript como ECMAScript 2015.</p>

<p>En el archivo <code>www/app/app.js</code> podemos encontrar la entrada a nuestra
aplicación. Crea un component con el decorador <code>@App</code>, componente necesario
para toda aplicación Ionic.</p>

<p><code>
@App({
  templateUrl: 'app/app.html'
})
class MyApp {
//...
}
</code></p>

<p>El código de <code>@App</code> configura el archivo <code>www/app/app.html</code> como plantilla para
la aplicacion. Veámoslo:</p>

<p>```
<ion-menu [content]="content"></p>

<p>  <ion-content></p>

<pre><code>&lt;ion-list&gt;
  &lt;button ion-item *ng-for="#p of pages" (click)="openPage(p)"&gt;
  &lt;/button&gt;
&lt;/ion-list&gt;
</code></pre>

<p>  </ion-content></p>

<p></ion-menu></p>

<p><ion-nav id="nav" [root]="rootPage" #content swipe-back-enabled="false"></ion-nav>
```</p>

<p>Esta plantilla define un menu bajo la etiqueta <code>ion-menu</code>, y un componente de
navegación, <code>ion-nav</code>, ambos proporcionados por Ionic. <code>ion-menu</code> toma una
propiedad para mostrar un contenido, <code>content</code>, la cual se la podemos
proporcionar a través de la variable <code>#content</code> desde nuestro <code>ion-nav</code>.</p>

<p><code>ion-nav</code> define un <em>data binding</em> a la propiedad <code>root</code> del componente, igual
que <code>ion-menu</code> define un <em>data binding</em> a la propiedad <code>content</code> (en Angular 2,
los <em>data binding</em> son unidireccionales por defecto y se declaran mediante
corchetes en atributos de las etiquetas HTML). Cuando se cargue el controlador
de la navegación, el componente referenciado por la variable <code>rootPage</code> será
mostrada como la página principal de nuestra aplicación.</p>

<p>En <code>www/app/app.js</code>, el componente raiz de la aplicación, <code>MyApp</code>, especifica
dos propiedades: <code>pages</code> y <code>rootPage</code></p>

<p>```
import {App, IonicApp, IonicPlatform} from 'ionic/ionic';
import {HelloIonicPage} from './hello-ionic/hello-ionic';
import {ListPage} from './list/list';
// ...
class MyApp {
  constructor(app: IonicApp, platform: IonicPlatform) {</p>

<pre><code>// set up our app
// ...

// set our app's pages
this.pages = [
  { title: 'Hello Ionic', component: HelloIonicPage },
  { title: 'My First List', component: ListPage }
];

// make HelloIonicPage the root page
this.rootPage = HelloIonicPage;
</code></pre>

<p>  }
  // ...
}
```</p>

<h2>Cómo se crea un página</h2>

<p>El componente <code>HelloIonicPage</code> se define en el fichero
<code>www/hello-ionic/hello-ionic.js</code>. Contiene un decorador <code>@Page</code>, proporcionado
por Ionic, y su nombre lo dice todo. Este componente crea una página Ionic, que
consta de un componente y una vista de Angular 2.</p>

<p>```
import {Page, NavController} from 'ionic/ionic';</p>

<p>@Page({
  templateUrl: 'app/hello-ionic/hello-ionic.html'
})
export class HelloIonicPage {
  constructor(nav: NavController) {</p>

<pre><code>this.nav = nav;
</code></pre>

<p>  }
}
```</p>

<p>Cada página se compone de un componente JavaScript y de una plantilla HTML.
Veamos ésta última:</p>

<p>```
<ion-navbar *navbar>
  <a menu-toggle><icon menu /></a>
  <ion-title>Hello Ionic</ion-title>
</ion-navbar></p>

<p><ion-content>
  <h3>Welcome to your first Ionic app!</h3>
  <p></p>

<pre><code>...
</code></pre>

<p>  </p>
</ion-content>
```</p>

<p>La etiqueta <code>&lt;ion-navbar *navbar&gt;</code> funciona como configuración para la barra de navegación. Es quien incluye los botones a mostrar en dicha barra, así como el título.</p>

<h2>Navegando entre páginas</h2>

<p>La otra página, <code>ListPage</code>, contiene una lista de elementos que el usuario
puede tocar (o hacer click) para acceder a ellas. Dicha página está definida en
el archivo <code>www/app/list/list.js</code>.</p>

<p>```
import {IonicApp, Page, NavController, NavParams} from 'ionic/ionic';</p>

<p>@Page({
  templateUrl: 'app/list/list.html'
})
export class ListPage {
  constructor(app: IonicApp, nav: NavController, navParams: NavParams) {</p>

<pre><code>this.nav = nav;
// ...
</code></pre>

<p>   }</p>

<p>   itemTapped(event, item) {</p>

<pre><code> // ...
</code></pre>

<p>   }
}
```</p>

<p>La plantilla de esta página, definida en <code>www/app/list/list.html</code>, es quien
mostrará una lista de elementos. <code>*ng-for</code> es la sintaxis de Angular 2 para
reproducir la misma funcionalidad que <code>ng-repeat</code> en AngularJS. El manejador
del evento click se establece con <code>(click)=itemTapped(...)</code> (en Angular 2, se
utilizan los paréntesis en atributos de las etiquetas HTML para establecer los
manejadores de eventos). De esta forma, cada vez que el usuario toque/haga
click en un elemento, el método <code>itemTapped</code> será llamado.</p>

<p><code>
&lt;ion-item *ng-for="#item of items" (click)="itemTapped($event, item)"&gt;
</code></p>

<p>Para navegar a una nueva página, se puede usar el componente <code>NavController</code>,
también proporcionado por Ionic. Anteriormente, se ha almacenado una referencia
a dicho componente en el atributo <code>nav</code> de <code>ListPage</code>.</p>

<p>```
import {ItemDetailsPage} from '../item-details/item-details';
// ...
itemTapped(event, item) {
  this.nav.push(ItemDetailsPage, {</p>

<pre><code>item: item
</code></pre>

<p>  });
}
```</p>

<p>La navegación en Ionic funciona como una <em>pila</em> (o <em>stack</em>), donde podemos poner (<code>push</code>)
o quitar (<code>pop</code>) páginas de la pila.</p>

<h2>¿Y ahora qué?</h2>

<p>Ya tenemos una estructura muy básica para el proyecto, y ya sabemos cómo crear
páginas y cómo funciona la navegación en Ionic 2. El siguiente paso se me
ocurre que podría ser incluir las herramientas y la estrutura necesaria para
poder incluir tests en nuestro proyecto. Lo siento si te parece una lata, pero
creo que los tests son una herramienta imprescindible en cualquier proyecto,
sea de la embergadura que sea. Considero que los tests son básicos para tener
un mínimo de calidad en cualquier proyecto software.</p>

<h2>Referencias</h2>

<ul>
<li>Documentación sobre <a href="http://ionicframework.com/docs/v2/components">componentes de Ionic 2</a></li>
<li>Documentación sobre <a href="http://ionicframework.com/docs/v2/platform">el API de dispositivos de Ionic 2</a></li>
<li><a href="http://ionicframework.com/docs/v2/resources/">Recursos</a>, en general, de Ionic 2</li>
<li><a href="https://angular.io/docs/ts/latest/testing/">Tests en Angular 2</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla técnica: Follow my leader]]></title>
    <link href="http://rchavarria.github.io/blog/2015/10/04/charla-tecnica-follow-my-leader/"/>
    <updated>2015-10-04T15:21:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/10/04/charla-tecnica-follow-my-leader</id>
    <content type="html"><![CDATA[<p>Estas notas podrían encajar perfectamente en el post que voy actualizando
regularmente <a href="/blog/2014/10/11/aprendiendo-vim/">Aprendiendo Vim</a>, pero creo que esta la charla de Drew Neail se
desmarca ya un poco del proceso de aprendizaje. En esta charla no se busca
enseñar nuevos comandos de Vim, si no que se trata más de un tema cultural
acerca del editor. Drew trata de animar a la gente a que busque nuevas
combinaciones de teclas que se conviertan en nuevos comandos y de esta forma
hacer Vim más potente todavía.</p>

<!-- more -->


<h2>Notas tomadas de la charla <a href="https://vimeo.com/85343734">Follow my leader</a></h2>

<iframe src="https://player.vimeo.com/video/85343734"
        width="500"
        height="281"
        frameborder="0"
        webkitallowfullscreen mozallowfullscreen allowfullscreen>
</iframe>


<p><em><a href="https://vimeo.com/85343734">Follow my leader</a>, por <a href="http://drewneil.com/">Drew Neil</a>, en un encuentro del grupo local
<a href="https://vimeo.com/vimlondon">Vim London</a></em></p>

<ul>
<li><code>let mapleader = ","</code> para mapear <code>,</code> como tecla <code>&lt;leader&gt;</code> en Vim. Otra
tecla muy común para utilizarla como <code>&lt;leader&gt;</code> es la barra espaciadora.</li>
<li><code>nnoremap &lt;leader&gt;&lt;space&gt; :noh&lt;cr&gt;</code> : remapea la secuencia de teclas
<code>&lt;leader&gt;&lt;space&gt;</code> para que se ejecute el comando <code>:nohlsearch</code>, que desactiva
el resaltado de términos de búsqueda.</li>
<li>La tecla <code>&lt;leader&gt;</code> te permite crear mapeos personalizados, es donde los
usuarios pueden crear sus mapeos sin interferir con Vim</li>
<li>En lugar de usar <code>leader</code>, algunos plugins, como los que escribe <a href="http://tpo.pe/">Tim Pope</a>
siguen otro patrón. hay teclas que son <em>operadores</em>, por ejemplo la <strong>d</strong>
para borrar, o la <strong>y</strong> para copiar. a estos operadores le puede seguir el
mismo operador o una movimiento. Teclas que producen un movimiento son <strong>j</strong>
para ir hacia abajo, <strong>$</strong> para ir al final de la línea, ... Pero, qué pasa si
despues de un operador pulsamos una tecla de <em>no movimiento</em>? No pasa nada. Y
ahí están las combinaciones de teclas dsiponibles para tus plugins.</li>
<li>En la imagen de la <a href="http://www.viemu.com/vi-vim-cheat-sheet.gif">chuleta de Vim</a>, los naranjas son operadores, los
verdes movimientos y los amarillos son comandos.</li>
</ul>


<p><img class="center" src="/images/2015/tiny-vi-vim-cheat-sheet.gif"></p>

<ul>
<li>El plugin <a href="https://github.com/tpope/vim-unimpaired">unimpaired.vim</a> añade mapeos como <code>con</code> para habilitar/deshabilitar los
nuḿeros de línea, o <code>cos</code> para habilitar/deshabilitar el chequeo ortográfico.
Son <code>c</code> + <code>o</code> + otras teclas</li>
<li>También hay disponibles combinaciones como operador + operador : <code>d</code> + <code>c</code></li>
<li>Los <em>text objects</em> (<code>i</code> y <code>a</code>) también tienen vacantes.</li>
<li>Los <em>namespaced mappings</em> también tienen vacantes. Por ejemplo, <code>g</code> es como
un prefijo para muchos mapeos. <code>z</code> es otro, y <code>[</code> y <code>]</code> son más.</li>
<li><code>:help g</code> te muestra todos los mapeos que siguen a <code>g</code>. Te puede servir para
ver huecos donde poner tus mapeos</li>
<li>Comando inútiles, hay algunos comandos que no usa nadie. Sobreescríbelos. Por
ejemplo, <code>g</code> + <code>s</code>.</li>
<li>Sobreescribir, sobrecargar comandos que ya existen, vamos, ampliar los
existentes.</li>
</ul>


<h2>Conclusiones</h2>

<p>Como puedes ver, el editor Vim es todo un mundo de posibilidades. Hay veces que
abruma, pero hay tanta gente apasionada por él que está claro que algo debe de
tener. Esta charla es una muestra de las posibilidades de personalización que
esta herramienta ofrece. Drew nos abre las puertas a un mundo nuevo de posibles
comandos.</p>

<p>Si te gusta Vim, y no conoces el plugin <a href="https://github.com/tpope/vim-unimpaired">unimpaired.vim</a>, échale un vistazo. Sin
duda es uno de los imprescindibles, como tantos otros de Tim Pope.</p>
]]></content>
  </entry>
  
</feed>
