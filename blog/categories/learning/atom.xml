<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: learning | R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/blog/categories/learning/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2017-04-17T22:09:36+02:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elixir: noveno asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2017/01/29/elixir-noveno-asalto/"/>
    <updated>2017-01-29T17:19:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2017/01/29/elixir-noveno-asalto</id>
    <content type="html"><![CDATA[<p>En el <a href="/blog/2016/12/31/elixir-octavo-asalto/">asalto anterior</a> aprendimos un par de conceptos básicos sobre los nodos.
En este asalto aprenderemos sobre servidores OTP: qué son, para qué sirven, por
qué son útiles y cómo implementarlos fácilmente.</p>

<p>Todo esto, siguiendo el <a href="/blog/2016/01/17/aprendiendo-elixir/">método de aprendizaje</a> con el que comenzé la serie:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="center" src="/images/2017/us-air-force.jpg"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/R7mJ4M">160324-F-XK483-042</a> de <a href="https://www.flickr.com/photos/usairforce/">US Air Force</a>, <a href="https://creativecommons.org/licenses/by-nc/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by-nc/2.0/">CC BY NC 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<h4>Servidores OTP</h4>

<p>OTP (<strong>O</strong>pen <strong>T</strong>elecom <strong>P</strong>latform) se presenta como la solución a todos
tus problemas de escalabilidad y concurrencia. No es así, pero ayuda mucho.
Ayuda en temas como descubrimiento de aplicaciones, gestión y detección de
fallos, actualización de código en caliente y estructura del servidor.</p>

<p>OTP define un sistema como una jerarquía de <strong>aplicaciones</strong>. Una aplicación
consiste en uno o varios <strong>procesos</strong>. Cada uno de estos procesos implementa
un <strong>comportamiento</strong>. Existen <a href="http://rubenfa.github.io/2016-11-30-behaviours-en-elixir">comportamientos</a> para servidores, gestores de
eventos, máquinas de estado finitas, ...</p>

<p>Lo implementado en ejercicios anteriores sigue un patrón con el que se podría
implementar casi todos los servidores. Por eso, OTP proporciona un mecanismo
para liberarnos de escribir el código más tedioso. La librería ofrece unas
funciones a modo de <em>callbacks</em> que irá llamando dependiendo de la situación.</p>

<h4>Implementar un servidor OTP</h4>

<p>```
defmodule Sequence.Server do
  use GenServer</p>

<p>  def handle_call(:next_number, _from, current_number) do</p>

<pre><code>{ :reply, current_number, current_number + 1 }
</code></pre>

<p>  end</p>

<p>end
```</p>

<p><code>use GenServer</code> indica a Elixir que vamos a usar este comportamiento. Así, este
módulo representa un servidor OTP.</p>

<p>Uno de los callbacks proporcionados por <code>GenServer</code> es <code>handle_call</code>. Tiene 3
parametros: acción, PID del origen de la petición y el estado actual del
servidor. Tiene que responder con una tupla con tres parámetros también: la
respuesta, el valor retornado y el estado del servidor a usar en la siguiente
llamada.</p>

<p>Para llamar a este servidor, entramos en <code>iex</code>. Arrancamos el servidor,
indicando el módulo y el estado inicial (similar a <code>spawn_link</code>).</p>

<p><code>
promtp$ iex -S mix
iex&gt; { :ok, pid } = GenServer.start_link(Sequence.Server, 100)
iex&gt; GenServer.call(pid, :next_number)
100
iex&gt; GenServer.call(pid, :next_number)
101
iex&gt; GenServer.call(pid, :next_number)
102
</code></p>

<h4>Servidores que no tienen que devolver un resultado</h4>

<p>En ocasiones no necesitamos que el servidor retorne un resultado. En estos
casos, para llamar al servidor emplearemos <code>GenServer.cast</code>, y para manejar
esas peticiones, nuestro servidor debe implementar el callback <code>handle_cast</code>.</p>

<h4>Callbacks de GenServer</h4>

<p>GenServer es un protocolo de OTP. OTP asume que este protocolo define 6
callbacks. Elixir proporciona una implementación por defecto para cada uno de
ellos en GenServer, por eso no tenemos que implementarlos nosotros. Los 6
callbacks son: <code>init(start_arguments)</code>, <code>handle_call(request, from, state)</code>,
<code>handle_cast(request, state)</code>, <code>handle_info(info, state)</code>,
<code>terminate(reason, state)</code>, <code>code_change(from_version, state, extra)</code> y
<code>format_status(reason, [ pdict, state ])</code>.</p>

<h4>Nombrado de procesos</h4>

<p>En lugar de usar el PID para referenciar a procesos de nuestro servidor,
podemos hacerlo a través de nombres. Para ello, se debe utilizar la opción
<code>name:</code> a la hora de crear el servidor:</p>

<p><code>
iex&gt; { :ok, pid } = GenServer.start_link(Sequence.Server, 100, name: :seq)
iex&gt; GenServer.call(:seq, :next_number)
100
iex&gt; GenServer.call(:seq, :next_number)
101
iex&gt; GenServer.call(:seq, :next_number)
102
iex&gt; :sys.get_status :seq
</code></p>

<h2>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</h2>

<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li><p><a href="https://github.com/rchavarria/learning-elixir/tree/master/code/round-09/stack">Ejercicio 01</a>: crear un server que implemente una pila. Se
inicializará con unos cuantos valores en la pila. Cada petición <em>pop</em>
devolverá un elemento de la pila. Cuando la pila esté vacía, fallará.
Implementado en el proyecto <code>mix</code>: <code>code/round-09/stack</code>.</p></li>
<li><p><a href="https://github.com/rchavarria/learning-elixir/tree/master/code/round-09/stack2">Ejercicio 02</a>: ampliar el servidor anterior, de forma que se puedan
añadir elementos a la pila con la operación <code>:push</code> a través de peticiones
<em>cast</em>. Implementado en el proyecto <code>mix</code>: <code>code/round-09/stack2</code>.</p></li>
<li><p><a href="https://github.com/rchavarria/learning-elixir/tree/master/code/round-09/stack3">Ejercicio 03</a>: dar un nombre al servidor anterior, de forma que se le
pueda llamar sin necesidad de saber el PID. También, crear un API en la pila
de forma que los clientes no tengan que llamar a <code>GenServer</code> para usarla.
Simplemente serán unas funciones que envolverán las llamadas a <code>GenServer</code>.
Implementado en otro proyecto <code>mix</code>, en <code>code/round-09/stack3</code>.</p></li>
<li><p>Ejercicio 04: implementar el callback <code>GenServer.terminate/2</code> para
comprobar distintas formas de terminar el servidor: un callback lanza una
excepción, una llamada a <code>Kernel.exit/1</code>, se detecta que un proceso ha tenido
un error,...</p></li>
</ul>


<p><strong>Resultado</strong></p>

<p>No he obtenido nada en claro. Tendría que profundizar en la documentación de
<a href="http://elixir-lang.org/docs/stable/elixir/GenServer.html#c:terminate/2"><code>GenServer.terminate/2</code></a>,
que parece bastante espesa por cierto. Pero no está garantizado que se llame a
<code>terminate</code>, con lo que no sé si estoy provocando correctamente los errores.</p>

<h2>Enseñar lo aprendido, y repetir desde el paso 7</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta
el siguiente asalto.</p>

<h2>Referencias</h2>

<ul>
<li>Proceso de <a href="/blog/2016/01/17/aprendiendo-elixir/">aprendizaje de Elixir</a></li>
<li>Artículo sobre <a href="http://rubenfa.github.io/2016-11-30-behaviours-en-elixir">comportamientos</a> (<em>behaviours</em>) en Elixir</li>
<li>Artículo sobre <a href="http://rubenfa.github.io/2017-01-25-protocols-en-elixir">protocolos</a> en Elixir</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: octavo asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2016/12/31/elixir-octavo-asalto/"/>
    <updated>2016-12-31T19:13:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2016/12/31/elixir-octavo-asalto</id>
    <content type="html"><![CDATA[<p>Último post del año, que no de la serie sobre aprender <a href="http://elixir-lang.org/">Elixir</a>. Este asalto va de nodos, PIDs y un poquito (muy poco) de entrada/salida.</p>

<p>Aprenderemos qué es un nodo, cómo crear nuevos nodos y cómo comunicarlos a un nivel muy básico. Y algo muy interesante, cómo hacer que un nodo ejecute una función a nuestro antojo.</p>

<p>Todo esto, siguiendo el <a href="/blog/2016/01/17/aprendiendo-elixir/">método de aprendizaje</a> con el que comenzé la serie:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="center" src="/images/2016/risk.jpg"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/3pUVs">Risk</a> de <a href="https://www.flickr.com/photos/benstephenson/">Ben Stephenson</a>, <a href="https://creativecommons.org/licenses/by/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by/2.0/">CC BY 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<h4>Nodos - La clave para los servicios distribuidos</h4>

<p>Un <strong>nodo</strong> no es más que una instancia de la máquina virtual de Erlang
ejecutándose. Es como un sistema operativo completo, y ofrece servicios como
tal a procesos locales o remotos.</p>

<h5>Nombres de nodos</h5>

<p>En <code>iex</code>, podemos saber el nombre del nodo actual con <code>Node.self</code>:</p>

<p><code>
iex&gt; Node.self
:"rchavarria@localhost"
</code></p>

<p>Podemos dar un nombre al nodo al iniciar <code>iex</code>:</p>

<p><code>
$ iex -name foobar@localhost
iex(foobar@localhost)&gt; Node.self
:"foobar@localhost"
</code></p>

<p>Si te fijas, el valor devuelto por <code>Node.self</code> tiene los dos puntos delante,
como si fuera un <code>Atom</code>. Y es que en Elixir, los nombres de los nodos son
tratados como <code>Atom</code>s, lo que hace super sencillo referenciar nodos en el
código.</p>

<p>También, podemos saber qué nodos conoce un nodo al que estemos conectados:</p>

<p>```
iex(node_two)> Node.list
[]</p>

<h1>y al conectarnos a un nodo, aparecerá como conectado</h1>

<p>iex(node_two)> Node.connect :"node_one@localhost"
true
iex(node_two)> Node.list
[ :"node_one@localhost" ]
```</p>

<p>Podemos ejecutar una función en un nodo remoto:</p>

<p><code>
iex(node_one)&gt; func = fn -&gt; IO.puts "Hello, I'm in #{inspect Node.self}"
iex(node_one)&gt; Node.spawn( :"node_two@localhost", func )
Hello, I'm in :"node_two@localhost"
</code></p>

<p><code>Node.spawn</code> es impresionante. Podemos ejecutar una función en otro nodo
fácilmente. Pero aunque se ejecute en <code>node_two</code>, hereda lo que se llama <em>group
leader</em>, con lo que es capaz de mostrar mensajes por consola en <code>node_one</code> (en
lugar del dos, que es donde se ejecuta).</p>

<p>Además de poder dar un nombre a un nodo, podemos establecer su <em>cookie</em>. La
cookie de un node no es más que un token, y se utiliza para permitir que los
nodos se conecten entre sí. Nodos con la misma cookie se pueden conectar. Si es
distinta, los nodos rechazarán la conexión. Las cookies se mandan en texto
plano, así que cuidado con las conexiones a través de internet.</p>

<h5>Nombrando tus procesos</h5>

<p>Cada proceso se identifica con un PID. Un PID está compuesto por tres números,
aunque sólo contiene dos campos: el número de nodo (<code>0</code> si el nodo es el local)
y el número de proceso en sí. Este número de proceso está compuesto por sus
bits más y menos representativos (de ahí que veamos tres números en un PID como
éste <code>#PID&lt;0.71.0&gt;</code>). El id de node es el id del nodo donde <em>vive</em> el proceso.</p>

<h4>Entrada/salida, PIDs y Nodos</h4>

<p>La entrada/salida en la máquina virtual de Erlang se hace a través de
servidores de entrada/salida. Elixir y Erlang proporcionan librerías para no
tener que lidiar con ellos, ya que son a muy bajo nivel.</p>

<p>En Elixir, se identifica un fichero por el PID del proceso del servidor de
entrada/salida que lo está manejando.</p>

<p>Por ejemplo, la función <code>IO.puts</code> utiliza el PID devuelto por
<code>:erlang.group_leader()</code> como valor por defecto para enviar una cadena al
proceso que la muestra por consola: <code>send :erlang.group_leader(), str</code> podría
ser el código equivalente.</p>

<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li>Ejercicio 1: en el código del servidor de ticks (<a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-08/ticker.ex">ticker.ex</a>), el autor habla
de que el tick se envía cada 2 segundos más o menos.  Pero el timeout está
puesto a 2 segundos exactos. ¿Por qué habla de <em>más o menos</em>?</li>
</ul>


<p><strong>Respuesta</strong></p>

<p>El timeout es de justo 2 segundos, pero el timeout solo saltará si no se
registra ningún cliente en esos 2 segundos. Si un cliente se registra (digamos
en el momento 1.55 segundos) no saltará el timeout hasta los 3.55 segundos
siguientes (1.55 segundos que pasaron desde el anterior tick hasta el registro
del último cliente más 2 segundos del timeout normal).</p>

<ul>
<li><p>Ejercicio 2: modificar el servidor de ticks para que mande solo un
tick cada vez, de forma circular, a cada uno de los clientes registrados (el
primer tick al primer cliente, el segundo tick al segundo cliente
registrado,...). El programa deberá lidiar con nuevos clientes registrados.</p></li>
<li><p>Ejercicio 3: reimplementar el servidor de ticks, pero esta vez
debe ser circular, de forma que el cliente 1 mande un tick al cliente 2.
Pasados 2 segundos, el cliente 2 mandará un tick al 3. Y así hasta el último, el cual
enviará un tick al 1. Y vuelta a empezar. El problema está en cómo añadir
clientes al círculo (o <em>ring</em>) y quién tiene la responsabilidad de actualizar
ese círculo de clientes.</p></li>
</ul>


<p><strong>Respuesta</strong></p>

<p>Me costó un tiempo dar con la solución al ejercicio (<a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-08/ring_ticker.ex">ring_ticker.ex</a>). Puede
que el <em>ring</em> lo tenga que gestionar el servidor central. De otra forma, los
clientes perderán el timeout del <code>receive</code> y se volverán un poco locos.</p>

<h2>Enseñar lo aprendido, y repetir desde el paso 7</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta
el siguiente asalto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: séptimo asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2016/09/18/elixir-septimo-asalto/"/>
    <updated>2016-09-18T16:20:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/09/18/elixir-septimo-asalto</id>
    <content type="html"><![CDATA[<p>El aprendizaje va avanzando, ya vamos por el séptimo asalto. Éste trata sobre
cómo <a href="http://elixir-lang.org/">Elixir</a> maneja múltiples procesos, por lo que trataremos algún tema de
concurrencia. También veremos algunas cosas básicas sobre cómo monitorizar los
procesos de los que consta nuestra aplicación.</p>

<p>Sin olvidar del método de aprendizaje con el que <a href="/blog/2016/01/17/aprendiendo-elixir/">comenzé</a>:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="right" src="/images/2016/you-gotta-fight-for-your-right-to-eat.jpg"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/4rvPED">You gotta fight for your right to... eat</a> de <a href="https://www.flickr.com/photos/r2wk/">ldjpg</a>, <a href="https://creativecommons.org/licenses/by-nc-nd/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by-nc-nd/2.0/">CC BY NC ND 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<p><strong>Trabajando con múltiples procesos</strong></p>

<p>Elixir usa el <a href="https://en.wikipedia.org/wiki/Actor_model">modelo de actores</a> para gestionar la concurrencia.</p>

<p>Elixir se apoya en Erlang para gestionar los procesos, que no son los procesos
del sistema operativo.</p>

<p>Para crear un proceso, se hace con la llamada <code>spawn</code>. <code>spawn</code> puede crear un
proceso y ejecutar en él código que tengas en un módulo cualquiera. El proceso
puede empezar en cualquier momento (asíncrono total) y se utilizan mensajes
entre procesos para sincronizarlos.</p>

<p>Los mensajes no tienen por qué ser <code>Strings</code>, pueden ser de cualquier tipo
(generalmente tuplas o atoms). Los mensajes se mandan con <code>send</code>, y debes usar
un <code>PID</code> (devuelto por <code>spawn</code>).</p>

<p>El receptor, espera mensajes con <code>receive</code>. <code>receive</code> funciona como <code>case</code>: se
pueden poner varios casos, y el primero que coincida, se ejecuta.</p>

<p><code>receive</code> maneja sólo un mensaje. Si queremos recibir varios, debemos volver a
llamar al método que contiene el <code>receive</code>, de forma recursiva (y Elixir es muy
bueno con la recursividad). <code>receive</code> también acepta un parámetro, <code>after</code>,
para definir un timeout.</p>

<p>El autor dice que los procesos en Elixir son como los objetos en lenguajes
orientados a objectos, pero con mejor sentido del humor. El hecho es que son
muy livianos, y pueden mantener estado, así que podemos pensar en ellos como en
objetos de la programación orientada a objetos.</p>

<p><strong>Enlazar procesos</strong></p>

<p>Normalmente, un proceso no sabe cuando muere un proceso hijo. Debemos hacer
algo manualmente para que se notifique. Podemos crear procesos <em>enlazados</em>
(linked) con <code>spawn_link</code>. Por defecto, si un proceso hijo muere, mata al
proceso padre. Para controlar esto y poder escuchar el mensaje que lanza el
proceso hijo al morir, debemos <em>atrapar la salida</em> mediante
<code>Process.flag(:trap_exit, true)</code> justo antes de hacer <code>spawn_link</code>.</p>

<p>Dos procesos enlazados pueden comunicarse bidireccionalmente.</p>

<p>Elixir usa el framework OTP para construir árboles de procesos. OTP lleva mucho
tiempo en funcionamiento, y debemos confiar en que lo hace mucho mejor que
nosotros, por lo que lo usaremos prácticamente siempre. OTP incluye el concepto
de <em>Supervisor de procesos</em>. Más adelante estudiaremos temas relacionados con
OTP.</p>

<p><strong>Monitorizando procesos</strong></p>

<p>Si <code>spawn_link</code> permite comunicación bidireccional, <code>spawn_monitor</code> solo la
permite unidireccional. El proceso hijo puede notificar al padre, pero no al
revés.</p>

<p>```</p>

<h1>monitor devuelve el pid del proceso hijo y una referencia de la monitorización</h1>

<p>res = spawn_monitor(<module>, <function>, <params>)
IO.inspect res</p>

<h1>=> { #PID{3.3.3.3}, #Reference{1.2.3.4} }</h1>

<p>```</p>

<p>También se puede monitorizar un proceso existente con <code>Process.monitor</code>.</p>

<p>¿Cuándo utilizar cada uno? Depende de la utilidad. Si la muerte de un hijo
debería matar al padre, usa procesos enlazados. Si la muerte/fallo de un hijo
solamente debería notificar al padre, usa monitorización.</p>

<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-07/exercise-01-round-07.exs">exercise-01-round-07.exs</a>: ejecutar el programa que pasa mensajes en cadena
de un proceso a otro hasta llegar al millón de procesos.</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-07/exercise-02-round-07.exs">exercise-02-round-07.exs</a>: escribir un código que cree dos procesos, y que a
cada uno le mande un token (p.e.: "pepito" y "fulanito"), y que los procesos
lo devuelvan. En teoría, ¿es determinista el orden en el que se reciben las
respuestas? ¿Y en la práctica? En caso de que no, ¿cómo podría hacerse que
fuera determinista?.</li>
</ul>


<p><strong>Resultados</strong></p>

<p>Parece que sí es determinista (al menos con dos procesos). Depende del orden en
el que se creen los procesos, incluso si invertimos el orden en el que se
envían los tokens, el primer proceso creado es el primero en responder.</p>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-07/exercise-03-round-07.exs">exercise-03-round-07.exs</a>: usa <code>spawn_link</code> para crear un proceso, el cual
envía un mensaje al padre y finaliza inmediatamente. Mientras, en el padre,
después de crear el proceso, espera 500ms y luego comienza a recibir todos los
mensajes que están esperando. Tracea todo lo que recibas. ¿Importa que no
estuvieras recibiendo notificaciones cuando el hijo terminó?</li>
</ul>


<p><strong>Resultados</strong></p>

<p>No recibe ningún mensaje, el hijo termina, terminando al padre durante la
espera.</p>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-07/exercise-04-round-07.exs">exercise-04-round-07.exs</a>: repite el ejercicio anterior, pero en lugar de
terminar con <code>exit</code>, que el hijo lance una excepción. ¿qué diferencia notas?</li>
</ul>


<p><strong>Resultados</strong></p>

<p>No hay mucha difrencia. El padre sigue terminando, sin escuchar ningún mensaje.
Al menos, la excepción aparece por consola, mostrándose un error diciendo que
el proceso hijo (con su PID) ha lanzado una excepción. En el ejercicio
anterior, solamente aparecía que el proceso padre terminaba, nada más.</p>

<p>Usando <code>Process.flag(:trap_exit, true)</code>, el proceso padre recibe mensajes:</p>

<p>```
$ elixir -r exercise-03-round-07.exs -e "Exercise3.run"
Parent's PID #PID&lt;0.48.0>
PID's child #PID&lt;0.53.0>
Received: "Hello!"
Received: {:EXIT, #PID&lt;0.53.0>, :boom}</p>

<p>$ elixir -r exercise-04-round-07.exs -e "Exercise4.run"
Parent's PID #PID&lt;0.48.0>
Child's PID #PID&lt;0.53.0></p>

<p>22:46:14.313 [error] Process #PID&lt;0.53.0> raised an exception
** (RuntimeError) Child finished</p>

<pre><code>exercise-04-round-07.exs:19: Exercise4.child/1
</code></pre>

<p>Received: "Hello!"
Received: {:EXIT, #PID&lt;0.53.0>, %{RuntimeError{message: "Child finished"},
[{Exercise4, :child, 1, [file: 'exercise-04-round-07.exs', line: 19]}]}}
```</p>

<p>Las diferencias están en lo recibido en el mensaje de terminación del hijo. En
caso de <code>exit</code> se recibe <code>:EXIT</code>, un PID, y la causa de la salida. En el caso
de la excepción: <code>:EXIT</code>, un PID y la excepción, parece, porque tiene pinta de
pila de llamadas, con su módulo, función, parámetros,...</p>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-07/exercise-05-round-07.exs">exercise-05-round-07.exs</a>: repetir el ejercicio pero con <code>spawn_monitor</code>.</li>
</ul>


<p><strong>Resultados</strong></p>

<p>No creo que lo esté haciendo bien. Se supone que monitorizando la comunicación
no es bidireccional, pero el padre recibe el mensaje que envía el hijo, así
como el mensaje que se envía al terminar o lanzar la excepción. La única
diferencia visible es que en lugar de recibir solamente un PID, se recibe un
PID y la referencia de monitorización.</p>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-07/exercise-06-round-07.exs">exercise-06-round-07.exs</a>: escribir una función implementando <em>pararell
map</em>, que es como una función <code>map</code> pero cada elemento es procesado por un
proceso distinto. Preguntas: ¿por qué es necesario guardar en la variable <code>me</code>
el PID del proceso padre? Se debe utilizar <code>^pid</code> para recibir los resultados
en orden, pero... ¿qué pasa si se utiliza <code>_pid</code>? ¿cómo hacer para que falle:
esperas, aumentar número elementos, que la función que procesa cada elemento
sea más complicada,...?</li>
</ul>


<p><strong>Resultados</strong></p>

<p>Aumentando el número de elementos afecta al orden en el que se reciben los
mensajes. También he conseguido recibir mensajes en orden distinto con el
siguiente código:</p>

<p><code>
Parallel.pmap 1..10, fn (i) -&gt;
  # la espera es más corta según el elemento `i` se va a haciendo mayor
  wait_up_to = round(10 / i)
  :timer.sleep(wait_up_to)
  i
end
  #=&gt; [ 7, 8, 9, 10, 5, 6, 3, 4, 2, 1 ]
</code></p>

<p>Volviendo a poner <code>^pid</code> el orden vuelve a ser correcto.</p>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-07/exercise-07-round-07.exs">exercise-07-round-07.exs</a>: toma como referencia un planificador (servidor de
Fibonacci) de un ejercicio del libro y crea otro similar. Esta vez, se deben
contar las apariciones de la palabra <code>cat</code> en cada fichero que se encuentre en
un directorio dado. Cada fichero será procesado por un proceso distinto.
¿Podrías escribir el planificador de una forma más genérica?</li>
</ul>


<h2>Enseñar lo aprendido, y repetir desde el paso 7</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta
el siguiente asalto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: sexto asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2016/09/14/elixir-sexto-asalto/"/>
    <updated>2016-09-14T21:32:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/09/14/elixir-sexto-asalto</id>
    <content type="html"><![CDATA[<p>Sexto asalto. En esta ocasión no veremos nada del lenguaje, si no del
ecosistema de <a href="http://elixir-lang.org/">Elixir</a>. Elixir viene acompañado de unas magníficas herramientas
que complementan en lenguaje de programación en sí: <code>mix</code>, la herramienta de
construcción de aplicaciones y herramientas de testing como <code>ExUnit</code> y
<code>DocTests</code>. Además de estas herramientas, exploraremos también los sitios web
donde los desarrolladores alojan la mayoría de las librerías y proyectos Elixir
disponibles.</p>

<p>Sigo con la metodología de aprendizaje explicada en el <a href="/blog/2016/01/17/aprendiendo-elixir/">primer post sobre Elixir</a>:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="right" src="/images/2016/more-gladiators.png"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/6xvcMz">More gladiators</a> de <a href="https://www.flickr.com/photos/archeon/">Hans Splinter</a>, <a href="https://creativecommons.org/licenses/by-nd/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by/2.0/">CC BY 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<p>Elixir viene con la herramienta <code>mix</code>, la herramienta oficial de construcción
de proyectos (creación, testeo, construcción, gestión de dependencias,...). En
este asalto crearemos una aplicación que nos permitirá listar los últimos <code>n</code>
<em>issues</em> de cualquier proyecto de <a href="https://github.com">GitHub</a>.</p>

<p><code>mix help</code> lista los comandos disponibles. Los más interesantes podrían ser:
<code>mix run</code> para ejecutar el proyecto, <code>mix test</code> para ejecutar los tests o <code>mix
new</code> para crear uno nuevo.</p>

<p>Crearemos un nuevo proyecto, llamado <code>rct_issues</code>:</p>

<p><code>
$ mix new rct_issues
</code></p>

<p>Listando los ficheros y directorios que ha creado el comando, encontramos los
siguientes:</p>

<ul>
<li><code>/README.md</code>: aquí podemos poner la descripción del proyecto.</li>
<li><code>/config/</code>: donde vivirá la configuración del proyecto</li>
<li><code>/lib/</code>: aquí irá el código fuente de nuestro proyecto</li>
<li><code>/test/</code>: aquí irá el código de tests</li>
<li><code>mix.exs</code>: opciones de configuración del proyecto en sí</li>
</ul>


<p><strong>Transformación: parsear la línea de comandos</strong></p>

<p>La aplicación de ejemplo tomará los parámetros de la línea de comandos. Las
aplicaciones Elixir consisten en una serie de transformaciones, y la primera de
ellas será la de parsear la línea de comandos.</p>

<p>En Elixir existen una serie de convenciones:</p>

<ul>
<li>El código que gestiona la línea de comandos va en un módulo llamado
<code>&lt;proyecto&gt;.CLI</code>, así que nuestro código iría en un módulo llamado
<code>RctIssues.CLI</code></li>
<li>Cada módulo va en un fichero distinto</li>
<li>Cada módulo va dentro del espacio de nombres del proyecto, por lo que todos
los módulos colgarán de <code>RctIssues</code></li>
<li>Los <em>espacios de nombres</em> corresponden con directorios en el árbol del
proyecto. Así, el módulo <code>RctIssues.CLI</code> se escribiría en el directorio
<code>/lib/rct_issues/cli.ex</code>. Ver fichero de código fuente <a href="https://github.com/rchavarria/learning-elixir/blob/master/projects/rct_issues/lib/rct_issues/cli.ex">cli.ex</a></li>
</ul>


<p><strong>Los primeros tests</strong></p>

<p>Elixir viene con un pequeño framework de testing llamado <code>ExUnit</code>.</p>

<p>En el fichero <code>/test/cli_test.exs</code> escribiremos los tests para el módulo que
acabamos de escribir (echar un vistazo al fichero <a href="https://github.com/rchavarria/learning-elixir/blob/master/projects/rct_issues/test/cli_test.exs">cli_test.exs</a>)</p>

<p><strong>Transformación: obtener datos de GitHub</strong></p>

<p>La siguiente transformación sería obtener datos de GitHub. Para ello
necesitaremos alguna librería externa. Hay varios lugares donde buscar:</p>

<ol>
<li>Librerías propias de Eixir, en <a href="http://elixir-lang.org/docs">http://elixir-lang.org/docs</a></li>
<li>Librerías propias de Erlang (también distribuidas con Elixir), en
<a href="http://erlang.org/docs">http://erlang.org/docs</a></li>
<li>Si todo esto falla, podemos buscar en el repositorio de <a href="http://hex.pm">Hex</a>,
el gestor de dependencias de Elixir</li>
<li>Si aún así, todo falla, siempre nos quedará Google y GitHub</li>
</ol>


<p>El autor recomienda usar <code>HTTPoison</code> como librería. Esta librería se encuentra
en <code>Hex</code>, con lo que es muy fácil incluirla en nuestro proyecto. Simplemente
hay que modificar el método <code>deps</code> dentro del fichero <code>/mix.exs</code>, indicando el
nombre y la versión de la librería que queremos usar:</p>

<p>```
defp deps do
  [</p>

<pre><code>{ :httpoison, "~&gt; 0.4" }
</code></pre>

<p>  }
end
```</p>

<p>Con el comando <code>mix deps</code> podremos saber el estado de las dependencias del
proyecto. Con <code>mix deps.get</code> podremos descargar las dependencias que no estén
instaladas localmente. En caso de estar instaladas, lo estarán en el directorio
<code>/deps</code>, como proyectos Elixir, con lo que podremos navegar a través de ellas.</p>

<p>Ahora ya podemos usarla. Lo haremos en un nuevo módulo, escrito en
<a href="https://github.com/rchavarria/learning-elixir/blob/master/projects/rct_issues/lib/rct_issues/github_issues.ex"><code>/lib/rct_issues/github_issues.ex</code></a>. También modificaremos el método
<code>applications</code> de <code>mix.exs</code> para indicar que la dependencia <code>HTTPoison</code> va a
ser ejecutada como una <em>subaplicación</em> dentro de nuestro proyecto (hablará más
adelante sobre ello en el libro).</p>

<p><strong>Transformación: parsear la respuesta JSON</strong></p>

<p>Para la siguiente transformación incluiremos una dependencia que proviene del
mundo Erlang. <code>mix</code> es capaz de incluir dependencias de muy diversas fuentes,
Erlan entre ellas. Se añade la librería <code>jsx</code>, como dependencia del proyecto.
Añadir la línea <code>{ :jsx, "~&gt; 2.0" }</code> al fichero <code>mix.exs</code> y ejecutar el comando
<code>mix deps.get</code> para instalarla localmente.</p>

<p>Modificaremos nuestro módulo que debe parsear la respuesta,
<code>lib/rct_issues/github_issues.ex</code>:</p>

<p>```
def handle_response(%{status_code: 200, body: body}) do
  { :ok, :jsx.decode(body) }
end</p>

<p>def handle_response(%{status_code:   _, body: body}) do
  { :error, :jsx.decode(body) }
end        <br/>
```</p>

<p><strong>Configuración de la aplicación</strong></p>

<p>Cuando creamos el proyecto con <code>mix</code>, éste crea un directorio de configuración,
<code>config/</code>, con el fichero <code>config.exs</code>, donde podremos escribir ciertas
configuraciones de nuestro proyecto.
Cada línea de configuración suele ser un registro de clave valor, por ejemplo, para nuestro proyecto añadiríamos:</p>

<p><code>
use Mix.Config
config :rct_issues, github_url: "https://api.github.com"
</code></p>

<p>Más adelante, podremos usar este valor configurado gracias al módulo
<code>Application</code>, así</p>

<p>```</p>

<h1>crea una variable de clase llamada github_url</h1>

<p>@github_url Application.get_env(:rct_issues, :github_url)
```</p>

<p><strong>Construir un ejecutable</strong></p>

<p>Para ello es necesario modificar el fichero <code>mix.exs</code>, para configurar la
herramienta <code>escript</code> y poder indicarle el módulo principal de la aplicación
que se va a construir, el cual debe de tener un método llamado <code>main</code>.</p>

<p>Para construir, simplemente ejecutar el comando:</p>

<p><code>
mix escript.build
</code></p>

<p>Y tendremos un ejecutable que podremos ejecutar como cualquier otra aplicación
de consola de Unix/Linux</p>

<p><strong>Ejecutando los comentarios</strong></p>

<p>¿Cómo? ¿Ejecutar los comentarios? No te preocupes, Elixir puede ejecutar
ciertos comentarios como si fueran tests. En realidad, ejecuta comentarios
escritos en cierta forma como si fueran sesiones de la herramienta <code>iex</code>. Esto
sí que es documentación ejecutable. Simplemente, espectacular.</p>

<p>Un comentario del tipo:</p>

<p><code>``
@doc """   
Given a list of rows, where each row contains a keyed list
of columns, return a list containing lists of the data in
each column. The</code>headers` parameter contains the
list of columns to extract</p>

<h2>Example</h2>

<pre><code>iex&gt; list = [Enum.into([{"a", "1"},{"b", "2"},{"c", "3"}], HashDict.new),
...&gt;         Enum.into([{"a", "4"},{"b", "5"},{"c", "6"}], HashDict.new)]

iex&gt; Issues.TableFormatter.split_into_columns(list, [ "a", "b", "c" ])
[ ["1", "4"], ["2", "5"], ["3", "6"] ]
</code></pre>

<p>"""      <br/>
def split_into_columns(rows, headers) do</p>

<h1>...</h1>

<p>```</p>

<p>Creamos un nuevo fichero de tests en <code>test/doc_test.exs</code>:</p>

<p><code>
defmodule DocTest do
  use ExUnit.Case
  doctest Issues.TableFormatter
end  
</code></p>

<p>Donde <code>Issues.TableFormatter</code> es el módulo donde hemos incluido el comentario
<em>ejecutable</em>. Podemos lanzar los comentarios testeables con los comandos <code>mix
test test/doc_test.exs</code> o simplemente <code>mix test</code>.</p>

<p>Para crear la documentación del proyecto, está la herramienta ExDoc, similar a
JavaDoc. Para ello hay que añadirlo como dependencia del proyecto en el fichero
<code>mix.exs</code>:</p>

<p>```
defp deps do
[</p>

<h1>...</h1>

<p>  { :ex_doc, github: "elixir-lang/ex_doc" },</p>

<h1>...</h1>

<p>]
end
```</p>

<p>Para generarlos, instalar la dependencia con <code>mix deps.get</code>, y generar la
documentación con <code>mix docs</code>.</p>

<h2>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</h2>

<ul>
<li>Necesitarás consular documentación sobre <code>OptionParser</code> para ser capaz de
hacer el primer ejercicio... No solamente eso, si no que he escrito unos
tests para aprender cómo funciona <a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-05/exercise-01-round-06.exs">tests de exercise-01-round-06</a></li>
<li>¿Como se hace para formatear una cadena siempre con la misma anchura?
(¿<code>String.pad</code> o algo así?). Parece que <a href="http://elixir-lang.org/docs/stable/elixir/String.html#ljust/3"><code>String.ljust/3</code></a> hace el trabajo.</li>
</ul>


<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-06/exercise-01-round-06.exs">exercise-01-round-06</a>: repetir (honestamente) el proceso de crear un nuevo
proyecto y crear un módulo que parsee opciones de la línea de comandos y un
test para ello</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-06/exercise-02-round-06.exs">exercise-02-round-06</a>: seguir implementando el ejemplo del libro lo más
honestamente que se pueda. Se implementarán las siguientes transformaciones:
obtener los datos de GitHub con HTTPoison, parsear el JSON resultante con JSX,
extraer sólo la información que nos interesa, ordenarla y recuperar sólo la
cantidad que quiere el usuario.</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-06/exercise-03-round-06.exs">exercise-03-round-06</a>: implementar el resto de la funcionalidad de la
aplicación</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-06/exercise-04-round-06.exs">exercise-04-round-06</a>: escribir una aplicación que pida datos a un organismo
de EEUU sobre el tiempo, parsee los datos XML y los muestre de forma
agradable</li>
</ul>


<h2>Enseñar lo aprendido, y repetir desde el paso 7</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta
el siguiente asalto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: quinto asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2016/09/11/elixir-quinto-asalto/"/>
    <updated>2016-09-11T11:43:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/09/11/elixir-quinto-asalto</id>
    <content type="html"><![CDATA[<p>Y ya vamos por el quinto asalto, el quinto de la serie sobre el aprendizaje del
lenguaje <a href="http://elixir-lang.org/">Elixir</a>. En este asalto aprenderemos estructuras de control de flujo,
esenciales en cualquier lenguaje de programación. No sé en otros lenguajes
funcionales, pero en Elixir, estas estructuras no son muy bien acogidas. De
todas formas, son parte del lenguaje, son sencillas y nos servirán para
establecer conexiones con lenguajes que ya conozcamos.</p>

<p>Para seguir con el aprendizaje, sigo con el método seguido en otros asaltos
partiendo del post <a href="/blog/2016/01/17/aprendiendo-elixir/">aprendiendo Elixir</a>:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="right" src="/images/2016/fight-II-harc-II.jpg"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/6bQhPq">Fight II / Harc II</a> de <a href="https://www.flickr.com/photos/silangel/">silangel</a>, <a href="https://creativecommons.org/licenses/by-nc/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by/2.0/">CC BY 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<p>En Elixir no se usan mucho, se suelen escribir métodos pequeños, que junto con
claúsulas de guarda y <em>pattern matching</em> nos alejan bastante de lo que aquí
estudiaremos. Normalmente, se suelen favorecer esos mecanismos frente a
estructuras de control. Al principio cuesta acostumbrarse, pero luego uno se va
dando cuenta de que los cuerpos de los métodos quedan más pequeños y más
enfocados a hacer una sola cosa, aunque despista un poco que una misma función
tenga varios cuerpos.</p>

<p><strong><code>if</code> y <code>unless</code></strong></p>

<p>```</p>

<h1>Ambos toman dos parámetros, una condición y una <em>keyword list</em>, cuyas claves posibles son <code>do:</code> y <code>else:</code>.</h1>

<p>if 1 == 2, do: "truthy", else: "falsy"
unless 2 == 1, do: "do not execute", else: "execute this"</p>

<h1>igual que las funciones, se puede acortar un poco</h1>

<p>if 1 == 2 do
  "truthy"
else
  "falsy"
end
```</p>

<p><strong><code>cond</code></strong></p>

<p>En realidad es una macro, como muchas otras construciones del lenguaje, y
acepta una serie de condiciones. Se ejecutará el código de la primera condición
que se evalúe a <code>true</code>.</p>

<p>```</p>

<h1>Resolver la kata FizzBuzz</h1>

<p>cond do
  rem(current, 3) == 0 and rem(current, 5) == 0 -> "FizzBuzz"
  rem(current, 5) == 0 -> "Buzz"
  rem(current, 3) == 0 -> "Fizz"
  true -> current
end
```</p>

<p>En muchos casos, una mejor alternativa puede ser utilizar múltiples funciones,
pattern matching y claúsulas de guarda en lugar del bloque <code>cond</code>.</p>

<p><strong><code>case</code></strong></p>

<p><code>case</code> permite evaluar una serie de patrones, y ejecuta el código asociado a
dicho patrón. También se pueden usar claúsulas de guarda.</p>

<p>```</p>

<h1>para controlar errores al abrir un fichero</h1>

<p>case File.open("some file.txt") do
  { :ok, file } -> IO.puts "First line: #{IO.read(file, :line)}"
  { :error, reason } -> IO.puts "Failed to open file: #{reason}"
end</p>

<h1>con claúsulas de guarda</h1>

<p>dave = %{name: "Dave", age: 27}
case dave do
  person = %{age: age} when is_number(age) and age >= 21 -> IO.puts "You are allowed #{person.name}"
  _ -> IO.puts "You are not allowed"
end
```</p>

<p><strong>Excepciones</strong></p>

<p>Las excepciones en Elixir se usan para casos excepcionales. Por ejemplo, si hay
un fallo al leer un fichero de configuración, con un nombre fijo. Pero no si
hay un error al leer un fichero que el usuario ha introducido el nombre,
podemos controlar eso, y no sería un error excepcional.</p>

<p>```</p>

<h1>lanzando una RuntimeError</h1>

<p>raise "Giving up"</p>

<h1>o con algunos argumentos</h1>

<p>raise RuntimeError, message: "Stack overflow"</p>

<h1>por convención, se suele escribir <code>!</code> al final de una llamada que puede</h1>

<h1>devolver una excepción bien conocida, por ejemplo</h1>

<p>{ ok: file } = File.open!("foo.bar")
```</p>

<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li>[exercise-01-round-05.exs]: reescribe la kata FizzBuzz con <code>case</code></li>
<li>[exercise-02-round-05.exs]: muchas funciones tienen una segunda
implementación, que termina con <code>!</code>, la cual, si el resultado no coincide con
<code>{ :ok, data }</code> lanza una excepción. Implementa una función <code>ok!</code> que haga
exactamente esto</li>
</ul>


<h2>Enseñar lo aprendido, y repetir desde el paso 7</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta
el siguiente asalto.</p>
]]></content>
  </entry>
  
</feed>
