<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: jpa | R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.com/blog/categories/jpa/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.com/"/>
  <updated>2013-09-16T22:41:11+02:00</updated>
  <id>http://rchavarria.github.com/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Uso de JPA, hibernate y derby]]></title>
    <link href="http://rchavarria.github.com/blog/2011/05/19/uso-de-jpa-hibernate-y-derby/"/>
    <updated>2011-05-19T09:44:00+02:00</updated>
    <id>http://rchavarria.github.com/blog/2011/05/19/uso-de-jpa-hibernate-y-derby</id>
    <content type="html"><![CDATA[<div style="margin:2%; padding:2%; background-color:#E0E0E0; ">
  <p>Este post pertenece a mi antiguo blog en <a href="http://rchavarria.wordpress.com">wordpress</a>, pero decidí pasarme a github:pages por las siguientes <a href="http://rchavarria.github.com/blog/2012/12/03/por-que-cambie-mi-blog-en-wordpress-com">razones</a></p>
</div>


<p>Tengo una pequeña aplicación en la que uso Apache Derby como base de datos para guardar los datos.</p>

<p>Hasta ahora, estaba utilizando el patrón DAO para guardar los datos que quería hacer persistentes en la aplicación. Cada clase DAO se encargaba de crear, borrar, editar y actualizar un tipo de datos. Estas operaciones las hacía mediante SQL puro y duro. No es que el modelo de datos que utilizo sea muy complicado, pero es tedioso editar consultas SQL para cada tipo de dato que quieres persistir.</p>

<p>Así pues, decidí que debería utilizar algo un poco más elaborado. Java dispone de la Java Persistence API, así que, ¿porqué no usarla? Y este post describe los primeros pasos a dar para utilizar JPA en una aplicación.</p>

<!-- more -->


<p>JPA es una definición, por sí sola no hace nada, necesita de una implementación para realizar realmente el trabajo. Existen varias implementaciones (ver <a title="Comparativa implementaciones JPA" href="http://terrazadearavaca.blogspot.com/2008/12/jpa-implementations-comparison.html">comparativa</a>). De todas ellas he elegido Hibernate. Puede que no sea la mejor, puede que no sea la más rápida o la más eficiente, pero creo que es la más conocida y la referencia para el resto de implementaciones.</p>

<h2>El ejemplo, paso a paso</h2>


<p>Nuestro ejemplo va a consistir en algo muy (pero que muy) sencillo, pero que nos va a permitir aprender cómo configurar hibernate con nuestra base de datos derby. Nuestros datos a guardar van a ser objetos de la clase Person, que va a tener un nombre. No va a haber relaciones con ningún otro objeto, así que sólo exisitirá una tabla en la base de datos. Más sencillo, imposible.</p>

<h3>Datos que serán persistentes</h3>


<p>Como ya hemos visto, sólo vamos a persistir objetos de la clase Person, la cual tendrá un campo id, que funcionará como la clave principal de la tabla, y un campo name, el nombre de la persona. A continuación vemos el código de esta clase:
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Definir persistencia de datos </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>package es.rct.jpa.model;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>import javax.persistence.Entity;
</span><span class='line'>import javax.persistence.GeneratedValue;
</span><span class='line'>import javax.persistence.Id;&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>@Entity
</span><span class='line'>public class Person {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>@Id
</span><span class='line'>@GeneratedValue
</span><span class='line'>private long id;
</span><span class='line'>private String name;
</span><span class='line'>
</span><span class='line'>public void setName(final String name) {this.name = name;}
</span><span class='line'>public String getName() {return name;}
</span><span class='line'>public void setId(final long id) {this.id = id;}
</span><span class='line'>public long getId() {return id;}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>De esta clase vamos a destacar 3 anotaciones, pertenecientes a JPA. Las podemos encontrar en el paquete javax.persistence:</p>

<ul>
    <li>Entity: indica que esta clase es una entidad, lo cual significa que esta clase tiene correspondencia con una tabla en la base de datos.</li>
    <li>Id: indica qué campo de la clase va a ser utilizado como clave primaria de la tabla representada por la entidad.</li>
    <li>GeneratedValue: indica que la clave va a ser generada automáticamente por el motor de persistencia (hibernate)</li>
</ul>




<h3>Dependencias de Maven</h3>


<p>Para poder usar Derby como base de datos y Hibernate como implementación de JPA, debemos incluir las siguientes dependencias en nuestro fichero pom.xml de configuración de maven:</p>

<script src="http://gist.github.com/4194334.js"></script>


<p>Las versiones de las dependencias pueden variar. Aquí aparecen las que yo personalmente he utilizado.</p>

<h3>Configurar JPA / Hibernate / Derby</h3>


<p>Para configurar JPA, debemos escribir la configuracion en un fichero llamado persistence.xml,
en un directory META-INF, accesible desde el directorio de trabajo de nuestra aplicación.
Yo lo he creado en src/main/resources/META-INF/persistence.xml, ya que maven empaqueta el
contenido del directorio src/main/resources en el jar de la aplicación, con lo que tenemos
el resultado deseado.</p>

<p>El contenido del fichero de configuración JPA es el siguiente:</p>

<script src="http://gist.github.com/4194389.js"></script>


<p>De este fichero xml podemos destacar las siguientes etiquetas:</p>

<ul>
    <li>persistence-unit, atributo name: define una unidad de persistencia, es obligatorio darle un nombre, para poder crear un EntityManager en nuestra aplicación. El EntityManager es el encargado de manejar la persistencia de nuestros datos.</li>
    <li>provider: aquí indicamos que queremos usar Hibernate como implementación de JPA</li>
    <li>class: debe existir una etiqueta class por cada clase que queramos persistir, es decir, una por cada entidad que formará nuestra unidad de persistencia.</li>
    <li>Dentro de las etiquetas properties, definimos propiedades propietarias de la implementación JPA. De entre ellas cabe destacar:</li>
</ul>


<ol>
    <li>hibernate.connection.url: define la URL de conexión a la base de datos. Aquí estamos configurando Derby como base de datos. Estamos creando una base de datos llamada "testing-jpa" en memoria (no en disco).</li>
    <li>hibernate.dialect: configuramos Hibernate para que "hable" con Derby</li>
</ol>




<h3>Crear un test para probar el funcionamiento</h3>


<p>Ahora sólo queda crear nuestro código para almacenar algunos objetos del tipo Person.</p>

<p>Primero, debemos crear un objeto EntityManager, que manejará todo lo relacionado con la persistencia: transacciones, guardar datos, actualizarlos, borrarlos, etc.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>EntityManagerFactory emf = Persistence.createEntityManagerFactory(&quot;test-jpa&quot;);
</span><span class='line'>EntityManager em = emf.createEntityManager();</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Una vez terminemos de utilizar nuestro EntityManager, debemos cerrarlo:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>em.close();
</span><span class='line'>emf.close();</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Ahora ya disponemos de un objeto "em" para poder persistir objetos de tipo Person:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private void insertSomeData() {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>Person p = new Person();
</span><span class='line'>p.setName(&amp;quot;person 01&amp;quot;);
</span><span class='line'>Person p1 = new Person();
</span><span class='line'>p1.setName(&amp;quot;person 02&amp;quot;);
</span><span class='line'>
</span><span class='line'>em.getTransaction().begin();
</span><span class='line'>em.persist(p);
</span><span class='line'>em.persist(p1);
</span><span class='line'>em.getTransaction().commit();
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Para poder guardar los datos en base de datos, debemos arrancar una transacción, llamar al método "persist" y terminar la transacción. Si queremos indicar que ha habido un error durante la transacción, y no queremos llevarla a cabo, llamaríamos al método "rollback" en lugar del método "commit".</p>

<p>Para comprobar que realmente hemos almacenado los objetos en la base de datos, sólo tenemos que buscarlos por identificador. Ya que sólo hemos almacenado 2 objetos, y son los 2 primeros, los ids serán 1 y 2 respectivamente:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Insertar datos </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>private void listInsertedData() {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>em.getTransaction().begin();
</span><span class='line'>for (long i = 1; i &amp;lt;= 2; i++) {
</span><span class='line'>    Person pFinded = em.find(Person.class, new Long(i));
</span><span class='line'>    System.out.println(&amp;quot;Id: &amp;quot; + i + &amp;quot;, name: &amp;quot; + pFinded.getName());
</span><span class='line'>}
</span><span class='line'>em.getTransaction().commit();
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Código fuente del ejemplo</h2>


<p>Puedes descargar/ver el código fuente en este repositorio de github: <a title="Repositorio github con la solucion" href="https://github.com/rchavarria/JPAHibernateDerby">https://github.com/rchavarria/JPAHibernateDerby</a></p>

<h2>Referencias</h2>


<p>Si quieres profundizar en el tema, aquí dejo unos enlaces que me han sido de gran ayuda.</p>

<ol>
<li>
<a href="http://www.davidmarco.es/blog/entrada.php?id=144">Excelente tutorial de JPA</a>
</li>
<li>
<a href="http://wiki.apache.org/db-derby/InMemoryBackEndPrimer">Configuración de Derby para trabajar en memoria</a>
</li>
<li>
<a href="http://eskatos.wordpress.com/2009/10/26/unit-test-jpa-entities-with-in-memory-derby">Configuración de JPA para usar Hibernate</a>
</li>
<li>
<a href="http://docs.jboss.org/hibernate/entitymanager/3.5/reference/en/html_single/#architecture-javase">Hibernate en entornos JavaSE</a>
</li>
<li>
<a href="http://terrazadearavaca.blogspot.com/2008/12/jpa-implementations-comparison.html">Comparativa de implementaciones de JPA</a>
</li>
</ol>

]]></content>
  </entry>
  
</feed>
