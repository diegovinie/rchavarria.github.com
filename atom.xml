<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2016-02-14T19:49:36+01:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Elixir: primer asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2016/02/09/elixir-primer-asalto/"/>
    <updated>2016-02-09T21:57:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2016/02/09/elixir-primer-asalto</id>
    <content type="html"><![CDATA[<p>Éste es el primer asalto de mi aprendizaje de <a href="http://elixir-lang.org/">Elixir</a>. En él, no espero
resolver problemas súper complicados, es un primer contacto con el lenguaje. Me
conformaré con ser capaz de escribir un programa algo más complicado que un
simple hola mundo. En este primer asalto, lucho con tipos de datos, funciones
(anónimas y con nombre), pattern matching, claúsulas de guarda y módulos.</p>

<p>En estos asaltos, intentaré seguir los siguientes pasos:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="center" src="http://rchavarria.github.io/images/2016/touch-gloves-derived-small.png"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/awy1vc">Touch Gloves</a> de <a href="https://www.flickr.com/photos/kaiban/">Jack Zallum</a>, <a href="https://creativecommons.org/licenses/by-nc/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by-nc/2.0/legalcode">CC BY-NC 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<p><strong>Instalación</strong></p>

<p>Instalar la máquina virtual de Erlang y el entorno de Elixir es extremadamente
sencillo. Aquí están los comandos para hacerlo en una máquina con Ubuntu como
sistema operativo. En la <a href="http://elixir-lang.org/install.html">documentación de Elixir</a> hay instrucciones para otros
sistemas operativos.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb
</span><span class='line'>$ sudo dpkg -i erlang-solutions_1.0_all.deb
</span><span class='line'>$ sudo apt-get update
</span><span class='line'>$ sudo apt-get install esl-erlang
</span><span class='line'>$ sudo apt-get install elixir</span></code></pre></td></tr></table></div></figure>


<p><strong>Editores</strong></p>

<p>La comunidad de Elixir ha creado plugins para los editores de código más
famosos, entre ellos <a href="http://www.vim.org/">Vim</a>, que utilizo para mis <a href="http://rchavarria.github.io/pet-projects/">proyectos personales</a>.</p>

<p>Instalar el plugin <a href="https://github.com/elixir-lang/vim-elixir">vim-elixir</a> en Vim es facilísimo si instalas plugins con
pathogen:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/elixir-lang/vim-elixir.git ~/.vim/bundle/vim-elixir</span></code></pre></td></tr></table></div></figure>


<p><strong>Herramientas</strong></p>

<p><code>iex</code> es una herramienta de tipo REPL (read, evaluate, print, loop), que nos
permite ejecutar código Elixir de forma rápida. El comando <code>iex &lt;fichero.exs&gt;</code>
compila un script de Elixir y lo carga en la herramienta. Si ya estamos dentro
de ella, el comando para compilar el código Elixir de un fichero sería <code>c
"&lt;fichero exs&gt;"</code>.</p>

<p><strong>Pattern matching</strong></p>

<p>El operador <code>=</code> es muy diferente a lo que esperamos de él los que estamos
acostumbrados a la programación orientada a objetos. Tiene una apariencia
similar, pero no se comporta de la misma forma. Con este operador, Elixir trata
de hacer coincidir los valores de la izquierda con los valores de la derecha.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = 2
</span><span class='line'>[a, b, a] = [1, 2, 1]
</span><span class='line'>[^a, b] = [2, 3]
</span><span class='line'>[a, b, c] = [1, 2, [3, 4, 5]]   # c vale [3, 4, 5]</span></code></pre></td></tr></table></div></figure>


<p><strong>Inmutabilidad</strong></p>

<p>¿Es eficiente devolver una copia de los datos? En los lenguajes funcionales, no
se modifican los datos, se devuelve una copia de ellos transformados. Parece
ineficiente, pero es todo lo contrario. Al no modificarse los originales, éstos
pueden compartirse por muchas variables, y pueden estar tranquilos, ya que no
se va a modificar. En los lenguajes no funcionales, se devuelve una copia (no
eficiente), en los funcionales, en realidad no se devuelve una copia, se
comparte todo lo que se puede. Por lo que es más eficiente.</p>

<p>¿Qué pasa con el recolector de basura? ¿Consume muchos recursos para deshacerse
de todos esos datos transformados que ya no se utilizan? No consume mucho, en
Elixir (en Erlang en realidad), hay muchos procesos, cada uno con un <em>heap</em>
distinto, por lo que el heap es más pequeño que en otros lenguajes, y el
recolector de basura se ejecuta bastante más rápido.</p>

<p><strong>Tipos de datos</strong></p>

<p>Y por fin algo de código:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># enteros
</span><span class='line'>this_is_an_int = 1234
</span><span class='line'>this_is_an_int = 0xcafe    # admite hexadecimal
</span><span class='line'>this_is_an_int = 0o765     # octal
</span><span class='line'>this_is_an_int = 0b01010   # binario
</span><span class='line'>this_is_an_int = 1_000_000
</span><span class='line'>
</span><span class='line'># en coma flotante
</span><span class='line'>this_is_a_float = 1.0
</span><span class='line'>this_is_a_float = 0.245
</span><span class='line'>this_is_a_float = .342        # error
</span><span class='line'>this_is_a_float = 314159.0e-5
</span><span class='line'>
</span><span class='line'># rangos
</span><span class='line'>this_is_a_range = 1..100
</span><span class='line'>
</span><span class='line'># expresiones regulares
</span><span class='line'>this_is_a_regexp = ~r{regexp}options
</span><span class='line'>
</span><span class='line'># tuplas
</span><span class='line'>this_is_a_tuple = { :ok, 42, "next" }
</span><span class='line'>
</span><span class='line'># listas: se parecen a los arrays de otros lenguajes, pero no
</span><span class='line'>#lo son. Son estructuras enlazadas. Una lista o está vacía, o
</span><span class='line'>#contiene un head y un tail, donde tail es otra lista
</span><span class='line'>this_is_a_list = [ 1, 2, 3 ]
</span><span class='line'>
</span><span class='line'># mapas: lista de parejas clave/valor 
</span><span class='line'>this_is_a_map = %{ key =&gt; value, key =&gt; value }
</span><span class='line'># si las claves son Atoms, se puede escribir
</span><span class='line'>this_is_a_map = %{ red: 0xFF0000, green: 0x00FF00, blue: 0x0000FF }
</span><span class='line'>
</span><span class='line'># binarios: para acceder a datos como una secuencia de bits y bytes (para muy bajo nivel)</span></code></pre></td></tr></table></div></figure>


<p>Hay otros tipos de datos, como los PIDs (referencias a procesos locales o
remotos) o los puertos (referencias a recursos sobre los cuales leeremos o
escribiremos).</p>

<p>Un tipo de datos muy interesante (y que yo personalmente no conocía) son los
<em>Atoms</em>: constantes representando el nombre de algo. Su nombre es su valor. Dos
Atoms son igules si tienen el mismo nombre, vengan de donde vengan (incluso de
máquinas diferentes)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># atoms
</span><span class='line'>this_is_an_atom = :fred
</span><span class='line'>this_is_an_atom = :is_binary?
</span><span class='line'>this_is_an_atom = :var@32
</span><span class='line'>this_is_an_atom = :&lt;&gt;
</span><span class='line'>this_is_an_atom = :"lo john silver"</span></code></pre></td></tr></table></div></figure>


<p>Hay dos estructuras muy similares, la lista de palabras clave: <code>[red: 0xFF000,
green: 0x00FF00]</code>, que se transforma en <code>[{:red, 0xFF0000}, {:green,
0x00FF00}]</code> y un mapa <code>%{red: 0xFF000, green: 0x00FF00}</code>. Se recomienda usar la
lista de palabras clave para pasar parámetros y usar los mapas cuando se
necesite un array asociativo.</p>

<p>No hemos dicho nada de las cadenas. Pertenecen al tipo <em>Binario</em>. Existe
interpolación de cadenas, con <code>#{...}</code> se evalúa el código de dentro y se
formatea la cadena con el valor obtenido.</p>

<p><strong>Funciones anónimas</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sum = fn (a, b) -&gt; a + b end
</span><span class='line'>sum.(2, 3)   # devuelve 5</span></code></pre></td></tr></table></div></figure>


<p>Las funciones pueden devolver otras funciones. Las funciones recuerdan su
entorno original. Forman lo que se conoce como <em>closures</em>. Me recuerda mucho a
las funciones de JavaScript en este aspecto.</p>

<p>Existe una forma de crear funciones anónimas de una forma muy concisa, con el
operador <code>&amp;...</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sum = fn (a, b) -&gt; a + b end
</span><span class='line'>sum2 = &(&1 + &2)   # idéntica a la función anterior
</span><span class='line'>
</span><span class='line'># devuelve lista con dos elementos: doble del primer parámetro, y cuadrado del mismo
</span><span class='line'>returns_a_list = &[2 * &1, &1 * &1]
</span><span class='line'>
</span><span class='line'># esta notación viene muy bien para pasar funciones por parámetro
</span><span class='line'>Enum.map [1, 2, 3] &(&1 * &1)   # devuelve [1, 4, 9]</span></code></pre></td></tr></table></div></figure>


<p>Es normal ver la definición de una función como <code>&amp;map/2</code>, donde <code>map</code> es el
nombre de la función y <code>2</code> es el <em>arity</em>, el número de parámetros de la misma.</p>

<p><strong>Módulos, funciones con nombre y funciones privadas</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defmodule Times do
</span><span class='line'>  ## define una función en una única línea
</span><span class='line'>  def double(n), do: n * 2
</span><span class='line'>
</span><span class='line'>  ## define una función en varias líneas
</span><span class='line'>  def triple(n) do
</span><span class='line'>    n * 3
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  ## define una función privada
</span><span class='line'>  defp quadruple(n) do: n * 4
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Las funciones con nombre pueden tener varios cuerpos. Eso ayuda a utilizar
<em>pattern matching</em> a la hora de implementar una solución.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defmodule Factorial do
</span><span class='line'>  # el factorial de 0, siempre es 1, esta definición es quien para la recursividad
</span><span class='line'>  def of(0), do: 1
</span><span class='line'>
</span><span class='line'>  # el factorial de cualquier otro número, es recursivo
</span><span class='line'>  def of(n), do: n * factorial(n - 1)
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Factor.of(5)
</span><span class='line'>  # =&gt; 120</span></code></pre></td></tr></table></div></figure>


<p>También, las definiciones pueden tener claúsulas de guarda, mediante <code>when
&lt;condition&gt;</code>, lo que ayuda a tener un pattern matching más específico.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defmodule Guard do
</span><span class='line'>  def what_is(x) when is_number(x) do
</span><span class='line'>    IO.puts "#{x} is a number"
</span><span class='line'>  end
</span><span class='line'>  def what_is(x) when is_list(x) do
</span><span class='line'>    IO.puts "#{x} is a list"
</span><span class='line'>  end
</span><span class='line'>  def what_is(x) when is_atom(x) do
</span><span class='line'>    IO.puts "#{x} is an atom"
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><strong>El operador tubería (pipe)</strong></p>

<p>El operador <code>|&gt;</code> toma el resultado de una función y lo pasa como primer
parámetro de la segunda función. <code>String.reverse "foobar" |&gt; String.capitalize</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>filing = DB.find_customers
</span><span class='line'>           |&gt; Orders.for_customers
</span><span class='line'>           |&gt; sales_tax(2016)
</span><span class='line'>           |&gt; prepare_filing
</span><span class='line'>      
</span><span class='line'>list
</span><span class='line'>  |&gt; sales_taxes(2016)
</span><span class='line'>  |&gt; prepare_filing
</span><span class='line'>
</span><span class='line'># es lo mismo que llamar
</span><span class='line'>prepare_filing( sales_taxes(list, 2016) )</span></code></pre></td></tr></table></div></figure>


<p><strong>Parámetros por defecto</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defmodule DefaultParams do
</span><span class='line'>  def func(p1, p2 \\ 2) do
</span><span class='line'>    IO.inspect [p1, p2]
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Example.func("a", "b")
</span><span class='line'>  # =&gt; ["a", "b"]
</span><span class='line'>
</span><span class='line'>Example.func("a")
</span><span class='line'>  # =&gt; ["a", 2]</span></code></pre></td></tr></table></div></figure>


<p><strong>Librerías</strong></p>

<p>Se pueden buscar módulos y librerías ya implementados para realizar ciertas
tareas que necesitemos, para ello, está la documentación de <a href="http://elixir-lang.org/docs.html">librerías de Elixir</a>.
Si no encontramos ahí lo que buscamos, lo podemos buscar en <a href="http://erlang.org/doc/">librerías de Erlang</a>.</p>

<h2>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</h2>

<p><strong>¿Qué hace <code>^</code> en el pattern matching?</strong></p>

<p>El operador <code>^</code> obliga a que el valor actual de una variable coincida con el
valor en la expresión de <em>pattern matching</em>. En caso de no coincidir, se
producirá un error.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = 2
</span><span class='line'>[^a, b] = [2, 3]  ## no hay error, `a` valía `2` y aquí coinciden
</span><span class='line'>[^a, b] = [1, 3]  ## error</span></code></pre></td></tr></table></div></figure>


<p><strong>Tuplas, <em>keyword list</em> y mapas</strong></p>

<p>Las <em>keyword list</em> son una lista usadas muy a menudo, tienen la forma:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keyword_list = [ red: 0xFF0000, green: 0x00FF00, blue: 0x0000FF ]</span></code></pre></td></tr></table></div></figure>


<p>Pero no es más que una forma simplificada de escribir una lista de tuplas,
donde el primer valor de cada una de ellas es un Atom:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tuple_list = [ {:red, 0xFF000}, {:green, 0x00FF00}, {:blue, 0x0000FF} ]</span></code></pre></td></tr></table></div></figure>


<p>Una estructura muy parecida a estas son los mapas, que no son más que un
conjunto de parejas clave-valor:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a_map = %{ :red =&gt; 0xFF000, :green =&gt; 0x00FF00, :blue =&gt; 0x0000FF }</span></code></pre></td></tr></table></div></figure>


<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-01/round-01-exercise-01.exs">round-01-exercise-01.exs</a>: utilizar varios cuerpos de una función y
recursividad para implementar una función que calcule la suma de <code>1</code> hasta
<code>n</code></li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-01/round-01-exercise-02.exs">round-01-exercise-02.exs</a>: implementar la función <code>gcd(x, y)</code> que calcule el
máximo común divisor. Matemáticamente: <code>gcd(x, y)</code> es <code>x</code> si <code>y</code> es cero y es
<code>gcd(y, rem(x, y))</code> en caso contrario</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-01/round-01-exercise-03.exs">round-01-exercise-03.exs</a>: crear el juego <em>Estoy pensando en un número entre
el 1 y el 100</em>: rangos, div(a, b), claúsulas de guarda, pattern matching en
rangos: <code>a..b = 4..8</code>, funciones privadas</li>
</ul>


<h2>Enseñar lo aprendido</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta el siguiente asalto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[El código fuente no es suficientemente grande para los dos]]></title>
    <link href="http://rchavarria.github.io/blog/2016/01/31/codigo-no-suficientemente-grande-para-dos/"/>
    <updated>2016-01-31T20:29:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2016/01/31/codigo-no-suficientemente-grande-para-dos</id>
    <content type="html"><![CDATA[<p>En biología, el concepto de repetirse a uno mismo es fundamental. Ninguno de
nosotros existiríamos si los primeros organismos unicelulares no hubieran sido
capaces de desarrollar el mecanismo de mitosis, la capacidad de multiplicarse,
de crear réplicas de sí mismos. Para los niños, la repetición también es
importante. Aprenden por imitación, repitiendo lo que observan en el
comportamiento de los demás.</p>

<p><img class="right" src="http://rchavarria.github.io/images/2016/mitosis.png"></p>

<p>A la hora de desarrollar software, la repetición no está vista con tan buenos
ojos. Por ejemplo, se ha dado un nombre despectivo a los programas que crean
copias de sí mismos, como los <em>virus</em>. Por otro lado, la duplicidad de código
de una aplicación produce muchos quebraderos de cabeza a aquellos de nosotros
que nos dedicamos al software. Para recordárnoslo, contamos con el <strong>principio
<em>D.R.Y., don&#8217;t repeat yourself</em>, o dicho de otro modo, no te repitas a tí mismo</strong>.</p>

<!-- more -->


<blockquote><p>Cada pieza de conocimiento debe tener una representación dentro de un sistema
  única, inequívoca y acreditada ~ <em>C2 Wiki</em> (traducción libre)</p></blockquote>

<p>Normalmente este concepto se cumple cuando hay dos segmentos de código con el
mismo texto, pero no se limita a ello. Puede que existan dos clases que hace
exactamente lo mismo, pero los métodos o las variables tienen distinto nombre.
También puede haber duplicidades en ficheros de configuración, o en la
documentación. Por lo tanto, hay que tener en cuenta que <strong>D.R.Y. no es
duplicidad de texto, si no de conceptos</strong>.</p>

<p>Debemos prestar atención a duplicidades en los tests, por ejemplo a la hora de
realizar las verificaciones. En muchas herramientas de testing existen los
<em>custom matchers</em>, que nos ayudan precisamente a reducir estas duplicidades.</p>

<p>J.B.Rainsberger ha escrito mucho sobre el tema, muy relacionado con el libro
<em><a href="https://leanpub.com/4rulesofsimpledesign">4 rules of simple design</a></em>, de Corey Haines, quien al final las reduce a dos
reglas básicas: dar nombre a las abstracciones y eliminar duplicidades creando
nuevas abstracciones. Pero también existen otras técnicas para reducir
conceptos duplicados, como las refactorizaciones <strong>extraer método</strong> y <strong>extraer
clase</strong>, sin olvidar la más usada, la <strong>herencia</strong>, aunque no está muy bien
considerada.</p>

<p>Menos duplicaciones puede significar <strong>mayores niveles de indirección</strong>, lo que
puede hacer que el código sea algo más difícil de leer y seguir la pista,
porque para no duplicar, los detalles están dispersos en distintos lugares. La
<strong>metaprogramación</strong> puede ser también una técnica para eliminar duplicados,
pero hace el código mucho más difícil de leer. Más incluso que la indirección.</p>

<p>En contraposición al principio D.R.Y., está el principio W.E.T. Pensaba que
significaba <strong>W</strong>rite <strong>E</strong>verything <strong>T</strong>wice (escríbelo todo dos veces), pero
también he leído que las siglas pueden significar: <strong>W</strong>e <strong>E</strong>dit
<strong>T</strong>erribly, o <strong>W</strong>e <strong>E</strong>njoy <strong>T</strong>yping (mucho más divertidos, ¿verdad?).</p>

<p>Por último, algo que me ha parecido fabuloso, una frase que describe la
programación orientada a objetos, donde recuerda los conceptos de encapsulación
(<em>shy</em>), eliminar duplicados (<em>dry</em>) y paso de mensajes entre objetos (<em>tell, don&#8217;t
ask</em>):</p>

<blockquote><p>Keep it shy, dry, and tell the other guy</p></blockquote>

<h2>Recursos</h2>

<ul>
<li>Charla <a href="https://www.youtube.com/watch?v=Is8ThG6Fetg">Mantaining balance while reducing duplication</a>, de David Chelimsky</li>
<li>Dave Thomas en CodeNewbie podcast: en la <a href="http://www.codenewbie.org/podcast/the-pragmatic-programmer-i">parte 1</a> cuenta la historia de cómo
nació el libro <em>The pragmatic programmer</em>, sobre cómo decidieron hacer todo
ellos mismos y cómo de ahí nació su editorial. En la <a href="http://www.codenewbie.org/podcast/the-pragmatic-programmer-part-ii">parte 2</a> me ha llamado la
atención su opinión sobre las Katas. Comenta que lo importante de la kata no es
el ejercicio en sí, sino la repetición, hacer el ejercicio sin pensar en la
solución. De esta forma hacemos que nuestro cerebro reconozca patrones y
aprendamos sin darnos cuenta.</li>
<li><a href="http://www.c2.com/cgi/wiki?DontRepeatYourself">DontRepeatYourself</a> en la C2 Wiki</li>
<li>Artículo sobre <a href="http://blog.thecodewhisperer.com/2013/12/07/putting-an-age-old-battle-to-rest/">los 4 elementos del diseño simple</a>, de J.B.Rainsberger</li>
<li>Charla de la CAS2015: <a href="http://www.slideshare.net/programania/software-economics-tradeoffs-of-decoupled-softwre">Economía del software y dependencias</a>, de Luis Artola
y Guillermo Gutiérrez</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aprendiendo Elixir]]></title>
    <link href="http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir/"/>
    <updated>2016-01-17T16:39:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://rchavarria.github.io/images/2016/elixir.png" width="200" height="266"></p>

<p>No es una propósito de año nuevo ni nada, pero me apetece aprender un lenguaje
puramente funcional por el simple hecho de aprender. He estado dudando entre
Clojure y Elixir. Al final me he decidido por Elixir porque lo <em>venden</em> como
divertido y porque sigo a varias personas en Twitter que están haciendo lo
mismo (durante la redacción de este post me he enterado que hay un meetup nuevo
del lenguaje en Madrid, <a href="http://www.meetup.com/Madrid-Elixir/">Madrid |> Elixir</a>), por lo que podré compartir lo
aprendido. Dicen de Elixir que se parece mucho a Ruby, y que es un lenguaje
moderno que se ejecuta la máquina virtual de Erlang. Con esos <em>hermanos
mayores</em> promete mucho, la verdad.</p>

<!-- more -->


<p>Para ir aprendiendo el lenguaje, voy a poner en práctica el proceso de
aprendizaje que descubrí leyendo el libro <a href="http://rchavarria.github.io/blog/2015/11/08/soft-skills/">Soft Skills</a>, de John Sonmetz:</p>

<ol>
<li>Entender la habilidad que se quiere aprender</li>
<li>Delimitar el ámbito</li>
<li>Definir qué se va a considerar como éxito</li>
<li>Encontrar recursos</li>
<li>Crear un plan de aprendizaje</li>
<li>Filtrar los recursos</li>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido, y repetir desde el paso 7</li>
</ol>


<p>Antes de llegar a los puntos 7-10, que son como un bucle, ahí van los primeros.</p>

<h2>¿Qué habilidad quiero aprender?</h2>

<p><strong>Quiero aprender a programar en Elixir</strong>. La frase es sencilla, pero ¿qué
significa? ¿Significa que solamente quiero aprender la sintaxis? No, eso no es
aprender un lenguaje de programación. ¿Significa que debo aprender todas las
herramientas, frameworks, librerías, sistemas,&#8230;? Tampoco. Eso es imposible.
He programado durante años en Java o JavaScript y lo que desconozco de ellos es
mucho más de lo que conozco.</p>

<p>Así pues, delimitaré el aprendizaje a conocer lo suficientemente el lenguaje y
su ecosistema para ser capaz de escribir la parte servidora de una aplicación
web.</p>

<h2>¿Qué voy a considerar como éxito?</h2>

<p>Tengo que poner algún límite. Creo que algo realmente interesante sería
considerar un éxito poder <strong>desarrollar la parte servidora de una aplicación web</strong>,
una API REST o algo así, que gestionara algún tipo de recurso (usuarios,
tareas,&#8230; todavía no lo se). Si además soy capaz de desplegar la aplicación en
alguna plataforma como Heroku o similar, el éxito sería rotundo.</p>

<p>No me planteo nada de conectarlo a una base de datos, porque por ahora no he
leído nada acerca de ello. Supongo que habrá alguna posibilidad, pero por ahora
lo voy a dejar fuera.</p>

<h2>Recursos</h2>

<p>Esta es una lista inicial de recursos que voy a ir consumiendo:</p>

<ul>
<li>Web <a href="http://elixir-lang.org/">elixir-lang.org</a>. Web oficial. Creo que me puede servir para tener
documentación rápida de forma online.</li>
<li>Libro <a href="https://pragprog.com/book/elixir/programming-elixir">Programming Elixir, de Dave Thomas</a>. Parece ser el libro de
referencia, así que es un recurso indispensable.
<a href="https://forums.pragprog.com/forums/322">Foros de discusión del libro</a>.</li>
<li>Libro <a href="https://pragprog.com/book/phoenix/programming-phoenix">Programming Phoenix</a>, también de la editorial The Pragmatic
Programmer. Phoenix es un framework para desarrollar aplicaciones web con
Elixir (<a href="https://twitter.com/_rubenfa/status/689356164082049024">recomendado por Rubén Fernández</a>, gracias).</li>
<li><a href="https://github.com/elixir-lang/elixir">Código elixir en GitHub</a>. Código, código, código.</li>
<li>Screencasts <a href="http://elixirsips.com/">elixir sips</a>. Videos sobre Elixir, muchos de ellos bajo
suscripción.</li>
<li><a href="https://www.learnelixir.tv/episodes">LearnElixitTV</a>. Más videos sobre Elixir, en este caso son de pago pero no de
suscripción.</li>
<li><a href="http://elixirdose.com/">Elixir Dose</a>. Un blog sobre este lenguaje de programación.</li>
<li>Blog de <a href="http://benjamintan.io/blog/">Benjamin Tan</a>. Un blog sobre Ruby y Elixir del autor de un libro
sobre Elixir. Parece venir del mundo Ruby. Tiene una charla en una
conferencia de Ruby que hay que ver.</li>
<li>Track de Elixir de <a href="http://exercism.io/languages/elixir">exercism.io</a>, una plataforma social donde resolver
problemas y comentar las soluciones del resto de usuarios.</li>
<li><a href="https://github.com/niftyn8/elixir_style_guide">Guía de estilo</a> para programar en Elixir. De obligado conocimiento para que
tu código sea más legible por la comunidad.</li>
</ul>


<p>También espero que poco a poco, según vaya necesitando saber más sobre cómo
hacer cosas con el lenguaje, vaya descubriendo blogs y autores acerca del
lenguaje.</p>

<h2>Plan de aprendizaje</h2>

<p>Por ahora no tengo ningún plan. El más básico que tengo es empezar a leer el
libro Programming Elixir y cuando sea capaz de escribir algún programa más
complejo que un <em>Hola mundo</em> empezar a resolver problemas en exercism.io.</p>

<p>A partir de ahí, el tiempo dirá.</p>

<h2>Recursos filtrados</h2>

<p>Creo que no tengo tantos recursos como para filtrarlos. Empezando con el libro,
con exercism.io y de vez en cuando la web oficial del lenguaje puede ser
suficiente para ir cogiendo ritmo.</p>

<h2>Asaltos</h2>

<ol>
<li><a href="http://localhost:4000/blog/2016/02/09/elixir-primer-asalto/">Primer asalto</a>: tipos, funciones, pattern matching y módulos</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Artículo técnico: Getting testy]]></title>
    <link href="http://rchavarria.github.io/blog/2015/12/28/getting-testy/"/>
    <updated>2015-12-28T21:33:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/12/28/getting-testy</id>
    <content type="html"><![CDATA[<p><img class="right" style="width: 250px" src="http://rchavarria.github.io/images/2015/getting-testy.svg"/></p>

<p>Dando una vuelta por Twitter descubrí una serie de artículos sobre testing
titulados <a href="http://randycoulman.com/blog/2015/08/04/getting-testy-redux/">Getting testy</a>, de <a href="http://randycoulman.com/">Randy Coulman</a>. Parecían artículos interesantes,
pero era mucha lectura para ser tratada como un blog. Así que decidí leerlo
como si fuera un libro. Aunque un libro cortito.</p>

<p>Es una serie de artículos muy recomendable sobre TDD y cómo escribir buen
software. Trata muchísimos temas relacionados con escribir tests para nuestro
código. Conceptos sencillos y conceptos avanzados. Diferencias entre los dos
estilos principales de hacer TDD. Qué hacer y qué no hacer a la hora de
escribir tests. Y un sinfín de cosas más. Todas interesantísimas.</p>

<!-- more -->


<h2>Frases a destacar</h2>

<blockquote><p>A la hora de tomar decisiones entre dos extremos, el autor se fija en los más
  y en los menos de cada extremo y trata de sintetizar las mejores partes de
  cada uno en algo sobre lo que pueda trabajar</p></blockquote>

<!-- -->


<blockquote><p>Los problemas a la hora de testear son una buena indicación de los problemas
  que encontrará el código cliente de esos mismos APIs</p></blockquote>

<!-- -->


<blockquote><p>Los tests de aceptación nos dicen si vamos a <strong>construir el sistema
  correcto</strong>. Los tests de más bajo nivel nos dicen si vamos a <strong>construir el
  sistema correctamente</strong> (build the right thing, build the thing right)</p></blockquote>

<!-- -->


<blockquote><p>No se recomiendan tests que prueben métodos específicos: se deberían testear
  las responsabilidades, no los métodos</p></blockquote>

<!-- -->


<blockquote><p>Guard the borders, not the hinterlands</p></blockquote>

<!-- -->


<blockquote><p>No escribas el test que te fuerza a escribir el código que tu quieres.
  Escribe el test que fuerza a tu objeto a tener las responsabilidades que
  quieres que tenga</p></blockquote>

<h2>Notas tomadas</h2>

<p><strong>Historia y mecanismos</strong></p>

<p><em>Dobles de tests</em> es una analogía de la idea de la situación en la que en una
película de acción, un doble suplanta al actor profesional en una escena
peligrosa</p>

<p><strong>Filosofía</strong></p>

<p>A la hora de tomar decisiones entre dos extremos, el autor se fija en los más y
en los menos de cada extremo y trata de sintetizar las mejores partes de cada
uno en algo sobre lo que pueda trabajar.</p>

<p>Dos escuelas fundamentales de hacer TDD:</p>

<ol>
<li>Statist, Detroit: se enfocan en los objetos de tu sistema, lo que lleva a
escribir tests basados en estado.</li>
<li>Mockist, Londres: se enfocan en los mensajes enviados en el sistema, lo que
lleva a escribir tests basados en mocks (o dobles de tests).</li>
</ol>


<p><em>Nota: existe un vídeo, de <a href="https://twitter.com/searls">Justin Searls</a>, donde compara detalladamente estas
dos escuelas: <a href="https://www.youtube.com/watch?v=aeX5OXO-w30">Comparación escuelas TDD</a></em></p>

<p>Un proceso ingenioso para añadir tests a código que existe actualmente:</p>

<ol>
<li>Comenta el codigo que quieres probar</li>
<li>Escribe un test que falle</li>
<li>descomenta el mínimo código que haga que ese test pase</li>
<li>Refactorizar y repetir</li>
</ol>


<p>No tengas miedo a borrar tests. Es más, hay ocasiones en las que querrás
escribir tests para después borrarlos. En ocasiones, cuando estás escribiendo
un algoritmo complejo, querrás escribir tests para las partes que más tarde
serán privadas. Necesitas probar esos pasos intermedios que te lleven a la
solución. Más tarde, cuando hagas esas partes privadas, podrás borrar los tests
<em>temporales</em>.</p>

<p><strong>Funciones</strong></p>

<p>Deja que los tests guíen tu diseño, especialmente la API pública de tus
objetos. Los problemas a la hora de testear son una buena indicación de los
problemas que encontrará el código cliente de esos mismos APIs.</p>

<p>Haz que cada test <em>se pague</em> a sí mismo. Los tests cuestan tiempo y dinero de
ejecutar y mantener. No escribas tests que no añadan suficiente valor para
sobrepasar esos costes. O escríbelos hasta que consigas tener el código que
buscas. Luego, bórralos.</p>

<p><strong>Abstracciones</strong></p>

<p>Cuando crees abstracciones en tu código, es importante elegir aquellas que son
de alguna utilidad. Muchas veces escogemos las abstracciones equivocadas y eso
hace nuestro código más confuso para los que vendrán después de nosotros. Esto
me recuerda a una charla de Sandi Metz, en la que recomendaba algo de
duplicación en lugar de una mala abstracción o mala legibilidad
(<a href="http://rchavarria.github.io/blog/2015/10/18/charla-tecnica-all-the-little-things/">All the little things</a>)</p>

<p><strong>Capas</strong></p>

<p>Los tests de aceptación nos dicen si vamos a <strong>construir el sistema correcto</strong>.
Los tests de más bajo nivel nos dicen si vamos a <strong>construir el sistema
correctamente</strong> (build the right thing, build the thing right)</p>

<p><strong>Aceptación</strong></p>

<p>En la mayoría de los sistemas, los tests de la capa más externa son los tests
más lentos que tenemos. Así pues, queremos cuantos menos de ellos mejor, que no
es lo mismo que decir que no los queremos en absoluto.</p>

<p>Cuando usamos una herramienta como Cucumber of Fitnesse, deberíamos ser capaces
de portar nuestra aplicación a un lenguaje de programación completemante
diferente y seguir manteniendo estos tests. Es decir, los tests de aceptación
deben tener su propio lenguaje, el del negocio, el del dominio del cliente que
va a usar el software.</p>

<p>Cuando estés escribiendo tests para la capa más externa de tu sistema,
pregúntate continuamente si esos tests sobrevivirian si cambias
signficativamente la implementación del sistema que están probando.</p>

<p><strong>Outside-in</strong></p>

<p>Si sientes la necesidad de testear detalles internos de una clase,
probablemente es que hay un objeto que está intentando <em>salir</em>.</p>

<p>Trata de no limitar tus pensamientos a los objetos que ya tienes. No tengas
miedo de introducir nuevos objectos si eso mejora el diseño.</p>

<p><strong>APIs</strong></p>

<p>Para aislarnos de sistemas externos (normalmente escritos por terceros),
debemos ocultar el servicio detrás de un interfaz que definamos y controlemos
nosotros.</p>

<p>No se recomiendan tests que prueben métodos específicos: se deberían testear
las responsabilidades, no los métodos. Los detalles de implementación deberían
estar fuera de los tests.</p>

<p><strong>Pasos</strong></p>

<p>Generalmente, es mejor hacer todo el saneamiento, validaciones y
normalizaciones en los bordes del sistema. Protege las fronteras, no el
interior (Guard the borders, not the hinterlands).</p>

<p><strong>¿Por qué?</strong></p>

<p>Por cada verificación que quieras escribir, pregúntate el por qué de dicha
verificación. ¿La razón tiene que ver con detalles de implementación o tiene
que ver con responsabilidades esenciales del código que estás probando? Si es
la primera, párate un poco y recapacita. Si es la segunda, probablemente vayas
en la buena dirección.</p>

<p>Cuando realizamos verificaciones sobre el estado de la aplicaión antes de hacer
nada en nuestros tests, estamos comunicando algo al lector del código. Es
preferible hacer esa comunicación en un tests separado antes que hacer esas
verificaciones una y otra vez, lo que nos llevaría a tener duplicación en
muchos tests</p>

<p>Otro caso en el que puede haber valor al realizar <em>verificaciones de setup</em>
(verificaciones antes de hacer el propio test) es en código legacy.</p>

<p>No escribas el test que te fuerza a escribir el código que tu quieres. Escribe
el test que fuerza a tu objeto a tener las responsabilidades que quieres que
tenga.</p>

<p><strong>Dobles de tests</strong></p>

<p>¿Cómo saber si un doble de test es un colaborador o un detalle interno? Podemos
hacernos las siguientes preguntas: ¿está al mismo nivel de abstracción que el
objeto que estoy probando? ¿tiene su propio ciclo de vida? Si es así,
probablemente es un colaborador y estaría bien utilizar un doble de tests. En
otro caso, podría ser un detalle interno de implementación, donde deberíamos
plantearnos seriamente si usar el doble de test o no.</p>

<p><strong>Antipatrones</strong></p>

<p>Un buen test unitario debería responder a las siglas en inglés <a href="http://agileinaflash.blogspot.de/2009/02/first.html">F.I.R.S.T.</a>:
Fast, Isolated, Repeatable, Self-verifying, Timely.</p>

<p><strong>Legacy</strong></p>

<p>Al escribir tests para código legacy, no nos debería importar si el código está
dando la respuesa correcta. Solo nos interesa si el código está dando la
<strong>misma</strong> respuesta que antes de realizar los cambios.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mi CAS 2015]]></title>
    <link href="http://rchavarria.github.io/blog/2015/12/13/mi-cas-2015/"/>
    <updated>2015-12-13T21:48:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/12/13/mi-cas-2015</id>
    <content type="html"><![CDATA[<p>Me quedé sin chapa. Sin chapa de &#8220;Mi primera CAS&#8221;. Conocí a varias personas que
la llevaban orgullosos. Espero que para ellos significara lo mismo que
significó para mí <a href="http://rchavarria.github.io/blog/2012/11/08/mi-experiencia-en-la-cas2012/">mi primera CAS</a>.</p>

<p>Ésta, como aquella, ha sido una gran experiencia. La de este año ha sido
enooorme, comparada con la de Cáceres. Hemos asistido más de 700 personas. Ha
tenido que ser un trabajo monumental organizarla, así que desde aquí mis
agradecimientos y admiración a todos los que la han hecho posible:
organizadores, patrocinadores y voluntarios. Olé!</p>

<!-- more -->


<p>La conferencia fueron dos intensos días llenos de charlas interesantísimas. Dos
días que saben a poco. Sobretodo porque no he podido disfrutar de las cañas de
después, o las quedadas fuera del evento. Y también porque, a pesar de que
todos los asistentes estuviéramos en la misma sala para tomar café y comer, me
ha resultado imposible entablar conversaciones con todas las personas que
quería. ¡Agotador! Pero muy motivador a la vez.</p>

<p>Sigamos con las charlas a las que asistí, y qué me llevé de ellas:</p>

<h2><a href="http://www.slideshare.net/carlosble/cas2015-opening-improving-the-software">Apertura</a>, <a href="https://twitter.com/carlosble">Carlos Blé</a></h2>

<p>Carlos habló de la necesidad de hablar inglés, no porque sí, si no para
aprender de las fuentes. También habló de la importancia de hablar otro
lenguaje, extraño para los desarrolladores, el de negocio. De esta forma nos
entenderemos mejor ambas partes. Fue una charla muy inspiradora, fenommenal
como apertura. Me quedaría con la frase:</p>

<blockquote><p>Tú eres el único responsable de tu carrera</p></blockquote>

<h2><a href="https://www.youtube.com/watch?v=C6Sy0v19RAc&amp;t=2h14m00s">Your application is not your framework</a>, de <a href="https://twitter.com/ecomba">Enrique Comba</a></h2>

<p>¿Por qué cuando te preguntan por tu applicación dices qué framework estás
usando? Habla sobre qué hace de verdad tu aplicación. Enrique habló de muchos
conceptos alrededor de los frameworks: <em>convention over configuration</em>, mezcla
de lógica de negocio con la lógica impuesta por el framework. ¿Qué beneficios
trae separar la lógica de tu aplicación del framework? Separación de
responsabilidades, velocidad en los tests automáticos y sobretodo claridad en
el <strong>propósito</strong> y <strong>estructura</strong> de tu aplicación.</p>

<h2><a href="http://www.slideshare.net/PeterMarshall10/pete-marshall-casmadrid2015-continuous-delivery-in-legacy-environments">Continuous delivery</a>, de <a href="https://twitter.com/petemar5hall">Peter Marshal</a></h2>

<p>Peter compartió su experiencia en llevar a un equipo desde el desarrollo de una
aplicación <em>a la vieja usanza</em> hasta alcanzar puestas en producción diarias. En
las slides de la presentación encontrarás multitud de consejos para llevarlo a
cabo, pero yo me quedaría con estos conceptos o enseñanzas:</p>

<ul>
<li>La entrega contínua es enfocarse en la excelencia técnica</li>
<li>Conforme avanza el tiempo, el mayor problema de las aplicaciones con
problemas es que los bugs aumentan mientras que las funcionalidades
desplegadas disminuyen.</li>
<li>La clave está en la simplicidad</li>
<li>Lleva su tiempo madurar (equipo, producto, compañía,&#8230;)</li>
</ul>


<h2><a href="http://cas2015.agile-spain.org/charlas/">Building resilient integrations</a>, de <a href="https://twitter.com/cuvuligio">Dave Moore</a></h2>

<p>Esta charla tuvo su parte teórica y su parte práctica. De la parte teórica,
decir que debemos entender que los fallos están en todas partes, por lo que es
nuestro trabajo hacer software que no falle, que sea tolerante a fallos de
sistemas externos. Algunas técnicas para hacerlo podrían ser: tests automáticos
(no mienten, la documentación sí), aislar integraciones que herramientas de
terceros (creando interfaces que las separen de nuestra applicación), utilizar
nuestro propio modelo de datos, política de reintentos de conexión,&#8230;</p>

<p>En el taller de después tuvimos la oportunidad de poner todo esto en prática.
Un taller super divertido.</p>

<h2><a href="http://es.slideshare.net/juanignaciosl/continuous-integration-at-cartodb">Continuous integration in CartoBD</a>, de <a href="https://twitter.com/juanignaciosl">Juan Ignacio Sánchez</a></h2>

<p>Juan Ignacio empezó fuerte, comentando que, aunque hay millones de
herramientas, es el <strong>equipo</strong> quien realmente puede hacer que la integración,
entrega y despliegue contínuo funcionen.</p>

<p>¿Cómo lo hacen en CartoDB? Planeándolo desde antes que la gente entre a
trabajar con ellos, despligando desde el primer día, planes iterativos e
incrementales, tests, code reviews, pull requests, feature toggles, pequeñas
releases a grupos controlados de usuarios (canary releases), posibilidad de
hacer rollback rápidamente (pequeños despliegues llevan a que esto sea
posible), análisis post-mortem de grandes fallos, mucha instrumentación y
monitorización.</p>

<h2><a href="http://www.slideshare.net/lantoli/believe-it-or-not-keynote-cas-2015-55802209">Keynote técnica</a>, de <a href="https://twitter.com/lantoli">Leo Antolí</a></h2>

<p>Leo hizo incapié en lo más profundo de agile y lean: no te creas lo que te
cuenten, pruébalo y si te funciona úsalo, si no te funciona, descártalo. Hay
mucho estudios que dicen que una práctica es X veces mejor. Analiza esos
estudios y te darás cuenta de que son humo. Pon en duda el pair programming,
TDD, mejoras en productividad, code dojos, code retreats, craftsmanship, deuda
técnica, tasa de proyectos software fallidos,&#8230;</p>

<p>Como buena keynote, lo que me llevo de esta charla son pensamientos, dudas,
cuestiones. Debo entender que el software no es el fin, es un medio para
conseguir un fin. Deja de usar números no probados. Cuenta experiencias propias
(no sirven para demostrar nada, pero son algo real). Y sobretodo, mantén un
<strong>espiritu crítico</strong>.</p>

<h2><a href="https://www.youtube.com/watch?v=_CcO9upHiDU&amp;t=9m20s">Keynote viernes</a>, de <a href="https://twitter.com/rachelcdavies">Rachel Davis</a></h2>

<p>Esta keynote trató de introducir cambios, de introducir tiempo para el
aprendizaje. Debemos crear tiempo para ello a lo largo de nuestra semana. No
tengas prisa en introducir cambios, la gente necesita <strong>tiempo</strong>.</p>

<p>De esta keynote quiero recordar dos consejos de Rachel: comparte lo aprendido
(por ejemplo en esta CAS), invierte tiempo en profundizar en lo aprendido.</p>

<h2><a href="https://medium.com/@borillo/el-modelo-de-desarrollo-mete-saca-be17304ad1df#.b0vwf7ben">Escapando del modelo mete-saca</a>, de <a href="https://twitter.com/borillo">Ricardo Borillo</a></h2>

<p>¿Estamos seguros de que lo que quiere el usuario es un simple sistema CRUD? ¿No
hay una forma de aportar más valor? Un CRUD es muy genérico, seguro que no
resuelve las necesidades del usuario con la mejor eficiencia.</p>

<p>Ricardo analizó qué nos lleva a este modelo: pobres historias de usuario, mal
definidas, que nos llevan a hacer cosas generales; los frameworks (como ORMs);
y arquitecturas de usuario pobres, con componentes maestro-detalle, consumo de
apis REST,&#8230; todo esto nos conduce al modelo mete-saca.</p>

<p>La solución propuesta por Ricardo, un único punto de entrada (en contraposición
a los múltiples endpoints REST) con una arquitectura <a href="https://en.wikipedia.org/wiki/Command%E2%80%93query_separation#Command_Query_Responsibility_Segregation">CQRS</a>. Cada <em>comando</em>
correspondería con una acción del usuario, una historia de usuario, un caso de
uso muy específico, que nos conduciría a tener las mínimas funcionalidades
desarrolladas con la máxima eficiencia y la mejor usabilidad para el usuario.</p>

<h2><a href="http://www.slideshare.net/programania/software-economics-tradeoffs-of-decoupled-softwre">Economía del software</a>, de <a href="https://twitter.com/artolamola">Luis Artola</a> y <a href="https://twitter.com/ggalmazor">Guillermo Gutierrez</a></h2>

<p>Luis y Guillermo nos condujeron en un viaje apasionante desde las necesidades
de negocio hasta detalles del código, tales como las dependencias. En el
camino, comentaron multitud de conceptos, de buenas prácticas, hicieron
referencia a charlas de todo el evento (lo que pone de manifiesto lo amplio de
su charla).</p>

<p>Concepto clave: negocio quiere entrega de <strong>valor</strong>, minimizando <strong>costes</strong> y
<strong>riesgos</strong> pero manteniendo <strong>opciones</strong> abiertas. El mayor en el software es
el coste de evolución. Cuanto más difícil sea cambiar algo, más costoso será a
lo largo del tiempo. El desarrollo iterativo e incremental reduce los riestos.
El despliegue de pequeñas funcionalidades, interfaces, inversión de control son
formas de crear opciones.</p>

<h2><a href="http://eamodeorubio.github.io/effective-ui-bdd-with-js/short.html#/">Effective UI testing</a>, de <a href="https://twitter.com/eamodeorubio">Enrique Amodeo</a></h2>

<p>Todo comenzó con el dilema: ¿debo testear cada clase individual o todo el
sistema? Pues ni lo uno, ni lo otro. En cuanto a la interfaz gráfica, la
podríamos dividir en dos dominios: la presentación y la lógica de usabilidad.</p>

<p>¿Como testear cada parte? Para testear la presentación debemos mockear el DOM
del navegador. Para testear la lógica de usabilida, debemos mockear el acceso
al servidor. Basándose en eso, Enrique recomienda seguir dos prácticas:
encapsular los accesos al servidor y los accesos al DOM.</p>

<h2>Trabajo para casa</h2>

<ul>
<li>Parece que integración, entrega y despliegue contínuos son prácticas básicas para empresas exitosas.</li>
<li>Prepara las conferencias a las que asistas: busca el lugar donde se va a
celebrar e imprime un plano de las salas que se van a utilizar, crea una
checklist con las cosas que hacer antes de asistir a un evento. Como por
ejemplo prepar preguntas a hacer a gente interesante que quiero conocer (me
gustó aquello que hiciste/dijiste, discrepo con aquello que &#8230;)</li>
<li>Echar un vistazo a la herramienta Screen Hero</li>
<li>Libro recomendado por Leo Antolí: Pensar rápido, pensar despacio</li>
<li>Libro recomendado por Rachel Davis: Drive (cómo introducir cambios)</li>
<li>Busca slide de Rachel Davis sobre <em>Sources of learning</em></li>
<li>Busca referencia a lo que falta de SOLID: RCCASS</li>
<li>¿Qué es el patrón Page Object?</li>
<li>Slide con las <em>mejores prácticas</em> recomendadas por Enrique Amodeo</li>
</ul>


<h2>Recursos</h2>

<ul>
<li><a href="https://gist.github.com/nhpatt/89f90a27042e4fd1db7b">Charlas, artículos y más sobre la CAS 2015</a></li>
<li><a href="https://www.youtube.com/watch?v=C6Sy0v19RAc">Streaming del día 1</a></li>
<li><a href="https://www.youtube.com/watch?v=_CcO9upHiDU">Streaming del día 2</a></li>
<li><a href="http://martinfowler.com/bliki/CQRS.html">Martin Fowler acerca de CQRS</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mi fracción del Codemotion 2015]]></title>
    <link href="http://rchavarria.github.io/blog/2015/11/29/mi-fraccion-codemotion/"/>
    <updated>2015-11-29T19:09:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/11/29/mi-fraccion-codemotion</id>
    <content type="html"><![CDATA[<p>Por 4º año consecutivo he tenido el placer de asistir a <a href="http://2015.codemotion.es/">Codemotion</a>, un evento
donde todas las comunidades tecnológicas tienen cabida, un evento con más de
2000 asistentes (este año hablan de 2500), con 8 tracks en paralelo mas 4
talleres.</p>

<p>En esta entrada trato de mostrar mi pequeña porción de lo vivido, por lo que no
esperes que coincida con la tuya si has estado allí, y no esperes que coincida
completamente con la realidad, porque lo que aquí leerás es solo una mínima
parte de todo lo ocurrido.</p>

<!-- more -->


<p>En un evento de este calibre no solo hay que valorar las charlas técnicas que
te inspiran, te enseñan y te encienden la chispa de la curiosidad. También hay
que valorar lo que pasa fuera de las charlas. Este año me he centrado más en
las charlas. Aún así, he conocido en persona a <a href="http://ocana.github.io/">Miguel</a>, que ya tenía ganas, y
he vuelto a ver a antiguos amigos de profesión que estamos convirtiendo en
costumbre lo de encontranos cada año en el Codemotion.</p>

<p>Otros años me ha parecido que han asistido más estudiantes, este año, la
impresión que he tenido es que el porcentaje de estudiantes/profesionales ha
estado bastante igualado.</p>

<p>Charlas a las que he asistido:</p>

<h2><a href="http://2015.codemotion.es/agenda.html#5677904553836544/43004005">El arte de ser vago</a>, de <a href="http://cjgaliana.com/">Camilo Galiana</a></h2>

<p>Esta charla fue un calentamiento perfecto. Camilo se expresa perfectamente, y
llevó un ritmo bastante bueno en su charla. Se podría resumir la charla como:</p>

<blockquote><p>Se programa para personas, no para las máquinas</p></blockquote>

<p>Se hizo un repaso de multitud de principios de programación imprescindibles
para un buen desarrollo de aplicaciones. Me quedaría con una frase graciosa.
Imagínate en una entrevista:</p>

<blockquote><p>¿Cuál es tu mayor fortaleza?
Soy vago</p></blockquote>

<h2><a href="http://2015.codemotion.es/agenda.html#5677904553836544/50404003">Technical debt for developers&#8230; and managers!</a>, de <a href="https://twitter.com/luiyo">Luis García Castro</a></h2>

<p>Charla completísima acerca del concepto de <a href="http://rchavarria.github.io/blog/2015/10/12/deuda-tecnica/">deuda técnica</a>. Luis cubrió casi
todos los aspectos relacionados con la deuda técnica (y otras deudas):
metáfora, síntomas, ventajas, inconvenientes, cómo evitarla, cómo pagarla,&#8230;</p>

<p>La charla estuvo bastante bien, y muy bien amenizada por Luis. Hubo debate, por
lo que estuvo bastante animada.</p>

<p>Como punto gracioso, Luis expuso una serie de frases que todos hemos dicho u
oido en el trabajo, como por ejemplo:</p>

<blockquote><p>Pon un comentario y lo arreglamos luego</p></blockquote>

<h2><a href="http://2015.codemotion.es/agenda.html#5677904553836544/48514002">Dando amor a los tests</a>, de <a href="https://twitter.com/kinisoftware">Joaquín Engelmo</a></h2>

<p>Esta es la segunda parte de una charla de Kini (creo recordar que se titulaba
«Adicto al verde». Como segunda parte, los conceptos tratados en esta charla
son más avanzados y por las pequeñas preguntas para responder a mano alzada, no
toda la audiencia estaba familiarizada con ellos, por lo que seguro que hubo
mucha gente que aprendió mucho de la charla.</p>

<p>De la charla me llevo la confirmación de una sospecha que tenía: cuantos más
tests tienes y más grande es tu aplicación, más debes tratar a los tests como
código de producción y seguir los mismos principios, de lo contrario, cualquier
pequeño cambio requerirá múltiples cambios en los tests y supondrán más un
lastre que una ayuda.</p>

<h2><a href="http://2015.codemotion.es/agenda.html#5699289732874240/49544011">Del infierno al cielo</a>, de <a href="https://twitter.com/rrequero">Raúl Requero</a></h2>

<p>Para ser una charla a primera hora, Raúl fue valiente y fue directo al grano,
sin rodeos. Prometía ser una charla dura. Y lo fue, pero fue genial. Charla muy
práctica, llena de ejemplos y de código (¡bien!).</p>

<p>La charla se centró en una funcionalidad introducida en ECMAScript 2015, los
generadores. Y Raúl los destripó de arriba a abajo: qué son, cuándo
utilizarlos, cuándo no, librerías que hacen su uso más sencillo (si quieres que
te duela la cabeza busca <a href="https://github.com/thunks/thunks">thunks</a> y <a href="https://github.com/tj/co">co</a>, increíbles).</p>

<h2><a href="http://2015.codemotion.es/agenda.html#5699289732874240/50504009">Coding culture</a>, de <a href="https://twitter.com/svenpet">Sven Peters</a></h2>

<p>Estaba deseando ver esta charla, no me la perdería por nada del mundo. Había
visto algunas charlas grabadas de Sven, y es un ponente con muchas tablas. Unos
gráficos espectaculares y una historia muy depurada. Con giros argumentales
inesperados y con mucho sentido del humor.</p>

<p>Sven presentó distintos conceptos relacionados con la cultura de empresa y
distintas actividades que se realizan en Attlassian. Habló de la cultura de la
innovación, de la felicidad, del balance de la pasión (producto o cliente), de
equipo y cultura que escala.</p>

<p>Si tienes ganas, aquí encontrarás todas las <a href="http://svenpet.com/talks/">charlas de Sven</a>.</p>

<h2><a href="http://2015.codemotion.es/agenda.html#5699289732874240/49534007">Programando en diferido</a>, de <a href="https://twitter.com/flipper83">Jorge Juan Barroso</a></h2>

<p>En un principio no tenía pensado entrar en esta charla, pero no me arrepiento
de nada. Jorge es un ponente increíble, fue una sorpresa muy positiva para mí.
Explicó conceptos muy complejos de una manera muy clara y sencilla. Esta charla
también me sirvió para refrescar un poco mi cada vez más aturdido <em>sentido
Javero</em>, conociendo de mano de un crack conceptos como <em>Streams</em> en Java,
observables (cold y hot), la librería RxJava y el <em>Reactive manifesto</em></p>

<p>De la charla me llevo un consejo que me pareció buenísimo</p>

<blockquote><p>Primero resuelve el problema, luego escribe el código</p></blockquote>

<h2><a href="http://2015.codemotion.es/agenda.html#5699289732874240/45634007">Navegando con el piloto automático con CasperJS</a>, de <a href="https://twitter.com/asanzdiego">Adolfo Sanz</a></h2>

<p>En esta charla Adofo nos presentó CasperJS, que no es una herramienta que corre
en NodeJS, si no que es una herramienta de scripting, y que entre otras cosas
sirve para programar o automatizar tus navegaciones web. Aunque el uso que más
interesó a la gente, a la vista de la cantidad de preguntas al ponente, fue la
posibilidad de escribir y ejecutar tests de aceptación con la herramienta.</p>

<p>Fue un charlas super práctica, toda con código en vivo y con demostraciones.</p>

<h2><a href="http://2015.codemotion.es/agenda.html#5699289732874240/44774010">Help, I need more women!</a>, de <a href="https://twitter.com/Laura_Morillo">Laura Morillo</a>, <a href="https://www.koliseo.com/anafvm">Ana Fernández</a> y <a href="https://www.koliseo.com/mlorenzosanchez">Marina Lorenzo</a></h2>

<p>El título de la charla lo dice todo, el discurso de la misma giró en torno al
hecho de la poca presencia femenina en el campo tecnológico y en el análisis de
sus posibles causas. Una de ellas se atribuye a la escasez de <em>referentes</em>, por
lo cual las niñas (las futuras ingenieras) no tienen quien les inspire y no
eligen carreras científicas o relacionadas con las ingenierías.</p>

<p>Las ponentes hicieron un repaso de las distintas mujeres destacadas en el campo
de la ingeniería de la historia y de cómo los medios de comunicación
representan a las mujeres en este campo, que por cierto, no es muy buena la
imagen que proyectan.</p>

<p>Finalmente, expusieron una serie de iniciativas que se están llevando a cabo a
nivel nacional e internacional, y creo que consiguieron que muchas mujeres
asistentes se interesaran por ellas, así que ¡FELICIDADES!</p>

<h2><a href="http://2015.codemotion.es/agenda.html#5699289732874240/48544008">Taiga, de 0 a 70.000 proyectos</a>, de <a href="https://twitter.com/diacritica">Pablo Ruiz</a></h2>

<p>En esta charla Pablo presentó Taiga, un gestor de proyectos ágiles. Soporta
Scrum y Kanban. Descrito así, parece que fue una charla absolutamente
publicitaria, pero para nada. Por supuesto, Pablo presentó la herramienta. Pero
después dió paso a una serie de peticiones de funcionalidad de los usuarios a
la herramienta y le dió un enfoque muy especial. Mezcló los valores y
principios ágiles con los valores y principios que defienden en Taiga y
justificó el porqué hacen caso, o no, a sus usuarios. Una clase absolutamente
magistral de lo que significa ser ágil y gestionar proyectos ágiles.</p>

<p>Algunas de las funcionalidades pedidas por usuarios <em>ágiles</em> serían: llevar una
cuenta de las horas consumidas, contabilizar historias no terminadas en un
sprint, poder representar personas asignadas a varios proyectos,&#8230;</p>

<h2><a href="http://2015.codemotion.es/agenda.html#5699289732874240/43004009">Gente que hace cosas con cacharros</a>, de <a href="https://www.koliseo.com/miguelangellv">Miguel Ángel López</a> y <a href="https://twitter.com/josejuansanchez">Jose Juan Sánchez</a></h2>

<p>Y para terminar, una charla que me sorprendió. Se podría resumir con algo que
dijo Miguel Ángel, que según él es a lo que se dedica en su tiempo libre:</p>

<blockquote><p>Hago cosas que, no sirven para nada, pero molan</p></blockquote>

<p>Así fue la charla. Llena de experimentos de <em>maker</em>, de pequeños inventos
curiosos, imaginativos, que no tenían valor útil, no iban a cambiar el mundo,
pero molaban mil. Fue la charla ideal para terminar dos días a tope. Divertida,
desenfada y llena de imaginación. ¡Qué ganas tengo de usar algo parecido con mi
hijo!</p>

<h2>Trabajo para casa</h2>

<p>Y esto fue más o menos mi Codemotion. Los organizadores del mismo no quieren
que Codemotion termine aquí, quieren que ahora empiece el #codemotion2015. La
idea de continuar es que lo aprendido no se quede en estos dos magníficos días,
si no que los extendamos en el tiempo. Por eso mismo, éstos son los deberes que
me llevo para casa:</p>

<ol>
<li>Conoce tus herramientas: ¿qué tal si empiezo a usar la consola de PhpStorm?</li>
<li>¿Existe alguna forma de cuantificar la deuda técnica?</li>
<li>Buscar acerca del concepto de <em>property-based testing</em>. Ha aparecido por mi
radar últimamente, pero no le he hecho mucho caso. Ha llegado el momento</li>
<li>Attlassian Mood App</li>
<li>¿Podrías encontrar alguna utilidad a CasperJS?</li>
<li>Serie <em>Halt &amp; Catch Fire</em></li>
<li>Proponer PI Week en el trabajo</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Se aceptan mejoras]]></title>
    <link href="http://rchavarria.github.io/blog/2015/11/22/se-aceptan-mejoras/"/>
    <updated>2015-11-22T22:27:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/11/22/se-aceptan-mejoras</id>
    <content type="html"><![CDATA[<p>Existe una cosa maravillosa en el mundo de open source, y es que personas que
ni siquiera sabes que existen, usan tu trabajo, lo mejoran con el suyo, y te lo
donan a tí para que otra gente se beneficie del trabajo de ambos.</p>

<p><img class="left" src="http://rchavarria.github.io/images/2015/contribution.png"></p>

<p>Imagina que tienes una librería y tienes una base de usuarios. Ningún software
se adapta a todos sus usuarios, así que lo más seguro es que los usuarios de tu
librería encuentren algún detalle que no encaja a la perfección con sus
necesidades. ¿No sería incríble que tus propios usuarios mejoraran la librería y
te dieran su trabajo así como les das tú el tuyo? Pues eso es lo que pasa
precisamente con el open source.</p>

<p>Y algo parecido pasa cuando contribuyes a algún proyecto open source. Tus
contribuciones son usadas por los usuarios del proyecto. Y algunos de ellos
proponen nuevas mejoras al proyecto. Quizá algunas de estas mejoras sean sobre
el trabajo que tú has realizado. Gente que ni conoces está aportando su
experiencia para mejorar tu trabajo. Hay que ser muy tonto para no aprovechar
esta oportunidad para aprender.</p>

<!-- more -->


<p>Este artículo describe el proceso a seguir para aceptar mejoras en un proyecto
publicado en <a href="https://github.com/">Github</a>, donde [<code>git</code>] es usada como herramienta de control de
versiones. Estas mejoras son propuestas por usuarios externos al proyecto a
través de <a href="https://help.github.com/articles/using-pull-requests/">Pull Requests</a> (o también PR). Github te ayuda a la hora de
incorporar esas mejoras a tu proyecto, pero hacerlo así deja la historia de tu
control de versiones hecha unos zorros (en <a href="http://blog.differential.com/best-way-to-merge-a-github-pull-request/">Best way to merge a pull request</a>
lo cuentan más detalladamente).</p>

<p>Ésta es la secuencia de comandos mediante los cuales se incoroporarían los
cambios propuestos en un Pull Request con número <code>pr-number</code> desde una rama
creada por el autor llamada <code>user-working-branch</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rchavarria@proyect$ git checkout master
</span><span class='line'>rchavarria@proyect$ git fetch origin
</span><span class='line'>rchavarria@proyect$ git reset --hard origin/master
</span><span class='line'>
</span><span class='line'>rchavarria@proyect$ git fetch origin refs/pull/&lt;pr-number&gt;/head
</span><span class='line'>rchavarria@proyect$ git checkout -b &lt;user-working-branch&gt; FETCH_HEAD
</span><span class='line'>rchavarria@proyect$ git rebase master
</span><span class='line'>
</span><span class='line'>rchavarria@proyect$ git checkout master
</span><span class='line'>rchavarria@proyect$ git merge --no-ff &lt;user-working-branch&gt;
</span><span class='line'>rchavarria@proyect$ git push origin master</span></code></pre></td></tr></table></div></figure>


<h2>Limpiar el espacio de trabajo</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rchavarria@proyect$ git checkout master
</span><span class='line'>Already on 'master'
</span><span class='line'>Your branch is up-to-date with 'origin/master'.
</span><span class='line'>rchavarria@proyect$ git fetch origin
</span><span class='line'>remote: Counting objects: 66, done.
</span><span class='line'>remote: Compressing objects: 100% (43/43), done.
</span><span class='line'>remote: Total 66 (delta 14), reused 6 (delta 6), pack-reused 17
</span><span class='line'>Unpacking objects: 100% (66/66), done.
</span><span class='line'>From https://github.com/exercism/xecmascript
</span><span class='line'>   9b32d79..de450d0  master     -&gt; origin/master
</span><span class='line'> * [new branch]      new-exercise-raindrops -&gt; origin/new-exercise-raindrops</span></code></pre></td></tr></table></div></figure>


<p>Con estos comandos simplemente se cambia a la rama <code>master</code> y se descargan los
cambios que existan en el repositorio remoto (sin aplicar los cambios a ningún
archivo todavía). En este caso, el repositorio es uno de Github. En el código
anterior se puede ver cómo existe una nueva rama en remoto,
<code>new-exercise-raindrops</code>, que se corresponde con el Pull Request que vamos a
incorporar al repositorio.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rchavarria@proyect$ git reset --hard origin/master
</span><span class='line'>HEAD is now at de450d0 Merge pull request #78 from rchavarria/new-exercise-roman-numerals</span></code></pre></td></tr></table></div></figure>


<p>Este comando elimina cualquier cambio en local y lo sobreescribe exactamente
con los cambios que ha tomado del repositorio remoto. De esta forma <strong>se tiene
en local exactamente lo mismo que en remoto</strong>, y es un punto de partida seguro.</p>

<h2>Descargar las mejoras</h2>

<p>Anteriormente git ha avisado de que hay una nueva rama, un nuevo Pull Request.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rchavarria@proyect$ git fetch origin refs/pull/80/head
</span><span class='line'>From https://github.com/exercism/xecmascript
</span><span class='line'> * branch            refs/pull/80/head -&gt; FETCH_HEAD</span></code></pre></td></tr></table></div></figure>


<p>El anterior comando descarga los cambios contenido en el Pull Request con
número <code>&lt;pr-number&gt;</code>, que podría ser por ejemplo el <code>80</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rchavarria@proyect$ git checkout -b new-exercise-raindrops FETCH_HEAD
</span><span class='line'>Switched to a new branch 'new-exercise-raindrops'</span></code></pre></td></tr></table></div></figure>


<p>Así, se crea una nueva rama, llamada <code>new-exercise-raindrops</code> que contiene los
cambios del Pull Request.</p>

<p>Y ahora llega un momento delicado. Se debe hacer que el commit por el que
comienza la rama recién creada sea el último commit que existía en <code>master</code>. De
esta forma se consigue que la historia del control de versiones sea la más
legible. En este punto es posible que se produzcan conflictos. Ese es otro tema
que daría para muchas explicaciones. Si se quiere profundizar, se puede echar
un vistazo a la propia [documentación de <code>git</code> sobre el comando <code>rebase</code>].</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rchavarria@proyect$ git rebase master
</span><span class='line'>Current branch new-exercise-raindrops is up to date.</span></code></pre></td></tr></table></div></figure>


<p>Si no hay conflictos, perfecto, ya está.</p>

<h2>Comprobar las mejoras</h2>

<p>Ahora es el momento de hacer comprobaciones:</p>

<ul>
<li>Se deberían ejecutar los tests del proyecto</li>
<li>Chequear los cambios, comparándolos con versiones anteriores</li>
<li>Comprobar que se siguen las reglas de estilo en el código</li>
<li>En general, asegurarse de que el código a incorporar es un código con el que
estamos contentos</li>
</ul>


<p>En esta fase se pueden hacer nuevos cambios o pedir al programador que
contribuye que realice algunos cambios por sí mismo y que actualize el Pull
Request.</p>

<p><img class="center" src="http://rchavarria.github.io/images/2015/github-diff.png"></p>

<h2>Incorporar los cambios</h2>

<p>Una vez está todo comprobado y se está de acuerdo con los cambios, ha llegado
la hora de incorporar los cambios a la rama <code>master</code> para que finalmente formen
parte del código del proyecto.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rchavarria@proyect$ git checkout master
</span><span class='line'>Switched to branch 'master'
</span><span class='line'>Your branch is up-to-date with 'origin/master'.
</span><span class='line'>rchavarria@proyect$ git merge --no-ff new-exercise-raindrops
</span><span class='line'>Merge made by the 'recursive' strategy.
</span><span class='line'> config.json                 |  3 ++-
</span><span class='line'> raindrops/example.js        | 17 +++++++++++++++++
</span><span class='line'> raindrops/gulpfile.js       | 42 ++++++++++++++++++++++++++++++++++++++++++
</span><span class='line'> raindrops/package.json      | 24 ++++++++++++++++++++++++
</span><span class='line'> raindrops/raindrops.spec.js | 38 ++++++++++++++++++++++++++++++++++++++
</span><span class='line'> 5 files changed, 123 insertions(+), 1 deletion(-)
</span><span class='line'> create mode 100644 raindrops/example.js
</span><span class='line'> create mode 100644 raindrops/gulpfile.js
</span><span class='line'> create mode 100644 raindrops/package.json
</span><span class='line'> create mode 100644 raindrops/raindrops.spec.js</span></code></pre></td></tr></table></div></figure>


<p>Los comandos cambian el espacio de trabajo a la rama <code>master</code> e incorporan los
cambios a la misma. Se deberá proporcionar un mensaje para el commit que va a
generar <code>git merge</code>. Un ejemplo sería:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Merge pull request #80 from matthewmorgan/new-exercise-raindrops
</span><span class='line'>
</span><span class='line'>Closes #80</span></code></pre></td></tr></table></div></figure>


<p>Donde <code>80</code> es el número del Pull Request, <code>matthewmorgan</code> es el nombre del
programador que contribuye y <code>new-exercise-raindrops</code> es el nombre de la rama
que le dió el programador y el que se ha utilizado para la incorporación de los
cambios.</p>

<p>Finalmente, se suben los cambios al repositorio remoto y &#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rchavarria@proyect$ git push origin master
</span><span class='line'>Username for 'https://github.com': rchavarria
</span><span class='line'>Password for 'https://rchavarria@github.com': 
</span><span class='line'>Counting objects: 1, done.
</span><span class='line'>Writing objects: 100% (1/1), 273 bytes | 0 bytes/s, done.
</span><span class='line'>Total 1 (delta 0), reused 0 (delta 0)
</span><span class='line'>To https://github.com/exercism/xecmascript.git
</span><span class='line'>   de450d0..eae366a  master -&gt; master</span></code></pre></td></tr></table></div></figure>


<p>&#8230; ¡magia!</p>

<p><img class="center" src="http://rchavarria.github.io/images/2015/pull-request-merged.png"></p>

<h2>Referencias</h2>

<ul>
<li><a href="http://blog.differential.com/best-way-to-merge-a-github-pull-request/">Best way to merge a pull request</a></li>
<li><a href="https://www.youtube.com/watch?v=1ffBJ4sVUb4">Git for 4 and up</a></li>
<li><a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">Better commit messages</a></li>
<li><a href="https://www.youtube.com/watch?v=8YjSty6bfog">Do your commits suck?</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aprendiendo Ionic 2]]></title>
    <link href="http://rchavarria.github.io/blog/2015/11/15/aprendiendo-ionic-2/"/>
    <updated>2015-11-15T22:49:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/11/15/aprendiendo-ionic-2</id>
    <content type="html"><![CDATA[<p>Recientemente se ha celebrado la conferencia <a href="http://angularconnect.com/">Angular Connect</a> en Londres,
donde se ha hablado mucho de <a href="https://angular.io/">Angular 2</a>, framework de desarrollo de
aplicaciones web en el que estoy muy interesado (de hecho estoy desarrollando
una pequeña aplicación para diversión de mi hijo, <a href="https://play.google.com/store/apps/details?id=es.rchavarria.englishbyeinar">English by Einar</a>). También
estoy enteresado en el framework <a href="http://ionicframework.com/">Ionic</a>, que aúna los proyectos de Angular y
<a href="http://cordova.apache.org/">Cordova</a> y que permite desarrollar aplicaciones para móviles con herramientas
de desarrollo web: HTML5, CSS3 y JavaScript.</p>

<p>En dicha conferencia se hizo público la versión alpha de <a href="http://ionicframework.com/docs/v2/">Ionic 2</a>, la versión
de Ionic que incluye la nueva versión de Angular. Ionic es un framework para
desarrollo de aplicaciones cliente móviles híbridas con tecnologías web y en su
versión 2 siguen con la filosofía de estar muy preocupados por el rendimiento.
En este post veremos lo realmente fácil que es comenzar a desarrollar con estas
herrmientas.</p>

<p><img class="center" src="http://rchavarria.github.io/images/2015/ionic-framework.jpg" width="350" height="185" title="Ionic Framework" ></p>

<!-- more -->


<h2>Requisitos</h2>

<p>Ionic se apoya en Cordova y en las plataformas de desarrollo nativas
dependiendo de la plataforma móvil en la que estemos enfocados, normalmente
Android o iOS. Antes de comenzar a desarrollar con él deberemos actualizar a
las versiones más modernas posibles, ya que la versión alpha de Ionic 2
requiere de los últimos avances.</p>

<p>En mi caso particular, he necesitado actualizar mi SDK de Android para Linux:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rchavarria@home$ ./AndroidSDK/tools/android sdk</span></code></pre></td></tr></table></div></figure>


<p>para abrir la interfaz gráfica y poder actualizar algunos paquetes del SDK.</p>

<p>Y también he necesitado actualizar las versiones de NodeJS (a través de <code>nvm</code>,
Node Version Manager), la herramienta <code>npm</code> y Cordova:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rchavarria@home$ nvm install v5.0.0
</span><span class='line'>rchavarria@home$ npm install -g npm
</span><span class='line'>rchavarria@home$ npm install -g cordova@5.3.3</span></code></pre></td></tr></table></div></figure>


<p>Por último, instalar la versión alpha de Ionic 2. No temas, no hay peligro de
romper proyectos desarrollados con la versión 1 de Ionic.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rchavarria@home$ npm install -g ionic@alpha</span></code></pre></td></tr></table></div></figure>


<h2>Creación del primer proyecto</h2>

<p>Para mi primer proyecto he usado una plantilla desarrollada por la gente de
Ionic, <a href="https://github.com/driftyco/ionic2-starter-tutorial">tutorial</a>. Estas plantillas permiten tener una aplicación muy básica
funcionando en unos minutos. Esta plantilla contiene un menú deslizante
lateral, pero hay otras muchas plantillas. Crear el proyecto es un simple
comando:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rchavarria@home$ ionic start MyFirstIonic2Project tutorial --v2</span></code></pre></td></tr></table></div></figure>


<p>Este comando descarga la plantilla indicada, <code>tutorial</code>, instala dependencias
de NodeJS y nos deja el proyecto listo para ser ejecutado. De hecho, para poder
probarlo en un navegador, basta con escribir los comandos:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rchavarria@home$ cd MyFirstIonic2Project
</span><span class='line'>rchavarria@home$ ionic serve</span></code></pre></td></tr></table></div></figure>


<h2>Estructura del proyecto</h2>

<p>Prácticamente todos los ficheros de la aplicación están localizados en el
directorio <code>www</code>, como en todo proyecto de Cordova.</p>

<p>El punto de entrada principal es <code>www/index.html</code>. Como página principal, carga
los ficheros CSS, incluye los JavaScript y arranca la aplicación. Ionic busca
una etiqueta <code>ion-app</code> dentro de esta primera página HTML.</p>

<p>Todo el código JavaScript que se encuentra en el directorio <code>www/app</code> se
transpila a la versión correcta de JavaScript que soporte el navegador para el
que está dirigida la aplicación. En este directorio podremos encontrar código
tanto TypeScript como ECMAScript 2015.</p>

<p>En el archivo <code>www/app/app.js</code> podemos encontrar la entrada a nuestra
aplicación. Crea un component con el decorador <code>@App</code>, componente necesario
para toda aplicación Ionic.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@App({
</span><span class='line'>  templateUrl: 'app/app.html'
</span><span class='line'>})
</span><span class='line'>class MyApp {
</span><span class='line'>//...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>El código de <code>@App</code> configura el archivo <code>www/app/app.html</code> como plantilla para
la aplicacion. Veámoslo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ion-menu [content]="content"&gt;
</span><span class='line'>
</span><span class='line'>  &lt;ion-content&gt;
</span><span class='line'>    &lt;ion-list&gt;
</span><span class='line'>      &lt;button ion-item *ng-for="#p of pages" (click)="openPage(p)"&gt;
</span><span class='line'>      &lt;/button&gt;
</span><span class='line'>    &lt;/ion-list&gt;
</span><span class='line'>  &lt;/ion-content&gt;
</span><span class='line'>
</span><span class='line'>&lt;/ion-menu&gt;
</span><span class='line'>
</span><span class='line'>&lt;ion-nav id="nav" [root]="rootPage" #content swipe-back-enabled="false"&gt;&lt;/ion-nav&gt;</span></code></pre></td></tr></table></div></figure>


<p>Esta plantilla define un menu bajo la etiqueta <code>ion-menu</code>, y un componente de
navegación, <code>ion-nav</code>, ambos proporcionados por Ionic. <code>ion-menu</code> toma una
propiedad para mostrar un contenido, <code>content</code>, la cual se la podemos
proporcionar a través de la variable <code>#content</code> desde nuestro <code>ion-nav</code>.</p>

<p><code>ion-nav</code> define un <em>data binding</em> a la propiedad <code>root</code> del componente, igual
que <code>ion-menu</code> define un <em>data binding</em> a la propiedad <code>content</code> (en Angular 2,
los <em>data binding</em> son unidireccionales por defecto y se declaran mediante
corchetes en atributos de las etiquetas HTML). Cuando se cargue el controlador
de la navegación, el componente referenciado por la variable <code>rootPage</code> será
mostrada como la página principal de nuestra aplicación.</p>

<p>En <code>www/app/app.js</code>, el componente raiz de la aplicación, <code>MyApp</code>, especifica
dos propiedades: <code>pages</code> y <code>rootPage</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import {App, IonicApp, IonicPlatform} from 'ionic/ionic';
</span><span class='line'>import {HelloIonicPage} from './hello-ionic/hello-ionic';
</span><span class='line'>import {ListPage} from './list/list';
</span><span class='line'>// ...
</span><span class='line'>class MyApp {
</span><span class='line'>  constructor(app: IonicApp, platform: IonicPlatform) {
</span><span class='line'>    // set up our app
</span><span class='line'>    // ...
</span><span class='line'>
</span><span class='line'>    // set our app's pages
</span><span class='line'>    this.pages = [
</span><span class='line'>      { title: 'Hello Ionic', component: HelloIonicPage },
</span><span class='line'>      { title: 'My First List', component: ListPage }
</span><span class='line'>    ];
</span><span class='line'>
</span><span class='line'>    // make HelloIonicPage the root page
</span><span class='line'>    this.rootPage = HelloIonicPage;
</span><span class='line'>  }
</span><span class='line'>  // ...
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Cómo se crea un página</h2>

<p>El componente <code>HelloIonicPage</code> se define en el fichero
<code>www/hello-ionic/hello-ionic.js</code>. Contiene un decorador <code>@Page</code>, proporcionado
por Ionic, y su nombre lo dice todo. Este componente crea una página Ionic, que
consta de un componente y una vista de Angular 2.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import {Page, NavController} from 'ionic/ionic';
</span><span class='line'>
</span><span class='line'>@Page({
</span><span class='line'>  templateUrl: 'app/hello-ionic/hello-ionic.html'
</span><span class='line'>})
</span><span class='line'>export class HelloIonicPage {
</span><span class='line'>  constructor(nav: NavController) {
</span><span class='line'>    this.nav = nav;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Cada página se compone de un componente JavaScript y de una plantilla HTML.
Veamos ésta última:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ion-navbar *navbar&gt;
</span><span class='line'>  &lt;a menu-toggle&gt;&lt;icon menu /&gt;&lt;/a&gt;
</span><span class='line'>  &lt;ion-title&gt;Hello Ionic&lt;/ion-title&gt;
</span><span class='line'>&lt;/ion-navbar&gt;
</span><span class='line'>
</span><span class='line'>&lt;ion-content&gt;
</span><span class='line'>  &lt;h3&gt;Welcome to your first Ionic app!&lt;/h3&gt;
</span><span class='line'>  &lt;p&gt;
</span><span class='line'>    ...
</span><span class='line'>  &lt;/p&gt;
</span><span class='line'>&lt;/ion-content&gt;</span></code></pre></td></tr></table></div></figure>


<p>La etiqueta <code>&lt;ion-navbar *navbar&gt;</code> funciona como configuración para la barra de navegación. Es quien incluye los botones a mostrar en dicha barra, así como el título.</p>

<h2>Navegando entre páginas</h2>

<p>La otra página, <code>ListPage</code>, contiene una lista de elementos que el usuario
puede tocar (o hacer click) para acceder a ellas. Dicha página está definida en
el archivo <code>www/app/list/list.js</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import {IonicApp, Page, NavController, NavParams} from 'ionic/ionic';
</span><span class='line'>
</span><span class='line'>@Page({
</span><span class='line'>  templateUrl: 'app/list/list.html'
</span><span class='line'>})
</span><span class='line'>export class ListPage {
</span><span class='line'>  constructor(app: IonicApp, nav: NavController, navParams: NavParams) {
</span><span class='line'>    this.nav = nav;
</span><span class='line'>    // ...
</span><span class='line'>   }
</span><span class='line'>
</span><span class='line'>   itemTapped(event, item) {
</span><span class='line'>     // ...
</span><span class='line'>   }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>La plantilla de esta página, definida en <code>www/app/list/list.html</code>, es quien
mostrará una lista de elementos. <code>*ng-for</code> es la sintaxis de Angular 2 para
reproducir la misma funcionalidad que <code>ng-repeat</code> en AngularJS. El manejador
del evento click se establece con <code>(click)=itemTapped(...)</code> (en Angular 2, se
utilizan los paréntesis en atributos de las etiquetas HTML para establecer los
manejadores de eventos). De esta forma, cada vez que el usuario toque/haga
click en un elemento, el método <code>itemTapped</code> será llamado.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;ion-item *ng-for="#item of items" (click)="itemTapped($event, item)"&gt;</span></code></pre></td></tr></table></div></figure>


<p>Para navegar a una nueva página, se puede usar el componente <code>NavController</code>,
también proporcionado por Ionic. Anteriormente, se ha almacenado una referencia
a dicho componente en el atributo <code>nav</code> de <code>ListPage</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import {ItemDetailsPage} from '../item-details/item-details';
</span><span class='line'>// ...
</span><span class='line'>itemTapped(event, item) {
</span><span class='line'>  this.nav.push(ItemDetailsPage, {
</span><span class='line'>    item: item
</span><span class='line'>  });
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>La navegación en Ionic funciona como una <em>pila</em> (o <em>stack</em>), donde podemos poner (<code>push</code>)
o quitar (<code>pop</code>) páginas de la pila.</p>

<h2>¿Y ahora qué?</h2>

<p>Ya tenemos una estructura muy básica para el proyecto, y ya sabemos cómo crear
páginas y cómo funciona la navegación en Ionic 2. El siguiente paso se me
ocurre que podría ser incluir las herramientas y la estrutura necesaria para
poder incluir tests en nuestro proyecto. Lo siento si te parece una lata, pero
creo que los tests son una herramienta imprescindible en cualquier proyecto,
sea de la embergadura que sea. Considero que los tests son básicos para tener
un mínimo de calidad en cualquier proyecto software.</p>

<h2>Referencias</h2>

<ul>
<li>Documentación sobre <a href="http://ionicframework.com/docs/v2/components">componentes de Ionic 2</a></li>
<li>Documentación sobre <a href="http://ionicframework.com/docs/v2/platform">el API de dispositivos de Ionic 2</a></li>
<li><a href="http://ionicframework.com/docs/v2/resources/">Recursos</a>, en general, de Ionic 2</li>
<li><a href="https://angular.io/docs/ts/latest/testing/">Tests en Angular 2</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Soft skills]]></title>
    <link href="http://rchavarria.github.io/blog/2015/11/08/soft-skills/"/>
    <updated>2015-11-08T18:36:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/11/08/soft-skills</id>
    <content type="html"><![CDATA[<h6>de John Sonmez</h6>

<p><img class="left" src="http://rchavarria.github.io/images/2015/soft-skills.jpg" width="239" height="300" title="Soft skills" ></p>

<h3>Por qué lo he leído</h3>

<p>Creo recordar que vi que Miguel, autor del blog <a href="http://ocana.github.io/">Dev&#8217;s kitchen</a>, lo marcaba
como pendiente para leer y le di un vistazo. Por aquel momento seguía
el blog del autor del libro, y tenía varios posts interesantes. Y el libro
también me lo pareció: ¿Mejorar en tu carrera? ¿Aprender habilidades no
técnica?</p>

<p>Me gusta intercalar libros técnicos y no técnicos, y este libro parecía estar a
medio camino entre ambos. Parecía una buena elección, así que me decidí leerlo.</p>

<!-- more -->


<h3>Qué esperaba</h3>

<p>Esperaba consejos e historias relacionadas con el software, pero ninguna
historia técnica: cómo relacionarte con tus compañeros, cómo resolver
conflictos, cómo negociar con tu jefe. Esperaba más temas relacionados con la
relación de las persona que otra cosa. Bueno, y también un poco de
productividad. Quién sabe.</p>

<h3>Qué encontre</h3>

<p>Encontré todo eso y más, mucho más. El libro trata temas tan dispares que hay
veces que no sabes qué tipo de libro estas leyendo. Hay tantos consejos, y de
temáticas tan variadas, que es imposible no encontrar algún consejo o idea
nuevos.</p>

<p>El libro está dividido en secciones, englobando cada uno una temática general:
carrera profesional, marca personal, aprendizaje, producividad, economía,
salud y espiritualidad. Cada sección está formada por una serie de capítulos, y
cada capítulo contiene varios <em>artículos</em>. La verdad es casi como leer su blog,
pero un post detrás de otro y organizados por temáticas.</p>

<h3>Conclusiones</h3>

<p>El libro es tan variado que cualquier persona encontraría algún consejo
valioso. John Sonmez se gana la vida de esta forma, aconsejando a programadores
acerca de cómo mejorar en su carrera. En este libro encontrarás consejos de lo
más variopintos: desde cómo aprender, a cómo invertir en el negocio
inmoviliario, pasando por practicar deporte. Incluso hay consejos espirituales.
En ese punto el libro me dejó un poco de piedra, creo que ahí se pasó, y el
libro pierde un poco su identidad.</p>

<p>Destacaría las primeras secciones: cuando habla de la carrera profesional y el
aprendizaje. También me gustó el apartado dedicado a temas financieros, siempre
es intersante conocer cómo funciona el dinero.</p>

<p>El que menos me gustó fue el espiritual, lleno de buenrollismo y autoayuda. No
sé, no le cogí el punto. Aún así, en general, me parece un libro bastante recomendable.</p>

<h3>Qué he aprendido</h3>

<p>Casi todo el libro habla de ponerse objetivos, de establecer metas intermedias
y de hacer seguimiento, de empezar poco a poco, de ser constante, y de trabajar
duro. Conceptos aplicables a cualquier aspecto de la vida. Cuando habla de
objetivos, éstos pueden estar formados por tareas demasiado grandes, que
parece imposible de realizar. El truco está en dividir esa gran tarea en tareas
secuenciales más pequeñas. Lo más importante aquí es la palabra
<strong>secuenciales</strong>.</p>

<p>Cómo hackear una entrevista de trabajo: la idea es no tener que mandar
currículums a las empresas, si no que ellas te contacten. Te contacten porque
han tenido noticias tuyas de alguien <em>de dentro</em>. Para ello, deberás establecer
relaciones personales con trabajadores de la empresa en la que deseas trabajar:
lee sus blogs,&#8230; Piensa diferente y encuentra formas de acercarte a ellos.</p>

<p>Algunas de las habilidades que necesitarás para tu próximo trabajo no las
tienes todavía. La clave es <strong>todavía</strong>. Hay que ir con la confianza de que las
conseguirás.</p>

<p>John habla mucho de construir una marca personal, para ello necesitarías: un
mensaje (la frase por la que te reconocerán), elementos visuales (un logo,&#8230;),
consistencia y una exposición contínua (no necesariamente en Twitter
solamente).</p>

<p>Me ha encantado los capítulos donde describe su proceso de aprendizaje en 10
pasos. Parece mucho de libro de autoayuda, pero la verdad es que cuenta muy
buenas ideas. El proceso sería algo tal que así:</p>

<ol>
<li>Entender la habilidad que se quiere aprender</li>
<li>Delimitar el ámbito</li>
<li>Definir qué se va a considerar como éxito</li>
<li>Encontrar recursos</li>
<li>Crear un plan de aprendizaje</li>
<li>Filtrar los recursos</li>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido, y repetir desde el paso 7</li>
</ol>


<p>Me ha interesado mucho el concepto de <em>cuotas</em> para conseguir objetivos.
Funciona para los objetivos en los que hay que ir haciendo pequeñas acciones a
lo largo de mucho tiempo, por ejemplo, a la hora de hacer ejercicio. La idea es
crear una cuota de cuánto hay que conseguir tener hecho para un determinado
período de tiempo. Por ejemplo: salir a correr 3 veces por semana, o hacer
100km en bicicleta cada semana, o leer 3 artículos técnicos al mes.</p>

<h3>Frases que me gustaría recordar</h3>

<blockquote><p>Un profesional comprende qué trabajo ha de hacerse, lo prioriza y se pone
manos a la obra</p></blockquote>

<!-- -->


<blockquote><p>Divide un gran objetivo en pequeños objectivos que puedan corresponder a
meses, semanas o días. Escribe el gran objetivo donde lo veas todos los días
para recordarte en qué tienes que trabajar</p></blockquote>

<!-- -->


<blockquote><p>Por enésima vez: si quieres se un buen programador, debes aprender a cómo
trabajar de forma efectiva con gente, incluso si la mayor parte de tu trabajo
es escribir código</p></blockquote>

<!-- -->


<blockquote><p>Cuando el foco de una compañía no es el software, normalmente los
programadores no son muy respetados. Aquellas empresas que dependen de un
producto software tienen muchas más probabilidades de valorar mucho mejor a
los profesionales que contratan</p></blockquote>

<!-- -->


<blockquote><p>Si debes elegir entre dinero o responsabilidad, la mejor opción (para el
largo plazo) es siempre más responsabilidad</p></blockquote>

<!-- -->


<blockquote><p>Deberías estar siempre aprendiendo algo nuevo o mejorando de alguna forma tus
habilidades</p></blockquote>

<!-- -->


<blockquote><p>¿Cómo crear un producto? Identifica unas cuantas audiencias objetivo para las
que puedas crear un producto potencial. Elige una de estas audiencias e
identifica donde puedes encontrar a miembros de ese grupo. Contacta con ellos
y averigua si puedes resolver alguno de sus problemas</p></blockquote>

<!-- -->


<blockquote><p>La manera correcta de promocionarse a sí mismo es proporcionar valor a los
demás</p></blockquote>

<!-- -->


<blockquote><p>Tu objectivo principal debería ser proporcionar valor a los demás. Si lo que
dices o haces no ayuda a nadie, todo el mundo te ignorará. Cada vez que
decidas crear algo (escribir un artículo, grabar un podcast o screencast,&#8230;)
deberías mirarlo desde la perspectiva de cómo estás creando valor para los
demás</p></blockquote>

<!-- -->


<blockquote><p>El enfoque es una cosa del momento: es muy difícil conseguir el foco, pero
relativamente sencillo mantenerlo una vez que lo has adquirido</p></blockquote>

<!-- -->


<blockquote><p>La multitarea es posible. Es posible combinar una tarea que no requiere
concentración con algunas tareas que sí lo requieran</p></blockquote>

<!-- -->


<blockquote><p><em>Burnout</em>: Tendemos a estar ilusionados y motivados sobre las cosas nuevas al
principio, pero cuanto más avanzamos, más rápido nos acercamos a ese
sentimiento de no poder más. En realidad, estamos topándonos con una pared.
¿Cuál es la solución? Intentarlo más fuerte. Esforzándonos contra la
dificultad es el secreto para superar ese sentimiento</p></blockquote>

<!-- -->


<blockquote><p>Los hábitos consisten básicamente de tres cosas: una señal (qué causa la
acción del hábito), una rutina (el hábito en sí mismo) y una recompensa (es
lo que hace que el hábito se mantenga interesante)</p></blockquote>

<!-- -->


<blockquote><p>Una razón para el salario que estás demandando nunca puede ser <em>porque lo
necesito</em>. En vez de eso, debes enfocarlo desde la perspectiva de demostrar
que vales esa cantidad de dinero o que lo vale el beneficio que estás
poniendo encima de la mesa</p></blockquote>

<!-- -->


<blockquote><p>De todos los errores financieros que se pueden cometer, el mayor de ellos es
incurrir en una deuda</p></blockquote>

<h3>Recursos relacionados</h3>

<ul>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/soft-skills-by-john-sonmez.markdown">Notas tomadas sobre Soft skills</a></li>
<li>Blog <a href="http://ocana.github.io/">Dev&#8217;s kitchen</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Screencast de programación: Robot name (exercism.io)]]></title>
    <link href="http://rchavarria.github.io/blog/2015/11/01/screencast-robot-name-exercism/"/>
    <updated>2015-11-01T09:16:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/11/01/screencast-robot-name-exercism</id>
    <content type="html"><![CDATA[<p>En el <a href="http://rchavarria.github.io/blog/2015/10/25/youve-got-commit/">post anterior</a> contaba que me gusta aprender, y que una de las mejoras
formas era practicando. Y que actualmente estaba usando la plataforma
<a href="http://exercism.io/">exercism.io</a> para ello, concretamente el <a href="http://exercism.io/languages/ecmascript">track de ECMAScript</a> para practicar
escribiendo código en ES2015. Es muy fácil decir que te gusta aprender, y que
te gusta practicar. En esta ocasión lo demuestro.</p>

<p>He grabado un breve screencast, de menos de 10 minutos, donde muestro cómo de
fácil es usar exercism.io. En el screencast resuelvo un ejercicio llamado
<em>Robot name</em>, donde se trata de generar nombres aleatorios para cada uno de los
robots que crea el cliente de la clase <code>Robot</code>.</p>

<!-- more -->


<h2>Screencast</h2>

<iframe src="https://player.vimeo.com/video/144259723"
        width="500"
        height="281"
        frameborder="0"
        webkitallowfullscreen
        mozallowfullscreen
        allowfullscreen></iframe>


<p>El proceso a seguir es muy sencillo. El primer paso es descargar el problema
mediante el comando:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>exercism fetch ecmascript robot-name
</span></code></pre></td></tr></table></div></figure>


<p>el cual indica a exercism.io obtener un ejercicio del track de ECMAScript
llamado robot-name.</p>

<p>Una vez descargado, podemos leer el fichero <code>README</code> para saber de qué trata el
problema. Lo siguiente que deberíamos leer son los tests, obtenidos
directamente de la plataforma. Los tests nos indicaran qué fichero debemos
crear, y nos darán pistas sobre el código que deberemos escribir. Al final, de
lo que se trata, es de resolver los problemas uno a uno, hasta completarlos
todos.</p>

<p>En ese punto el problema estaría resuelto. Podemos subir nuestra solución a la
plataforma con el comando:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>exercism submit robot-name.js
</span></code></pre></td></tr></table></div></figure>


<p>donde <code>robot-name.js</code> es el nombre del fichero donde está implementada nuestra
solución.</p>

<p>Por fin, el último paso, es usar exercism.io para comentar soluciones de otros
usuarios, aprender de las soluciones de otros, e ir iterando sobre nuestra
propia solución para ir perfeccionándola. O al menos para aprender nuevas
técnicas de nuestro lenguaje de programación resolviendo de distintas formas el
mismo problema, a modo de kata.</p>

<h2>Otros screencasts</h2>

<ul>
<li><a href="http://rchavarria.github.io/blog/2014/10/23/screencast-programacion-juego-disparejo/">El juego del disparejo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You've got commit!]]></title>
    <link href="http://rchavarria.github.io/blog/2015/10/25/youve-got-commit/"/>
    <updated>2015-10-25T15:18:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/10/25/youve-got-commit</id>
    <content type="html"><![CDATA[<p>Una de las mejores formas de aprender es haciendo cosas (<em>learning by doing</em>,
que está muy de moda ahora). Y otra forma muy buena es manteniendo
conversaciones con profesionales de tu sector. Por todo lo aprendido hay que
estar agradecido, y qué mejor forma de agradecer que contribuir a la comunidad,
a tu profesión, realizando algún trabajo del que se puedan beneficiar otros. La
siguiente historia cuenta un camino que estoy recorriendo, de cómo empezé algo
por el simple hecho de aprender y terminé participando en un proyecto open
source como es <a href="http://exercism.io/">exercism.io</a>.</p>

<p><img class="center" style="width: 225px" src="http://rchavarria.github.io/images/2015/exercism-logo.svg"/></p>

<!-- more -->


<h2>El origen</h2>

<p>Llevaba un tiempo utilizando <a href="http://www.solveet.com/">solveet.com</a> para practicar con pequeños
ejercicios de programación. De hecho, utilicé la plataforma con distintos
lenguajes que estaba interesado en aprender. Pero poco a poco fui perdiendo la
motivación para usarla. No recibía feedback de mis soluciones, de lo cual se
pueden deducir dos cosas: que mis soluciones eran penosas o que la mayoría de
los usuarios no estaban por la labor de compartir.</p>

<p>En realidad, creo que la causa principal era que yo aportaba mi solución tiempo
después de la última aportada, así que los usuarios probablemente ya habrían
perdido interés en ese problema en concreto. No le puedo echar la culpa a
Solveet, es una plataforma estupenda. Si estás buscando algo para practicar, y
en español, te lo recomiendo. Disfrutarás de lo lindo.</p>

<h2>Expandiendo horizontes</h2>

<p>Con esa falta de motivación, llevaba rondando por la cabeza probar otras
plataformas similares, y me decidí por <a href="https://projecteuler.net/">Project Euler</a>. Hablaban muy bien de
ella, lleva mucho tiempo en funcionamiento y goza de fama, así que tenía que
ser buena. Pero no duré mucho. Una de las <em>normas</em> de la casa pide que no hagas
público tu código con el que resuelves los problemas. Pero ese es uno de los
objetivos que busco, que la gente critique mi código y poco a poco vaya
aprendiendo.</p>

<p>Por casualidad, vi esta <a href="http://passionatevoices.org/2015/06/27/episode-3-katrina-owen/">entrevista a Katrina Owen</a>, creadora de exercism.io y
me pareció que sería buena idea probar la plataforma. Uno de los requisitos es
instalar un programa, para poder bajarte problemas a tu ordenador, resolverlos
y poder subirlos a la plataforma, lo cual no me llamaba mucho la atención. Pero
<a href="http://garajeando.blogspot.com.es/">Manuel Rivero, en Garajeando</a>, un blog que sigo, tiene varios post de sus
soluciones en exercism.io, así que malo no podía ser.</p>

<h2>Los baches del camino</h2>

<p>Yo quería practicar resolviendo problemas con ECMAScript 2015. Ahí me llevé el
primer chasco. Existía un track para JavaScript, pero no para ES2015. No se por
qué, pero miré el código fuente en GitHub de exercism.io. Vi que había un
repositorio para ECMAScript, pero en la página no existían esos ejercicios.
Descubrí que era porque todavía no tenía el número de problemas necesarios para
ser público. Hice un fork del proyecto, y me puse a juguetear.</p>

<p>Me encontré con unos cuantos problemas para ser capaz de montar el entorno de
desarrollo y ejecutar los tests: dependencias desactualizadas, comandos que no
se ejecutaban bien en Windows (parecía que solo funcionaba en Mac). Después de
pelearme un poco con el código y la configuración, con unas pequeñas
modificaciones solucioné los problemas que tenía. Subí el código a
<a href="https://github.com/rchavarria">mi cuenta de GitHub</a> e hize un <em>Pull Request</em> al proyecto.</p>

<h2>Sorpresa</h2>

<p>¡Y contestaron!  Después de pulir un par de detalles (es bastante común para
primerizos y también la razón por la que muchos se echan para atrás a la hora
de contribuir al open source) aceptaron mi solución. ¡Había contribuido a un
proyecto open source!</p>

<p>Pero todavía había cosas que me molestaban. Detalles. <em>El diablo está en los
detalles</em>, dicen. La verdad es que no recuerdo exactamente qué era, pero tenía
<em>trabajo</em> por hacer. Pregunté un par de cosas a Katrina, arreglé un par de
detalles más, algún Pull Request más, y sin esperarlo:</p>

<blockquote><p>You&#8217;ve got commit!</p></blockquote>

<p>¿Qué es eso? ¿Qué significa? Tuve que leer el correo varias veces. No entendía.
bla bla bla, <em>te han añadido a un par de grupos en GitHub</em>, bla bla bla,
<em>permisos de escritura</em>, bla bla bla, &#8230; ¡Me estaban dando permisos de
escritura en el proyecto! Sienta bastante bien saber que estás contribuyendo a
un proyecto open source, y que lo están utilizando muchos usuarios.</p>

<h2>¿El final?</h2>

<p>¿Y ahora qué? Tenía que seguir. No podía dejarlo ahí. Asi que me puse como
objetivo que exercism.io tendría su <a href="http://exercism.io/languages/ecmascript">track de ECMAScript 2015</a>.</p>

<p>Un punto para lograrlo era incorporar al menos 10 ejercicios al track. Fácil.
Un poco de trabajo&#8230; y conseguido. Pero otro punto requería de varias
personas. La idea es que haya varias personas encargadas de gestionar el track,
dando feedback a los primeros usuarios, para que no se sientan desamparados, e
ir manteniendo el código con nuevos cambios provenientes del proyecto global.
Pequeñas tareas comunes a todos los lenguages.</p>

<p>¡Me quedé flipado! Cuando contacté por email con varios usuarios de
exercism.io, sin conocerlos de nada,&#8230; ¡Me respondieron todos! ¡Todos! Algunos
de ellos no podían embarcarse en el proyecto, pero respondieron. Flipando. Con
su ayuda, el track se hizo público y el trabajo duro acaba de comenzar. Ahora
toca dar feedback a los usuarios y seguir incorporando ejercicios, para que los
usuarios vean que el track está vivo y se animen a seguir practicando sus
habilidades como programadores.</p>

<h2>¿Te animas?</h2>

<p>Así que, ya hay <a href="http://exercism.io/languages/ecmascript">track de ECMAScript 2015</a> en exercism.io. Os animo a probar la
plataforma, a practicar, a mejorar y a comentar las soluciones de los demás.
Espero veros por allí. Si decidis probarlo, veréis mi careto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla técnica: Effective learning for programmers]]></title>
    <link href="http://rchavarria.github.io/blog/2015/10/18/charla-tecnica-effective-learning-for-programmers/"/>
    <updated>2015-10-18T18:46:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/10/18/charla-tecnica-effective-learning-for-programmers</id>
    <content type="html"><![CDATA[<p>Me gustaría compartir una charla de <a href="http://akaptur.com/">Allison Kaptur</a>, en un grupo de usuarios
de Python de Nueva Zelanda, titulada <a href="https://www.youtube.com/embed/Mcc6JEhDSpo">Effective learning for programmers</a>,
donde habla acerca de encontrar ciertas estrategias para el aprendizaje.</p>

<iframe width="420"
        height="315"
        src="https://www.youtube.com/embed/Mcc6JEhDSpo"
        frameborder="0"
        allowfullscreen></iframe>




<!-- more -->


<h2>Notas tomadas</h2>

<p>La charla consta de dos partes: mentalidad (<em>mindset</em>) y estrategias</p>

<h3>Mentalidad</h3>

<p>Allison habla de dos tipos:</p>

<ol>
<li><strong>Mentalidad de crecimiento</strong>: la inteligencia es algo que se puede trabajar y
desarrollar con <strong>esfuerzo</strong></li>
<li><strong>Mentalidad fija</strong>: la inteligencia es la que es y no puede ir a más, la
inteligencia es fija, y cada uno tiene una cierta cantidad de ella</li>
</ol>


<p>La diferencia fundamental radica en que quien posee una mentalidad de
crecimiento, piensa que si algo no es fácil, puede trabajar duro para
aprenderlo. Mientras que quien posee una mentalidad fija, piensa que si algo es
fácil, se trata de una cualidad con la que ha nacido, que es de lo suyo.</p>

<p>Alabanzas contraproducentes: ante alabanzas de un trabajo realizado, los de
mentalidad fija se contentan, mientras que los de mentalidad de crecimiento se
sienten animados para superarse a sí mismos.</p>

<p>Respuesta a la confusión: los de mentalidad fija se quedan bloqueados, y los de
mentalidad de crecimiento se esfuerzan en entender la parte complicada, hasta
que superan el obstáculo.</p>

<p><strong>Está claro que los desarrolladores necesitamos una mentalidad de
crecimiento</strong>. Pero, ¿se puede cambiar una mentalidad fija?</p>

<ol>
<li>Reformula las alabanzas: cuando alaben tu trabajo: &#8220;eres un máquina&#8221;,&#8230; te
dices a tí internamente: &#8220;no soy un máquina, he trabajado duro para llegar
hasta aquí&#8221;</li>
<li>Reformula los fallos</li>
<li>Celebra los desafíos: cuando te toca arreglar un bug, decirte a tí mismo:
&#8220;genial! que se prepare ese bug, porque le voy a patear el culo&#8221;</li>
<li>Pregunta sobre el proceso seguido: pregunta siempre, &#8220;¿cómo has hecho eso?&#8221;,
&#8220;¿cómo funciona eso?&#8221;, muestra curiosidad por cómo se hacen las cosas,
aprende de los que más saben</li>
</ol>


<h3>Estrategias</h3>

<p>El aprendizaje es una habilidad adquirida, por lo que se puede mejorar
practicando:</p>

<ol>
<li>Recuperación con esfuerzo (<em>effortful retrieval</em>): aprender mediante
preguntas que te obligan a encontrar una respuesta. Es maś efectivo que una
relectura, incluso mejor que una relectura de las notas que has tomado en una
clase. La relectura te da la ilusión de que ya te sabes la lección.</li>
<li>Práctica espaciada (<em>spaced practice</em>): es mejor que una práctica masiva. La
práctica debe ser espaciada en el tiempo, variada y que mezcle conceptos de
todo el proceso de aprendizaje. Es mejor un curso de 1h durante 5 días que uno
de 5 horas en un día.</li>
<li>Dificultad y errores: cierta dificultad suele ser lo deseable. Cometer
errores suele ser también recomendable durante el aprendizaje.</li>
</ol>


<h4>Implementando <em>recuperación con esfuerzo</em></h4>

<ul>
<li>Las tarjetas de conceptos (<em>flashcards</em>) es un ejemplo de esto, pero quizá no
es la mejor forma de implementarlo</li>
<li>Cuando no sabes a ciencia cierta algo, intenta adivinarlo. Por ejemplo, los
argumentos de un comando, o intentar deducir algún aspecto de la lección que
estas estudiando</li>
<li>Intentar adivinar cual es la causa de un bug antes siquiera de empezar a
solucionarlo</li>
<li>Cuando te preguntan por algún concepto que te suena, pero no lo conoces en
profundidad, puedes intentar deducir de qué trata y así confirmar tus
suposiciones</li>
</ul>


<h4>Implementando <em>práctica espaciada</em></h4>

<ul>
<li>Trabajar en tus proyectos personales los fines de semana. Así cuando vayas a
comenzar el sábado, debes recordar lo que trabajaste hace un tiempo. Eso
ayuda al aprendizaje.</li>
</ul>


<h4>Implementando <em>dificultad y errores</em></h4>

<ul>
<li>La dificultad vienen implícita en muchos de nuestros aprendizajes, así que no
hace falta que hagamos algo extra para ello</li>
<li>Para descubrir errores: intentar buscar un feedback rápido, revisiones de
código, post-mortems,&#8230;</li>
<li>Generar un entorno donde los pequeños errores no tienen consecuencias, o que
cuando tú sepas algo que tus compañeros no saben, no te burles de ellos</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla técnica: All the little things]]></title>
    <link href="http://rchavarria.github.io/blog/2015/10/18/charla-tecnica-all-the-little-things/"/>
    <updated>2015-10-18T18:40:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/10/18/charla-tecnica-all-the-little-things</id>
    <content type="html"><![CDATA[<p>A través del blog <a href="http://garajeando.blogspot.com.es/2015/08/interesting-talk-all-little-things.html">Garajeando</a> llegué a esta charla de <a href="http://www.sandimetz.com">Sandi Metz</a> que se
titula <a href="https://www.youtube.com/watch?v=8bZh5LMaSmE">All the little things</a>. Sandi Metz es autora del libro
<a href="http://www.sandimetz.com/products">Practical Object Oriented Design in Ruby</a> y ya he visto algunas de sus charlas, por lo
que la calidad estaba asegurada. Sandi es muy defensora de la OOP y es una
profesional excelente.</p>

<p>La charla trata de una refactorización siguiendo la kata <a href="https://github.com/emilybache/GildedRose-Refactoring-Kata">The Gilded Rose</a>. La
refactorización parte de un método gigante lleno de <code>if</code>s y lleva el código
hacia clases pequeñas, métodos pequeños.</p>

<!-- more -->




<iframe width="560"
        height="315"
        src="https://www.youtube.com/embed/8bZh5LMaSmE"
        frameborder="0"
        allowfullscreen></iframe>


<h2>Notas tomadas de la charla</h2>

<blockquote><p>Es preferible algo de duplicación a una mala abstracción</p></blockquote>

<p>La duplicación es fácil de detectar y de eliminar llegado el caso. Una mala
abstracción al arrastraremos toda la vida del proyecto.</p>

<p>Unos días después, Sandi publicó un <a href="http://us3.campaign-archive2.com/?u=1090565ccff48ac602d0a84b4&amp;id=92902a19e4&amp;e=072f6853e8">artículo en forma de newsletter</a>
explicando algo más esta frase, porque parece que creó confusión o al menos,
causó reacciones que hicieron pensar a Sandi que la gente no entendió realmente
lo que ella quería transmitir.</p>

<p>La idea principal de ese artículo es que una vez identificada una mala
abstracción en el código (le pasan parámetros y hay <code>if</code>s y más <code>if</code>s), es
recomendable recrear la duplicación en el código y dejar que él mismo nos
indique nuevas abstracciones.</p>

<blockquote><p>Que tu objetivo sea llegar a Open/Closed</p></blockquote>

<p>Uno de los principios de la Programación Orientada a Objectos, es el
Open/Closed Principle. Que para añadir nueva funcionalidad, no tengas que
modificar código existente (abierto a extensión, cerrado a modificación). Lo
ideal es que toda la aplicación siguiera este principio, no vas a llegar nunca,
pero cuanto más lo sigas, más fácil será añadir nueva funcionalidad sin romper
la existente.</p>

<blockquote><p>Crea cosas pequeñas</p></blockquote>

<p>Clases pequeñas, métodos pequeños,&#8230;</p>

<blockquote><p>Refactoriza basándote en la complejidad, mediante la complejidad</p></blockquote>

<p>Uno de los objetivos de las refactorizaciones es hacer el código más sencillo.
Puedes utilizar métricas de complejidad para hacer un seguimiento de la
refactorización. En pasos intermedios, ésta puede crecer, pero debes tener
confianza en que la refactorización dará sus frutos y conseguirás un código más
sencillo y limpio.</p>

<blockquote><p>Refactoriza hacia la simplicidad</p>

<p>La herencia no siempre es mala</p></blockquote>

<p>Se habla mucho de composición en lugar de herencia, pero para Sandi hay una
ocasión, donde si se dan las siguientes circunstancias, la herencia es la mejor
solución:</p>

<ol>
<li>La jerarquía no es profunda ni ancha, es poco profunda y estrecha (no
involucra muchas clases hijas)</li>
<li>Las subclases son hojas dentro de tu árbol de clases, las subclases están en
los extremos de tu árbol de clases, no entre medias</li>
<li>Las subclases usan todo el código de la clase padre</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deuda técnica]]></title>
    <link href="http://rchavarria.github.io/blog/2015/10/12/deuda-tecnica/"/>
    <updated>2015-10-12T18:58:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/10/12/deuda-tecnica</id>
    <content type="html"><![CDATA[<p>Cuando hay que implementar una funcionalidad nueva en una aplicación software
existen básicamente dos maneras de hacerlo: la rápida (el <em>hack</em>, la <em>ñapa</em>) y
la correcta. Esta última más costosa y generalmente más compleja de llevar a
cabo.</p>

<p>La <strong>deuda técnica</strong> es una metáfora en el mundo del software que nos permite
discutir sobre este problema. Mediante la cual, se establece que <strong>implementar
una funcionalidad eligiendo el camino rápido en lugar del correcto, es como
pedir un préstamo</strong>, el cual genera unos intereses que habría que pagar en el
futuro en forma de un trabajo extra para mejorar o arreglar los atajos tomados
al no haber hecho la funcionalidad de una forma más correcta.</p>

<!-- more -->


<p>La metáfora fue propuesta por Ward Cunningham en un informe para la
<a href="http://c2.com/doc/oopsla92.html">OOPSLA 1992</a>. Se suele utilizar para explicar a la gente <em>no técnica</em> la necesidad de
refactorizar. Ya ha llovido desde entonces, y se ha discutido mucho sobre el
tema. Así que también hay gente que no está de acuerdo con la metáfora. Yo creo
que como todas las metáforas, flaquea si uno empieza a profundizar en el tema.
Martin Fowler responde a los contrarios a la metáfora documentando que hay más
de una forma de deuda técnica en su famoso <a href="http://martinfowler.com/bliki/TechnicalDebtQuadrant.html">cuadrante de la deuda técnica</a>.</p>

<p>Mucho antes que Cunningham, Meir Manny Lehman, en el 1980 ya comentaba
conceptos relacionados:</p>

<blockquote><p>Un programa en evolución está en contínuo cambio, por lo tanto, su
complejidad (reflejada en una estructura que se deteriora) se incrementa a no
ser que se haga un trabajo para mantenerla o reducirla</p></blockquote>

<p><img class="center" src="http://rchavarria.github.io/images/2015/technical-debt.jpg"></p>

<p><em>Imagen tomada del tweet de <a href="https://twitter.com/khellang/status/626716128379830273">Kristian Hellang</a></em></p>

<h2>Causas</h2>

<p>La principal culpable en la generación de deuda técnica, y así coinciden muchos
autores, es en la presión en plazos y planes de entrega que el departamento de
desarrollo se <em>deja</em> imponer por parte de negocio (marketing, ventas,&#8230;).
Estas presiones ocasionan que se publiquen versiones del software sin que se
implementen correctamente las funcionalidades.</p>

<p>Casi todas las demás causas se pueden derivar de esta primera, por ejemplo: recortes
en procesos de pruebas, incluso eliminación de pruebas automáticas, lo cual
hace muy difícil y extremadamente caro la detección y corrección de errores.
Los procesos de aseguramiento de la calidad también se ven recortados, así como
la documentación.</p>

<p>Las prisas también ocasionan que se pospongan trabajos necesarios o que se
retrasen refactorizaciones en el tiempo, ya que para adaptarse a los cambios, a
veces hay que refactorizar. Cuanto más se retrasa esta refactorización, más
cambios habrá que hacer y más caro será el cambio. Evitar refactorizaciones
puede llevar a que ciertas partes del código sean confusas.</p>

<p>También existe quien le echa la culpa a la cultura de la empresa: procesos
pobres, falta de entendimiento, falta de educación, de cuidado y de
colaboración con otros departamentos. Mientras existen otras causas maś
atribuibles a individuos: incompetencia y falta de profesionalidad.</p>

<p>Hablando de profesionalidad, hay una cita Robert C. Martin que me encanta:</p>

<blockquote><p>The only way to go fast is to go well</p>

<p>La única forma de ir rápido, es hacer las cosas bien</p></blockquote>

<h2>Consecuencias</h2>

<p>Estoy de acuerdo con que la principal causa por la que se genera deuda técnica
es por <em>atajos</em> que se toman para poder entregar más de lo que se debería en
plazos cortos de tiempo. Pues <strong>aunque parezca contradictorio, la mayor
consecuencia de la deuda técnica es precisamente que los proyectos no se
entreguen a tiempo</strong>.</p>

<p>La deuda incurrida puede hacer que un desarrollo previsiblemente corto pueda
llevar mucho más tiempo de lo previsto en implementarse, ya que el mayor coste
de la deuda técnica es el hecho de que ralentiza el desarrollo de futuras
funcionalidades. Comprometiendo la viabilidad del proyecto a largo plazo.
Justamente como una deuda financiera, que produce un beneficio a corto plazo
pero puede tener resultados desastrosos a largo plazo si la deuda contraída no
se va pagando.</p>

<p>Otras consecuencias no tan mortales para el proyecto incluirían errores no
subsanados o desconocidos, que harían que el producto fuera inestable. Lo cual
tiene sentido, recortando o eliminando tests automáticos y calidad no se puede
esperar obtener mejores resultados.</p>

<p>La documentación entregada también se resiente, ya que se suele encontrar
desactualizada, escasa o inservible.</p>

<h2>Soluciones</h2>

<p>La única forma de pagar la deuda contraída es completando el trabajo que no se
hizo correctamente. Y esto se hace refactorizando para mejorar el trabajo que
se dejó pendiente. El mejor momento para refactorizar es justo antes de
comenzar una nueva funcionalidad, adaptando el código a los nuevos
requerimientos.</p>

<p>Existen herramientas que permiten atacar ciertos puntos de la deuda técnica,
las herramientas de análisis estático del código. Pero por sí solas no son
suficientes, ya que la mayoría de las veces, la deuda técnia no se refleja
directamente en el código, sino también en la arquitectura, en componentes
desactualizados o en ciertas estructuras que estas herramientas no son capaces
de analizar.</p>

<p>Desde el punto de vista del equipo de desarrollo, hacer la deuda visible puede
ayudar. Podría ser intersante mantener una lista explícita sobre tareas
necesarias para reducir la deuda. Y a un nivel más alto, hacer entender a
marketing y otros departamentos de negocio que si no se planifica cierto tiempo
para reducir la deuda técnica se corre el riesgo de que no sea posible entregar
todas las funcionalidades que ellos quieren.</p>

<h2>Referencias:</h2>

<ul>
<li><a href="https://es.wikipedia.org/wiki/Deuda_t%C3%A9cnica">Wikipedia en español sobre la deuda técnica</a></li>
<li><a href="http://www.javiergarzas.com/2012/11/deuda-tecnica-2.html">Javier Garzás sobre la deuda técnica</a></li>
<li><a href="http://c2.com/doc/oopsla92.html">OOPSLA 1992</a></li>
<li><a href="https://en.wikipedia.org/wiki/Technical_debt">Technical debt, wikipedia en inglés</a></li>
<li><a href="http://martinfowler.com/bliki/TechnicalDebt.html">Martin Fowler sobre la deuda técnica</a></li>
<li><a href="http://www.c2.com/cgi/wiki?TechnicalDebt">Deuda técnica en Cunningham &amp; Cunningham wiki</a></li>
<li><a href="http://docs.sonarqube.org/display/SONARQUBE44/Technical+Debt+Calculation">Cálculo de la deuda técnica basado en fórmulas</a></li>
<li><a href="http://www.computer.org/csdl/mags/so/2012/06/mso2012060018.html">Technical Debt: From Metaphor to Theory and Practice</a></li>
</ul>


<h2>Actualización (01-12-2015)</h2>

<p>Por twitter encontré esto de <a href="https://twitter.com/jbrains/status/665625243382325251">J.B.Rainsberger</a></p>

<blockquote><p>Para la mayoría de aplicaciones, el camino rápido siempre lleva a la muerte y
destrucción del proyecto; para aplicaciones pequeñas, el buen camino siempre
parece una exageración</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla técnica: Follow my leader]]></title>
    <link href="http://rchavarria.github.io/blog/2015/10/04/charla-tecnica-follow-my-leader/"/>
    <updated>2015-10-04T15:21:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/10/04/charla-tecnica-follow-my-leader</id>
    <content type="html"><![CDATA[<p>Estas notas podrían encajar perfectamente en el post que voy actualizando
regularmente <a href="http://rchavarria.github.io/blog/2014/10/11/aprendiendo-vim/">Aprendiendo Vim</a>, pero creo que esta la charla de Drew Neail se
desmarca ya un poco del proceso de aprendizaje. En esta charla no se busca
enseñar nuevos comandos de Vim, si no que se trata más de un tema cultural
acerca del editor. Drew trata de animar a la gente a que busque nuevas
combinaciones de teclas que se conviertan en nuevos comandos y de esta forma
hacer Vim más potente todavía.</p>

<!-- more -->


<h2>Notas tomadas de la charla <a href="https://vimeo.com/85343734">Follow my leader</a></h2>

<iframe src="https://player.vimeo.com/video/85343734"
        width="500"
        height="281"
        frameborder="0"
        webkitallowfullscreen mozallowfullscreen allowfullscreen>
</iframe>


<p><em><a href="https://vimeo.com/85343734">Follow my leader</a>, por <a href="http://drewneil.com/">Drew Neil</a>, en un encuentro del grupo local
<a href="https://vimeo.com/vimlondon">Vim London</a></em></p>

<ul>
<li><code>let mapleader = ","</code> para mapear <code>,</code> como tecla <code>&lt;leader&gt;</code> en Vim. Otra
tecla muy común para utilizarla como <code>&lt;leader&gt;</code> es la barra espaciadora.</li>
<li><code>nnoremap &lt;leader&gt;&lt;space&gt; :noh&lt;cr&gt;</code> : remapea la secuencia de teclas
<code>&lt;leader&gt;&lt;space&gt;</code> para que se ejecute el comando <code>:nohlsearch</code>, que desactiva
el resaltado de términos de búsqueda.</li>
<li>La tecla <code>&lt;leader&gt;</code> te permite crear mapeos personalizados, es donde los
usuarios pueden crear sus mapeos sin interferir con Vim</li>
<li>En lugar de usar <code>leader</code>, algunos plugins, como los que escribe <a href="http://tpo.pe/">Tim Pope</a>
siguen otro patrón. hay teclas que son <em>operadores</em>, por ejemplo la <strong>d</strong>
para borrar, o la <strong>y</strong> para copiar. a estos operadores le puede seguir el
mismo operador o una movimiento. Teclas que producen un movimiento son <strong>j</strong>
para ir hacia abajo, <strong>$</strong> para ir al final de la línea, &#8230; Pero, qué pasa si
despues de un operador pulsamos una tecla de <em>no movimiento</em>? No pasa nada. Y
ahí están las combinaciones de teclas dsiponibles para tus plugins.</li>
<li>En la imagen de la <a href="http://www.viemu.com/vi-vim-cheat-sheet.gif">chuleta de Vim</a>, los naranjas son operadores, los
verdes movimientos y los amarillos son comandos.</li>
</ul>


<p><img class="center" src="http://rchavarria.github.io/images/2015/tiny-vi-vim-cheat-sheet.gif"></p>

<ul>
<li>El plugin <a href="https://github.com/tpope/vim-unimpaired">unimpaired.vim</a> añade mapeos como <code>con</code> para habilitar/deshabilitar los
nuḿeros de línea, o <code>cos</code> para habilitar/deshabilitar el chequeo ortográfico.
Son <code>c</code> + <code>o</code> + otras teclas</li>
<li>También hay disponibles combinaciones como operador + operador : <code>d</code> + <code>c</code></li>
<li>Los <em>text objects</em> (<code>i</code> y <code>a</code>) también tienen vacantes.</li>
<li>Los <em>namespaced mappings</em> también tienen vacantes. Por ejemplo, <code>g</code> es como
un prefijo para muchos mapeos. <code>z</code> es otro, y <code>[</code> y <code>]</code> son más.</li>
<li><code>:help g</code> te muestra todos los mapeos que siguen a <code>g</code>. Te puede servir para
ver huecos donde poner tus mapeos</li>
<li>Comando inútiles, hay algunos comandos que no usa nadie. Sobreescríbelos. Por
ejemplo, <code>g</code> + <code>s</code>.</li>
<li>Sobreescribir, sobrecargar comandos que ya existen, vamos, ampliar los
existentes.</li>
</ul>


<h2>Conclusiones</h2>

<p>Como puedes ver, el editor Vim es todo un mundo de posibilidades. Hay veces que
abruma, pero hay tanta gente apasionada por él que está claro que algo debe de
tener. Esta charla es una muestra de las posibilidades de personalización que
esta herramienta ofrece. Drew nos abre las puertas a un mundo nuevo de posibles
comandos.</p>

<p>Si te gusta Vim, y no conoces el plugin <a href="https://github.com/tpope/vim-unimpaired">unimpaired.vim</a>, échale un vistazo. Sin
duda es uno de los imprescindibles, como tantos otros de Tim Pope.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Los eventos que vienen]]></title>
    <link href="http://rchavarria.github.io/blog/2015/09/27/eventos-que-vienen/"/>
    <updated>2015-09-27T23:11:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/09/27/eventos-que-vienen</id>
    <content type="html"><![CDATA[<p>Cuando leí el post de <a href="https://twitter.com/voylinux">Pablo Bernardo</a>, <a href="http://voylinux.com/yo-voy-al-gnu-social-camp-2015/">Yo voy al GNU Social Camp 2015</a>, me
sentí inspirado para escribir algo parecido. La recta final del año viene
cargadito de eventos, y les tengo ganas, muchas ganas. Y que mejor manera de ir
calentando motores que hacer como Pablo y escribir sobre dichos eventos.</p>

<p>¿De qué eventos estoy hablando?</p>

<ol>
<li><a href="http://globalday.coderetreat.org/">Global Day of Coderetreat</a>, que se celebrará el 14 de noviembre de 2015, a
nivel mundial.</li>
<li><a href="http://2015.codemotion.es/">Codemotion 2015</a>, allá por el 27 y 28 de noviembre de 2015.</li>
<li><a href="http://cas2015.agile-spain.org/">Conferencia Agile Spain 2015</a>, los días 3 y 4 de diciembre de 2015.</li>
</ol>


<p>La agenda está apretada, ¿eh?</p>

<!-- more -->


<h2>Global Day of Coderetreat</h2>

<blockquote><p>A day to celebrate passion and software craftsmanship</p></blockquote>

<p>El año pasado fue <a href="http://rchavarria.github.io/blog/2014/11/18/mi-primer-code-retreat/">mi primer Code Retreat</a>, y me encantó la experiencia. Este
año está más difícil, y a estas alturas todavía no tengo claro si podré ir. Si
tú puedes, te lo recomiendo. Lo pasarás bien.</p>

<p>Es un evento a nivel global, estiman que este año lo celebren de 100 a 150
ciudades. ¡Increíble!</p>

<h2>Codemotion</h2>

<blockquote><p>Codemotion gets all the IT communities in Spain together for two days. We
take an entire university building to present the best of each technology and
get you far away from your comfort zone.</p></blockquote>

<p>Este año el Codemotion vuelve a repetirse en la Universidad San Pablo CEU, en
el campus de Boadilla del Monte (Madrid). Ésta es la madre de las conferencias.
El año pasado hubo casi 2000 asistentes. <strong>¡2000!</strong>. Una locura, es
prácticamente imposible no encontrarse con alguien conocido en ella.
<a href="http://rchavarria.github.io/blog/2014/11/29/notas-codemotion-2014/">El año pasado pude asistir</a>, y este año también espero poder hacerlo.</p>

<p>Es una conferencia donde se involucran muchísimas comunidades locales, donde
acuden ponentes internacionales de muy alto nivel. No solo hay charlas, también
hay talleres, los patrocinadores montan pequeñas fiestas y muchos de ellos
organizan concursos para disfrute de los asistentes.</p>

<p>Si crees que por dos días de conocer a gente interesantísima te va a salir por
un ojo de la cara te equivocas. El Codemotion debe ser uno de los eventos más
accesibles (en cuanto a coste de entrada) de toda España. Por menos de 50€
tienes derecho a poder absorber cuanta información y contactos puedas durante
dos días. A tí no se, pero a mí me parece alucinante.</p>

<h2>Conferencia Agile Spain</h2>

<blockquote><p>Es un evento anual que generan las personas que viven el desarrollo de
productos de software de una manera diferente</p></blockquote>

<p>En el 2012 acudí a esta misma conferencia, cuando se celebró en Cáceres
(<a href="http://rchavarria.github.io/blog/2012/11/08/mi-experiencia-en-la-cas2012/">la CAS2012 fue toda un experiencia para mí</a>). Quedé tan prendado del ambiente, de
las charlas, de todo en general, que desde entonces he querido asistir a todas
las que se ha celebrado. Otros años me he quedado con las ganas de ir porque se
celebraba lejos de casa y la pereza de organizarme el viaje pudo con las ganas
de asistir. Este año se celebra en Madrid, en el <a href="http://www.circulobellasartes.com/">Círculo de Bellas Artes</a>, así
que este año no hay excusa.</p>

<p>Como muestra de lo genial de la conferencia, existe un
<a href="https://trello.com/chairscas2015">proceso de votación de charlas</a>. Asi que tú mismo participas en el proceso de
creación del evento. Existen distintos tracks, distintas temáticas de las
charlas, para que ningún tema <em>Agile</em> se quede sin representación.</p>

<p>Si participas en el proceso te darás cuenta del nivel de los ponentes. Si echas
un vistazo, seguro que te convence y te apetecerá asistir. Si no, no sé qué más
te puedo contar para que te pases por allí: se celebra en un lugar emblemático,
con ponentes astronómicos, con charlas de temáticas muy variadas y con unos
asistentes inmejorables. ¿A qué esperas?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The passionate programmer]]></title>
    <link href="http://rchavarria.github.io/blog/2015/09/20/passionate-programmer/"/>
    <updated>2015-09-20T19:07:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/09/20/passionate-programmer</id>
    <content type="html"><![CDATA[<h5>de Chad Fowler</h5>

<p><img class="left" src="http://chadfowler.com/images/books/passionate-programmer.jpg" width="200" height="300" title="The passionate programmer" ></p>

<h2>Por qué lo he leído</h2>

<p>Suelo elegir los libros por el título, por lo que me sugiera. Y el título de
este libro me sugiere todo: pasión y programación. ¿Qué más se puede pedir?.
Uno de mis libros favoritos es <a href="https://pragprog.com/book/tpp/the-pragmatic-programmer">The pragmatic programmer</a>, que más adelante
dió lugar a una editorial de libros técnicos. <em>The passionate programmer</em> tenía
la misma pinta, así que seguro que lo tenía que leer, tarde o temprano.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Me esperaba un libro con una estructura parecida a <em>The pragmatic programmer</em>,
con capítulos cortos, y cada capítulo finalizando con una serie de posibles
acciones para mejorar en tu carrera profesional. Bueno, esta vez, en lugar de
mejorar, esperaba que estuviera relacionado con sentir la pasión por la
programación.</p>

<h2>Qué encontre</h2>

<p>El libro está organizado en 5 grandes secciones:</p>

<ol>
<li>Elige tu mercado</li>
<li>Invierte en tu producto</li>
<li>Ejecución</li>
<li>El marketing&#8230; no es sólo para los trajeados</li>
<li>Manteniéndote al día</li>
</ol>


<p>Cada uno de ellos está dividido en capítulos más pequeños (lo que me
imaginaba), y cada uno de ellos termina en uno o varios consejos para que
aprendas el concepto que desarrolla el capítulo. Idéntica estructura a <em>The
pragmatic programmer</em> que tanto me gustó y tanto me ayudó.</p>

<p>Cada una de las secciones anteriores explorar un aspecto de la carrera de un
profesional del desarrollo software, aunque no cubre todos. Guía al lector
sobre cómo y por qué debe elegir un mercado, una industria, ya que el software
se encuentra en todas partes hoy en día. Hay consejos sobre cómo deberías
trabajar, qué actitud deberías tener, tanto si trabajas por cuenta ajena como
por tu propia cuenta y también cómo poder <em>venderte</em> dentro y fuera de tu
empresa.</p>

<h2>Conclusiones</h2>

<p>Me parece un libro muy recomendable. Está enfocado al desarrollo del software,
pero podría ser aplicable (más o menos) a otras profesiones. De lo que trata es
de buscar la pasión por lo que haces.</p>

<p>Cada capítulo termina con una o varias acciones a tomar, algunas son sencillas,
otras te llevarán cierto tiempo, otras son arriesgadas y no todo el mundo se
sentiría cómodo llevándolas a cabo. No creo que tenga tiempo ni energía para
llevarlas todas a cabo, pero sí que me gustaría poner en práctica algunas de
ellas: comunicarme más con gente de negocio, ponerme en situaciones donde yo
sea el <em>peor</em>, invertir en mi conocimiento, encontrar un mentor, seguir alguno
de los consejos para contribuir a algún proyecto de software libre,&#8230;</p>

<p>Creo que este es un libro para tener al lado de <em>The pragmatic programmer</em> y
releerlos de vez en cuando.</p>

<h2>Qué he aprendido</h2>

<blockquote><p>No puedes competir en precio, pero puedes competir en habilidad.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Tienes que ser apasionado sobre tu trabajo si quieres ser excelente
en tu trabajo.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Un aprendiz no se encuentra saliendo por ahí y declarándote un <em>gurú</em>, si no
acumulando conocimiento y teniendo la voluntad y paciencia para compartirlo.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Es mucho más fácil encontrar alguien que haga que el software funciona que
encontrar a alguien que haga que funcione el <em>hacer software</em> (It’s much
easier to find someone who can make software work than it is to find someone
who can make the making of software work).</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Crea movimiento. Se de los que empujan hacia adelante. No te acomodes.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>La mayor barrera entre nosotros, los mortales, y aquellos a los que admiramos
son nuestros propios miedos.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>El proceso aquí descrito es un bucle que se repite hasta que te jubilas:
investiga, invierte, ejecuta, anúncialo, repite.</p></blockquote>

<h2>Frases que me gustaría recordar</h2>

<blockquote><p>At least when starting out, greatness is binary in the music world. A
musician wants to either be great (and famous for it!) or not do it at all.
I’m often asked why it is that there are so many good musicians who are also
good software developers. That’s the reason.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Think of your career as if it is the life cycle of a product that you are
creating. That product is made up of you and your skills.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>If you want to stay relevant, you’re going to have to dive into the domain of
the business you’re in.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Legendary jazz guitarist Pat Metheny: “Always be the worst guy in every band
you’re in.”</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Fear-driven advice is geared toward not losing. Thinking about not losing is
not the way to win!</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Teaching is one of the best ways to learn.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Cuando estudias soluciones de código abierto, en lugar de propietarias, en
profundidad empiezas a reconocer patrones que te sirven más allá de la
tecnología.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>The most obvious place to start your lifelong learning is in learning the
tools of your trade.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Without a role model, there’s no incentive to get better.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>You have to make time for practice. It’s your responsibility.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Studying the work of masters is an essential part of becoming a master.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>I learned that no matter how cool the technology seemed to be, it was
valuable only if it solved a real problem that was urgent and provided
quantifiable benefits. Over time, this helped me change my way of thinking
from being technology-centric to being solution-centric.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Attempting to be irreplaceable is a defensive maneuver that creates a hostile
relationship with your employer.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>We judge each other on how we deal with those inevitable mistakes.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>If you don’t have a deadline, you don’t have any pressure or much incentive
to finish something.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>There is no way to objectively measure the quality of a knowledge worker, and
there is no way to objectively measure the quality of their work. That means
you are always going to be measured based on someone else’s perception of
you.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>You need to make it personal. Try to actually learn about the people you work
with.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Set big goals, but make constant corrections along the way. Learn from the
experience, and change the goals as you go.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Software development is both challenging and rewarding. It’s creative like an
art-form, but (unlike art) it provides concrete, measurable value.</p></blockquote>

<h2>Recursos relacionados</h2>

<ul>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/passionate-programmer-by-chad-fowler.markdown">Notas tomadas sobre el libro</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla técnica: Workflows of refactoring]]></title>
    <link href="http://rchavarria.github.io/blog/2015/09/13/charla-tecnica-workflows-refactoring/"/>
    <updated>2015-09-13T10:08:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/09/13/charla-tecnica-workflows-refactoring</id>
    <content type="html"><![CDATA[<p>Esta semana el post trata sobre las notas que he tomado de una charla técnica
titulada <a href="https://www.youtube.com/watch?v=vqEg37e4Mkw">Workflows of refactoring</a>. El autor de la charla, hablando de
<em>refactoring</em>, no podría ser otro que <a href="http://www.martinfowler.com/">Martin Fowler</a>. En la charla, Martin
comienza hablando de distintos modos de trabajar, dependiendo de la situación,
por ejemplo, nos encontraremos añadiendo funcionalidad o limpiando el código.
Después, Martin describe distintos tipos de refactorizaciones, más allá del
típico paso en TDD o de la refactorización cambiando unos cuantos nombres a las
variables.</p>

<!-- more -->




<iframe width="560"
        height="315"
        src="https://www.youtube.com/embed/vqEg37e4Mkw"
        frameborder="0"
        allowfullscreen></iframe>


<h2>Notas tomadas</h2>

<blockquote><p>La primera vez que la gente escucha hablar de <em>refactoring</em> es cuando oye hablar
del ciclo de TDD: red > green > refactor.</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p>¿Por qué separar los dos pasos que incluyen el código en TDD? ¿Uno para
escribir el código y otro para refactorizar? Puede que esté hecho para los
programadores menos experimentados y para los impacientes, para aquellos que
antes de nada quieren tener algo funcionando. Kent Beck hablaba de dos modos
de trabajar, dos sombreros: añadiendo funcionalidad y modo mantenimiento
(refactorizando). Se puede cambiar entre ellos, pero no se puede andar
mezclándolos.</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p>Otros modos, otros sombreros: mejoras de rendimiento, donde el rendimiento
prima sobre la legibilidad; experimentos (donde el resultado va a ser descartado).</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p><strong>TDD refactoring</strong>: el refactoring que pasa cuando estás haciendo TDD, o tienes
una batería de tests en la que apoyarte</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p><strong>Litter-pickup refactoring</strong>: similar a la regla del Boy Scout. Se trata de que
tienes que trabajar con una base de código que no está escrita como a tí te gustaría
(aunque lo más probable es que hayas sido tú quien la haya escrito). Vas navegando
por el código, y de repente ves algún detalle que no te encaja. Paras todo, y lo
arreglas. En definitiva, como el Boy Scout, dejas el campo un poquito mejor de lo
que te lo encontraste. No quieres pasar mucho tiempo limpiándolo, pero sí dejarlo
un poquito mejor.</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p>Cuando encuentras alguna pieza de código en la que tienes que invertir cierto
tiempo entendiendo qué es lo que hace. Cuando terminas entendiéndolo, ¿qué
haces? ¿Lo dejas como está? ¿Y si la próxima vez vuelves a perder tanto tiempo?
Tendrás que refactorizarlo. <strong>Comprehension refactoring</strong>.</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p>Hay situaciones en las que después de un tiempo, vuelves a ver código y piensas:
&#8220;hey! Ahora conozco una nueva y mejor forma de hacer esto&#8221;. Esto tiene mucho que
ver con el <em>diseño evolutivo</em>. Por ejemplo, refactorizar un poquito antes de
añadir una nueva funcionalidad. Normalmente, el refactoring es beneficioso en el
largo y medio plazo. Este en concreto, es beneficioso para la tarea en la que
estás trabajando en este mismo momento.</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p><strong>Planned refactoring</strong>. Un buen equipo necesitaría poco de este tipo de
refactoring. Para el resto de mortales, un poco de refactorizaciones planificadas
no hace daño.</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p><strong>Long-term refactoring</strong>. Por ejemplo, cuando tienes un montón de módulos que
tienen dependencias caóticas. En lugar de parar el desarrollo y dedicar 2 o 3
semanas refactorizando todo esto, ¿qué tal si vas refactorizando poco a poco,
sin romper nada, gradualmente,&#8230; hasta que lo consigas? Quizá no tengas del
todo claro cómo llegar al final, pero si vas poco a poco, lo más seguro es que
tarde o temprano encuentres el camino.</p></blockquote>

<h2>Conclusión</h2>

<p>Me parece una charla interesantísima, recomendada 100%. Y no sólo echarle un
vistazo por encima, sino profundizar en los conceptos que Martin Fowler expone.
La charla es la keynote de una conferencia sobre Programación Orientada a
Objectos bastante conocida, así que tiene todas las papeletas de ser un
recurso muy útil.</p>

<p>No estoy seguro, pero tiene pinta de que todos estos conceptos y nombres que
Martin da a los distintos tipos de refactorizaciones los vamos a ir viendo y
desarrollando en años venideros.</p>

<p>Así que ya sabes, haz un hueco en la agenda, y ¡a visualizar la charla!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Martian]]></title>
    <link href="http://rchavarria.github.io/blog/2015/09/06/the-martian/"/>
    <updated>2015-09-06T16:05:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/09/06/the-martian</id>
    <content type="html"><![CDATA[<h5>de Andy Weir</h5>

<p><img class="right" src="http://www.ew.com/sites/default/files/i/2014/02/04/The-Martian.jpg" width="201" height="306"></p>

<h2>Por qué lo he leído</h2>

<p>Hace un tiempo que escucho semanalmente los podcasts de Scott Hanselman:
<a href="http://www.hanselminutes.com/">Hanselminutes</a>. Son unos podcasts muy variados que tratan temas relacionados
con el mundo del software y la tecnología en general: lenguajes de programación,
iniciativas,&#8230;</p>

<p>En varios de sus podcasts, y probablemente en varios de sus posts, Scott dice
que uno de los libros que más recomienda es <a href="http://www.amazon.es/gp/product/B00OXYQR38/">El marciano</a>, que es un libro
que le encanta. No creo que se lleve ninguna comisión por hacer publicidad,
pero si alguien como Scott recomienda una y otra vez un libro, será por algo.
Además, es un libro no técnico, por lo que me serviría para desconectar un poco
en vacaciones.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Al estar tan recomendado, esperaba una novela muy bien escrita. Según Scott, es
una novela de ciencia ficción, pero que es mucho más de ciencia que de ficción,
de hecho, con el estado actual de la tecnología, se podría dar la situación
perfectamente. Lo único que quizá no se ha invertido el tiempo y el dinero en
hacerlo realidad, pero podría serlo.</p>

<h2>Qué encontre</h2>

<p>Evidentemente, encontré todo lo que esperaba. Una novela de ciencia ficción, con
más ciencia que ficción, describiendo una situación que podría ser totalmente
cierta actualmente. Una novela magníficamente escrita, con muchos tecnicismos,
llena de vocabulario aeroespacial, describiendo personalidades muy distintas,
pero que el autor usa inteligentemente.</p>

<h2>Conclusiones</h2>

<p>Sin duda, una novela a recomendar. Si te gusta el espacio, si te gusta la ciencia,
y si te gusta la ficción; ésta es una novela para tí. O película, porque mientras
estaba a mitad del libro, me entero de que van a <em>sacar</em> la película y que ya hay
disponible algún <a href="https://www.youtube.com/watch?v=ej3ioOneTy8">trailer</a>. Así que eso me animó a terminarme antes aún el
libro, a devorarlo en vacaciones.</p>

<p>Aunque la situación podría darse hoy en día, también hay que hacer un acto de fe
para creerse todo lo que cuenta. En muchas ocasiones, el protagonista describe
procesos químicos, o físicos, que pueden funcionar por casualidad, pero que al
final, por <em>necesidades del guión</em>, terminan funcionando. No son situaciones
increíbles, pero sí que uno tiene que relajarse un poco y creer en la fortuna
del protagonista.</p>

<h2>Qué he aprendido</h2>

<p>No es que pueda sacar lecciones aprendidas, como si fuera un libro técnico
describiendo un proceso o una tecnología, pero sí que he aprendido un montón
de cosas sobre Marte: lugares, condiciones en la superficie, cómo viajar al
planeta, cómo funcionan las comunicaciones, un poco sobre viajes
interplanetarios, cómo funciona la NASA por dentro. Aunque sé que es una novela,
no me lo tengo que tomar todo al pie de la letra.</p>

<h2>Recursos relacionados</h2>

<ul>
<li><a href="http://www.hanselminutes.com/">Hanselminutes podcast</a></li>
<li><a href="http://www.amazon.es/gp/product/B00OXYQR38/">El marciano</a>, de Andy Weir, o en versión original: <a href="http://www.amazon.com/The-Martian-Novel-Andy-Weir-ebook/dp/B00EMXBDMA">The Martian</a></li>
<li><a href="https://www.youtube.com/watch?v=ej3ioOneTy8">Trailer de The Martian</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla no técnica: How to learn anything... fast]]></title>
    <link href="http://rchavarria.github.io/blog/2015/08/30/how-learn-anything-fast/"/>
    <updated>2015-08-30T19:09:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/08/30/how-learn-anything-fast</id>
    <content type="html"><![CDATA[<p>En los trabajos creativos, como en el desarrollo de software, la capacidad para
aprender es un elemento diferenciador. A mí me encanta aprender. Cualquier
cosa. Aunque normalmente siempre elijo temas relacionados con la ciencia,
matemáticas, juegos de ingenio o, cómo no, el desarrollo de software. Cuando vi
el título de la charla (<a href="https://www.youtube.com/watch?v=EtJy69cEOtQ">How to learn anything&#8230; fast</a>) me interesó
bastante. ¿Aprender cualquier cosa rápidamente?. ¡Ya me ha cazado!.</p>

<p>En esta charla, <a href="http://joshkaufman.net/">Josh Kaufman</a> indica 5 pasos para aprender cualquier cosa en 20
horas. Típicamente se acepta que para dominar una habilidad, para ser maestro
en algún arte, hacen falta <strong>10.000 horas de práctica deliberada</strong> en esa habilidad
o arte. Josh dice que no tenemos que ir tan lejos, que con <strong>20 horas podemos ser
suficientemente competentes</strong> en cualquier cosa que nos propongamos.</p>

<!-- more -->




<iframe width="560"
        height="315"
        src="https://www.youtube.com/embed/EtJy69cEOtQ"
        frameborder="0"
        allowfullscreen></iframe>


<h2>Pasos</h2>

<ol>
<li>Decidir <strong>qué</strong> aprender.</li>
<li><strong>Dividir</strong> aquello que queremos aprender en habilidades más pequeñas y que
puedan ser practicadas de forma independiente, e identificar aquellas
habilidades más importantes, aquellas habilidades esenciales que te van a
permitir aprender lo que quieres.</li>
<li><strong>Investigar</strong> esas habilidades esenciales. Investiga lo justo y necesario para
saber las mejores formas de realizar las habilidades. Elige de 3 a 5
recursos y pasa rápido por ellos, no profundices (en esta fase) en ellos, ya lo
harás cuando practiques. No uses esta fase para procrastinar, para retrasar el
aprendizaje.</li>
<li>Hacer fácil la práctica. <strong>Elimina distraciones</strong> (TV, móvil, internet,
familiares,&#8230;), elimina fricciones, reduce el esfuerzo de comenzar a
practicar, que sea fácil ponerte a ello.</li>
<li>Antes de comenzar, <strong>comprometerse</strong> a realizar al menos 20 horas de práctica
deliberada y enfocada, sin distracciones. Con este compromiso se trata de
eliminar la frustración de todo comienzo, donde somos patéticos con la nueva
habilidad, pero que después de unas prácticas deliberadas, podremos comprobar
nuestro avance.</li>
</ol>


<h2>Conclusión</h2>

<p>Bueno, no creo que 20 horas sean suficientes para aprender <em>cualquier</em> cosa.
Creo que hay materias, habilidades, que necesitan más que eso. Yo no me tomo al
pie de la letra lo que afirma Josh, pero creo que parte de razón sí que tiene.
Puede que 20 horas no sean suficientes para dominar una materia, pero los
consejos que encontramos en esta charla sí me parecen fundamentales para
aprender cualquier cosa, específicamente dividir en partes esenciales aquello
que queremos aprender, eliminar distracciones y fricción y comprometernos con
nosotros mismos a realizar un mínimo de horas de práctica deliberada y
enfocada.</p>

<p>En todo el proceso, echo de menos la recogida de feedback y la medida del
progreso. Quizá el autor lo ha diseñado así para mantener el proceso lo más
simple y más corto posible. Pero aún así, yo añadiría alguna forma de saber si
al final de todo el proceso he llegado donde quería.</p>
]]></content>
  </entry>
  
</feed>
