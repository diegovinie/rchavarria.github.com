<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2015-09-13T22:46:42+02:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Charla técnica: Workflows of refactoring]]></title>
    <link href="http://rchavarria.github.io/blog/2015/09/13/charla-tecnica-workflows-refactoring/"/>
    <updated>2015-09-13T10:08:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/09/13/charla-tecnica-workflows-refactoring</id>
    <content type="html"><![CDATA[<p>Esta semana el post trata sobre las notas que he tomado de una charla técnica
titulada <a href="https://www.youtube.com/watch?v=vqEg37e4Mkw">Workflows of refactoring</a>. El autor de la charla, hablando de
<em>refactoring</em>, no podría ser otro que <a href="http://www.martinfowler.com/">Martin Fowler</a>. En la charla, Martin
comienza hablando de distintos modos de trabajar, dependiendo de la situación,
por ejemplo, nos encontraremos añadiendo funcionalidad o limpiando el código.
Después, Martin describe distintos tipos de refactorizaciones, más allá del
típico paso en TDD o de la refactorización cambiando unos cuantos nombres a las
variables.</p>

<!-- more -->




<iframe width="560"
        height="315"
        src="https://www.youtube.com/embed/vqEg37e4Mkw"
        frameborder="0"
        allowfullscreen></iframe>


<h2>Notas tomadas</h2>

<blockquote><p>La primera vez que la gente escucha hablar de <em>refactoring</em> es cuando oye hablar
del ciclo de TDD: red > green > refactor.</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p>¿Por qué separar los dos pasos que incluyen el código en TDD? ¿Uno para
escribir el código y otro para refactorizar? Puede que esté hecho para los
programadores menos experimentados y para los impacientes, para aquellos que
antes de nada quieren tener algo funcionando. Kent Beck hablaba de dos modos
de trabajar, dos sombreros: añadiendo funcionalidad y modo mantenimiento
(refactorizando). Se puede cambiar entre ellos, pero no se puede andar
mezclándolos.</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p>Otros modos, otros sombreros: mejoras de rendimiento, donde el rendimiento
prima sobre la legibilidad; experimentos (donde el resultado va a ser descartado).</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p><strong>TDD refactoring</strong>: el refactoring que pasa cuando estás haciendo TDD, o tienes
una batería de tests en la que apoyarte</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p><strong>Litter-pickup refactoring</strong>: similar a la regla del Boy Scout. Se trata de que
tienes que trabajar con una base de código que no está escrita como a tí te gustaría
(aunque lo más probable es que hayas sido tú quien la haya escrito). Vas navegando
por el código, y de repente ves algún detalle que no te encaja. Paras todo, y lo
arreglas. En definitiva, como el Boy Scout, dejas el campo un poquito mejor de lo
que te lo encontraste. No quieres pasar mucho tiempo limpiándolo, pero sí dejarlo
un poquito mejor.</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p>Cuando encuentras alguna pieza de código en la que tienes que invertir cierto
tiempo entendiendo qué es lo que hace. Cuando terminas entendiéndolo, ¿qué
haces? ¿Lo dejas como está? ¿Y si la próxima vez vuelves a perder tanto tiempo?
Tendrás que refactorizarlo. <strong>Comprehension refactoring</strong>.</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p>Hay situaciones en las que después de un tiempo, vuelves a ver código y piensas:
&#8220;hey! Ahora conozco una nueva y mejor forma de hacer esto&#8221;. Esto tiene mucho que
ver con el <em>diseño evolutivo</em>. Por ejemplo, refactorizar un poquito antes de
añadir una nueva funcionalidad. Normalmente, el refactoring es beneficioso en el
largo y medio plazo. Este en concreto, es beneficioso para la tarea en la que
estás trabajando en este mismo momento.</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p><strong>Planned refactoring</strong>. Un buen equipo necesitaría poco de este tipo de
refactoring. Para el resto de mortales, un poco de refactorizaciones planificadas
no hace daño.</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p><strong>Long-term refactoring</strong>. Por ejemplo, cuando tienes un montón de módulos que
tienen dependencias caóticas. En lugar de parar el desarrollo y dedicar 2 o 3
semanas refactorizando todo esto, ¿qué tal si vas refactorizando poco a poco,
sin romper nada, gradualmente,&#8230; hasta que lo consigas? Quizá no tengas del
todo claro cómo llegar al final, pero si vas poco a poco, lo más seguro es que
tarde o temprano encuentres el camino.</p></blockquote>

<h2>Conclusión</h2>

<p>Me parece una charla interesantísima, recomendada 100%. Y no sólo echarle un
vistazo por encima, sino profundizar en los conceptos que Martin Fowler expone.
La charla es la keynote de una conferencia sobre Programación Orientada a
Objectos bastante conocida, así que tiene todas las papeletas de ser un
recurso muy útil.</p>

<p>No estoy seguro, pero tiene pinta de que todos estos conceptos y nombres que
Martin da a los distintos tipos de refactorizaciones los vamos a ir viendo y
desarrollando en años venideros.</p>

<p>Así que ya sabes, haz un hueco en la agenda, y ¡a visualizar la charla!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Martian]]></title>
    <link href="http://rchavarria.github.io/blog/2015/09/06/the-martian/"/>
    <updated>2015-09-06T16:05:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/09/06/the-martian</id>
    <content type="html"><![CDATA[<h5>de Andy Weir</h5>

<p><img class="right" src="http://www.ew.com/sites/default/files/i/2014/02/04/The-Martian.jpg" width="201" height="306"></p>

<h2>Por qué lo he leído</h2>

<p>Hace un tiempo que escucho semanalmente los podcasts de Scott Hanselman:
<a href="http://www.hanselminutes.com/">Hanselminutes</a>. Son unos podcasts muy variados que tratan temas relacionados
con el mundo del software y la tecnología en general: lenguajes de programación,
iniciativas,&#8230;</p>

<p>En varios de sus podcasts, y probablemente en varios de sus posts, Scott dice
que uno de los libros que más recomienda es <a href="http://www.amazon.es/gp/product/B00OXYQR38/">El marciano</a>, que es un libro
que le encanta. No creo que se lleve ninguna comisión por hacer publicidad,
pero si alguien como Scott recomienda una y otra vez un libro, será por algo.
Además, es un libro no técnico, por lo que me serviría para desconectar un poco
en vacaciones.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Al estar tan recomendado, esperaba una novela muy bien escrita. Según Scott, es
una novela de ciencia ficción, pero que es mucho más de ciencia que de ficción,
de hecho, con el estado actual de la tecnología, se podría dar la situación
perfectamente. Lo único que quizá no se ha invertido el tiempo y el dinero en
hacerlo realidad, pero podría serlo.</p>

<h2>Qué encontre</h2>

<p>Evidentemente, encontré todo lo que esperaba. Una novela de ciencia ficción, con
más ciencia que ficción, describiendo una situación que podría ser totalmente
cierta actualmente. Una novela magníficamente escrita, con muchos tecnicismos,
llena de vocabulario aeroespacial, describiendo personalidades muy distintas,
pero que el autor usa inteligentemente.</p>

<h2>Conclusiones</h2>

<p>Sin duda, una novela a recomendar. Si te gusta el espacio, si te gusta la ciencia,
y si te gusta la ficción; ésta es una novela para tí. O película, porque mientras
estaba a mitad del libro, me entero de que van a <em>sacar</em> la película y que ya hay
disponible algún <a href="https://www.youtube.com/watch?v=ej3ioOneTy8">trailer</a>. Así que eso me animó a terminarme antes aún el
libro, a devorarlo en vacaciones.</p>

<p>Aunque la situación podría darse hoy en día, también hay que hacer un acto de fe
para creerse todo lo que cuenta. En muchas ocasiones, el protagonista describe
procesos químicos, o físicos, que pueden funcionar por casualidad, pero que al
final, por <em>necesidades del guión</em>, terminan funcionando. No son situaciones
increíbles, pero sí que uno tiene que relajarse un poco y creer en la fortuna
del protagonista.</p>

<h2>Qué he aprendido</h2>

<p>No es que pueda sacar lecciones aprendidas, como si fuera un libro técnico
describiendo un proceso o una tecnología, pero sí que he aprendido un montón
de cosas sobre Marte: lugares, condiciones en la superficie, cómo viajar al
planeta, cómo funcionan las comunicaciones, un poco sobre viajes
interplanetarios, cómo funciona la NASA por dentro. Aunque sé que es una novela,
no me lo tengo que tomar todo al pie de la letra.</p>

<h2>Recursos relacionados</h2>

<ul>
<li><a href="http://www.hanselminutes.com/">Hanselminutes podcast</a></li>
<li><a href="http://www.amazon.es/gp/product/B00OXYQR38/">El marciano</a>, de Andy Weir, o en versión original: <a href="http://www.amazon.com/The-Martian-Novel-Andy-Weir-ebook/dp/B00EMXBDMA">The Martian</a></li>
<li><a href="https://www.youtube.com/watch?v=ej3ioOneTy8">Trailer de The Martian</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla no técnica: How to learn anything... fast]]></title>
    <link href="http://rchavarria.github.io/blog/2015/08/30/how-learn-anything-fast/"/>
    <updated>2015-08-30T19:09:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/08/30/how-learn-anything-fast</id>
    <content type="html"><![CDATA[<p>En los trabajos creativos, como en el desarrollo de software, la capacidad para
aprender es un elemento diferenciador. A mí me encanta aprender. Cualquier
cosa. Aunque normalmente siempre elijo temas relacionados con la ciencia,
matemáticas, juegos de ingenio o, cómo no, el desarrollo de software. Cuando vi
el título de la charla (<a href="https://www.youtube.com/watch?v=EtJy69cEOtQ">How to learn anything&#8230; fast</a>) me interesó
bastante. ¿Aprender cualquier cosa rápidamente?. ¡Ya me ha cazado!.</p>

<p>En esta charla, <a href="http://joshkaufman.net/">Josh Kaufman</a> indica 5 pasos para aprender cualquier cosa en 20
horas. Típicamente se acepta que para dominar una habilidad, para ser maestro
en algún arte, hacen falta <strong>10.000 horas de práctica deliberada</strong> en esa habilidad
o arte. Josh dice que no tenemos que ir tan lejos, que con <strong>20 horas podemos ser
suficientemente competentes</strong> en cualquier cosa que nos propongamos.</p>

<!-- more -->




<iframe width="560"
        height="315"
        src="https://www.youtube.com/embed/EtJy69cEOtQ"
        frameborder="0"
        allowfullscreen></iframe>


<h2>Pasos</h2>

<ol>
<li>Decidir <strong>qué</strong> aprender.</li>
<li><strong>Dividir</strong> aquello que queremos aprender en habilidades más pequeñas y que
puedan ser practicadas de forma independiente, e identificar aquellas
habilidades más importantes, aquellas habilidades esenciales que te van a
permitir aprender lo que quieres.</li>
<li><strong>Investigar</strong> esas habilidades esenciales. Investiga lo justo y necesario para
saber las mejores formas de realizar las habilidades. Elige de 3 a 5
recursos y pasa rápido por ellos, no profundices (en esta fase) en ellos, ya lo
harás cuando practiques. No uses esta fase para procrastinar, para retrasar el
aprendizaje.</li>
<li>Hacer fácil la práctica. <strong>Elimina distraciones</strong> (TV, móvil, internet,
familiares,&#8230;), elimina fricciones, reduce el esfuerzo de comenzar a
practicar, que sea fácil ponerte a ello.</li>
<li>Antes de comenzar, <strong>comprometerse</strong> a realizar al menos 20 horas de práctica
deliberada y enfocada, sin distracciones. Con este compromiso se trata de
eliminar la frustración de todo comienzo, donde somos patéticos con la nueva
habilidad, pero que después de unas prácticas deliberadas, podremos comprobar
nuestro avance.</li>
</ol>


<h2>Conclusión</h2>

<p>Bueno, no creo que 20 horas sean suficientes para aprender <em>cualquier</em> cosa.
Creo que hay materias, habilidades, que necesitan más que eso. Yo no me tomo al
pie de la letra lo que afirma Josh, pero creo que parte de razón sí que tiene.
Puede que 20 horas no sean suficientes para dominar una materia, pero los
consejos que encontramos en esta charla sí me parecen fundamentales para
aprender cualquier cosa, específicamente dividir en partes esenciales aquello
que queremos aprender, eliminar distracciones y fricción y comprometernos con
nosotros mismos a realizar un mínimo de horas de práctica deliberada y
enfocada.</p>

<p>En todo el proceso, echo de menos la recogida de feedback y la medida del
progreso. Quizá el autor lo ha diseñado así para mantener el proceso lo más
simple y más corto posible. Pero aún así, yo añadiría alguna forma de saber si
al final de todo el proceso he llegado donde quería.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes to a software team leader]]></title>
    <link href="http://rchavarria.github.io/blog/2015/08/23/notes-software-team-leader/"/>
    <updated>2015-08-23T18:16:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/08/23/notes-software-team-leader</id>
    <content type="html"><![CDATA[<h5>de Roy Osherove</h5>

<p><img class="left" src="https://s3.amazonaws.com/titlepages.leanpub.com/teamleader/large?1438389048" width="200" height="260" title="Notes to a software team leader" ></p>

<h2>Por qué lo he leído</h2>

<p>Ya tengo unos años de experiencia en esto de desarrollar software. No me veo
capaz todavía de liderar un gran equipo de desarrollo, pero me siento más
inclinado hacia un liderazgo técnico que un liderazgo <em>de gestión</em>. Así que,
¿por qué no aprender un poco sobre un rol que tengo ganas de hacer?</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>El nombre del autor me sonaba de algo, no sé exactamente de qué, pero no recuerdo
haber leído algún otro libro suyo. Pero me sonaba que era un autor muy práctico,
con muchísima experiencia en la industria del software, por lo que esperaba un
libro de lleno de vivencias y experiencias. Quizá una historia que guiara al lector
por el camino de crear un equipo autoorganizado (que está tan de moda ahora con
las metodologías ágiles).</p>

<h2>Qué encontré</h2>

<p>Encontré una descripción de las fases en las que se puede encontrar un equipo de
desarrollo, bueno, la visión del autor, pero algo es algo. El libro también está
lleno de ejemplos y consejos sobre cómo mejorar el equipo, cómo hacer que
miembros de un equipo mejoren en su carrera profesional.</p>

<p>También, una sección del libro está dedicada a <em>testimonios</em> de absolutos expertos
en la materia. Estos últimos capítulos están llenos de experiencias reales y de
consejos de gente brillante y con una ingente cantidad de experiencia en el
desarrollo de software.</p>

<h2>Conclusiones</h2>

<p>El libro consta de varias partes. Comienza describiendo las fases en las que se
puede encontrar un equipo de desarrollo, y cómo avanzar de una a otra, hasta
conseguir el equipo perfecto.</p>

<p>Es un libro muy <em>buen-rollista</em>, tanto que a veces da la impresión de ser un
libro de autoayuda. Pero el libro está lleno de consejos super útiles. Quizá
se echa de menos la parte contraria, por ningún lado se encuentra cómo arreglar
problemas dentro del equipo. Supongo que no era el objetivo del libro.</p>

<p>La última sección del libro, la dedicada a los testimonios, tiene muchísimo
valor. Los mejores de los mejores ponen su granito de arena en el libro y
dedican unos consejos al lector que de otra forma sería imposible recopilar.</p>

<p>Si lo que te interesa es el aspecto técnico del desarrollo, éste puede ser un
libro para ti. Puedes leer mis notas en
<a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/notes-software-team-leader-by-roy-osherove.markdown">Notas sobre Notes to a software team leader</a>.</p>

<h2>Qué he aprendido</h2>

<ul>
<li>Usar la autoridad debe ser el último recurso. Ayudar a cada uno a encontrar
su camino ayuda a que ambas partes ganen.</li>
<li>Comunicación y traducción de información son habilidades críticas de un líder.</li>
<li>Necesitas discutir, influenciar, negociar y no decirle a la gente lo que debe
hacer.</li>
<li>Dar feedback es una técnica muy efectiva, pero debe ser de confianza, concreto,
constructivo, e incluir contexto.</li>
<li>Un líder técnico debería programar, aunque no mucho, pero sobre todo debería
practicar pair programming, design y code reviews y también debería buscar que
no se genere demasiada deuda técnica.</li>
</ul>


<h2>Frases que me gustaría recordar</h2>

<ul>
<li>El autor identifica tres formas de liderar un equipo: comando y control, coach
y facilitador. Simétricamente, identifica tres fases en las que se puede
encontrar un equipo: supervivencia, aprendizaje, auto-organización.</li>
<li>Para salir de la fase de supervivencia, hay que preocuparse de una cosa: crear
tiempo libre (<em>slack time</em>) como un estándar en tu flujo de trabajo.</li>
<li>Esto es por lo que te pagan: para hacer las cosas mejor y de la forma más
profesional, clara y transparente posible. Te pagan por llevar al equipo a un
nivel donde hacen las cosas profesionalmente, para llevar al equipo al próximo
nivel de rendimiento y profesionalismo. Para ello, quizá tengas que tomar
algunos riesgos.</li>
<li>Para salir del modo de supervivencia, debes pasar al menos el 50% del tiempo
con ellos. Lo primero que hay que hacer es una inversión de tiempo, y el que
debe comenzar eres tú (no reuniones, quizá horas extra,&#8230;)</li>
<li>El aprendizaje más rico y verdadero es cuando damos un salto en el conocimiento,
no estando seguros en la parte plana del gráfico (hace referencia a un gráfico
de aprendizaje de planicies seguidos de saltos, como escalones).</li>
<li>Sumergirse en una nueva cultura de formas de trabajar es dar un salto
cualitativo de conocimiento. Jugar a lo seguro no lo es.</li>
<li>Crear un <em>lenguaje de compromiso</em> es un paso esencial para que los miembros
del equipo mantengan sus promesas con los demás.</li>
<li>Cuando la gente se te acerque con un problema, rétale a que lo resulva por
sí mismo, pero que sepa que te tiene a tí como mentor, pero déjale claro que
tú no vas a solucionar el problema.</li>
<li>Miembros del equipo se pueden llevar deberes a casa, pero tiene que ser
voluntario, no lo deben tomar como trabajo.</li>
<li>Los problemas más difíciles de resolver nunca son técnicos, suelen involucrar
a las personas.</li>
<li>Un buen líder técnico mantiene siempre un ojo puesto en la calidad. Cuando el
equipo crece, las personas de más confianza cumplen parte de esta misión.</li>
<li>Una buena táctica para tener un equipo feliz es animar al equipo a usar un
período de tiempo semanal para aprender nuevas habilidades o tecnologías.</li>
<li>Las ideas de cambio deberían venir tanto de tí como de miembros del equipo.</li>
</ul>


<h2>Referencias y enlaces relacionados</h2>

<ul>
<li><a href="https://leanpub.com/teamleader">Notes to a software team leader</a> en Lean Pub</li>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/notes-software-team-leader-by-roy-osherove.markdown">Notas que he tomado sobre el libro</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla técnica: A short history of Software Engineering]]></title>
    <link href="http://rchavarria.github.io/blog/2015/08/16/history-software-engineering/"/>
    <updated>2015-08-16T21:42:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/08/16/history-software-engineering</id>
    <content type="html"><![CDATA[<p>Estas son las notas de una charla técnica titulada
<a href="https://www.youtube.com/watch?v=9IPn5Gk_OiM">A short history of software engineering</a>, por <a href="https://twitter.com/nusco">Paolo Perrota</a>. La charla,
creo que la encontré por un tweet de <a href="https://twitter.com/jbrains">J.B.Rainsberger</a> recomendándola.</p>

<p>La charla trata sobre la historia de la Ingeniería del Software. Un poco lo
de siempre, que la Ingeniería de Software quizá no debiera llamarse
<em>Ingeniería</em>, similitudes y diferencias con otras ingenierías,&#8230; Pero Paolo
hace una presentación muy amena y divertida, sin duda merece la pena ver la
charla para saber un poco más sobre nuestra pasión: el desarrollo de
software.</p>

<!-- more -->




<iframe width="560"
        height="315"
        src="https://www.youtube.com/embed/9IPn5Gk_OiM"
        frameborder="0"
        allowfullscreen></iframe>


<h2>Notas</h2>

<p><strong>1968</strong> fue la primera vez que alguien (la OTAN) dijo que el software se
entregaba tarde, fuera de presupuesto, con baja calidad y que no hacía
exactamente lo que tenía que hacer (es decir, que contenía bugs).</p>

<p>La solucion propuesta fue una nueva disciplina, que llamaron <strong>Ingeniería
del Software</strong>, para tratar de salir de esa crisis de proyectos fallidos. Despues
de más de 20 años, decidieron que ya no era una crisis, que era el estado del
arte, que una crisis no dura 20 años.</p>

<p>La Ingeniería del Software trata de solucionar 3 problemas:</p>

<ol>
<li><strong>Eliminar complejidad interna</strong>: si no hay código fuente, no hay complejidad
interna, no hay problema. De ahí que hayan intentado crear <em>lenguajes</em> con los
que no se necesitarían progrmadores. Empezaron diciéndolo en los años 50, con
Cobol. Lo vendían como que era un lenguaje que hasta los managers podrían
entender. El problema es que el desarrollo de software no es solamente
<strong>complejidad accidental</strong> (no toda la complejidad es introducida por los
programadores), sino también <strong>complejidad esencial</strong>, existe en el problema
mismo.</li>
<li><strong>Eliminar errores humanos</strong>: intentaron utilizar las matemáticas, para probar
que el software era correcto. Y vinieron los <em>formal methods</em>, pero es muy caro.
Aparentemente, un monton de matemáticas no pueden reemplazar los tests. Las
matemáticas no pueden solucionar todos los problemas humanos.</li>
<li><strong>Eliminar variabilidad en el proyecto</strong>: otras ingenierías lo hacen: Ingeniería
Civil, Ingeniería mecánica,&#8230; En Ingeniería Civil dicen que hay dos tipos de
proyectos: los repetibles y los únicos. Adivinas qué tipo de proyectos no van
tan bien, adivinas qué tipo se pasan de presupuesto. Si vas a hacer algo único,
va a llover dentro (anécdota de aquella casa única que hicieron, con tantas
goteras).</li>
</ol>


<p>En Ingeniería Civil hay dos fases: proyecto y construcción. Similarmente, en
Ingeniería del Software podríamos traducirlas a: diseño e implementación. ¡Pues
no! Las fases, en realidad, son: desarrollo y compilación.</p>

<p>Las economías de ambas ingenierías son muy distintas. En la charla hace
referencia a otra charla, creo que es ésta:
<a href="https://www.youtube.com/watch?v=zDEpeWQHtFU">Real Software Engineering, de Glenn Vaderburg</a>, donde habla precisamente de
éstas diferencias económicas. Mientras que en Ingeniería Civil el mayor coste
es el de construcción, en Ingeniería del Software, el mayor coste es el
desarrollo, el diseño.</p>

<p>Si en un proyecto software tienes 100 programadores, por analogías anticuadas,
quizá creas que tienes 100 albañiles, pero en realidad es como si tuvieras 100
arquitectos para diseñar el mismo edificio. ¿A que eso ya parece algo más
complejo de gestionar?</p>

<p>A continuación, pasa a hablar de metodologías (RUP, DSDM, Prince2, CMMI,&#8230;).
Al final, no pudieron eliminar ninguna de las 3 cosas. Pero, y si en lugar de
eliminarlas, ¿las aceptamos?</p>

<p>Las metodologías Agile se basan en 3 puntos:</p>

<ol>
<li>Observa, mira alrededor</li>
<li>Haz una hipótesis</li>
<li>Haz un experimento</li>
</ol>


<p>Estos 3 puntos no son más que el <strong>método científico</strong>. Por lo que el desarrollo
de software es empírico, no es <em>Ingeniería</em>.</p>

<h2>Conclusiones</h2>

<p>Esta es una de esas charlas en la que se discute la idea sobre si la Ingeniería
del Software debería llamarse Ingeniería o no. La idea propuesta aquí es que
no, pero justo el argumento que da el ponente para ello es uno de los argumentos
que veo yo de por qué la Ingeniería del Software sí es una Ingeniería. Paolo
dice que las bases de Agile son las mismas reglas que el método científico, por
lo que el desarrollo de software es empírico, y que por eso no es Ingeniería.
Pero yo no concibo un ingeniero sin un lado científico. ¿Qué es la Ingeniería si
no identificar problemas (observar), idear una solución (hipótesis) y construirla
(experimento)?.</p>

<h2>Referencias</h2>

<ul>
<li><a href="https://www.youtube.com/watch?v=9IPn5Gk_OiM">A short history of software engineering</a></li>
<li><a href="https://www.youtube.com/watch?v=zDEpeWQHtFU">Real Software Engineering</a>, de Glenn Vanderburg</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Navegando el código fuente con Vim]]></title>
    <link href="http://rchavarria.github.io/blog/2015/08/09/navegando-codigo-fuente-vim/"/>
    <updated>2015-08-09T22:16:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/08/09/navegando-codigo-fuente-vim</id>
    <content type="html"><![CDATA[<p>Últimamente se están popularizando muchos editores de código (Atom, Brakets,
Sublime Text,&#8230;). Pero mucho antes que ellos existieron al menos otros dos:
Emacs y <a href="http://www.vim.org">Vim</a>. No se muy bien la razón, quizá fue simplemente por el placer
de aprender, pero me decidí a <a href="http://rchavarria.github.io/blog/2014/10/11/aprendiendo-vim">aprender a utilizar Vim</a>. Ya llevo un tiempo
con ello, aunque el aprendizaje va despacio.</p>

<p>Hay muchas cosas que me encantan de Vim, pero echo de menos algunas cosas que
me dan ciertos IDEs: refactorizaciones sencillas, búsqueda en múltiples
ficheros, integración con otras herramientas,&#8230; En este post voy a contar
cómo se puede <strong>solucionar el problema de la navegación de código</strong>.</p>

<!-- more -->


<p>Vim lo soluciona con un fichero de <em>tags</em>. Dentro de un lenguaje de programación,
un tag es simplemente el nombre de una función, método, clase,&#8230; Cada tag va
acompañado de una referencia para localizar dónde aparece: básicamente fichero y
número de línea. Con la herramienta <a href="http://ctags.sourceforge.net">ctags</a> es posible generar un fichero que
sirve a Vim a conocer todas las tags de nuestro proyecto, y mediante comandos de
Vim, podemos movernos entre ellas de un fichero a otro.</p>

<h2>Uso de la herramienta <code>ctags</code></h2>

<p>Lo primero es instalar la herramienta. Para Linux es tan sencillo como ejecutar
un simple comando. Para otros sistemas operativos es también bastante sencillo,
pero se recomienda visitar la página del proyecto <a href="http://ctags.sourceforge.net">Exuberant Ctags</a> para
conocer más detalles.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install exuberant-ctags
</span></code></pre></td></tr></table></div></figure>


<p>El siguiente paso es generar el fichero de tags de nuestro proyecto:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /home/rchavarria/my-super-interesting-project
</span><span class='line'><span class="nv">$ </span>ctags -R .
</span></code></pre></td></tr></table></div></figure>


<p>Y por último, indicar a Vim dónde está el fichero de tags que queremos usar.
Para ello, una vez el editor está abierto, introducir el comando:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>:set <span class="nv">tags</span><span class="o">=</span>/path/to/tags/file
</span></code></pre></td></tr></table></div></figure>


<p>Para facilitar las cosas y no tener que recordar cómo cargar el fichero de tags
manualmente, es recomendable poner el comando anterior en el fichero <code>.vimrc</code>,
de forma que al abrir Vim cargue siempre el fichero de tags.</p>

<h2>Navegar</h2>

<p>Ahora, veamos cómo podemos movernos entre tags. Estos movimientos permiten
movernos dentro del mismo fichero, entre ficheros abiertos, o incluso ficheros
que no estén abiertos (pero están referenciados en el fichero de tags claro).</p>

<ul>
<li><code>CTRL + ]</code>: en modo normal, nos lleva a la definición del tag donde está el
cursor. Con el teclado español, para mostrar el carácter <code>]</code> es necesario pulsar
<code>AlgGr</code> + <code>]</code>, pero para ejecutar este comando de Vim no se debe pulsar <code>AltGr</code>,
es suficiente con pulsar la tecla que contiene los carácteres <code>+</code>, <code>*</code> y <code>]</code>.</li>
<li><code>CTRL + t</code>: en modo normal, te lleva de vuelta al punto antes de navegar al tag.</li>
<li><code>CTRL + w</code> + <code>CTRL + ]</code>: en modo normal, divide la pantalla horizontalmente y
abre el fichero donde se encuentra la definición del tag.</li>
<li><code>:tag &lt;tag name&gt;</code> para ir directamente a la definición de una tag cualquiera</li>
<li><code>:tnext</code> y <code>:tprevious</code> (<code>:tn</code> y <code>:tp</code>) te llevan a la tag siguiente o anterior.
hay quien recomienda mapear estos comandos a otra secuencia de carácteres, como
por ejemplo: <code>]t</code> y <code>[t</code>.</li>
<li><code>:ltag</code> carga las tags en la ventana de lista de localizaciones (como <code>:ls</code>
cuando lista los búfferes abiertos)</li>
<li><code>:lopen</code> abre dicha ventana</li>
</ul>


<h2>Referencias y enlaces relacionados</h2>

<ul>
<li><a href="http://andrewradev.com/2011/06/08/vim-and-ctags">Vim and Ctags</a>, fenomenal artículo que cubre casi todo lo relacionado con
Vim y ctags.</li>
<li><a href="http://rchavarria.github.io/blog/2014/10/11/aprendiendo-vim">Aprendiendo Vim</a>, en este mismo blog</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Estándares de código en tu equipo]]></title>
    <link href="http://rchavarria.github.io/blog/2015/08/02/estandares-codigo-equipo/"/>
    <updated>2015-08-02T21:58:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/08/02/estandares-codigo-equipo</id>
    <content type="html"><![CDATA[<p>¿Has conducido alguna vez en el extranjero? Si has ido de acompañanate, ¿has
prestado atención a la carretera?. Es todo tan distinto, pero a la vez es
prácticamente igual a conducir en tu propio país (quitando alguna excepción
como Inglaterra o Japón, que lo hacen por la izquierda). Seguro que encuentras
los mismos elementos: semáforos, cruces, rotondas, carreteras de doble sentido,
autovías,&#8230; y <strong>normas</strong>. Las normas de circulación no son las mismas en todos
los lugares, pero podríamos encontrar algunas normas básicas que sí lo son.
Esas normas básicas son las que nos permiten conducir en otros países con una
cierta confianza.</p>

<p>Cuando escribimos código dentro de un equipo de desarrollo ocurre algo similar.
Cada uno tenemos nuestro estilo a la hora de escribir código: nombrado de
variables, espaciado, paréntesis, indentación,&#8230; Si tuviéramos total libertad
para desarrollar como nos apeteciera, el trabajo en equipo sería mucho más
duro, ya que tendríamos que <em>entender</em> el estilo de cada uno de nuestros
compañeros. Por curiosidad, ¿no te ha pasado nunca que has leído una clase e
inmediatamente sabes quién la ha escrito? Para evitar esta sobrecarga conviene
tener ciertas normas, unas <strong>reglas</strong> básicas de cómo escribir código, para
que todos los miembros del equipo escriban código acorde a un cierto <em>estándar</em>.</p>

<p>Aquí es donde aparece <a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP_CodeSniffer</a>, una herramienta de análisis estático
de código PHP (JavaScript y CSS) que genera informes sobre qué partes del
código de nuestro equipo violan las reglas del estándar que previamente definió
el equipo.</p>

<!-- more -->


<p><img class="center" src="http://rchavarria.github.io/images/2015/ruler.png"></p>

<h2>Reglas</h2>

<p>Cada una de esas reglas puede hacer referencia a aspectos muy distintos de
nuestro código: indentación con espacios o tabuladores, apertura de llaves (<code>{</code>)
en la misma línea o en la siguiente, sintaxis a la hora de manipular arrays
(<code>array()</code> o <code>[]</code>),&#8230; Las reglas a utilizar deben ser consensuadas en el equipo
y suelen estar definidas en un fichero llamado <code>ruleset.xml</code> que se pasará como
parámetro a la herramienta <code>phpcs</code>. Aquí nos estamos centrando en código PHP,
pero también se puede hacer análisis de código JavaScript y CSS.</p>

<p>A la hora de poder definir un conjunto de reglas a utilizar dentro del equipo,
sería conveniente tener una lista de todas ellas y una breve descripción de cada
una para facilitar la discusión y la toma de decisiones. Lamentablemente, la
documentation de la herramienta no proporciona esa lista, pero existe algunas
posibilidades que nos pueden facilitar el trabajo.</p>

<h3>Opción <code>-s</code></h3>

<p>El comando <code>phpcs</code> se puede ejecutar con la opción <code>-s</code>, con la cual la
herramienta indica qué regla (o <em>sniff</em>, como lo llama PHP_CodeSniffer) estamos
incumpliendo en cada violación que aparece en el informe de la herramienta.
El siguiente comando ejecuta <code>phpcs</code> mostrando el progreso (<code>-p</code>), analizando
solo archivos con la extensión <code>.php</code> y por supuesto que nos muestre las
reglas que no se cumplen (<code>-s</code>), como por ejemplo
<code>Generic.Commenting.Todo.TaskFound</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>phpcs -p -s --extensions<span class="o">=</span>php &lt;directory or file&gt;
</span><span class='line'>
</span><span class='line'>...E...E....W.....W..E.............W........................  60 / 723 <span class="o">(</span>8%<span class="o">)</span>
</span><span class='line'>.......................W.................................... 120 / 723 <span class="o">(</span>17%<span class="o">)</span>
</span><span class='line'>.............................W..W....E..................E..E 180 / 723 <span class="o">(</span>25%<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>----------------------------------------------------------------------
</span><span class='line'> 44 | ERROR   | Function<span class="err">&#39;</span>s cyclomatic complexity <span class="o">(</span>21<span class="o">)</span> exceeds allowed
</span><span class='line'>    |         | maximum of 20
</span><span class='line'>    |         | <span class="o">(</span>Generic.Metrics.CyclomaticComplexity.MaxExceeded<span class="o">)</span>
</span><span class='line'>----------------------------------------------------------------------
</span><span class='line'> 60 | ERROR | <span class="o">[</span>x<span class="o">]</span> Line indented incorrectly; expected at least 2 spaces,
</span><span class='line'>    |       |     found 0 <span class="o">(</span>Generic.WhiteSpace.ScopeIndent.Incorrect<span class="o">)</span>
</span><span class='line'>----------------------------------------------------------------------
</span><span class='line'> 59 | WARNING | The method parameter <span class="nv">$userId</span> is never used
</span><span class='line'>    |         | <span class="o">(</span>Generic.CodeAnalysis.UnusedFunctionParameter.Found<span class="o">)</span>
</span><span class='line'>----------------------------------------------------------------------
</span><span class='line'> 61 | WARNING | Comment refers to a TODO task <span class="s2">&quot;Improve readability&quot;</span>
</span><span class='line'>    |         | <span class="o">(</span>Generic.Commenting.Todo.TaskFound<span class="o">)</span>
</span><span class='line'>----------------------------------------------------------------------
</span><span class='line'>
</span><span class='line'>... output has been truncated
</span><span class='line'>Time: 2 mins, 9.46 secs; Memory: 25.5Mb
</span></code></pre></td></tr></table></div></figure>


<h3>Código fuente</h3>

<p>Al final, la documentación más fiable, más actualizada, más detallada y más de
todo es el código fuente. Puede asustar un poco tener que mirar el código fuente,
pero <a href="https://github.com/squizlabs/PHP_CodeSniffer">el código de PHP_CodeSniffer</a> es código abierto y se puede navegar en
Github de forma sencilla. Además, no tendrás que consultarlo de arriba a abajo,
aquí encontrarás unas pistas de donde encontrar las reglas.</p>

<p>El código está organizado en varios directorios, en <code>CodeSniffer/Standards</code>
encontraremos el código fuente que nos interesa. Cada subdirectorio
contiene las reglas definidas por cada estándar: Generic, PEAR, PSR1, PSR2,&#8230;
Dentro de cada uno de estos directorios, encontramos un fichero llamado
<code>ruleset.xml</code>, donde podemos encontrar las reglas importadas de aquellos
estándares que las definen. Por ejemplo, en el fichero <code>PSR2/ruleset.xml</code>
podemos encontrar:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;ruleset</span> <span class="na">name=</span><span class="s">&quot;PSR2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> <span class="nt">&lt;description&gt;</span>The PSR-2 coding standard.<span class="nt">&lt;/description&gt;</span>
</span><span class='line'> <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">&quot;tab-width&quot;</span> <span class="na">value=</span><span class="s">&quot;4&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'> <span class="c">&lt;!-- Include the whole PSR-1 standard --&gt;</span>
</span><span class='line'> <span class="nt">&lt;rule</span> <span class="na">ref=</span><span class="s">&quot;PSR1&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'> <span class="c">&lt;!-- The soft limit on line length MUST be 120 characters;</span>
</span><span class='line'><span class="c">      automated style checkers MUST warn but MUST NOT error at the soft limit. --&gt;</span>
</span><span class='line'> <span class="nt">&lt;rule</span> <span class="na">ref=</span><span class="s">&quot;Generic.Files.LineLength&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>   <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;lineLimit&quot;</span> <span class="na">value=</span><span class="s">&quot;120&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;absoluteLineLimit&quot;</span> <span class="na">value=</span><span class="s">&quot;0&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'> <span class="nt">&lt;/rule&gt;</span>
</span><span class='line'>
</span><span class='line'> <span class="c">&lt;!-- ... --&gt;</span>
</span><span class='line'>
</span><span class='line'> <span class="c">&lt;!-- Visibility MUST be declared on all methods. --&gt;</span>
</span><span class='line'> <span class="nt">&lt;rule</span> <span class="na">ref=</span><span class="s">&quot;Squiz.Scope.MethodScope&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'> <span class="c">&lt;!-- Method arguments with default values MUST go at the end of the argument list. --&gt;</span>
</span><span class='line'> <span class="nt">&lt;rule</span> <span class="na">ref=</span><span class="s">&quot;PEAR.Functions.ValidDefaultValue&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'> <span class="c">&lt;!-- ... --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/ruleset&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>En este fichero podemos ver que se importan todas las reglas definidas en el
estándar <em>PSR1</em> con <code>&lt;rule ref="PSR1"&gt;</code>. Y que se importan reglas individuales
de otros estándares, por ejemplo <code>&lt;rule ref="Squiz.Scope.MethodScope"/&gt;</code>. O que
incluso se pueden pasar parámetros a algunas reglas, como se hace con
<code>Generic.Files.LineLengh</code>.</p>

<h3>Guía definitiva</h3>

<p>Si con todo esto todavía no has dado con las reglas que quieres, o si necesitas
conocer alguna regla más en profundidad, podemos echar un vistazo a cómo se
generan las referencias de las reglas para poder incluirlas, excluirlas o
parametrizarlas en nuestro <code>ruleset.xml</code>.</p>

<p>Tomemos como ejemplo las reglas <em>Generic</em>, ya que son las más utilizadas, más
concretamente la regla <code>Generic.Files.LineLength</code>. Las reglas del estándar
<em>Generic</em> están definidas en el directorio: <code>CodeSniffer/Standards/Generic</code>,
y dentro de él, en el directorio <code>Sniffs</code>. El siguiente token, <code>Files</code>, indica
un nuevo subdirectorio dentro de <code>Sniffs</code> con el mismo nombre. Y por último,
<code>LineLength</code>, indica una clase PHP con ese mismo nombre más el sufijo <code>Sniff</code>.</p>

<p>Así pues, para la regla <code>Generic.Files.LineLength</code>, encontraremos una clase PHP en
<code>CodeSniffer/Standards/<strong>Generic</strong>/Sniffs/<strong>Files</strong>/<strong>LineLength</strong>Sniff.php</code></p>

<p>Otros ejemplos podrían ser:</p>

<ul>
<li><code>PEAR.Commenting.InlineComment</code>: clase <code>CodeSniffer/Standards/<strong>PEAR</strong>/Sniffs/<strong>Commenting</strong>/<strong>InlineComment</strong>Sniff.php</code></li>
<li><code>PSR1.Classes.ClassDeclaration</code>: clase <code>CodeSniffer/Standards/<strong>PSR1</strong>/Sniffs/<strong>Classes</strong>/<strong>ClassDeclaration</strong>Sniff.php</code></li>
<li><code>Zend.Debug.CodeAnalyzer</code>: clase <code>CodeSniffer/Standards/<strong>Zend</strong>/Sniffs/<strong>Debug</strong>/<strong>CodeAnalyzer</strong>Sniff.php</code></li>
</ul>


<p>Pero aún hay más. En el <code>ruleset.xml</code> de ejemplo, veíamos cómo se pasaban
parámetros a la regla <code>Generic.Files.LineLength</code>. Ahora ya conocemos la clase
PHP que contiene el código que ejecuta esa regla:
<code>CodeSniffer/Standards/Generic/Sniffs/Files/LineLengthSniff.php</code>. Dicha clase
tiene dos variables públicas: <code>lineLimit</code> y <code>absoluteLineLimit</code>. Que precisamente
son los parámetros que se pueden configurar. Así pues, variables públicas en
las clases <code>*Sniff</code> no son más que posibles parámetros a usar en el
<code>ruleset.xml</code> de nuestro proyecto.</p>

<h3>Referencias y enlaces relacionados</h3>

<ul>
<li>Página de <a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP_CodeSniffer</a></li>
<li><a href="http://rchavarria.github.io/blog/2014/05/05/mejora-continua-y-analisis-estatico-de-codigo">Mejora contínua y análisis estático de código</a> en este mismo blog</li>
<li><a href="http://stackoverflow.com/questions/16427207/php-codesniffer-rules-documentation">Documentación de las reglas de PHP_CodeSniffer</a> en Stack Overflow</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Análisis de consumo de memoria en tests de AngularJS]]></title>
    <link href="http://rchavarria.github.io/blog/2015/07/26/consumo-memoria-tests-angularjs/"/>
    <updated>2015-07-26T22:10:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/07/26/consumo-memoria-tests-angularjs</id>
    <content type="html"><![CDATA[<p>Hoy en día no concibo desarrollar una aplicación sin una batería de tests
automáticos (unitarios, de integración, end-to-end, del tipo que sean).
Da igual el tamaño del proyecto. Pero además, si se trata de una aplicación
JavaScript, tener tests es una obligación.</p>

<p><a href="http://angularjs.org">AngularJS</a> es un framework que pone las cosas fáciles para comenzar a escribir
tests. Incluso la propia aplicación de ejemplo ya viene preparada para
escribir tests con <a href="https://jasmine.github.io">Jasmine</a> y ejecutarlos con <a href="https://karma-runner.github.io">KarmaJS</a> en tu navegador.</p>

<p>Si el proyecto es muy grande, llegará un punto en el que haya cientos de tests
automáticos, quizá miles, por lo que ejecutar todos los tests en el navegador
se puede considerar como la ejecución de una gran aplicación. Por lo tanto
habrá que tener en cuenta aspectos de rendimiento, consumo de memoria (y
liberación de la misma), posibles <em>memory leaks</em>,&#8230;</p>

<!-- more -->


<p>Eso justo es lo que está pasando en mi equipo. Nuestro proyecto está en un
estado avanzado de desarrollo, y comenzamos a tener un número considerable de
tests automáticos en la parte cliente. Para ejecutar los tests en el servidor
de integración contínua utilizamos <a href="http://phantomjs.org">PhantomJS</a>. Pero parece ser que PhantomJS
tiene algunos problemillascon la gestión de memoria, y hemos sobrepasado su
límite. PhantomJS no puede ejecutar toda nuestra batería de tests de una sola
vez. Así que nos estamos planteando si quizá son nuestros tests quienes tienen
algún problema con la memoria, quizá podríamos hacer algo para no consumir
tantos recursos.</p>

<h2>Hipótesis</h2>

<p>Una idea para solucionarlo pasa por reducir la cantidad de código JavaScript a
cargar y ejecutar en cada test. ¿Qué tal si en lugar de cargar el módulo
principal de AngularJS completo (donde está contenida toda nuestra aplicación),
cargamos solamente aquel módulo que contenga la funcionalidad a probar en el
test?</p>

<p>Pero esto es sólo una hipótesis, no vamos a modularizar toda la aplición en
módulos minúsculos sin tener ningún dato sobre el que apoyarnos. Por lo tanto,
vamos a realizar la siguiente prueba: añadiremos un nuevo módulo, minúsculo. En
este módulo crearemos una factoría, con un método al que llamaremos tantas veces
sea necesario para hacer que los tests consuman una cantidad apreciable de
memoria y CPU. Ejecutaremos dos baterías de tests, con los mismos tests: una
cargando el módulo que contiene toda la aplicación, otra cargando solamente el
módulo pequeño.</p>

<h2>Aplicación completa</h2>

<p><img class="center" src="http://rchavarria.github.io/images/2015/memory-benchmark-big.thumbnail.png"></p>

<p><a href="http://rchavarria.github.io/images/2015/memory-benchmark-big.png">Ver la imagen en grande</a></p>

<p>Podemos apreciar como la ejecución de la batería de tests dura aproximadamente
unos 8 segundos (desde 4.5s hasta 12.25s). En cuanto a consumo de memoria, el
rango va de un mínimo de 10Mb a un máximo de 108Mb.</p>

<p>Se puede apreciar cómo el consumo de memoria va dibujando unos dientes de sierra.
Éste dibujo es muy típico en los análisis de memoria (hay momentos en los que
se reserva memoria y el consumo aumenta, pasado un pequeño espacio de tiempo,
objetos en memoria se dejan de usar y ésta es liberada, que es cuando la gráfica
baja de golpe). Pero la mala noticia es que el consumo va cada vez a más, no se
libera la misma cantidad que se reserva, lo que indica que hay muchas referencias
a objectos que no se eliminan correctamente. Incluso después de haber terminado
la ejecución de los tests, el navegador no considera que deba liberar memoria.</p>

<h2>Módulo pequeño</h2>

<p><img class="center" src="http://rchavarria.github.io/images/2015/memory-benchmark-small.thumbnail.png"></p>

<p><a href="http://rchavarria.github.io/images/2015/memory-benchmark-small.png">Ver la imagen en grande</a></p>

<p>El tiempo de ejecución de esta batería de tests es de 1s, de 3.25s a 4.25s,
(esta gráfica muestra intervalos de 500ms). El consumo de memoria sube
rápidamente, con un mínimo de 11Mb y un máximo de 42.5Mb.</p>

<p>Esta vez, casi no se aprecian los dientes de sierra, quizá porque la ejecución
es mucho más rápida y el navegador no considera que haya que liberar memoria de
forma agresiva durante el tiempo que dura la ejecución. Aquí se puede observar
claramente cómo después de que los tests hayan terminado, pasado un tiempo, el
navegador es capaz de liberar prácticamente toda la memoria consumida por los
tests. Esto es muy buena señal.</p>

<h2>Conclusiones</h2>

<p>Con este pequeño análisis queda bastante claro que tener módulos pequeños hace
que nuestros tests se ejecuten mucho más rápido (el tiempo de ejecución baja de
8s a 1s) y consuman mucha menos memoria (el máximo baja de 108Mb a 42.5Mb).
También se puede deducir que en módulos pequeños hay un riesgo más bajo de sufrir <em>memory leaks</em>.</p>

<p>En este caso, al usar un módulo muy pequeño y no observar <em>memory leaks</em>, se
deduce que los <em>leaks</em> que se observan en la aplicación en su conjunto deben de
estar en otro módulo. Esto nos ayuda a aislar partes de nuestra aplicación y
poder reducir la cantidad de código a analizar para encontrar el problema.</p>

<p>Estábamos en lo cierto con nuestra hipótesis, módulos pequeños hacen que los
tests sean más rápidos y más eficientes en el consumo de memoria. Por lo tanto,
parece buena idea <strong>modularizar una aplicación</strong> con un tamaño considerable, y al
ejecutar los tests <strong>cargar sólo los módulos necesarios</strong> para que se ejecute esa
suite de tests, no cargar módulos redundantes.</p>

<h2>Referencias</h2>

<p>En el artículo <a href="http://shyp.github.io/2015/07/13/speed-up-your-javascript-tests.html">Speed up JavaScript test time 1000x</a> podemos encontrar unos
cuantos consejos acerca de cómo hacer que nuestros tests JavaScript se ejecuten
mucho más rápido, ya sea una aplicación Angular o no.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript patterns]]></title>
    <link href="http://rchavarria.github.io/blog/2015/07/19/javascript-patterns/"/>
    <updated>2015-07-19T21:10:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/07/19/javascript-patterns</id>
    <content type="html"><![CDATA[<h5>de Stoyan Stefanov</h5>

<p><img class="left" src="http://akamaicovers.oreilly.com/images/9780596806767/lrg.jpg" width="250" height="328" title="JavaScript patterns" ></p>

<h2>Por qué lo he leído</h2>

<p>Cuando leí <a href="http://rchavarria.github.io/blog/2015/05/29/learning-javascript-design-patterns/">Learning JavaScript design patterns</a>, de Addy Osmany, me quedé con
ganas de más, me equivoqué de libro. El que realmente quería leerme para
aprender sobre patrones en JavaScript era éste. Pero me dejé llevar por la
<em>fama</em> de Addy.</p>

<p>El objetivo de leer estos dos libros era el de profundizar en el uso de patrones
en JavaScript, poder trasladar conocimientos adquiridos en Java, a JavaScript.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Esperaba que fuera un libro muy parecido al mítico <a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented-ebook/dp/B000SEIBB8">Design patterns</a>, como si
fuera un catálogo de patrones disponibles, con sus descripciones, situaciones
donde es recomendable usarlos y también, por qué no, ejemplos de proyectos
reales.</p>

<h2>Qué encontré</h2>

<p>Por supuesto, encontré muchos patrones, pero eso no es lo más llamativo.</p>

<p>El autor comenta varios aspectos del lenguaje que son cuanto menos, curiosos. No
sé si llegan al nivel de <a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript, the good parts</a>, pero deben de andar
cerca.</p>

<p>Además, alguno de los patrones difieren de la idea que yo tenía, son muy
distintos a patrones con el mismo nombre, pero en otros lenguajes de
programación.</p>

<h2>Conclusiones</h2>

<p>Junto con <a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript, the good parts</a>, considero que éste es un libro imprescindible
para cualquier desarrollador que quiera dominar el lenguaje.</p>

<p>Explica en profundidad algunos de los patrones más usados en todo tipo de
proyectos. Quizá, con el nuevo estándard recién aprobado, algunos de ellos
(como la <em>herencia por prototipos</em>) queden algo obsoletos, creo que es
un libro imprescindible para entender el lenguaje.</p>

<h2>Qué he aprendido</h2>

<p>Puedes consultar mis <a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/javascript-patterns-by-stoyan-stefanov.markdown">notas sobre el libro</a> si quieres ver todo lo que me
ha llamado la atención de el mismo. Pero destacaría lo siguiente:</p>

<ul>
<li>Una regla que se repite en muchos patrones: <strong>los miembros a compartir deben
ir en el prototipo, nunca en el <code>this</code></strong></li>
<li>Los constructors implícitamente devuelven <code>this</code>, incluso si no hay un
<code>return</code>, pero tu puedes devolver lo que quieras, incluso puedes redefinir el
constructor. Esto se hace, por ejemplo, en el patrón Singleton</li>
<li>En la declaración de una función, su definición también sufre <em>hoisting</em>, no
solo la declaración</li>
<li>Métodos clásicos de herencia y herencia de prototipos, aunque esto vaya a
cambiar con nuevas versiones del lenguaje, con la aparición de clases</li>
<li>Unas cuantas sugerencias para desplegar grandes aplicaciones: combinar scripts,
minificarlos, utilizar compresión de archivos, uso de cabeceras HTML, uso de
CDNs, dónde situar las etiquetas <code>&lt;script&gt;</code>, enviar en trozos grandes ficheros
HTML.</li>
</ul>


<h2>Recursos relacionados</h2>

<ul>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/javascript-patterns-by-stoyan-stefanov.markdown">notas sobre el libro</a></li>
<li><a href="http://rchavarria.github.io/blog/2015/05/29/learning-javascript-design-patterns/">Learning JavaScript design patterns</a>, libro de Addy Osmany</li>
<li><a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented-ebook/dp/B000SEIBB8">Design patterns</a>, libro de The Gang of Four</li>
<li><a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript, the good parts</a>, libro de Douglas Crockford</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla técnica: Therapeutic refactoring]]></title>
    <link href="http://rchavarria.github.io/blog/2015/07/12/charla-tecnica-therapeutic-refactoring/"/>
    <updated>2015-07-12T19:09:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/07/12/charla-tecnica-therapeutic-refactoring</id>
    <content type="html"><![CDATA[<p>Acabo de visualizar la charla <a href="https://www.youtube.com/watch?v=J4dlF0kcThQ">Therapeutical Refactoring</a>, de <a href="https://twitter.com/kytrinyx">Katrina Owen</a>,
creadora de <a href="http://exercism.io">exercism.io</a>, y me ha encantado.</p>

<p>Es una charla donde nos cuenta la historia de una refactorización. Me ha
gustado especialmente cómo cuenta la refactorización. Ocultando las partes
del código que no interesan en el paso actual y resaltando aquellas que
sí.</p>

<p>Me ha recordado mucho a cómo vemos los desarrolladores el código,
focalizándonos en pequeños detalles, entremezclados en líneas y líneas de
código.</p>

<!-- more -->




<iframe width="560"
        height="315"
        src="https://www.youtube.com/embed/J4dlF0kcThQ"
        frameborder="0"
        allowfullscreen></iframe>


<p>En el repositorio <a href="https://github.com/kytrinyx/therapeutic-refactoring">therapeutic-refactoring</a> se pueden ver todos los pasos
que Katrina ha dado en la refactorización.</p>

<h2>Notas</h2>

<p>Alrededor del minuto 19 nos habla del término <em>codejunk</em>. Codejunk trata
sobre ruido, ruido que nos molesta para entender el código, pequeños detalles
que hacen que gastemos más energía de la necesaria para entender qué hace
el código. Algunos no son errores en sí, pero son como pequeños picores
que no te dejan disfrutar.</p>

<p>Describe 10 (de menos a más molestos):</p>

<ol>
<li>Comentarios penosos</li>
<li>Espacios en blanco al final de las líneas</li>
<li>Código comentado</li>
<li>Paréntesis innecesarios</li>
<li>Parámetros explícitos por defecto</li>
<li><code>import</code>s o <code>require</code>s (dependiendo del lenguaje) innecesarios</li>
<li><code>string</code>s hechas de <code>string</code>s</li>
<li>Demasiado trabajo <em>manual</em> (deja que el pc haga el trabajo, no lo hagas tú)</li>
<li>Tests duplicados, hay que poner el mismo mimo en el código de tests
que en el de producción</li>
<li>Una combinación de todos los anteriores</li>
</ol>


<h2>Moral de la historia</h2>

<p>Refactorizar te da como un cerebro externo (exobrain).
Cada uno de nosotros podemos retener una cantidad finita de detalles en la
memoria (me recuerda al post de J.B.Rainsberger
<a href="http://blog.thecodewhisperer.com/2015/03/28/your-tests-are-dragging-you-down">Your tests are dragging you down</a>). Programar es sobretodo, mantener en
mente todos esos detalles. Nuestra memoria trabaja peor bajo condiciones
de miedo o estrés. Refactorizar pone a salvo muchos de estos detalles,
permitiéndonos trabajar más relajadamente y más confiados en que estamos
haciendo un buen trabajo.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Escribir y ejecutar tests de Mocha en ECMAScript 6]]></title>
    <link href="http://rchavarria.github.io/blog/2015/07/05/escribir-tests-mocha-es6/"/>
    <updated>2015-07-05T21:59:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/07/05/escribir-tests-mocha-es6</id>
    <content type="html"><![CDATA[<p>Me gusta resolver puzzles, pero no puzzles de miles de piezas, si no más bien el
tipo de puzzle en el que hay unas piezas de madera encajadas y hay que desencajarlas,
o en el que hay una cuerdecita con una bola y tienes que sacar la bola y volverla
a meter. Ese tipo de puzzles.</p>

<p>Creo que de ahí me viene también el gusto de resolver pequeños problemas de
programación. Me gusta programar. Me gusta aprender. Y qué mejor para aprender
que practicar. En el mundo de la programación existe un concepto llamado
<a href="https://en.wikipedia.org/wiki/Kata_%28programming%29">kata</a> (el concepto ha sido copiado de las artes marciales), el cual significa
la realización de pequeños ejercicios focalizados en la solución a un pequeño
problema muy concreto. Así que me gusta realizar katas de vez en cuando en algún
lenguaje de programación, para practicar.</p>

<!-- more -->


<p>Hace un tiempo publiqué un tutorial sobre <a href="http://rchavarria.github.io/blog/2014/09/24/plantilla-para-modulos-nodejs">cómo crear un módulo NodeJS</a>, el cual
me servía de base para realizar algunas de estas katas. En este artículo me
gustaría llevarlo un poco más allá. A ese proyecto, a esa plantilla, voy a
añadirle lo siguiente:</p>

<ul>
<li><a href="http://babeljs.io">Babel</a>: voy a añadir un paso en la construcción del proyecto y ejecución de los
tests, voy a transpilar código JavaScript ECMAScript 6 a ECMAScript 5. Esto me
permite practicar con la nueva versión de JavaScript.</li>
<li><a href="http://eslint.org">ESLint</a>: estoy convencido de que este tipo de herramientas ayudan en el día a
día en el desarrollo con JavaScript. Me ayudan a detectar errores tontos a la
hora de escribir mi código.</li>
<li><a href="https://travis-ci.org">Travis CI</a>: todos los tests serán ejecutados en un servidor de integración
contínua, para eliminar para siempre la excusa de <em>En mi ordenador funciona</em></li>
</ul>


<p>Si quieres dejarte de tonterías y ver todo montado ya y empezar a usar todo ello,
puedes echar un vistazo a el repositorio <a href="https://github.com/rchavarria/solveet-exercises-js">solveet-exercises-js</a> y jugar con
él.</p>

<h2>Babel</h2>

<p><a href="http://babeljs.io">Babel</a> es una herramienta para transformar código escrito en ECMAScript 6 en
código ECMAScript 5, es decir, para transformar código JavaScript de una versión
que todavía no está soportada completamente por los navegadores a una versión
que sí lo está.</p>

<p>Instalarlo es sencillísimo mediante <code>npm</code>:</p>

<pre><code>npm install --save-dev babel gulp-babel
</code></pre>

<p>Con este comando instalaremos la herramienta en sí, y un plugin para <code>gulp</code> que
nos permitirá usar Babel desde nuestro script Gulp. Modificaremos este script
para que transforme nuestro código justo antes de ejecutar nuestros tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">gulp</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">src</span><span class="p">([</span> <span class="s1">&#39;test/bootstrap.js&#39;</span><span class="p">,</span> <span class="s1">&#39;test/scripts/**/*.js&#39;</span> <span class="p">])</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">mocha</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">reporter</span><span class="o">:</span> <span class="s1">&#39;spec&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">compilers</span><span class="o">:</span> <span class="s1">&#39;js:babel/register&#39;</span>  <span class="c1">// tell mocha to compile with babel</span>
</span><span class='line'>        <span class="p">}));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>La parte diferente de otras configuraciones para lanzar los tests con mocha es
la parte donde configuramos mocha para que use Babel como compilador de código
JavaScript.</p>

<h2>ESLint</h2>

<p><a href="http://eslint.org">ESLint</a> es una herramienta que analiza nuestro código JavaScript y nos avisa de
violaciones de reglas que tengamos configuradas. Estas reglas nos permiten
definir patrones para detectar posibles fallos en nuestro código así como forzar
a que todos los integrantes de nuestro equipo sigan el mismo estilo de programación.</p>

<p>También utilizaremos <code>npm</code> para instalarlo, esta vez instalaremos solamente el
plugin de <code>gulp</code>, que como depende de ESLint directamente, éste se instalará
automáticamente:</p>

<pre><code>npm install --save-dev gulp-eslint
</code></pre>

<p>Y podemos crear una nueva tarea en gulp para analizar nuestro código:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;eslint&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">gulp</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">src</span><span class="p">([</span> <span class="s1">&#39;gulpfile.js&#39;</span><span class="p">,</span> <span class="s1">&#39;src/scripts/**/*.js&#39;</span><span class="p">,</span> <span class="s1">&#39;test/scripts/**/*.js&#39;</span> <span class="p">])</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">eslint</span><span class="p">())</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">eslint</span><span class="p">.</span><span class="nx">format</span><span class="p">())</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">eslint</span><span class="p">.</span><span class="nx">failOnError</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ahora, si queremos analizar todo nuestro código antes de lanzar nuestros tests,
podemos hacer que la tarea <code>test</code> dependa de la nueva tarea <code>eslint</code>:</p>

<pre><code>gulp.task('test', [ 'eslint' ], function () {
    // ...
}
</code></pre>

<p>El siguiente paso es configurar ESLint. Hay infinidad de reglas, incluso podemos
definir las nuestras propias. Para comenzar, puedes echar un vistazo a un
fichero <a href="https://raw.githubusercontent.com/rchavarria/solveet-exercises-js/master/.eslintrc"><code>.eslintrc</code> de ejemplo</a>.</p>

<h2>Travis CI</h2>

<p><a href="https://travis-ci.org">Travis CI</a> es una herramienta de integración contínua. La herramienta recupera
nuestro código del repositorio de GitHub que le digamos y ejecuta todos los
tests.</p>

<p>Para ello debemos darnos de alta en la página. Podemos hacerlo con nuestra
cuenta de GitHub. Luego, podemos ir a nuestro perfil e indicar a Travis CI
qué repositorios debe <em>vigilar</em> para ejecutar los tests cada vez que hagamos
un push al repositorio.</p>

<p>Debemos indicar a Travis CI qué lenguaje y plataforma queremos testear, en
nuestro caso se trata de NodeJS. Como configuración, añadimos simplemente un
fichero llamado <code>.travis.yml</code> en el directorio raiz del proyecto con este
contenido:</p>

<pre><code>language: node_js
node_js:
    - "0.12"
</code></pre>

<p>De esta forma, cuando hagamos un push a nuestro repositorio en GitHub, Travis CI
recuperará el código, instalará paquetes Node con <code>npm</code> y ejecutará el comando
<code>npm test</code>.</p>

<p>Para que Travis CI lanze nuestros tests, debemos configurar la respuesta al
comando <code>npm test</code>. Para ello, modificaremos el fichero <code>package.json</code>:</p>

<pre><code>//...
"scripts": {
    "test": "gulp test"
},
//...
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dando un empujón al blog]]></title>
    <link href="http://rchavarria.github.io/blog/2015/06/28/dando-empujon-blog/"/>
    <updated>2015-06-28T23:48:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/06/28/dando-empujon-blog</id>
    <content type="html"><![CDATA[<p>No recuerdo con exactitud cuánto, pero ya llevo unos años escribiendo en este
blog (aunque lo he movido de plataforma). No lo hago por nada en especial, no lo
hago por complacer a nadie, ni por conseguir X visitas mensuales. Es más, a veces
me sirve más para dejar notas a mi yo futuro que para servir a mi(s) lector(es).
Tampoco es que tenga miles de lectores diarios, ni sea eso un objetivo que me haya
marcado, pero&#8230;</p>

<p>¿Por qué no? ¿Por qué no intentar tener un blog con un número decente de visitantes?</p>

<!-- more -->


<p>No recuerdo cómo, supongo que <em>navegando por ahí</em>, terminé encontrando el blog
<a href="http://simpleprogrammer.com">The simple programmer</a>, de <a href="http://simpleprogrammer.com/about-me">John Sonmez</a>, autor del libro <a href="http://www.amazon.com/gp/product/1617292397">Soft skills</a>. John tiene
un <a href="http://devcareerboost.com/blog-course">curso gratuito sobre cómo crear un blog</a> y llevarlo un poco más allá (bueno, se
supone que el objetivo del curso es impulsar tu carrera profesional, pero no tengo
tan altas las espectativas para un curso gratuito), y me apunté. Me apunté más que
nada por una lección que habla sobre cómo dar tu blog a conocer.</p>

<p>En cada lección, John habla del los pasos a seguir para crear un blog: comenzando por
darle un nombre, conseguir un hosting, hacer una lista de los primeros posts,&#8230; En
general he encontrado muy buenas historias y muy buenos consejos. Seguro que todo el
mundo aprende algo de este curso.</p>

<p>Particularmente, alguna lección se me ha atragantado en el tiempo, me ha dado pereza
hacerme con ella, pero sigo con el curso y estoy decidido a terminarlo. No voy a conseguir
ningún diploma ni nada, pero espero poder seguir los consejos de John durant mucho
tiempo y conseguir tener un blog útil para los lectores y que me permita conocer gente
interesante.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning JavaScript design patterns]]></title>
    <link href="http://rchavarria.github.io/blog/2015/05/29/learning-javascript-design-patterns/"/>
    <updated>2015-05-29T01:04:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/05/29/learning-javascript-design-patterns</id>
    <content type="html"><![CDATA[<h5>de Addy Osmany</h5>

<h2>Por qué lo he leído</h2>

<p><img class="left" src="http://www.addyosmani.com/resources/essentialjsdesignpatterns/cover/cover.jpg" width="206" height="271" title="JavaScript desing patterns" ></p>

<p>Ya llevo un tiempo programando con JavaScript de forma profesional, y empiezo
a sentir que necesito ir un paso más allá con el lenguaje. No creo que conozca
todo lo que ofrece el lenguaje, todo lo contrario, a veces siento que me queda
mucho por aprender y que necesito profundizar en muchos y muchos temas. Con
este libro pretendía trasladar mis conocimientos sobre patrones de diseño con
Java a JavaScript.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Esperaba grandes cosas de este libro. Ya tenía referencias anteriores del autor,
creo que es un profesional como la copa de un pino. Así que un libro escrito
por él, pues tenía buena pinta.</p>

<p>Supongo que esperar encontrar una estructura de libro muy parecido a otros:
clasificaciones, descripciones, catalogaciones,&#8230;</p>

<h2>Qué encontré</h2>

<p>Encontré un libro con mucho código, cosa que no tiene que ser ni bueno, ni malo.
En el caso de este libro, es una ayuda muy buena. Las explicaciones de Addy son
clarísimas y hay multitud de ejemplos y casos reales.</p>

<h2>Conclusiones</h2>

<p>Aunque es un libro que no miente, trata sobre patrones de diseño, el libro me
ha defraudado un poco. Esperaba más del autor. Quizá no he sabido aprovechar
el contenido del libro, pero me ha parecido superficial en algunos capítulos,
y en otros ha entrado a describir con mucho detalle librerías como jQuery o
plugins para él.</p>

<p>En realidad, el libro que andaba buscando era <a href="http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752">JavaScript patterns</a>, de
Stoyan Stefanov, pero me daba más confianza Addy porque era un autor que ya
conocía. Toca ponerle remedio y ya me he puesto con el libro de Stoyan.</p>

<p>Eso sí, tengo que reconocer que es el primer lugar donde he encontrado una buena
descripción de lo que son cada una de las arquitecturas MVx (MVC, MVP, MVVM,&#8230;)</p>

<h2>Qué he aprendido</h2>

<ul>
<li>Se pueden añadir propiedades a objetos a través del método
<code>Object.defineProperties()</code></li>
<li>Los métodos de un objeto, no se deben declarar en la función constructor, sino
modificando el prototipo de la misma</li>
<li>Se debe intentar conseguir un bajo acoplamiento, algunos patrones (Observer,
Mediator,&#8230;) ayudan a ello</li>
<li>Mixins</li>
<li>Patrón Flyweight, consiste en agrupar o manejar conjuntamente funcionalidades
que pueden compartir un subconjunto de sus datos</li>
<li><p>Diferencias entre los distintos MVx</p>

<ul>
<li>En MVC, las Vistas tienen acceso directo al Modelo</li>
<li>En MVP, los Presentadores escuchan eventos de la Vista y del Modelo y median en la acciones entre ellos</li>
<li>MVVM nos permite crear partes específicas de las Vistas de un Modelo en concreto</li>
</ul>
</li>
<li><p>Expresiones de Función Inmediatamente Invocadas (IIFE - Immediately-Invoked Function Expressions)</p></li>
</ul>


<h2>Recursos relacionados</h2>

<ul>
<li><a href="http://www.addyosmani.com/resources/essentialjsdesignpatterns/book">Learning JavaScript design patterns</a>, by Addy Osmani</li>
<li><a href="http://www.2ality.com/2014/09/es6-modules-final.html">Sintaxis definitiva de módulos</a></li>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/learning-javascript-design-patterns-by-addy-oshmany.markdown">Notas tomadas</a></li>
<li><a href="http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752">JavaScript patterns</a>, de Stoyan Stefanov</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dart Streams]]></title>
    <link href="http://rchavarria.github.io/blog/2015/03/28/dart-streams/"/>
    <updated>2015-03-28T01:39:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/03/28/dart-streams</id>
    <content type="html"><![CDATA[<p>Siendo Dart un lenguaje muy influenciado por JavaScript, no podría dejar de lado
conceptos como la <strong>programación asíncrona</strong>. Existen varios métodos para manejar
la asincronía, y uno de ellos son los <strong>Streams</strong>. Si estás muy interesado en
el método te recomiendo una charla de <a href="http://r.va.gg">Rod Vagg</a>, <a href="https://www.youtube.com/watch?v=oeKkwZhKgP0">Embrace the asynchronous</a>.</p>

<p>Los <em>Streams</em> en Dart forman una interfaz única para cualquier cosa que necesite
enviar repetidamente una serie de datos de forma asíncrona, ya sean eventos HTML
(como escuchar clicks del usuario), o eventos de entrada/salida en una aplicación
de servidor.</p>

<p>Operaciones sobre <em>Streams</em>:</p>

<ul>
<li>Consumir: los datos son sacados de un <code>Stream</code> a uno o varios <code>StreamSubscriber</code></li>
<li>Producir: los datos son introducidos en un <code>Stream</code> desde un <code>StreamController</code></li>
</ul>


<!-- more -->


<h2>Consumiendo un <code>Stream</code></h2>

<p>En lugar de introducir datos al Stream a través de un <code>StreamController</code>,
que podría ser algo largo de contar, vamos a utilizar el constructor
<code>Stream.fromIterable()</code>, el cual nos permite construir un <code>Stream</code> a partir de
una lista de objetos, por ejemplo.</p>

<p>Típicamente, se usa el método <code>listen()</code> para subscribirse a un <code>Stream</code>. Este método
es llamado cada vez que se recibe un dato:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var data = [1, 2, 3, 4, 5];
</span><span class='line'>var stream = new Stream.fromIterable(data);
</span><span class='line'>
</span><span class='line'>// subscribe to the streams events
</span><span class='line'>stream.listen((value) {
</span><span class='line'>  print("Received: $value");
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p><code>Stream</code> también tiene otros métodos: <code>first</code>, <code>last</code>, <code>length</code> y <code>isEmpty</code>. Todos
ellos devuelven un <code>Future</code>, como los que estudiamos en <a href="http://rchavarria.github.io/blog/2015/01/29/operaciones-asincronas-en-dart-con-futures/">Futures con Dart</a>, el cual
se completará con el valor apropiado dentro del <code>Stream</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>streamProperties() {
</span><span class='line'>  var stream;
</span><span class='line'>
</span><span class='line'>  stream = new Stream.fromIterable([1, 2, 3, 4, 5]);
</span><span class='line'>  stream.first.then((value) =&gt; print("stream.first: $value"));  // 1
</span><span class='line'>
</span><span class='line'>  stream = new Stream.fromIterable([1, 2, 3, 4, 5]);
</span><span class='line'>  stream.last.then((value) =&gt; print("stream.last: $value"));  // 5  
</span><span class='line'>
</span><span class='line'>  stream = new Stream.fromIterable([1, 2, 3, 4, 5]);
</span><span class='line'>  stream.isEmpty.then((value) =&gt; print("stream.isEmpty: $value")); // false
</span><span class='line'>
</span><span class='line'>  stream = new Stream.fromIterable([1, 2, 3, 4, 5]);
</span><span class='line'>  stream.length.then((value) =&gt; print("stream.length: $value")); // 5
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>También se pueden tener varios listeners, pero para eso hay que convertir el <code>Stream</code>
en un stream de broadcast con <code>asBroadcastStream()</code>. Podremos comprobar de qué tipo
es un stream con la propiedad <code>isBroadcast</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var data = [1, 2, 3, 4, 5];
</span><span class='line'>var stream = new Stream.fromIterable(data);
</span><span class='line'>var broadcastStream = stream.asBroadcastStream();
</span><span class='line'>
</span><span class='line'>broadcastStream.listen((value) =&gt; print("stream.listen: $value")); 
</span><span class='line'>broadcastStream.first.then((value) =&gt; print("stream.first: $value"));
</span><span class='line'>//...</span></code></pre></td></tr></table></div></figure>


<h2>Subconjuntos de datos de un <code>Stream</code></h2>

<p>Los <code>Stream</code>s tienen algunos métodos de utilidad que permiten seleccionar un subconjunto
de los datos que vendrán en él. Cada uno de estos métodos devuelve un
<code>Stream</code> al que podemos registrar un listener. Para una lista completa de estos métodos
se puede consultar la documentación oficial: <a href="http://api.dartlang.org/dart_async/Stream.html">API Streams</a>.</p>

<p><code>where</code>: selecciona aquellos datos que cumplen una condición:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>broadcastStream
</span><span class='line'>    .where((value) =&gt; value % 2 == 0) 
</span><span class='line'>    .listen((value) =&gt; print("where: $value"));</span></code></pre></td></tr></table></div></figure>


<p><code>take</code>: toma solo los <code>n</code> primeros elementos:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>broadcastStream
</span><span class='line'>    .take(3) 
</span><span class='line'>    .listen((value) =&gt; print("take: $value"));</span></code></pre></td></tr></table></div></figure>


<p><code>skip</code>: se salta los <code>n</code> primeros elementos:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>broadcastStream
</span><span class='line'>    .skip(3)
</span><span class='line'>    .listen((value) =&gt; print("skip: $value"));</span></code></pre></td></tr></table></div></figure>


<p><code>takeWhile</code>: va tomando datos mientras la condición sea verdadera:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>broadcastStream
</span><span class='line'>    .takeWhile((value) =&gt; value &lt; 3) 
</span><span class='line'>    .listen((value) =&gt; print("takeWhile: $value"));</span></code></pre></td></tr></table></div></figure>


<p><code>skipWhile</code>: va saltando datos mientras la condición sea verdadera:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>broadcastStream
</span><span class='line'>    .skipWhile((value) =&gt; value &lt; 3)
</span><span class='line'>    .listen((value) =&gt; print("skipWhile: $value"));</span></code></pre></td></tr></table></div></figure>


<h2>Transformando streams</h2>

<p>El método <code>Stream.transform()</code> admite un parámetro de tipo <code>StreamTransformer</code>.
Es posible crear uno con el método <code>fromHandlers()</code>, el cual admite un
método como parámetro. Este método se llamará con 2 parámetros: cada uno de
los valores del <code>Stream</code> original, y un <code>StreamSink</code> al cual podremos añadir
el valor transformado. La salida de <code>transform()</code> es un nuevo <code>Stream</code> cuyos
valores han sido transformados por el <code>StreamTransformer</code>.</p>

<p>Todo esto se ve mucho más claro con un poco de código:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var transformer = new StreamTransformer.fromHandlers(handleData: (value, sink) {
</span><span class='line'>  // create two new values from the original value
</span><span class='line'>  sink.add("Message: $value");
</span><span class='line'>  sink.add("Body: $value");
</span><span class='line'>});
</span><span class='line'>    
</span><span class='line'>// transform the stream and listen to its output
</span><span class='line'>stream.transform(transformer).listen((value) =&gt; print("listen: $value"));</span></code></pre></td></tr></table></div></figure>


<p>Un ejemplo de la vida real podría ser la lectura de un fichero o de una
petición HTTP, transformando los datos recibidos a <code>String</code> con el decodificador
<code>UTF8.decoder()</code> del paquete <code>dart:convert</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>File file = new File("some_file.txt");
</span><span class='line'>file.openRead()
</span><span class='line'>    .transform(UTF8.decoder) // use a UTF8.decoder
</span><span class='line'>    .listen((String data) =&gt; print(data));</span></code></pre></td></tr></table></div></figure>


<h2>Validando los valores de un <code>Stream</code></h2>

<p>Otros métodos útiles podrían ser <code>any()</code>, <code>every()</code> y <code>contains()</code>, los cuales
devuelven todos <code>Future&lt;boolean&gt;</code>, es decir, un <code>Future</code> que se completa con un
valor de <code>true</code> o <code>false</code>.</p>

<p>Estos métodos servirían para realizar ciertas comprobaciones sobre los datos
recibidos por el <code>Stream</code>. Siguiendo con el ejemplo que crea un <code>Stream</code> a partir
de un array con los valores del 1 al 5:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>broadcastStream
</span><span class='line'>    .any((value) =&gt; value &lt; 5)
</span><span class='line'>    .then((result) =&gt; print("Any less than 5?: $result")); // true
</span><span class='line'>  
</span><span class='line'>broadcastStream
</span><span class='line'>    .every((value) =&gt; value &lt; 5)
</span><span class='line'>    .then((result) =&gt; print("All less than 5?: $result")); // false
</span><span class='line'>  
</span><span class='line'>broadcastStream
</span><span class='line'>    .contains(4)
</span><span class='line'>    .then((result) =&gt; print("Contains 4?: $result")); // true</span></code></pre></td></tr></table></div></figure>


<h2>Gestión de errores con <code>StreamSubscription</code></h2>

<p>Existen dos alternativas para la gestión de errores en los streams. Usando el
objeto <code>StreamSubscription</code> que retorna <code>listen()</code> o pasando los manejadores de
eventos al propio método <code>listen()</code>.</p>

<p>Usando <code>StreamSubscription</code> devuelto por <code>listen()</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var subscription = stream.listen(null);
</span><span class='line'>subscription.onData((value) =&gt; print("listen: $value"));
</span><span class='line'>subscription.onError((err) =&gt; print("error: $err"));
</span><span class='line'>subscription.onDone(() =&gt; print("done"));</span></code></pre></td></tr></table></div></figure>


<p>Pásandolos como parámetros:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var subscription = stream.listen(
</span><span class='line'>    (value) =&gt; print("listen: $value"),
</span><span class='line'>    onError: (err) =&gt; print("error: $err"),
</span><span class='line'>    onDone: () =&gt; print("done")
</span><span class='line'>    );</span></code></pre></td></tr></table></div></figure>


<h2>Eliminando la suscripción a un <code>Stream</code></h2>

<p>Con el método anterior de obtener un objeto <code>StreamSubscription</code>, podemos
utilizar dicha referencia para cancelar la suscripción con el método <code>cancel()</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var subscription = stream.listen(null);
</span><span class='line'>subscription.onData((value) {
</span><span class='line'>  print("listen: $value");
</span><span class='line'>  if (value == 2) subscription.cancel();
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<h2>Referencias:</h2>

<ul>
<li><a href="https://www.youtube.com/watch?v=oeKkwZhKgP0">Embrace the asynchronous</a></li>
<li><a href="http://rchavarria.github.io/blog/2015/01/29/operaciones-asincronas-en-dart-con-futures/">Futures con Dart</a>, en este propio blog</li>
<li><a href="http://api.dartlang.org/dart_async/Stream.html">API Streams</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop stealing dreams]]></title>
    <link href="http://rchavarria.github.io/blog/2015/03/13/stop-stealing-dreams/"/>
    <updated>2015-03-13T00:39:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/03/13/stop-stealing-dreams</id>
    <content type="html"><![CDATA[<h5>de Seth Godin</h5>

<h2>Por qué lo he leído</h2>

<p><img class="right" src="http://s1.hubimg.com/u/11789820_f260.jpg" width="200" height="300" title="Stop stealing dreams" ></p>

<p>Decidí leerlo básicamente porque tengo un hijo. Empezó el <em>colegio de mayores</em>
el pasado mes de septiembre, y desde un tiempo atrás ya me empezó a preocupar
el tema de su educación.</p>

<p>Y la verdad, con todos las reformas que ha sufrido la educación en España en
los últimos años, creo que la calidad de la misma se ha visto bastante reducida.</p>

<p>Por otra parte, he leído algún libro de Seth Godin, y sigo su blog, y creo que
tiene muchas ideas revolucionarias (con otras no estoy muy de acuerdo, o
simplemente no me interesan mucho), pero tenía ganas de saber qué piensa Seth
sobre la educación.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Viniendo de Seth Goding, me esperaba una serie de ideas revolucionarias sobre
cómo educar a los hijos, o consejos sobre cómo comportarse para intentar conseguir
que los pequeños sean más independientes, estén más preparados para un mundo
cambiante, que sean más individuales pero colaborativos.</p>

<h2>Qué encontre</h2>

<p>En parte encontré lo que buscaba, pero gran parte del libro (o <em>manifiesto</em> como
le llama el autor) está dedicado a criticar el sistema educativo (está centrado
en el norteamericano, pero es extrapolable a otros, por lo menos al
español sí lo es, más o menos), desde primaria hasta la universidad.</p>

<h2>Conclusiones</h2>

<p>Es un libro que no defraudará a ningún padre, y tampoco a ningún profesor de
escuela, instituto o universidad que esté preocupado hacia dónde va la educación.
La idea principal es que la escuela pública, o la educación para la mayoría,
nació como una necesidad de crear obreros, de crear una clase obrera. Pero
ya no existe esa necesidad de la era industrial, ahora las necesidades han
cambiado, y la escuela debe cambiar.</p>

<p>No estoy seguro de si el autor tiene toda la razón en su idea principal, pero
de lo que sí estoy seguro es que existen iniciativas distintas para la educación
(<a href="https://www.khanacademy.org">Khan Academy</a>, <a href="http://online.stanford.edu">Stanford University online</a>, <a href="http://ocw.mit.edu/index.htm">MIT open courses</a>,&#8230;) y que pueden ser pioneras
en el cambio que la educación necesita.</p>

<p>Estoy de acuerdo en que el profesor no debería malgastar su tiempo en dar una
clase estándar, para todos igual, si no que cada alumno disponga de toda la
información de la materia a estudiar, haga el progreso a su ritmo, y que el
profesor sea la persona que le guie, le ayude cuando se encuentre en un callejón
sin salida. Sentí algo parecido en la universidad, las clases parecían una
pérdida de tiempo, pero no llegué a ver el problema expuesto por Seth.</p>

<h2>Frases que me gustaría recordar</h2>

<ul>
<li>La educación a gran escala no fue desarrollada para motivar a los niños o para crear eruditos, fue para crear adultos sumisos, trabajadores para líneas de montaje en las fábricas</li>
<li>¿Para qué es la escuela?

<ol>
<li>Para crear una sociedad culturalmente coordinada. La televisión gana</li>
<li>Para llevar más lejos la ciencia y el conocimineto y perseguir la información por placer. Eso está bien, pero luego asociamos leer libros con los exámenes, poca gente lee por el placer de leer y aprender</li>
<li>Para mejorar la civilización mientras le damos a la gente herramientas para tomar decisiones conscientes e informadas. Pero fallamos al elevar los estándares del pensamiento racional, investigación escéptica, y la toma de decisiones financieras de utilidad</li>
<li>Para entrenar a gente en ser trabajadores productivos. Este punto es en el que hemos destacado en los últimos tiempos, según el autor.</li>
</ol>
</li>
<li>Podemos enseñar a la gente a comprometerse, a superar sus miedos, a negociar transarentemente, a iniciar y planificar un curso, a desear tener una vida de contínuo aprendizaje, a expresarse por sí mismos y a innovar. Pero en lugar de eso, hemos hecho que se olviden del coraje, la creatividad y la iniciativa</li>
<li>He aquí 12 formas en las que la escuela puede ser reformada:

<ol>
<li>Deberes por el día, en clase; las clases orales del profesor por la noche, en casa</li>
<li>Libro abierto, cuaderno abierto, todo el tiempo</li>
<li>Acceso a cualquier curso y asignatura, desde cualquier parte del mundo</li>
<li>Instruciones precisas y focalizadas, en lugar de instrucciones generalizadas y en masa</li>
<li>Prohibidos exámenes tipo test</li>
<li>Experiencias en lugar de notas en los examenes como medida de logros</li>
<li>Dejemos de medir como un resultado la obediencia (el silencio, el aceptar las cosas porque sí)</li>
<li>Cooperacion en lugar de aislamiento (en lugar de aislar estudiantes, deberiamos conectarlos : trabajo en grupo, clases intractivas, &#8230;)</li>
<li>Amplificacion de los estudiantes sobresalientes, de los profesores y de las ideas</li>
<li>Transformación del rol del profesor</li>
<li>Aprendizaje contínuo, trabajo más temprano</li>
<li>Dejemos de pensar que la universidad famosa, la que tiene fama, es la mejor en cuanto a educación</li>
</ol>
</li>
<li><em>Economía conectada</em>: los estudiantes tienen la habilidad y la facilidad de investigar lo que hay fuera y descubrir que el profesor (o libro de texto) está equivocado</li>
<li>El atajo para alcanzar el objetivo de las escuelas (crear ciudadanos sumisos) es el <strong>miedo</strong>. Haz esto y &#8230;, &#8220;se lo diremos a tus padres&#8221;, &#8220;o te suspenderemos&#8221;,&#8230;</li>
<li>El atrevimiento (a probar cosas nuevas, a salirse del guión) en la escuela está castigado, no recompensado</li>
<li>Tener habilidades que escasean combinadas con actitudes aún más escasas casi siempre llevan a un desempleo bajo y altos salarios</li>
<li>Solía ser sencillo: el profesor era el policía, el maestro, la fuente de todas las respuestas y el guardián de los recursos. Ahora, no necesitamos un humano a nuestro lado para enseñarnos como buscar la raiz cuadrada de un número, o cómo afilar un hacha. Lo que necesitamos es alguien que nos convenza de que queremos aprender esas cosas</li>
<li>Estamos entrando en una revolución de ideas mientras producimos una generación que, en lugar de ideas, lo que quiere son instrucciones</li>
<li>¿Es muy peligroso hacer lo correcto? ¿Pueden los padres hacerlo bien? ¿Porqué debería la escuela hacer ese trabajo y no los padres? Lo que importa es que buscar un camino que <em>podría</em> ser mejor es demasiado riesgo para alquien que sólo tiene una oportunidad de educar a sus hijos correctamente</li>
<li>La única forma para un estudiante de obtener respeto en la escuela es ganarse la aprovación temporal de un profesor al que probablemente no volverá a ver en un futuro cercano. Si el profesor es temperamental, inconsistente, mal profesor, el estudiante está obligado a aguantarle. ¿No te parece que debe ser muy frustrante tener que contentar a alquien a quien no vas a volver a ver en la vida?</li>
<li>Lo que se necesita de los profesores no es dar cuantas más clases mejor, o corregir exámenes o gestionar una clase de estudiantes. Lo que se necesita es una atención individualizada, trabajo emocional y la habilidad de motivar</li>
<li>Debemos tener en cuenta que no hay que valorar simplemente la habilidad, porque el niño mayor tiene ventaja, hay que valorar pasión, los sueños del niño</li>
<li>Debemos inculcar a los niños la pasión por leer</li>
<li>La universidad proporciona 4 cosas:

<ol>
<li>Acceso a la información. Pero ya tenemos acceso online, por lo que no necesitamos a la universidad para esto</li>
<li>Acreditación o un título (que antes era escaso). Pero ahora todo el mundo puede tener un título</li>
<li>Membresía a una tribu. Esta es quizá la mejor razón por la que mudarse a un campus universitario para conseguir una carrera</li>
<li>Una situación para el crecimiento y desarrollo. Ésta sería la razón por la que elegir la universidad, porque es imposible de imitar en una experiencia online. La universidad adecuada es la última y mejor oportunidad para multitud de adolescentes de encontrarse a sí mismos en situaciones donde no hay otra opción nada más que la de crecer, y rápido</li>
</ol>
</li>
<li><strong>¿Qué enseñamos?</strong>:

<ol>
<li>Cuando enseñamos a un niño a tomar buenas decisiones, nos beneficiamos de una vida llena de buenas decisiones</li>
<li>Cuando enseñamos a un niño a amar el aprendizaje, la cantidad de aprendizaje se volverá ilimitada</li>
<li>Cuando enseñamos a un niño a lidiar con un mundo cambiante, nunca se quedará obsoleto</li>
<li>Cuando somos lo suficientemente valientes como para enseñar a un niño que cuestione la autoridad, incluso la nuestra, nos protegemos a nosotros mismos de quien usaría su autoridad en contra de cada uno de nosotros</li>
<li>Y cuando le damos a los estudiantes el deseo de hacer cosas, aunque sean elecciones, creamos un mundo repleto de gente que consigue crear e inventar cosas</li>
</ol>
</li>
</ul>


<h2>Recursos relacionados</h2>

<ul>
<li><a href="https://github.com/rchavarria/book-notes/tree/master/published/stop-stealing-dreams-by-seth-godin.md">Notas extendidas sobre el libro</a></li>
<li><a href="https://www.khanacademy.org">Khan Academy</a></li>
<li><a href="http://online.stanford.edu">Stanford University online</a></li>
<li><a href="http://ocw.mit.edu/index.htm">MIT open courses</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Operaciones asíncronas en Dart con Futures]]></title>
    <link href="http://rchavarria.github.io/blog/2015/01/29/operaciones-asincronas-en-dart-con-futures/"/>
    <updated>2015-01-29T22:06:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/01/29/operaciones-asincronas-en-dart-con-futures</id>
    <content type="html"><![CDATA[<p><a href="http://dartlang.org">Dart</a> es un lenguaje de programación que se ejecuta en un único hilo. Si un
bloque de código bloquea dicho hilo (por ejemplo haciendo una operación de
entrada-salida de larga duración), la aplicación quedará <em>congelada</em>. Las
operaciones asíncronas permiten al programador crear operaciones sin bloquear
la aplicación entera. Dart usa la clase <code>Future</code> para realizar estas
operaciones asíncronas.</p>

<p>En el <a href="https://www.dartlang.org/docs/tutorials/futures/">tutorial sobre Futures</a> podrás encontrar información acerca de cómo
usar esta API de Dart.</p>

<!-- more -->


<h2>Introducción</h2>

<p>El siguiente código haría que la aplicación quedara congelada:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import 'dart:io';
</span><span class='line'>
</span><span class='line'>void printDailyNewsDigest() {
</span><span class='line'>  File file = new File("dailyNewsDigest.txt");
</span><span class='line'>  print(file.readAsStringSync());
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void main() {
</span><span class='line'>  printDailyNewsDigest();
</span><span class='line'>  printWinningLotteryNumbers();
</span><span class='line'>  printWeatherForecast();
</span><span class='line'>  printBaseballScore();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>El problema de este código es que <code>readAsStringSync()</code> no retorna hasta que no
termina, con lo que las llamadas al resto de métodos serán retrasadas.</p>

<p>Para lograr hacer que esa llamada no bloquee la ejecución del resto, Dart proporciona
los <em>Futures</em>.</p>

<h2>¿Qué es un <em>Future</em>?</h2>

<p>Es simplemente un medio para obtener un valor en algún momento en el futuro.</p>

<p>La forma en la que funciona es la siguiente: una función que necesita hacer una
acción muy costosa en el tiempo, encola dicha acción como un trabajo para hacer y
devuelve un objeto <code>Future</code> inmediatamente, de esta forma se consigue no bloquear
el hilo de ejecución de Dart. Más adelante, cuando el trabajo ha terminado, y el
valor está disponible, se dice que el <code>Future</code> se ha completado con dicho valor.</p>

<p>Para obtener el valor que representa <code>Future</code>, se usa el método <code>then()</code>, pasándole
como parámetro una función de callback que será llamada con el valor del <code>Future</code>.</p>

<h2>¿Cómo se usa?</h2>

<p>El método bloqueante anterior quedaría así usando <code>Future</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import 'dart:io';
</span><span class='line'>import 'dart:async';
</span><span class='line'>
</span><span class='line'>void printDailyNewsDigest() {
</span><span class='line'>  File file = new File("dailyNewsDigest.txt");
</span><span class='line'>  Future future = file.readAsString();
</span><span class='line'>  future.then((content) {
</span><span class='line'>    print(content);
</span><span class='line'>  });
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Esta vez, para leer el fichero se usa el método <code>readAsString()</code>, el cual no bloquea
el hilo y retorna un <code>Future</code>. Después, se registra un callback a través del método
<code>then()</code>. Este callback recibe como parámetro el valor que esperamos que retorne
<code>readAsString()</code>, que es el contenido del fichero. Es en este callback donde
se imprime el contenido del fichero leído.</p>

<p>El propio método <code>then()</code> devuelve también un <code>Future</code>, por lo cual se pueden
encadenar distintas llamadas <code>then()</code>.</p>

<h2>Gestión de errores</h2>

<p>La gestión de errores con <code>Future</code> es muy sencilla, ya que la clase proporciona el
método <code>catchError()</code> que será llamado si se produce un error a la hora de conseguir
el valor que representa el <code>Future</code>.</p>

<p>El método anterior se puede reescribir así:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void printDailyNewsDigest() {
</span><span class='line'>  File file = new File("dailyNewsDigest.txt");
</span><span class='line'>  Future future = file.readAsString();
</span><span class='line'>  future.then((content) =&gt; doSomethingWith(content))
</span><span class='line'>        .catchError((e) =&gt; handleError(e));
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>De esta forma, si <code>readAsString()</code> produce un error, la variable <code>future</code> se completará
con error (en lugar de completarse con el valor del contenido del fichero), lo que
provocará que el <code>Future</code> devuelto por <code>then()</code> se complete también con error, lo que hará
que se llame al método <code>catchError()</code>, el cual gestionará el error.</p>

<h2>Encadenando múltiples llamadas a <code>then()</code></h2>

<p>Supongamos que existen tres funciones: <code>expensiveA()</code>, <code>expensiveB()</code> y <code>expensiveC()</code>. Todas
ellas devolviendo <code>Future</code>s, de forma que se pueden encadenar llamadas a <code>then()</code> de esta
forma:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>expensiveA().then((aValue) =&gt; expensiveB()) 
</span><span class='line'>            .then((bValue) =&gt; expensiveC()) 
</span><span class='line'>            .then((cValue) =&gt; doSomethingWith(cValue));</span></code></pre></td></tr></table></div></figure>


<p>También existe otra posibilidad, y es esperar a que termine la ejecución de las tres, para
realizar alguna acción solamente cuando los tres <code>Future</code>s se hayan completado. Para ello,
el API proporciona el método <code>wait()</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Future.wait([expensiveA(), expensiveB(), expensiveC()])
</span><span class='line'>      .then((List responses) =&gt; chooseBestResponse(responses));</span></code></pre></td></tr></table></div></figure>


<p>Aquí, <code>wait()</code> devuelve un <code>Future</code> cuyo valor es una lista con los valores de todos los
<code>Future</code>s pasados como parámetros.</p>

<h2>Creando tus propios <code>Future</code></h2>

<p>De acuerdo, entendido cómo se usan. Pero, ¿y si lo que quiero es ser yo quien comienza la
cadena de <code>Future</code>s? ¿Cómo se crea el primero de ellos?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Future methodReturningAFuture() {
</span><span class='line'>    return new Future.value('foo bar');
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>El método del código anterior devuelve un valor, un <code>Future</code> que se resuelve al valor
<code>foo bar</code>. Si quisiéramos imprimir esa cadena por consola, haríamos lo siguiente:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>methodReturningAFuture()
</span><span class='line'>    .then((message) =&gt; print(message));</span></code></pre></td></tr></table></div></figure>


<h2>Conclusión</h2>

<p>Si así <em>en papel</em> no te ha quedado lo suficientemente claro, te recomiendo que te pases
por el <a href="https://www.dartlang.org/docs/tutorials/futures/">tutorial sobre Futures</a> o que le eches un ojo al <a href="https://github.com/rchavarria/dart-tutorials/tree/master/futures">código completo</a> del tutorial.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calcular hashes MD5 en Dart con cipher]]></title>
    <link href="http://rchavarria.github.io/blog/2015/01/22/calcular-md5-dart-cipher/"/>
    <updated>2015-01-22T23:02:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/01/22/calcular-md5-dart-cipher</id>
    <content type="html"><![CDATA[<p>Cuando estoy aprendiendo un lenguaje de programación, me gusta practicar
con él, me gusta escribir código con él. Puedes leer los libros o los blogs
que quieras, pero hasta que no escribas aplicaciones y las ejecutes, nunca
apredenderás nada de ese lenguaje.</p>

<p>Para practicar me gusta <a href="http://solveet.com">Solveet</a>. Puedes encontrar problemas muy diversos,
tanto fáciles como más complicados. Publicas tu código, con lo que todo el
mundo puede verlo (por eso te esfuerzas en dejar tu código un poquito más
limpio).</p>

<p>Recientemente decidí resolver un problema en el que se trata de escribir
un <a href="http://www.solveet.com/exercises/Acceder-a-la-API-Marvel/299">acceso a la API pública de Marvel</a>. Uno de los pasos para acceder a dicha
API es calcular el hash MD5 de unos parámetros a pasar a la API para
autenticarte. Dart es un lenguaje moderno, así que pensé que sería muy
fácil calcular hashes MD5. ¡Menuda decepción me llevé!</p>

<!-- more -->


<h2>Crypto</h2>

<p>En realidad no soy ningún experto en Dart, pero no encontré que el lenguaje
proporcionara clases o métodos para hacerlo. Existe una librería llamada
crypto, que parece haber sido escrita por alguien de dentro, pero me
pareció que estaba abandonada y sin documentación (repito, fue una impresión
mía, que me perdone el autor(es)).</p>

<h2>Cipher</h2>

<p>Por suerte encontré <a href="https://github.com/izaera/cipher">cipher</a>, una librería escrita por <a href="https://twitter.com/izaera">Iván Zaera</a>, que me
puso las cosas más fáciles. El repositorio en git parece activo y tiene
una documentación mucho mejor que la de crypto. Al menos encontré la forma
de usar la librería y hacer lo que quería.</p>

<p>Pero no encontré exactamente lo que buscaba, lo encontré algo desperdigado
entre las páginas de la wiki. Así que este post es para mostrar el método
que encontré para <strong>calcular hashes MD5 en Dart con cipher</strong>.</p>

<h2>Código</h2>

<p>Para usar la librería, hay que añadir la dependencia de la librería al
fichero <code>pubspec.yaml</code> del proyecto:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>dependencies:
</span><span class='line'>    cipher: "&gt;=0.7.1 &lt;0.8.0"
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>La siguiente clase, contiene un método público, <code>digest</code>, que acepta un
<code>String</code> como parámetro y devuelve un <code>String</code> con el hash MD5 del mismo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// needs `cipher` as a project's dependency
</span><span class='line'>import 'package:cipher/cipher.dart';
</span><span class='line'>import 'package:cipher/impl/server.dart';
</span><span class='line'>import 'dart:typed_data';
</span><span class='line'>import 'dart:convert';
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Uses cipher package to compute the MD5 hash of a given String
</span><span class='line'> */
</span><span class='line'>class Utf8String2MD5 {
</span><span class='line'>
</span><span class='line'>    Utf8Encoder encoder;
</span><span class='line'>    Digest md5;
</span><span class='line'>
</span><span class='line'>    Utf8String2MD5() {
</span><span class='line'>        // cipher must be initialized before using any class from the package
</span><span class='line'>        initCipher();
</span><span class='line'>
</span><span class='line'>        // cipher class to compute the MD5
</span><span class='line'>        md5 = new Digest('MD5');
</span><span class='line'>        encoder = new Utf8Encoder();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * @param message Message which MD5 hash will be computed
</span><span class='line'>     * @return the MD5 hash of `message`
</span><span class='line'>     */
</span><span class='line'>    String digest(String message) {
</span><span class='line'>        // get utf-8 values of the message
</span><span class='line'>        List&lt;int&gt; utf8Data = encoder.convert(message);
</span><span class='line'>        // convert to the input data for the cipher class
</span><span class='line'>        Utf8List inputData = new Uint8List.fromList(utf8Data);
</span><span class='line'>        // compute the MD5
</span><span class='line'>        Uint8List digestValue = md5.process(inputData);
</span><span class='line'>
</span><span class='line'>        return digestValue
</span><span class='line'>            .map((i) =&gt; i.toRadixString(16)) // converts to hexadecimal string
</span><span class='line'>            .map((s) =&gt; s.padLeft(2, '0')) // pad strings with 0
</span><span class='line'>            .join(); // join all elements in the List to build a String
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla técnica: Is TDD dead? Of course not!]]></title>
    <link href="http://rchavarria.github.io/blog/2015/01/17/charla-tecnica-is-tdd-dead/"/>
    <updated>2015-01-17T17:35:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/01/17/charla-tecnica-is-tdd-dead</id>
    <content type="html"><![CDATA[<p>Hace poco, vi posteada una charla de <a href="http://twitter.com/emilybache">Emily Bache</a> titulada <a href="https://www.youtube.com/watch?v=PCEHRFHKZSk">Is TDD dead? Of course not!</a>
en el blog <a href="http://garajeando.blogspot.com/2015/01/interesting-talk-is-tdd-dead-of-course.html">Garajeando</a>, un blog que suelo leer. Poco después la vi posteada
en otro blog que suelo leer, <a href="http://alvarogarcia7.github.io/blog/2015/01/06/talk-is-tdd-dead-of-course-not-by-emily-bache">The long way through Software Craftsmanship</a>. ¿Algo debería tener
la charla no? Aquí hay un resumen de lo que la charla me a aportado a mí:</p>

<!-- more -->


<p>Básicamente, la charla habla de las tres críticas que <a href="http://twitter.com/dhh">David Heinemeier Hansson</a>
hizo a la práctica de TDD con su <a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">TDD is dead, long live testing</a>.</p>

<ol>
<li>Fundamentalismo: para evitarlo, experimenta TDD, inténtalo por tí mismo, que no
te lo cuenten. Después, juzga por tí mismo. Para experimentarlo existen prácticas
como las <em>code katas</em> o <em>coding dojos</em> y herramientas como <a href="http://cyber-dojo.org">cyber-dojo.org</a>.</li>
<li>Daña el diseño: diseñar es difícil (con o sin TDD). TDD
te empuja a introducir nuevos niveles de indirección, hacia el Principio de
Inversión de Dependencias. Aún así, es <strong>tu responsabilidad</strong> como programador
saber cuándo tu aplicación tiene demasiados niveles de indirección y actuar en
consecuencia.</li>
<li>Foco en tests unitarios: puede que David tenga razón aquí, hay mucho foco
en los tests unitarios. Emily nos habla de unos <a href="http://coding-is-like-cooking.info/tag/approval-testing">tests de Aprobación</a> como
complemento a los unitarios.</li>
</ol>


<p>Un montón de consejos (la mayoría) sobre TDD son para principiantes de TDD.
Así que, cuando te den alguno, piensa si ya has superado esa barrera, y si lo
has hecho, ignora el consejo, porque tú ya estas por encima de él. Aprende a
discernir qué información es válida para tu nivel.</p>

<iframe width="560" height="315" src="http://rchavarria.github.io//www.youtube.com/embed/PCEHRFHKZSk" frameborder="0" allowfullscreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extreme Programming explained]]></title>
    <link href="http://rchavarria.github.io/blog/2015/01/02/extreme-programming-explained/"/>
    <updated>2015-01-02T10:24:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/01/02/extreme-programming-explained</id>
    <content type="html"><![CDATA[<h5>de Kent Beck</h5>

<p><img class="right" src="http://ecx.images-amazon.com/images/I/71kDsLjbnsL.jpg" width="240" height="300"></p>

<h2>Por qué lo he leído</h2>

<p>Estoy muy interesado en las metodologías ágiles, pero yo osy más una persona
técnica, un ingeniero preocupado por los aspectos técnicos de los proyectos,
más que por los aspectos de gestión. Creo que Extreme Programming explica lo
básico, los inicios de Agile.</p>

<p>Ya conocía algunas prácticas de XP, pero quería conocerlas más a fondo.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Sencillo, buscaba un libro que me explicara los valores, principios y prácticas
de XP. Existe un recurso online donde poder encontrar estos recursos,
<a href="http://www.extremeprogramming.org">http://www.extremeprogramming.org</a>,
pero buscaba algún recurso que los tratara con más profundidad.</p>

<h2>Qué encontre</h2>

<p>Justamente lo que buscaba. El libro trata XP a fondo, no sólo explicando y
dando sentido a los valores, principios y prácticas, sino también multitud
de experiencias reales.</p>

<p>También encontré mucha información acerca de <em>pair programming</em>, práctica
en la que estoy muy interesado, así como la forma en que las distintas
prácticas se interconectan entre sí.</p>

<p><img class="center" src="http://rchavarria.github.io/images/2015/xp-practices.jpg" title="Cómo están interconectadas las prácticas XP" ></p>

<h2>Conclusiones</h2>

<p>Un libro totalmente recomendable. Trata el tema de Extreme Programming con
mucha claridad, exponiendo todas las partes que lo componen, explica cada
uno de los papeles que juegan los integrantes de un equipo XP (aunque se
ha quedado un poco obsoleto para hoy en día, pero puesto en perspectiva
toma mucho sentido).</p>

<p>La verdad es que parece mentira que el autor esté hablando sobre estos
temas por el año 1999/2000 y que todavía en 2015 estemos como estamos.</p>

<h2>Frases que me gustaría recordar</h2>

<blockquote><p>XP es un experimento para responder a la pregunta: ¿Cómo programarías si
tuvieras suficiente tiempo? Donde se explica la diferencia entre la <em>Mentalidad
de la suficiencia</em> frente a la <em>Mentalidad de la escasez</em> (parábola de la
tribu del bosque y de la montaña)</p>

<p>Si no cambiaran los requisitos o no aprendiéramos nada durante el proceso
sería mejor diseñar para el futuro pero <strong>yo no me
arriesgo</strong> a que no haya cambios y mucho menos a no aprender nada.</p>

<p>Los Programadores confiados y agresivos son valiosos precisamente porque ellos
son confiados y agresivos</p>

<p>Primordialmente las emociones (especialmente el miedo) son lo que hace que XP
sea tan duro de practicar y aplicar</p>

<p>Los cuatro valores de XP: comunicación, simplicidad, feedback y coraje</p>

<p>Cuatro actividades básicas: codificar, testear, escuchar y diseñar</p>

<p>El trabajo del programador no se acaba cuando el ordenador entiende qué es lo
que tiene que hacer. Su trabajo más importante es la comunicación con el resto
de la gente</p>

<p>Una habilidad necesaria para los programadores es <em>pair programming</em></p>

<p>Otra habilidad necesaria es el hábito de la simplicidad</p></blockquote>

<h2>Recursos relacionados</h2>

<ul>
<li><a href="https://github.com/rchavarria/book-notes/blob/master/published/extreme-programming-explained-by-kent-beck.md">Extensas notas sobre el libro</a></li>
<li><a href="http://www.amazon.es/Extreme-Programming-Explained-Embrace-Embracing/dp/0321278658/ref=sr_1_1?ie=UTF8&amp;qid=1420044502&amp;sr=8-1&amp;keywords=extreme+programming+explained">Extreme Programming explained, en Amazon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crear Web Components con Dart y Polymer]]></title>
    <link href="http://rchavarria.github.io/blog/2014/12/13/crear-web-components-con-dart-y-polymer/"/>
    <updated>2014-12-13T18:42:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2014/12/13/crear-web-components-con-dart-y-polymer</id>
    <content type="html"><![CDATA[<p><a href="http://dartlang.org">Dart</a> es un lenguaje de programación, no muy conocido hoy en día, pero
que tiene un gran potencial, ya que está pensado para aplicaciones
web, tanto para la parte servidora como para la parte cliente. Así,
con Dart puedes escribir código que se ejecuta en el navegador y
código ejecutándose en un servidor que responda a ese cliente.</p>

<p><a href="http://polymer-project.org">Polymer</a> es una implementación del estándar HTML Web Components,
un estándar que quiere revolucionar la manera en la que se desarrollan
aplicaciones web en los navegadores.</p>

<p>En este tutorial describo lo que he aprendido siguiendo el tutorial acerca
de <a href="https://www.dartlang.org/docs/tutorials/polymer-intro/">Cómo crear un Web Component con Dart y Polymer</a>. Si quieres bucear
en el código directamente, puedes hacerlo en mi repositorio de Github
<a href="https://github.com/rchavarria/dart-tutorials/tree/master/custom-element-dart-tutorial">Custom element Dart tutorial</a>.</p>

<!-- more -->


<h2>Qué vamos a crear</h2>

<p>El Web Component que crearemos con este tutorial es un sencillo cronómetro,
con el cual podremos comenzar a contar el tiempo, pausarlo o detenerlo completamente.</p>

<p>Rápidamente, los pasos que vamos a seguir son:</p>

<ol>
<li>Importar el fichero HTML que contiene la definición del Web Component</li>
<li>Usar el Web Component en nuestra propia página web</li>
<li>Inicializar Polymer. La librería de Dart que vamos a usar ya proporciona
el mecanismo para hacerlo, no te preocupes</li>
</ol>


<h2>Ficheros de los que consta el tutorial</h2>

<ul>
<li><code>web/index.html</code>: es el punto de entrada de la aplicación. Inicializa Polymer,
importa el Web Component y usa el mismo.</li>
<li><code>web/tute_stopwatch.html</code>: código HTML que define el Web Component.
importa el Web Component y usa el mismo.</li>
<li><code>web/tute_stopwatch.dart</code>: código Dart que implementa el Web Component.</li>
</ul>


<h2>Instalando Polymer.dart</h2>

<p>Para poder usar Polymer, primero es necesario instalarlo como una dependencia del
proyecto. Para ello, modificar el fichero <code>pubspec.yaml</code> y añadir el siguiente
contenido:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies:
</span><span class='line'>  polymer: "&gt;=0.15.1 &lt;0.16.0"</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Después, ejecutar el comando <code>pub get</code>. <code>pub</code> es una herramienta que viene con el
SDK de Dart. Dart Editor también puede ejecutar este comando para instalar todas
las dependencias del proyecto.</p>

<p>Para inicializar Polymer, modificar <code>web/index.html</code> y añadir esta línea al final
del mismo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>...
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;application/dart&quot;</span><span class="nt">&gt;</span><span class="kr">export</span> <span class="s2">&quot;package:polymer/init.dart&quot;</span><span class="p">;</span><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h2>Incluir Polymer en la aplicación</h2>

<p>Estos son los ficheros a modificar para usar Polymer en la creación del
Web Component:</p>

<p><code>web/tute_stopwatch.html</code>: importar el fichero <code>packages/polymer/polymer.html</code>
antes de definir cualquier Web Component en la aplicación:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;import&quot;</span> <span class="na">href=</span><span class="s">&quot;packages/polymer/polymer.html&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;polymer</span><span class="na">-element</span> <span class="na">name=</span><span class="s">&quot;tute-stopwatch&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>web/tute_stopwatch.dart</code>: importar la librería Polymer en el fichero Dart:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>import &#39;dart:html&#39;;
</span><span class='line'>import &#39;package:polymer/polymer.dart&#39;;
</span><span class='line'>// ...
</span></code></pre></td></tr></table></div></figure>


<h2>Instanciar un Web Component</h2>

<p>En la página web donde se va a usar el Web Component, debemos importar la definición
del mismo, usar un tag con su nombre (como si fuera un componente HTML normal) e
inicializar Polymer. De forma que <code>web/index.html</code> quedaría parecido a:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- importa la definición del Web Component --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;import&quot;</span> <span class="na">href=</span><span class="s">&quot;tute_stopwatch.html&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- usa el Web Component --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tute</span><span class="na">-stopwatch</span><span class="nt">&gt;</span><span class="err">&lt;</span>/tute-stopwatch&gt;
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- inicializa Polymer --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;application/dart&quot;</span><span class="nt">&gt;</span><span class="kr">export</span> <span class="s2">&quot;package:polymer/init.dart&quot;</span><span class="p">;</span><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Definiendo el Web Component</h2>

<p>La definición del mismo está en el fichero <code>web/tute_stopwatch.html</code>. Para definirlo
hay que usar el tag <code>&lt;polymer-element&gt;</code> y asignar un nombre al Web Component. En
este caso <code>tute-stopwatch</code>.</p>

<p>El tag <code>&lt;polymer-element&gt;</code> puede tener dos tags hijos: <code>&lt;template&gt;</code>, que contiene
el código HTML; y <code>&lt;script&gt;</code>, que contiene el código Dart.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;polymer</span><span class="na">-element</span> <span class="na">name=</span><span class="s">&quot;tute-stopwatch&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;template&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>  <span class="nt">&lt;/template&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;application/dart&quot;</span> <span class="na">src=</span><span class="s">&quot;tute_stopwatch.dart&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="err">&lt;</span>/polymer-element&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Dando comportamiento al Web Component</h2>

<p>El comportamiento es implementado en Dart, en el fichero <code>web/tute_stopwatch.dart</code>.
En este fichero, se declara una clase que extiende de <code>PolymerElement</code> y está
anotada con <code>@CustomTag</code>. El contenido de <code>@CustomTag</code> debe coincidir con el
nombre dado en la definición del Web Component.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@CustomTag(&#39;tute-stopwatch&#39;)
</span><span class='line'>class TuteStopwatch extends PolymerElement {
</span><span class='line'>    TuteStopwatch.created() : super.created();
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Para que todo esté correcto, la clase <code>TuteStopwatch</code> debe heredar de <code>PolymerElement</code> o
implementar las interfaces <code>Polymer</code> y <code>Observable</code>. Además, debe definir un
constructor <em>nombrado</em> que llame a <code>super.created()</code>.</p>

<h2>Enlazando datos entre Dart y HTML</h2>

<p>En la parte visual (HTML) se pueden usar las llaves dobles <code>{{...}}</code> para utilizar una
variable anotada como <code>@observable</code> en la parte de comportamiento (Dart). Por ejemplo,
para usar una <code>String</code> que al modificarla en Dart se actualice la vista HTML, los
ficheros <code>web/tute_stopwatch.html</code> y <code>web/tute_stopwatch.dart</code> quedarían:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;polymer</span><span class="na">-element</span> <span class="na">name=</span><span class="s">&quot;tute-stopwatch&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;template&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>{{counter}}<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/template&gt;</span>
</span><span class='line'>  ...
</span><span class='line'><span class="err">&lt;</span>/polymer-element&gt;
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@CustomTag(&#39;tute-stopwatch&#39;)
</span><span class='line'>class TuteStopwatch extends PolymerElement {
</span><span class='line'>    ...
</span><span class='line'>    @observable String counter;
</span><span class='line'>
</span><span class='line'>    void aMethod() {
</span><span class='line'>        counter = &#39;14:59&#39;;
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Para hacer un doble enlace, de Dart a HTML y viceversa, se puede consultar en enlace
<a href="https://www.dartlang.org/docs/tutorials/forms/#binding-data">Two-way data binding using Polymer</a>.</p>

<h2>Creando manejadores de eventos</h2>

<p>De la misma forma que se puede enlazar variables, se pueden enlazar manejadores de
eventos que gestionen las interacciones del usuario. Por ejemplo, para responder
ante un click del usuario, en HTML:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">on-click=</span><span class="s">&quot;{{start}}&quot;</span><span class="nt">&gt;</span>Start<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mientras que en Dart:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@CustomTag(&#39;tute-stopwatch&#39;)
</span><span class='line'>class TuteStopwatch extends PolymerElement {
</span><span class='line'>    ...
</span><span class='line'>    void start(Event evt, var detail, Node target) {
</span><span class='line'>        ...
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Donde:</p>

<ul>
<li><code>evt</code>: contiene información sobre el evento</li>
<li><code>detail</code>: puede proveer información adicional sobre el evento</li>
<li><code>target</code>: el nodo HTML que lanzó el evento</li>
</ul>


<p>Para más información, como los manejadores de eventos disponibles y más, consultar
<a href="http://www.polymer-project.org/polymer.html#declarative-event-mapping">Declarative event mapping</a>.</p>

<h2>Desplegando la aplicación</h2>

<p>Antes de desplegar, es necesario el uso de <em>transformadores</em> de Polymer para
completar el proceso. Para ello, modificar <code>pubspec.yaml</code> añadiendo las siguientes
líneas:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>...
</span><span class='line'>dependencies:
</span><span class='line'>  polymer: ...
</span><span class='line'>transformers:
</span><span class='line'>- polymer:
</span><span class='line'>    entry_points: web/index.html
</span></code></pre></td></tr></table></div></figure>


<p>Definiendo <code>entry_points</code> indicamos a Polymer qué ficheros HTML queremos que transforme.</p>

<p>Para probar el Web Component desarrollado podemos seleccionar <em>Ejecutar como JavaScript</em>
sobre el fichero <code>web/index.html</code> desde Dart Editor.</p>

<p>O también, tenemos el comando <code>pub serve</code> en línea de comandos. Este comando nos indicará
una dirección URL donde poder probar la aplicación.</p>

<p>El comando <code>pub build</code> genera ficheros que pueden ser desplegados en un servidor
aparte y que hará posible ejecutar la aplicación en cualquier navegador moderno.</p>
]]></content>
  </entry>
  
</feed>
