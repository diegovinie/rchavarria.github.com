<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2017-11-22T22:18:52+01:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Global day of code retreat 2017]]></title>
    <link href="http://rchavarria.github.io/blog/2017/11/22/global-day-of-code-retreat-2017/"/>
    <updated>2017-11-22T21:52:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2017/11/22/global-day-of-code-retreat-2017</id>
    <content type="html"><![CDATA[<p>Al igual que el <a href="http://rchavarria.github.io/blog/2016/10/27/global-day-of-code-retreat-2016/">año pasado</a>, he tenido el placer de participar en el Global
Day of Code Retreat 2017, un evento sobre programación <em>de intensa práctica,
enfocado en los fundamentos del diseño y desarrollo de software</em>. Este año ha
habido 136 eventos repartidos por todo el mundo. No he encontrado estadísticas
sobre cuantas personas participamos, pero estoy seguro de que con tantos
eventos tuvimos que ser miles.</p>

<p>¿Impresiona eh? ¿Te animarás el año que viene? El funcionamiento es sencillo:
se trata de resolver el problema del <a href="https://es.wikipedia.org/wiki/Juego_de_la_vida">juego de la vida de Conway</a>, donde unas
<em>células</em> viven o mueren de acuerdo a una serie de reglas preestablecidas.
Siempre se programa por parejas (o tríos), nunca solo. El día está dividido en
iteraciones de una duración determinada, y al final de cada iteración hacemos
una pequeña retrospectiva. Y así es como fue nuestro <a href="https://github.com/SoftwareCraftersMadrid/global-day-of-coderetreat-2017/blob/master/theday.md">día</a>.</p>

<p><img class="center" src="http://rchavarria.github.io/images/2017/gdcr2017.jpg"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen propiedad de <a href="https://twitter.com/HelderDOliveira">Helder</a>, reproducida con su permiso
  </span>
</div>




<!-- more -->


<h2>El día</h2>

<p>Cada iteración duró unos 45 minutos. Según va avanzando el día, va aumentando
la intensidad de las conversaciones. Y también el cansancio. Para poner un poco
de emoción al asunto, en cada nueva iteración se pueden proponer una serie de
restricciones. Además, las restricciones de una iteración se acumulaban para la
siguiente. Por ejemplo, en la segunda iteración, debíamos programar haciendo
<a href="http://wiki.c2.com/?PairProgrammingPingPongPattern">ping-pong</a> <em>(uno escribe el test, otro lo hace pasar y escribe un nuevo test,
otro lo hac&#8230;)</em>. Más adelante se propuso eliminar los <code>else</code> y más adelante
todos los condicionales.</p>

<p>Después de cada iteración, se hace una pequeña retrospectiva, donde todos
ponemos en común cómo hemos afrontado el problema, qué impedimentos hemos
encontrado, cómo lo hemos solucionado, hasta dónde hemos llegado. En seguida
aparecieron 2 enfoques principales para atacar al problema:</p>

<ol>
<li>De dentro hacia afuera: se comienza a resolver el problema por la parte más
interna, más pequeña, más acotada. Se empiezan a describir las reglas del
juego en los tests y se van haciendo pasar, implementando las reglas en una
función o en pequeños objectos con muy poco código.</li>
<li>De fuera hacia adentro: el problema se ataca desde el nivel más alto. Se
suele hablar de <em>mundo</em>, <em>universo</em>, <em>juego</em>, <em>matriz de células</em>. Las
reglas del juego se implementan mucho más adelante. Pero al principio te
encuentras con problemas como recorrer una matriz, bucles anidados,
inicialización del juego, comprobación de límites,&#8230;</li>
</ol>


<p>Durante las retros suele haber alguna discusión/conversación. En esta ocasión,
especialmente en la última, hubo una interesante discusión que surgió a raiz de
restricciones relacionadas con no usar ni condicionales ni bucles. Sobre los
condicionales no hubo mucha dicrepancia, parece que tenemos claro que una forma
de reemplazar condicionales es el polimorfismo (aplicarlo ya es otra historia),
aunque no es la única.</p>

<p>Pero sobre los bucles no hubo mucho consenso. ¿Realmente eliminarlos ayuda a
hacer el código más legible? ¿Ayuda a tener menos código (y por tanto menos
probabilidad de errores)? Si el código no queda muy legible, ¿estoy tratando a
mis compañeros como inferiores? ¿o les estoy ayudando a aprender
características del lenguaje? Una pregunta que surgió varias veces: ¿Un
<code>map</code>/<code>filter</code> es un bucle?</p>

<p>El formato ofrece cierta libertad. Por ejemplo, las iteraciones no tienen
porqué durar 30 minutos exactos. Nosotros, como novedad, y como ahorro de
energía (parece mentira, pero es bastante agotador), en la última iteración
hicimos <a href="https://en.wikipedia.org/wiki/Mob_programming">mob programming</a>. Y, todo sea dicho, es la iteración que menos
avanzamos. El cansancio y las restricciones acumuladas hacían mella en
nosotros. Había que tener en cuenta más de dos puntos de vista, ya no era
programar en parejas.</p>

<p>Es curioso, este año he sentido que he avanzado más en la solución al problema
que en otras ocasiones. No estoy seguro, mirándolo con perspectiva, es como si
este año hubiera estado más centrado en el software y no tanto en las personas.
Puede que haya sido porque he afrontado el evento con más tranquilidad, al
pensar/saber que allí encontraría a algún conocido.</p>

<h2>La gente</h2>

<p>Aunque sienta que he estado más centrado en el software que en la gente, este
tipo de eventos tratan sobre la profesión y los profesionales. Por eso me
gustaría recordar que allí me volví a encontrar con gente como <a href="http://juandavidvega.es/">Juan David</a>,
<a href="https://twitter.com/HelderDOliveira">Helder</a> y <a href="http://twitter.com/luisrovirosa">Luis</a>, organizadores y facilitadores del evento.</p>

<p>Me reencontré con <a href="https://twitter.com/APA42">Alberto</a>, o bueno, más bien él me reencontró a mí, al
principio no le reconocí, y juraría que ya nos habíamos visto anteriormente.</p>

<p>Casualidades de la vida, conocí a un alcalaíno, <a href="https://twitter.com/amisai">Abel</a>. Y como buen habitante
de la vega del Henares, espero verle mucho por <a href="https://twitter.com/codenares">Codenares</a>, la comunidad de
desarrollo del&#8230; Henares, sí.</p>

<p>También tuve reencuentros de hace muchísimo tiempo, de <a href="http://rchavarria.github.io/blog/2014/11/18/mi-primer-code-retreat/">mi primer GDCR</a>, del
cual guardo un grato recuerdo, donde conocí a <a href="https://twitter.com/rafael_luque">Rafa</a>.</p>

<p>Y algún otro que no pude quedarme con una forma de contactar con ellos, como
Enrique, pero que seguro que nos volveremos a ver en un <em>fregao</em> de estos.</p>

<h2>Agradecimientos</h2>

<p>Por supuesto a <a href="http://idealista.com">idealista</a>, por facilitar las instalaciones y la comida&#8230; y
gente, que estuvieron allí para que los demás pudieramos disfrutar. Y también,
cómo no, a los facilitadores/organizadores Juan David, Helder y Luis.</p>

<p>¡Gracias!</p>

<h2>Referencias</h2>

<ul>
<li>Libro sobre el <a href="https://leanpub.com/4rulesofsimpledesign">Juego de la vida</a></li>
<li>Repositorio de <a href="https://github.com/SoftwareCraftersMadrid/global-day-of-coderetreat-2017">Software Crafter Madrid</a> sobre el evento y <a href="https://www.meetup.com/es-ES/madswcraft/photos/28339208/">algunas fotos</a>
nada comprometedoras</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: undécimo asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2017/10/30/elixir-undecimo-asalto/"/>
    <updated>2017-10-30T21:06:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2017/10/30/elixir-undecimo-asalto</id>
    <content type="html"><![CDATA[<p>Nos acercamos al final y en este asalto aprenderemos qué son las <a href="https://elixir-lang.org/getting-started/mix-otp/supervisor-and-application.html">Aplicaciones
OTP</a>, aunque en realidad ya hemos estado usando algunas. Aprenderemos cómo
<code>mix</code> facilita mucho la tarea y cómo esta herramienta nos permite empaquetar
nuestra aplicación para ser distribuida. Aprenderemos a definir el punto de
entrada de ejecución y cómo pasar parámetros iniciales. Las aplicaciones, junto
con los servidores y supervisores OTP hacen de este framework una herramienta
potentísima para desarrollar aplicaciones.</p>

<p>Todo esto, siguiendo el <a href="http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir/">método de aprendizaje</a> con el que comenzé la serie:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="center" src="http://rchavarria.github.io/images/2017/fingers.jpg"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/9cXZUG">Asaltos</a> de <a href="https://www.flickr.com/photos/antoniobugarin/">Antonio Bugarin</a>, <a href="https://creativecommons.org/licenses/by/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by/2.0/">CC BY 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<h4>Aplicaciones OTP</h4>

<p>Una <em>aplicación</em> en el mundo Elixir no es lo que normalmente conocemos como
tal. El término viene del mundo Erlang, y con <em>aplicación</em> se refieren más a lo
que comúnmente conocemos como componente, o servicio (¿microservicio podría
valer aquí?, probablemente). Una aplicación OTP en Elixir es como un servicio
del que puede depender de otros servicios, y que puede arrancar servidores y
supervisores.</p>

<p>Por lo general, las aplicaciones son dependencias de los programas que estamos
desarrollando. Pero otras aplicaciones residen en la parte más alta del árbol
de procesos, y éstas están diseñadas para ejecutarse directamente.</p>

<p><strong>El fichero de configuración de la aplicación</strong></p>

<p>La herramienta <code>mix</code> crea un fichero llamado <code>&lt;tu-aplicacion&gt;.app</code>. Este
fichero es la especificación de la aplicación, y contiene información que se
suele escribir en <code>mix.exs</code> e información de la compilación de nuestro código.
Cuando se lanza la aplicación, este fichero es consultado para saber cómo
cargarla y arrancarla.</p>

<p><strong>Creando una aplicación OTP</strong></p>

<p>En realidad ya hemos creado varias. Por ejemplo, el programa <em>Sequence</em>, de la
ronda anterior, lo ejecutábamos como si fuera una aplicación OTP. Cuando
creamos un nuevo proyecto con <code>mix</code>, éste añade un supervisor por defecto e
información en <code>mix.exs</code> para poder ejecutar el proyecto como una aplicación.
Más concretamente, <code>mix</code> crea la función <code>application</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def application do
</span><span class='line'>  [
</span><span class='line'>    mod: { Sequence, [] }
</span><span class='line'>  ]
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>El código anterior indica que el módulo principal se llama <code>Sequence</code>. OTP
asume que dicho módulo implementa una función llamada <code>start</code> (porque Elixir
define un <em>behaviour</em> <code>Application</code> que deben implementar las aplicaciones OTP
para ser consideradas como tal), a la cual le va a pasar el parámetro indicado
en la tupla (en este caso un array vacío). Si la tupla hubiera sido <code>{
Sequence, 1234 }</code> el parámetro pasado a la función <code>start</code> hubiera sido <code>1234</code>.</p>

<p>Esto es lo relativo a la opción <code>mod:</code>. Pero a la hora de configurar una
aplicación existe otra opción: <code>registered:</code>. Esta opción lista los nombres que
nuestra aplicación va a registrar. Podemos usar esto si queremos que dichos
nombres sean únicos entre todas las aplicaciones cargadas en el nodo o cluster:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def application do
</span><span class='line'>  [
</span><span class='line'>    mod: { Sequence, [] },
</span><span class='line'>    registered: [
</span><span class='line'>      Sequence.Server,
</span><span class='line'>      "Any other name"
</span><span class='line'>    ]
</span><span class='line'>  ]
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Ahora podemos ejecutar el comando <code>mix compile</code> para generar el fichero <code>.app</code>.
Este fichero se almacena en la ruta nada intuitiva de
<code>_build/dev/lib/sequence/ebin</code>. Este fichero define una tupla Erlang que define
la aplicación. <code>mix</code> ha añadido automáticamente los módulos de los que consta
la aplicación y las aplicaciones de las que depende, por ejemplo <code>kernel</code>,
<code>stdlib</code> o <code>elixir</code>.</p>

<p>A la hora de pasar parámetros de inicialización a las aplicaciones existe otra
posibilidad. La opción <code>env</code>, que acepta una lista de palabras clave (<em>keyword
list</em>)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def application do
</span><span class='line'>  [
</span><span class='line'>    mod: { Sequence, [] },
</span><span class='line'>    env: [ initial_number: 12334 ],
</span><span class='line'>    registered: [...]
</span><span class='line'>  ]
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Para después recuperar ese valor con <code>Application.get_env</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defmodule Sequence do
</span><span class='line'>  use Application
</span><span class='line'>  def start(_type, _args) do
</span><span class='line'>    initial_number = Application.get_env(:sequence, :initial_number)
</span><span class='line'>    #...</span></code></pre></td></tr></table></div></figure>


<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li><p><a href="https://github.com/rchavarria/learning-elixir/tree/master/code/round-11/stack">Ejercicio 1</a>: convierte tu servidor <code>Stack</code> en una aplicación OTP</p></li>
<li><p><a href="https://github.com/rchavarria/learning-elixir/tree/master/code/round-10/sequence">Ejercicio 2</a>: hasta ahora no hemos testeado para nada ninguna aplicación.
Mira a ver qué puedes hacer. Testear un server no parece algo muy sencillo,
no parece que se pueda ejecutar a la primera, porque el server debería estar
ejecutándose para poder <em>funcionar</em>. Pero Elixir está muy enfocado a los tests
automáticos, así que algo debe de existir.</p></li>
</ul>


<p><strong>Resultados</strong></p>

<p>Y tanto que existe. Encontré el artículo <a href="http://elixir-lang.org/getting-started/mix-otp/genserver.html#testing-a-genserver">cómo se testea un <code>GenServer</code></a>, en la
documentación oficial: básicamente, en el <em>set up</em> de los tests, se levanta el
server. Luego, se puede llamar a la API del servidor tranquilamente. Al
parecer, si el proyecto está configurado como una aplicación, <code>mix</code> arranca la
aplicación, por lo que no hace falta levantar el server en el <em>set up</em>. Lo
malo, que no se puede inicializar con ningún valor de test.</p>

<h2>Enseñar lo aprendido, y repetir desde el paso 7</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta
el siguiente asalto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[99 bottles of OOP]]></title>
    <link href="http://rchavarria.github.io/blog/2017/10/19/99-bottles-oop/"/>
    <updated>2017-10-19T22:06:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2017/10/19/99-bottles-oop</id>
    <content type="html"><![CDATA[<h5>de Sandi Metz y Katrina Owen</h5>

<p><img class="left" src="http://rchavarria.github.io/images/2017/99-bottles-of-oop.jpg" width="250" height="323"></p>

<h2>Por qué lo he leído</h2>

<p>No conozco personalmete a ninguna de las 2 autoras, pero soy un fan de Sandi y
colaboro en un proyecto open source de Katrina, ¿cómo no iba a leer
<a href="https://www.sandimetz.com/99bottles">99 bottles of OOP</a>?</p>

<p>Ya había leído con anterioridad el libro de Sandi, <a href="http://www.poodr.com/">Programming OODR</a> y me
gustó muchísimo, así que este libro prometía. También había visto alguna charla
de Katrina sobre refactorizaciones, y me asombraron muchísimo, por su claridad
y por su calidad.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Considero que ambas autoras son un referente en el mundo del desarrollo de
software, por lo que esperaba que el libro me enseñara nuevos temas o ideas
sobre los que aprender y profundizar.</p>

<p>Según había escuchado en algunas entrevistas a las autoras, el libro basa sus
<em>enseñanzas</em> en un caso real, solucionando un problema sencillo, ideal para
realizar en katas, por lo que esperaba que todos los conceptos serían fáciles
(o al menos más fáciles) de entender ya que estarían ilustrados con código real
y ejecutable (mira, como si fueran tests).</p>

<h2>Qué encontre</h2>

<p>Encontré la historia de una refactorización. Sandi y Katrina exponen primero
varias formas de resolver un problema, en principio sencillo, y después van
desgranando una de ellas. Poco a poco, cambio a cambio, refactorización a
refactorización, van cambiando el código hacia una solución muy pulida.</p>

<p>Es impresionante ver cómo van justificando cada cambio. Es como leer tus
propios pensamientos, pero un paso más allá. Muchos de los cambios que proponen
parecen de perogrullo, pero muy pocas veces me he parado a pensar por qué me
parecen así. Es como si racionalizaran el instinto del programador.</p>

<h2>Conclusiones</h2>

<p>Es impresionante cómo va describiendo la refactorización línea a línea. Elimina
multitud de code smells, muchas veces de línea en línea, apoyándose en tests.
Es una gozada ver cómo va quedando el código</p>

<p>(&#8230;) es un acto de bondad hacia el lector de tu código. El código que revela
su intención está construido en base a la acumulación de actos así de
intencionados. Programa intencionadamente (escribe un <code>case</code> en lugar de un
<code>if</code> para indicar que las condiciones están relacionadas). <strong>Es una pasada como
el libro racionaliza estas decisiones y las explica</strong></p>

<p>Resulta interesante cómo nombra las cosas, conceptos, clases, variables,&#8230;
Nombrado es una de las cosas más difíciles en Computer Science.</p>

<h2>Qué he aprendido</h2>

<p>Una forma de ser mejor identificando olores en el código es practicar
describiendo las características del código, tomando nota de las cosas que te
llaman la atención: incluye cualquier patrón que veas, y cosas que te gustan,
odias o que simplemente no entiendes.</p>

<p>Si el código no está abierto a modificaciones y no sabes por dónde empezar&#8230;
empieza eliminando olores en el código. No sabes cómo hacer que el código esté
abierto a modificaciones, así que empiezas a eliminar olores, con la esperanz
de encontrarlo por el camino</p>

<p>Los programadores habilidosos hacen lo correcto cuando intuyen la verdad.
Cuando no la intuyen, se embarcan en experimentos cuidadosos, precisos,
reproducibles y reversibles.</p>

<p>Los atajos demasiado inteligentes son una falsa economía. Invierte en código
que diga la verdad. Simplemente escríbelo. Di no a los atajos, di no a las
chapuzas y ñapas.</p>

<p>Unos consejos que podrían resumir el libro completo serían: busca la
simplicidad, no crees abstracciones demasiado pronto, enfócate en los olores
del código, anda en pasos pequeños, sigue las <em>Flocking rules</em>, refactoriza
siempre en verde, arregla los problemas sencillos primero, trabaja
horizontalmente (cambios horizontales, nunca verticales), buscar puntos de
estabilidad, sé disciplinado, no persigas las cosas brillantes/famosas/de moda</p>

<h2>Frases que me gustaría recordar</h2>

<blockquote><p>Escribir código es el proceso de encontrar el camino hasta el siguiente punto
estable, no el punto final en sí mismo. No es el resultado final, si no el
camino.</p></blockquote>

<!-- more -->


<blockquote><p>El código como el método <code>pluralize</code> (que devuelve <code>bottle</code> o <code>bottles</code>
dependiendo de un número) se escribe cuando los programadores se llevan el
principio DRY al extremo. Cuando te encuentres en una situación como esta,
hazte las siguientes preguntas. Estas mismas preguntas también te ayudarán a
saber si tu código es bueno o costoso.</p></blockquote>

<ol>
<li>El cambio que voy a hacer, ¿hace el código más difícil de entender? Cuando
las abstraciones son las correctas, el código es fácil de entender.</li>
<li>¿Cuál es el coste futuro de no hacer nada ahora? Si no hacer nada no
incrementa los costes, retrasa los cambios.</li>
<li>¿Cuando llegará ese momento?, o ¿cuánto tardaré en obtener más información?
Tolera pacientemente la duplicación si haciéndolo te ayuda a descubrir la
abstracción correcta.</li>
</ol>


<!-- more -->


<blockquote><p>Kent Beck describe diferentes formas de hacer que tus tests pasen. 3 de sus
<em>Green Bar Patterns</em> son:</p></blockquote>

<ol>
<li>Fake It (&#8220;Til You Make It&#8221;): este estilo de TDD puede parecer extraño y
tedioso, pero con práctica puede llegar a ser natural y rápido</li>
<li>Obvious Implementation: cuidado con ir directamente a la solucion obvia, te
puede llevar por el camino equivocado. Desarrollar el hábito de escribir
solamente el código suficiente para hacer que el test pase te fuerza a escribir
mejores tests.</li>
<li>Triangulate: dirigir las abstracciones conservativamente con los tests. La
triangulación requiere escribir varios test de una sola vez, lo que
significa que tendrás varios test fallando simultáneamente. La idea es escribir
el código necesario para hacer que todos esos tests pasen de forma simultánea.</li>
</ol>


<!-- more -->


<blockquote><p>Hacer que el código existente esté abierto a nuevos requisitos requiere
normalmente de identificar y nombrar abstracciones. Las <em>Flocking Rules</em> se
centran en hacer que las diferencias parezcan similitudes, y por eso son una
herramienta muy útil para descubrir abstracciones. Las Flocking Rules
seleccionan las cosas más parecidas, encuentran la menor diferencia entre ellas
y hacen el cambio más simple para eliminar esa diferencia (evalúa el código,
evalúa y ejecuta, evalúa y usa el código, evalúa, y finalmente borra el código
no usado)</p></blockquote>

<!-- more -->


<blockquote><p>Cuando estés sufriendo por encontrar un buen nombre pero sólo tienes unas
cuantas ocurrencias para guiarte, puede ser de ayuda imaginarte otras cosas que
podrían encajar en la misma catergoría, y luego construir una tabla con los
conceptos.</p></blockquote>

<!-- more -->


<blockquote><p>El Principio de Sustitución de Liskov también aplica a los tipos dinámicos (o
<em>duck types</em>). Las violaciones de Liskov fuerzan a los que envían mensajes a
tener conocimiento sobre varios tipos devueltos, y tratar con ellos de forma
distinta o convertirlos en algo consistente.</p></blockquote>

<!-- more -->


<blockquote><p>No todos los condicionales son malos en la Programación Orientada a Objectos,
hay un lugar para ellos. Algún objeto, en algún lugar, debe elegir qué objetos
crear para las composiciones, y eso normalmente involucra condicionales.</p></blockquote>

<!-- more -->


<blockquote><p>Tener un <strong>data clump</strong> significa normalmente que estás necesitando un
concepto. Cuando esta acumulación se envía como un conjunto de parámetros, el
método que recibe el <em>clump</em> se puede ver inundado con facilidad con lógica
para gestionarlo. Alguna de esta lógica inevitablemente acabará duplicándose en
distintos lugares. Si dos cosas aparecen siempre juntas, es una señal de que
esa pareja representa un concepto más profundo y que necesitamos darle un
nombre.</p></blockquote>

<!-- more -->


<blockquote><p>Los programadores añaden líneas en blanco para acentuar cambios en la temática.
La presencia de múltiples temas sugiere la existencia de múltiples
responsabilidades, lo que hace el código más difícil de entender y leer,
mientras que hace más fácil causar daños cuando haya que hacer algún cambio.</p></blockquote>

<!-- more -->


<blockquote><p>El truco para avanzar usando cambios de una sola línea es alterar temporalmente
la factoría para tolerar varios tipos de entrada. A veces, a la hora de cambiar
condicionnales con polimorfismo, hay momentos en los que algún código debe
soportar varios tipos, hasta que todo el código está adaptado. Especialemente,
si vamos haciendo cambios de una sóla línea</p></blockquote>

<!-- more -->


<blockquote><p>Corregir violaciones de Liskov es importante, porque en lenguajes orientados a
objetos (sobretodo los tipados dinámicamente), se basan en la confianza
explícita en los contratos implícitos entre los objetos. Se trabaja muy bien
con objetos de confianza, porque siempre se comportan como se espera de ellos.
Los objetos que a veces fallan en responder a un mensaje que les envías, o que
ocasionalmente devuelven algo que no esperas, son un dolor, y requieren que los
objetos que les llamen deban conocer demasiadas cosas.</p></blockquote>

<h2>Recursos relacionados</h2>

<ul>
<li>El libro en sí: <a href="https://www.sandimetz.com/99bottles">99 bottles of OOP</a></li>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/99-bottles-by-sandi-katrina.notes.markdown">Notas sobre 99 bottles of OOP</a></li>
<li>Nuevo libro, <a href="foo/bar/bar/foo.html">Refactoring to patterns</a>, de Joshua Kerievsky, donde habla de
<em>Gradual Cutover Refactoring</em></li>
<li>Las autoras: <a href="https://www.sandimetz.com/">Sandi Metz</a> y <a href="http://www.kytrinyx.com/">Katrina Owen</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: décimo asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2017/06/07/elixir-decimo-asalto/"/>
    <updated>2017-06-07T21:29:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2017/06/07/elixir-decimo-asalto</id>
    <content type="html"><![CDATA[<p>En este asalto aprenderemos qué son los <a href="https://elixir-lang.org/getting-started/mix-otp/supervisor-and-application.html">Supervisores OTP</a> y cómo se puede
crear una estructura jerárquica de ellos de forma que monitoricen nuestros
procesos y sean capaz de arrancar nuevos procesos en caso de que alguno de
ellos falle. También veremos cómo unos procesos sirven de ayuda para guardar el
estado de aquellos procesos que necesitan ser tolerantes a fallos.</p>

<p>Todo esto, siguiendo el <a href="http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir/">método de aprendizaje</a> con el que comenzé la serie:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="center" src="http://rchavarria.github.io/images/2017/darth-grader.jpg"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/pxJ3o5">Darth Grader</a> de <a href="https://www.flickr.com/photos/jdhancock/">JD Hancock</a>, <a href="https://creativecommons.org/licenses/by/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by/2.0/">CC BY 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<h4>Supervisores OTP</h4>

<p>La forma de hacer las cosas en Elixir es no preocuparse mucho por el código que
falla, si no asegurarse de que la aplicación en general sigue corriendo. Suena
contradictorio, pero no lo es. En Elixir los procesos son muy pequeñitos, por
lo que si uno de ellos falla, casi todo el sistema sigue funcionando. Al
contrario que en otros lenguajes, donde el lanzamiento de una excepción puede
hacer que todo el servidor sufra. <strong>En el mundo OTP, los supervisores son
quienes monitorizan y recuperan esos procesos fallidos</strong>.</p>

<p>Un supervisor en Elixir tiene un único propósito: manejar uno o más <em>workers</em>
(otro tipo de procesos). La forma de funcionar es darle una lista de procesos e
indicarle qué hacer con cada uno de ellos en caso de que falle. La forma más
fácil de crear un supervisor es crear un nuevo proyecto con <code>mix</code> y usar el
flag <code>--sup</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defmodule Sequence do
</span><span class='line'>  use Application
</span><span class='line'>  def start(_type, _args) do
</span><span class='line'>    import Supervisor.Spec, warn: false
</span><span class='line'>    children = [
</span><span class='line'>      worker(Sequence.Worker, [arg1, arg2, arg3])
</span><span class='line'>    ]
</span><span class='line'>    opts = [strategy: :one_for_one, name: Sequence.Supervisor]
</span><span class='line'>
</span><span class='line'>    # create the supervisor with a list of workers and some options
</span><span class='line'>    Supervisor.start_link(children, opts)
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<h4>Gestionando el estado del servidor entre reinicios</h4>

<p>Como se puede comprobar al jugar con el supervisor y el servidor creados en el
[Ejercio 01], el servidor es reiniciado, pero no mantiene el estado anterior al
fallo, si no que siempre se reinicia con el estado inicial, indicado a la hora
de crear el supervisor. Esto se puede mejorar.</p>

<p>La forma de mantener el estado es almacenándolo fuera del proceso servidor.
Esto se hace mediante un nuevo <em>worker</em>, un nuevo servidor, al que se le llama
<em>stash</em>. Nuestro servidor almacenará su estado actual en ese <em>stash worker</em>. El
<em>stash worker</em> debe ser monitorizado por un supervisor diferente, por lo que
tenemos que crear un arbol de supervisores. En este árbol, nuestro <em>worker</em>
principal debe conocer el PID del <em>stash</em>, con lo que la forma de crear el
árbol cambia ligeramente de la forma que hemos visto anteriormente.</p>

<p><img class="center" src="http://rchavarria.github.io/images/2017/supervisor-tree.png"></p>

<p>La aplicación funcionaría de la siguiente forma:</p>

<ol>
<li>Primero, arrancamos el supervisor raíz del árbol, pasándole el valor inicial
que será el estado inicial del sistema</li>
<li>Este supervisor arranca el <em>stash worker</em>, pasando el valor inicial (porque
este worker almacenará el estado del sistema) y arranca un sub-supervisor,
pasándole el PID del stash</li>
<li>El sub-supervisor arranca el worker principal, el que contiene la lógica,
quien incrementa el valor inicial con el que arrancamos el sistema</li>
<li>El worker principal, nada más arrancar, consulta al stash worker el estado
actual, y es con ese estado con el que va a trabajar</li>
<li>Si el worker principal falla por cualquier causa, debe enviar su estado al
stash worker, para que lo almacene</li>
<li>El sub-supervisor detectará que el proceso a muerto y reiniciará de nuevo el
worker principal, que leerá el estado del worker que murió del stash worker</li>
</ol>


<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/tree/master/code/round-10/stack">Ejercicio 1</a>: añade un supervisor a la aplicación anterior que implementaba
una pila de enteros</li>
</ul>


<p><strong>Resultado</strong></p>

<p>Increíble, increíble que sea tan fácil. Lo primero, el supervisor arranca él
solito y levanta el servidor él solito también. Super cómodo. Luego, captura
los errores y levanta de nuevo el servidor sin que nosotros tengamos que hacer
nada más. Para hacer fallar a la pila, se podía hacer con un
<code>Stack.Server.push -1</code>. El supervisor captura el fallo, y rearranca el
servidor.</p>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/tree/master/code/round-10/sequence">Ejercicio 2</a>: vuelve a crear una aplicación similar a la anterior, pero
creando un árbol de supervisores, y un stash worker, de forma que cuando el
worker principal falle, el estado sea guardado. Comprueba que el sistema
mantiene el estado cuando el worker principal falla</li>
</ul>


<h2>Enseñar lo aprendido, y repetir desde el paso 7</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta
el siguiente asalto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tests de integración lentos]]></title>
    <link href="http://rchavarria.github.io/blog/2017/04/17/tests-de-integracion-lentos/"/>
    <updated>2017-04-17T21:56:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2017/04/17/tests-de-integracion-lentos</id>
    <content type="html"><![CDATA[<p>Es una sensación extraña, pero me pasa a veces. Se supone que las máquinas, los ordenadores, son más rápidos que nosotros haciendo según qué cosas. Aún así, hay muchas veces que me desespero. Seguro que más de una vez te has puesto de los nervios porque tu ordenador tardaba mucho en finalizar una tarea: copiar un fichero, abrir un documento, cargar una página web,&#8230; Pues una cosa que me exaspera mientras estoy trabajando es esperar a que los tests terminen de ejecutarse.</p>

<p>El post de hoy va de una historia de abuelo cebolleta: hace un tiempo, tuvimos una <em>discusión</em> en la oficia, dentro del equipo con el que trabajo. Estuvimos discutiendo sobre cómo hacer nuestros tests de integración más rápidos.</p>

<p>Por aquel momento teníamos un gran número de tests de integración, más o menos emparejado con el número de tests unitarios. Bueno, sí, ya empezamos mal. Estoy de acuerdo con la teoría de que es mucho mejor tener una <a href="https://martinfowler.com/bliki/TestPyramid.html"><em>pirámide</em> de tests</a>, no un <a href="https://watirmelon.blog/2012/01/31/introducing-the-software-testing-ice-cream-cone/">cucurucho de tests</a>. Pero esa era nuestra realidad. La verdad es que a día de hoy, hemos conseguido tener muchos más tests unitarios que de integración, pero esa es otra historia.</p>

<!-- more -->


<p>Evidentemente, cuantos más tests de integración tenemos, más tiempo tardan éstos en ejecutarse. Pero eso no es excusa para quedarnos de brazos cruzados y esperar un cuarto de hora a que terminen de pasar los tests. La verdad es que sí, que tardan un rato en completarse. Son de integración, y el que no accede a la base de datos, accede a disco, y el que no hace una petición HTTP, el que no&#8230; Coges la idea ¿verdad? Integración. Acceso a sistemas externos. Len ti tud. ¡Ay!</p>

<p>J.B. Rainsberger ya lo lleva diciendo mucho tiempo: los <a href="http://blog.thecodewhisperer.com/permalink/integrated-tests-are-a-scam">tests de integración son un dolor</a>, y además, hacen que cada vez vayas más lento. Pero eso no quita que no sea necesario un cierto número de tests de integración.</p>

<!-- imagen gif animado de alguna chorrada de test unitario pero no de integración -->


<div style="width: 640px; margin: 0 auto">
  <iframe src='https://gfycat.com/ifr/HotOrangeCoypu' frameborder='0' scrolling='no' width='640' height='640' allowfullscreen></iframe>
</div>


<p>Y entonces&#8230; ¿qué puntos se discutían?</p>

<p>Por una lado cada tests individual se encarga de dejar la base de datos tal y como estaba antes de ejecutarse (propiedad de <em>aislamiento</em> de los tests). Pero, ¿por qué? ¿Qué tal si al lanzar los tests se crea una nueva base de datos? Limpia, desde cero, y los tests la dejan en un estado cualquiera, no necesariamente limpia. De esta forma, los tests serán más rápidos, ya que se ahorran unas cuantas llamadas para limpiar datos. Por supuesto, utilizaríamos una base de datos distinta a la de cualquier entorno existente, no queremos que los tests interfieran con ellos.</p>

<p>Pero había algunos problemas. Los datos <em>basura</em> de unos tests podrían interferir en otros tests. O los últimos en ejecutarse podrían depender de tests anteriores y no darnos cuenta.</p>

<p>Por otro lado, si descuidamos los tests y no hacemos que limpien todo, terminaremos por ser vagos y hacer malos tests. Podemos incluso tener errores al borrar algunos registros. Total, nos da igual, en la siguiente ejecución, los tests van a empezar con una base de datos limpia.</p>

<p>También, utilizando la misma base de datos que en desarrollo, nos aseguramos que testeamos algo real, algo que usamos en nuestro día a día (aunque tenga sus diferencias con la de producción, por supuesto). Si lo hacemos contra otra base de datos, podemos estar desactualizados en algunas configuraciones, podemos estar falseando algunas características.</p>

<p>Además de todo eso, también surgieron ideas curiosas, por ejemplo, paralelizar la ejecución de los tests. Quizá así podríamos acelerar su ejecución. Por lo pronto, lo que sí hicimos para mejorar el tiempo de ejecución fue minimizar al máximo en número de conexiones a la base de datos desde los tests. No recuerdo la cifra, pero redujimos por lo menos un tercio el tiempo de ejecución de los tests de integración.</p>

<p>Y tú, ¿qué crees? ¿qué sería mejor? ¿utilizar una base de datos nuevecita para cada ejecución de los tests?</p>

<h2>Referencias</h2>

<ul>
<li><a href="https://martinfowler.com/bliki/TestPyramid.html">Pirámide de tests</a>, en contraposición al <a href="https://watirmelon.blog/2012/01/31/introducing-the-software-testing-ice-cream-cone/">cucurucho de tests</a></li>
<li>Los <a href="http://blog.thecodewhisperer.com/permalink/integrated-tests-are-a-scam">tests de integración son un dolor</a></li>
<li><a href="http://agileinaflash.blogspot.com.es/2009/02/first.html">Propiedades FIRST</a> de los tests</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ready player one]]></title>
    <link href="http://rchavarria.github.io/blog/2017/03/26/ready-player-one/"/>
    <updated>2017-03-26T20:52:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2017/03/26/ready-player-one</id>
    <content type="html"><![CDATA[<h5>de Ernest Cline</h5>

<h2>Por qué lo he leído</h2>

<p><img class="left" src="http://rchavarria.github.io/images/2017/ready-player-one.jpg"></p>

<p>La primera vez que leí una recomendación sobre el libro fue en <a href="http://www.microsiervos.com/archivo/libros/ready-player-one.html">Microsiervos</a>.
Comentaban que era un libro de ciencia ficción relacionado con los videojuegos
con muchísimas referencias a videojuegos de los años 80.</p>

<p>Al principio no estaba seguro si me gustaría o no. Puede que conozca unos
cuantos juegos de los 80, pero por aquellos años yo era aún un niño, así que no
estaba seguro de que fuera a entender todas esas referencias.</p>

<p>Pero más adelante, los de Microsiervos lo volvieron a recomendar, y un poco
después escuché otra recomendación por parte de Kevin Kelly en el
<a href="http://fourhourworkweek.com/2016/06/05/kevin-kelly-ai-virtual-reality-and-the-inevitable">podcast de Tim Ferris</a>. Uno no se puede resistir a tantas recomendaciones.</p>

<!-- more -->


<h2>De qué trata el libro</h2>

<p>La historia que cuenta el libro está ubicada en un tiempo futuro. Un tiempo
donde todo gira alrededor de internet. La vida digital tiene más peso que la
vida <em>analógica</em>. Pero no todo el mundo se puede permitir las mejores
conexiones a internet.</p>

<p>El protagonista es un estudiante que no tiene una vida fácil. Pero le apasionan
los videojuegos.</p>

<p>Un creador de videojuegos ha creado el mejor videojuego de todos los tiempos.
Es un juego de realidad virtual donde cada jugador está representado por un
avatar y la acción se desarrolla en un mundo virtual. Ese mundo tiene multitud
de escenarios, planetas, ciudades y edificios, los avatares se reúnen, chatean
o hacen videoconferencias. Vamos, todo lo que se puede hacer online, se hace a
través del videojuego. El hecho es que el creador del juego muere, pero antes
de morir organiza un concurso dentro del videojuego, y aquel que gane el
concurso obtendrá un premio que le cambiará la vida.</p>

<p>El concurso trata de encontrar tesoros, de buscar pistas, de superar
pruebas,&#8230; Todos ellos referenciando a juegos de la juventud del creador de
juegos, que resulta que son juegos reales de los años 80 y 90. Un jugador
importante de este concurso, es nuestro protagonista, que por más suerte que
otra cosa, es quien supera la primera prueba, lo que desencadena una carrera
frenética por conseguir el premio.</p>

<h2>Conclusiones y valoración</h2>

<p>El libro es una pasada. La historia es sencilla, a veces predecible, pero tiene
unos cuantos giros inesperados que te hacen disfrutar. La trama no es
complicada para nada de seguir. Aún así, hace infinitos guiños a la historia de
los videojuegos. Personalmente, no he entendido todos de ellos, pero si has
jugado a algún videojuego en tu vida, seguro que sentirás muchas conexiones.</p>

<p>También resulta muy interesante para alguien muy relacionado con la tecnología,
como yo, pues el autor describe hardware y software que podrían ser realidad
hoy en día, pero quizá no están muy extendidos entre la gente o es una
tecnología un poco verde todavía, pero puede que sean realidad dentro de pocos
años.</p>

<p>Si eres un apasionado de los videojuegos (aunque no hayas conocido los inicios
de ellos) o si eres un apasionado de la tecnología, estoy seguro de que este
libro te encantará y disfrutarás leyéndolo. Y si no te apetece leer, puedes
esperar a la película (prevista para marzo de 2018, según <a href="http://www.imdb.com/title/tt1677720/?ref_=nv_sr_1">IMDB</a>).</p>

<h2>Notas tomadas</h2>

<p>Simplemente, tomé esta nota:</p>

<blockquote><p>(Hablando sobre comecocos) Permitía vencer a un rival controlado por
ordenador. En un juego como ese, un jugador humano con talento siempre podía
ganar a la máquina, porque el software no era capaz de improvisar. O bien
reaccionaba aleatoriamente, o en un número limitado de formas
predeterminadas, basadas en una cifra finita de condiciones programadas con
antelación. Ese era un axioma de los videojuegos, y seguiría siéndolo hasta
que los seres humanos inventen la verdadera inteligencia artificial.</p></blockquote>

<p>¿Estaremos ya cerca de ese <em>final</em>? Espero que no. Los videojuegos perderán su
gracia.</p>

<h2>Referencias</h2>

<ul>
<li><a href="http://www.amazon.es/gp/product/B00UVAREXK/">Ready player one</a> en Amazon</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cómo desplegar una aplicación Elixir/Phoenix en Heroku]]></title>
    <link href="http://rchavarria.github.io/blog/2017/03/19/desplegar-aplicacion-elixir-phoenix-heroku/"/>
    <updated>2017-03-19T13:44:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2017/03/19/desplegar-aplicacion-elixir-phoenix-heroku</id>
    <content type="html"><![CDATA[<p><a href="http://heroku.com/">Heroku</a> es una plataforma donde los desarrolladores pueden desplegar sus aplicaciones (sobretodo está pensado para aplicaciones web) y hacerlas públicas de forma gratuita o por un pequeño precio. Yo he utilizado a veces este servicio para hacer pruebas con servidores en JavaScript (NodeJS) o PHP, pero también admite muchos otros lenguages de programación: Ruby, Java, Python, Go,&#8230;</p>

<p><img class="center" src="http://rchavarria.github.io/images/2017/elixir-phoenix-heroku.png"></p>

<p>No es ningún secreto que estoy <a href="http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir/">tonteando con Elixir</a>, y <a href="http://www.phoenixframework.org/">el framework Phoenix</a> es el framework por referencia para crear aplicaciones web en Elixir. Pero ese no es un lenguaje soportado por Heroku, así que parecía un poco complejo poder hacer unas pruebas desplegando una aplicación Elixir/Phoenix en Heroku.</p>

<p>Por suerte, <a href="http://wsmoak.net/about.html">Wendy Smoak</a> escribió un artículo hace un tiempo hablando de esto mismo: <a href="http://wsmoak.net/2015/07/05/phoenix-on-heroku.html">Deploying a Phoenix app to Heroku</a>. Dicho artículo tiene licencia <a href="http://creativecommons.org/licenses/by-nc/3.0/">Creative Commons CC-BY-NC</a>. Este post no es una traducción en sí, pero como está basado en él me parece justo y obligatorio respetarla. Así que este post está basado en el artículo <a href="http://wsmoak.net/2015/07/05/phoenix-on-heroku.html">Deploying a Phoenix app to Heroku</a>, de <a href="http://wsmoak.net/about.html">Wendy Smoak</a>, y también está licenciado bajo la <a href="http://creativecommons.org/licenses/by-nc/3.0/">Creative Commons CC-BY-NC</a>, digan lo que digan el resto de posts de este blog.</p>

<!-- more -->


<h2>Requisitos</h2>

<p>Para poder llevar a cabo el despliegue, necesitamos todas estas herramientas. Yo lo he probado con estas versiones:</p>

<ul>
<li>Elixir, versión 1.3.1. El cuál, necesita Erlang/OTP, por ejemplo la versión 19</li>
<li>Phoenix, versión 1.2.1</li>
<li>Phoenix necesita de NodeJS, yo tengo instalada la versión 5.12.0; y también necesita (normalmente) de una base de datos, comúnmente, PostgreSQL, yo he utilizado la versión 9.5, que viene mi distribución Ubuntu</li>
<li>Git, versión 2.7.4</li>
<li>Heroku toolbelt, versión 3.43.14; Heroku CLI, versión 5.6.31; este post también asume que nos hemos dado de alta en Heroku y hemos configurado estas herramientas.</li>
</ul>


<h2>Creando una aplicación Phoenix</h2>

<p>Crear el esqueleto de una aplicación Phoenix es ridículamente sencillo, simplemente un comando:</p>

<pre><code>$ mix phoenix.new rchavarria_deploys_phoenix_heroku
[ ... ]
Fetch and install dependencies? [Yn] Y
[ ... ]
</code></pre>

<p>Para poder llevar un control de lo que hacemos o dejamos de hacer, pondremos la aplicación bajo un control de versiones. Además, Heroku está pensado para funcionar con aplicaciones donde el control de versiones es Git, así que&#8230;</p>

<pre><code>$ cd rchavarria_deploys_phoenix_heroku
$ git init
$ git add .
$ git commit -m "Primera piedra de la aplicación Phoenix desplegada en Heroku"
</code></pre>

<p>Si queremos, podemos subir esta aplicación a GitHub u otro servicio que nos permita tener nuestras aplicación bajo Git.</p>

<h2>Creando una aplicación Heroku</h2>

<p>También es muy sencillo:</p>

<pre><code>$ heroku create
Creating app... done, ⬢ dry-anchorage-96713
https://dry-anchorage-96713.herokuapp.com/ | https://git.heroku.com/dry-anchorage-96713.git
Git remote heroku added
</code></pre>

<p>También se puede indicar el nombre de nuestra app en el comando <code>heroku create</code>. Heroku nos ha dado un nombre aleatorio, y podremos acceder a ella a través de la URL <a href="https://dry-anchorage-96713.herokuapp.com/">https://dry-anchorage-96713.herokuapp.com/</a>.</p>

<p>Heroku habrá añadido un nuevo <em>remote</em> a nuestro repositorio de <code>git</code>:</p>

<pre><code>$ git remote -v
heroku  https://git.heroku.com/dry-anchorage-96713.git (fetch)
heroku  https://git.heroku.com/dry-anchorage-96713.git (push)
</code></pre>

<h2>Añadiendo <em>buildpacks</em> a la applicación Heroku</h2>

<blockquote><p>Los <a href="https://devcenter.heroku.com/articles/buildpacks">buildpacks</a> son los encargados de transformar el código desplegado en un <em>slug</em>, el cual puede ser ejecutado en un <em>dyno</em>.</p></blockquote>

<p>Y después de toda esa jerga de Heroku, en cristiano quiere decir algo así: los <em>buildpacks</em> son un conjunto de herramientas que convierten y empaquetan tu código de forma que puedan ser ejecutados por la infraestructura de Heroku.</p>

<p>Heroku proporciona buildpacks por defecto: Java, Python, PHP, JavaScript,&#8230; Pero afortunadamente, también existen para Elixir y Phoenix, aunque no están mantenidos por Heroku.</p>

<p>Primero, debemos añadir el buildpack para Phoenix, conocido como <a href="https://github.com/gjaldon/heroku-buildpack-phoenix-static">Phoenix static buildpack</a>:</p>

<pre><code>$ heroku buildpacks:set https://github.com/gjaldon/phoenix-static-buildpack
Buildpack set. Next release on dry-anchorage-96713 will use https://github.com/gjaldon/phoenix-static-buildpack.
Run git push heroku master to create a new release using this buildpack.
</code></pre>

<p>Después, añadimos el <a href="https://github.com/HashNuke/heroku-buildpack-elixir">buildpack de Elixir</a>, configurándolo en primera posición:</p>

<pre><code>$ heroku buildpacks:add --index 1 https://github.com/HashNuke/heroku-buildpack-elixir
Buildpack added. Next release on dry-anchorage-96713 will use:
  1. https://github.com/HashNuke/heroku-buildpack-elixir
  2. https://github.com/gjaldon/phoenix-static-buildpack
Run git push heroku master to create a new release using these buildpacks.
</code></pre>

<h2>Ultimando los detalles del despliegue</h2>

<p>Si intentamos realizar ahora el despliegue, obtendremos un error:</p>

<pre><code>$ git push heroku master
[ ... ]
remote: -----&gt; Fetching app dependencies with mix
remote:     ** (Code.LoadError) could not load [...]/config/prod.secret.exs
[ ... ]
remote: ! Push rejected to dry-anchorage-96713.
[ ... ]
</code></pre>

<p>Para poder desplegar, necesitamos subir el fichero <code>prod.secret.exs</code>. Pero ese fichero está ignorado en <code>.gitignore</code>, por lo que no será subido mediante el comando <code>git push heroku master</code>. Y está ignorado por una buena razón. Ese fichero suele contener información sensible.</p>

<p>Pero tiene solución. Debemos sustituir la información sensible por valores tomados de variables de entorno. Editamos <code>prod.secret.exs</code>, de forma que quede parecido a:</p>

<pre><code>use Mix.Config

# In this file, we keep production configuration that
# you likely want to automate and keep it away from
# your version control system.
#
# You should document the content of this
# file or create a script for recreating it, since it's
# kept out of version control and might be hard to recover
# or recreate for your teammates (or you later on).
config :rchavarria_deploys_phoenix_heroku, RchavarriaDeploysPhoenixHeroku.Endpoint,
  secret_key_base: System.get_env("SECRET_KEY_BASE")

# Configure your database
config :rchavarria_deploys_phoenix_heroku, RchavarriaDeploysPhoenixHeroku.Repo,
  adapter: Ecto.Adapters.Postgres,
  username: System.get_env("DATABASE_USERNAME"),
  password: System.get_env("DATABASE_PASSWORD"),
  database: "rchavarria_deploys_phoenix_heroku_prod",
  pool_size: 20
</code></pre>

<p>También debemos editar <code>.gitignore</code>, para dejar de ignorar <code>prod.secret.exs</code>.</p>

<p>No olvides hacer commit de estos cambios:</p>

<pre><code>$ git add .
$ git commit -m "Incluir prod.secret.exs, sustituyendo secretos por variables de entorno"
</code></pre>

<h2>Desplegando</h2>

<p>Ahora sí, ya podemos desplegar.</p>

<p>El despliegue no debería dar ningún problema, porque aunque no hemos creado ninguna variable de entorno, la aplicación básica de Phoenix no accede a la base de datos, por lo que la configuración de <code>prod.secret.exs</code> no debería tener ningún efecto todavía.</p>

<pre><code>$ git push heroku master
remote: -----&gt; Elixir app detected
remote: -----&gt; Installing Erlang 18.3 (changed)
remote: -----&gt; Installing Elixir v1.3.4 (changed)
remote: -----&gt; Compiling
remote: Generated rchavarria_deploys_phoenix_heroku app
remote:        Installing Node 6.9.2...
remote: -----&gt; Building dependencies
remote: -----&gt; Finalizing build
remote: -----&gt; Launching...
remote:        https://dry-anchorage-96713.herokuapp.com/ deployed to Heroku
remote: Verifying deploy... done.
To https://git.heroku.com/dry-anchorage-96713.git
</code></pre>

<p>Y se puede ver la aplicación accediendo a <a href="https://dry-anchorage-96713.herokuapp.com/">https://dry-anchorage-96713.herokuapp.com/</a> (si es que todavía existe como aplicación Heroku).</p>

<h2>Completando la configuración</h2>

<p>Tarde o temprano, vamos a necesitar que nuestra aplicación acceda a la base de datos. Por lo que tendremos que configurar nuestras variables de entorno. Para ello, son necesarios dos pasos:</p>

<ol>
<li>Configurarlas y exportarlas en Heroku (documentación sobre <a href="https://devcenter.heroku.com/articles/config-vars">variables de configuración de Heroku</a>)</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ heroku config:set SECRET_KEY_BASE=&lt;y aquí mi secreto&gt;
</span><span class='line'>$ heroku config:set SOME_VAR=&lt;el valor para esta variable&gt;</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Editar (o crear) <code>elixir_buildpack.config</code> en la raíz del proyecto. Aquí deberemos configurar qué variables queremos exportar. Cuidado, porque estos valores sobreescriben los exportados por los buildpacks, por lo que deberemos incluir aquellas que incluyan los buildpacks de Elixir y Phoenix. Un ejemplo de <code>elixir_buildpack.config</code> podría ser tan sencillo como:</li>
</ol>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>configu_vars_to_export=(DATABASE_URL SECRET_KEY_BASE)</span></code></pre></td></tr></table></div></figure>


<h2>Agradecimientos</h2>

<p>Todo el mérito de esta información no es mío, es gracias a <a href="http://wsmoak.net/about.html">Wendy Smoak</a>, autora del post sobre el que se basa este; <a href="http://hashnuke.com/">HashNuke</a>, autor del buildpack para Elixir; <a href="http://gabrieljaldon.com/">gjaldon</a>, autor del buildpack para Phoenix; y otros que ayudaron a Wendy con sus dudas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The nature of software developent]]></title>
    <link href="http://rchavarria.github.io/blog/2017/03/05/the-nature-of-software-developent/"/>
    <updated>2017-03-05T16:06:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2017/03/05/the-nature-of-software-developent</id>
    <content type="html"><![CDATA[<h5>de Ron Jeffries</h5>

<p><img class="left" src="https://imagery.pragprog.com/products/363/rjnsd.jpg?1409862136" width="260" height="392" title="The nature of software development" ></p>

<h2>Por qué lo he leído</h2>

<p>Como casi todos los libros, por recomendación. Ví que lo recomendaba
<a href="https://carlosbuenosvinos.com/">Carlos Buenosvinos</a>, y no pude resistirme. Además, el autor es una leyenda
viva del desarrollo del software y del manifiesto Agile, así que tenía que ser
un libro de aúpa.</p>

<p>¿Un libro que trata sobre la <strong>naturaleza</strong> de la profesión a la que te
dedicas? A leerlo casi, casi, sin pensarlo.</p>

<!-- more -->


<h2>Qué esperaba y qué encontré</h2>

<p>Esperaba un libro largo, pesado. Tipo como una biblia o enciclopedia. Un
compendio de mejores prácticas, de leyes no escritas, los 101 mandamientos del
desarrollo del sofware.</p>

<p>De eso nada. <a href="https://pragprog.com/book/rjnsd/the-nature-of-software-development">The nature of sofware development</a> es un libro que se lee con una
facilidad pasmosa. Es increíble como <a href="http://ronjeffries.com/">Ron Jeffries</a> simplifica hasta los
conceptos más complejos de explicar. Hace que el proceso de desarrollo que él
explica parezca el único que debe existir, el natural, al que se debería tender
si dejáramos que las fuerzas actuaran solas (tipo naturaleza, no sé si se me
entiende la metáfora).</p>

<p>Es un libro relativamente corto, con muchas (y muy buenas) ilustraciones.
Dividido en capìtulos digeribles muy fácilmente. Un lenguaje llano, sencillo,
pero preciso.</p>

<h2>Conclusiones</h2>

<p>Por supuesto que es un libro donde se describe muchas mejores prácticas. A mí
me parece que describe el ideal de cómo se debería desarrollar un proyecto
software. Casi tan bueno, que me parece un sueño.</p>

<p>Es un libro que recomendaría leer a todo aquel que su trabajo esté relacionado
con cualquier fase en el desarrollo del software: diseño, programador, dueño de
producto,&#8230;</p>

<h2>Qué he aprendido</h2>

<blockquote><p>Las cosas van mejor si cada funcionalidad, también llamada <em>historia</em>, sólo
tardamos <strong>dos o tres</strong> días en implementarla.</p></blockquote>

<p>Coincido totalmente con esa visión. La sufro cada día. Si algo dentro del
equipo nos lleva más de 2/3 días, comenzamos a perder el foco, empiezan a
aparecer pequeñas tareas (pues ya que&#8230;) que nos hacen desviarnos del objetivo
inicial. Y al final, se hace muy difícil dar una historia por zanjada. Si
dividimos el trabajo en pequeñas historias entregables y que podamos
materializar en menos de 3 días, todo va mejor la mayor parte del tiempo.</p>

<blockquote><p>Para obtener la mejor calidad, un progreso continuado y una gran
predictabilidad, los tests y las refactorizaciones son la mejor forma
conocida de trabajar.</p></blockquote>

<!-- split -->


<blockquote><p>Necesitamos un progreso constante, regular e ininterrumpido. Para mantener un
progreso ininterrumpido, necesitamos un diseño claro y limpio todo el tiempo.
Y para conseguirlo, necesitamos refactorizar nuestro código.</p></blockquote>

<p>Dos grandes pilares del desarrollo: <strong>tests</strong> y <strong>refactorizaciones</strong></p>

<h2>Frases que quiero recordar</h2>

<blockquote><p>Valor es lo que uno quiere</p></blockquote>

<!-- split -->


<blockquote><p>Un experto excelentemente remunerado no debería ser remunerado solamente
porque es un experto. Debería ser excelentemente remunerado por ayudar a
otras personas a que se conviertan en expertos.</p></blockquote>

<!-- split -->


<blockquote><p>El estilo de <em>funcionalidad a funcionalidad</em> incluye un ciclo completo de
desarrollo en cada iteración: requisitos, diseño, codificación y testeo.</p></blockquote>

<!-- split -->


<blockquote><p>Podemos construir todo el diseño primero, o podemos construir cada
funcionalidad completamente de una en una, cada una con su base. Lo que no
podemos hacer es construir toda la base al principio, así como tampoco
podemos construir todas las funcionalidades al principio. Es de lejos mucho
más seguro construir una versión simple pero funcional de cada funcionalidad
primero.</p></blockquote>

<!-- split -->


<blockquote><p>Trabajamos incrementalmente. Necesitamos un buen diseño relativamente pronto,
pero solo necesitamos un <strong>pequeño</strong> buen diseño.</p></blockquote>

<!-- split -->


<blockquote><p>Toma cada posible idea como una posible forma de comenzar a hacer cosas
durante un tiempo. Luego, haz tuyo el proceso, y construye tus propias ideas.
¡Pero mantenlo simple!</p></blockquote>

<!-- split -->


<blockquote><p>Nuestro trabajo no es ceñirnos al plan, es ir corrigiendo el curso para
obtener el mejor resultado, no llegar a algún punto fijo.</p></blockquote>

<!-- split -->


<blockquote><p>Lo hacemos mejor no cuando predecimos cuándo habremos terminado, si no cuando
elegimos cuándo está terminado (pero es que debemos mantenernos siempre en un
estado de <em>terminado</em> de forma constante)</p></blockquote>

<!-- split -->


<blockquote><p>La palabra refactorizar se refiere al proceso simple y regular de mantener el
código limpio. Cuando la carretera se convierte en un camino intrincado, lo
enderezamos refactorizando el código.</p></blockquote>

<h2>Referencias</h2>

<ul>
<li><a href="https://vimeo.com/79106557">The fundamental theorem of Agile Software Development</a>, de J.B.Rainsberger</li>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/the-nature-of-software-development-by-ron-jeffries.markdown">Notas sobre The nature of Software development</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: noveno asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2017/01/29/elixir-noveno-asalto/"/>
    <updated>2017-01-29T17:19:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2017/01/29/elixir-noveno-asalto</id>
    <content type="html"><![CDATA[<p>En el <a href="http://rchavarria.github.io/blog/2016/12/31/elixir-octavo-asalto/">asalto anterior</a> aprendimos un par de conceptos básicos sobre los nodos.
En este asalto aprenderemos sobre servidores OTP: qué son, para qué sirven, por
qué son útiles y cómo implementarlos fácilmente.</p>

<p>Todo esto, siguiendo el <a href="http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir/">método de aprendizaje</a> con el que comenzé la serie:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="center" src="http://rchavarria.github.io/images/2017/us-air-force.jpg"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/R7mJ4M">160324-F-XK483-042</a> de <a href="https://www.flickr.com/photos/usairforce/">US Air Force</a>, <a href="https://creativecommons.org/licenses/by-nc/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by-nc/2.0/">CC BY NC 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<h4>Servidores OTP</h4>

<p>OTP (<strong>O</strong>pen <strong>T</strong>elecom <strong>P</strong>latform) se presenta como la solución a todos
tus problemas de escalabilidad y concurrencia. No es así, pero ayuda mucho.
Ayuda en temas como descubrimiento de aplicaciones, gestión y detección de
fallos, actualización de código en caliente y estructura del servidor.</p>

<p>OTP define un sistema como una jerarquía de <strong>aplicaciones</strong>. Una aplicación
consiste en uno o varios <strong>procesos</strong>. Cada uno de estos procesos implementa
un <strong>comportamiento</strong>. Existen <a href="http://rubenfa.github.io/2016-11-30-behaviours-en-elixir">comportamientos</a> para servidores, gestores de
eventos, máquinas de estado finitas, &#8230;</p>

<p>Lo implementado en ejercicios anteriores sigue un patrón con el que se podría
implementar casi todos los servidores. Por eso, OTP proporciona un mecanismo
para liberarnos de escribir el código más tedioso. La librería ofrece unas
funciones a modo de <em>callbacks</em> que irá llamando dependiendo de la situación.</p>

<h4>Implementar un servidor OTP</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defmodule Sequence.Server do
</span><span class='line'>  use GenServer
</span><span class='line'>
</span><span class='line'>  def handle_call(:next_number, _from, current_number) do
</span><span class='line'>    { :reply, current_number, current_number + 1 }
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><code>use GenServer</code> indica a Elixir que vamos a usar este comportamiento. Así, este
módulo representa un servidor OTP.</p>

<p>Uno de los callbacks proporcionados por <code>GenServer</code> es <code>handle_call</code>. Tiene 3
parametros: acción, PID del origen de la petición y el estado actual del
servidor. Tiene que responder con una tupla con tres parámetros también: la
respuesta, el valor retornado y el estado del servidor a usar en la siguiente
llamada.</p>

<p>Para llamar a este servidor, entramos en <code>iex</code>. Arrancamos el servidor,
indicando el módulo y el estado inicial (similar a <code>spawn_link</code>).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>promtp$ iex -S mix
</span><span class='line'>iex&gt; { :ok, pid } = GenServer.start_link(Sequence.Server, 100)
</span><span class='line'>iex&gt; GenServer.call(pid, :next_number)
</span><span class='line'>100
</span><span class='line'>iex&gt; GenServer.call(pid, :next_number)
</span><span class='line'>101
</span><span class='line'>iex&gt; GenServer.call(pid, :next_number)
</span><span class='line'>102</span></code></pre></td></tr></table></div></figure>


<h4>Servidores que no tienen que devolver un resultado</h4>

<p>En ocasiones no necesitamos que el servidor retorne un resultado. En estos
casos, para llamar al servidor emplearemos <code>GenServer.cast</code>, y para manejar
esas peticiones, nuestro servidor debe implementar el callback <code>handle_cast</code>.</p>

<h4>Callbacks de GenServer</h4>

<p>GenServer es un protocolo de OTP. OTP asume que este protocolo define 6
callbacks. Elixir proporciona una implementación por defecto para cada uno de
ellos en GenServer, por eso no tenemos que implementarlos nosotros. Los 6
callbacks son: <code>init(start_arguments)</code>, <code>handle_call(request, from, state)</code>,
<code>handle_cast(request, state)</code>, <code>handle_info(info, state)</code>,
<code>terminate(reason, state)</code>, <code>code_change(from_version, state, extra)</code> y
<code>format_status(reason, [ pdict, state ])</code>.</p>

<h4>Nombrado de procesos</h4>

<p>En lugar de usar el PID para referenciar a procesos de nuestro servidor,
podemos hacerlo a través de nombres. Para ello, se debe utilizar la opción
<code>name:</code> a la hora de crear el servidor:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iex&gt; { :ok, pid } = GenServer.start_link(Sequence.Server, 100, name: :seq)
</span><span class='line'>iex&gt; GenServer.call(:seq, :next_number)
</span><span class='line'>100
</span><span class='line'>iex&gt; GenServer.call(:seq, :next_number)
</span><span class='line'>101
</span><span class='line'>iex&gt; GenServer.call(:seq, :next_number)
</span><span class='line'>102
</span><span class='line'>iex&gt; :sys.get_status :seq</span></code></pre></td></tr></table></div></figure>


<h2>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</h2>

<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li><p><a href="https://github.com/rchavarria/learning-elixir/tree/master/code/round-09/stack">Ejercicio 01</a>: crear un server que implemente una pila. Se
inicializará con unos cuantos valores en la pila. Cada petición <em>pop</em>
devolverá un elemento de la pila. Cuando la pila esté vacía, fallará.
Implementado en el proyecto <code>mix</code>: <code>code/round-09/stack</code>.</p></li>
<li><p><a href="https://github.com/rchavarria/learning-elixir/tree/master/code/round-09/stack2">Ejercicio 02</a>: ampliar el servidor anterior, de forma que se puedan
añadir elementos a la pila con la operación <code>:push</code> a través de peticiones
<em>cast</em>. Implementado en el proyecto <code>mix</code>: <code>code/round-09/stack2</code>.</p></li>
<li><p><a href="https://github.com/rchavarria/learning-elixir/tree/master/code/round-09/stack3">Ejercicio 03</a>: dar un nombre al servidor anterior, de forma que se le
pueda llamar sin necesidad de saber el PID. También, crear un API en la pila
de forma que los clientes no tengan que llamar a <code>GenServer</code> para usarla.
Simplemente serán unas funciones que envolverán las llamadas a <code>GenServer</code>.
Implementado en otro proyecto <code>mix</code>, en <code>code/round-09/stack3</code>.</p></li>
<li><p>Ejercicio 04: implementar el callback <code>GenServer.terminate/2</code> para
comprobar distintas formas de terminar el servidor: un callback lanza una
excepción, una llamada a <code>Kernel.exit/1</code>, se detecta que un proceso ha tenido
un error,&#8230;</p></li>
</ul>


<p><strong>Resultado</strong></p>

<p>No he obtenido nada en claro. Tendría que profundizar en la documentación de
<a href="http://elixir-lang.org/docs/stable/elixir/GenServer.html#c:terminate/2"><code>GenServer.terminate/2</code></a>,
que parece bastante espesa por cierto. Pero no está garantizado que se llame a
<code>terminate</code>, con lo que no sé si estoy provocando correctamente los errores.</p>

<h2>Enseñar lo aprendido, y repetir desde el paso 7</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta
el siguiente asalto.</p>

<h2>Referencias</h2>

<ul>
<li>Proceso de <a href="http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir/">aprendizaje de Elixir</a></li>
<li>Artículo sobre <a href="http://rubenfa.github.io/2016-11-30-behaviours-en-elixir">comportamientos</a> (<em>behaviours</em>) en Elixir</li>
<li>Artículo sobre <a href="http://rubenfa.github.io/2017-01-25-protocols-en-elixir">protocolos</a> en Elixir</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Phoenix project]]></title>
    <link href="http://rchavarria.github.io/blog/2017/01/19/the-phoenix-project/"/>
    <updated>2017-01-19T22:23:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2017/01/19/the-phoenix-project</id>
    <content type="html"><![CDATA[<h5>de Gene Kim</h5>

<p><img class="left" src="http://rchavarria.github.io/images/2017/phoenix-project.png" width="200" height="246"></p>

<h2>Por qué lo he leído</h2>

<p>Había visto varias referencias al libro por Twitter, blogs y distintos
podcasts. Sabía que el libro era muy similar a <a href="http://rchavarria.github.io/blog/2013/04/10/la-meta">La meta</a>, de Eliyahu M.
Goldratt, un libro que me gustó bastante.</p>

<p>Así que, tras ver que <a href="http://www.eferro.net/2016/03/some-books-i-recently-read.html">Eduardo Ferro</a> también lo había leído, me decidí a
leerlo yo también.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>No creo que se pudiera esperar tanto como de <a href="http://rchavarria.github.io/blog/2013/04/10/la-meta">La meta</a>. Ese libro es un recurso
más que recomendable para conocer la <a href="https://es.wikipedia.org/wiki/Teor%C3%ADa_de_las_limitaciones">Teoría de las restricciones</a>. Pero
esperaba algo similar enfocado en el mundo del software.</p>

<p>Esperaba una historia de éxito de una persona o grupo de personas que van
superando problemas, uno tras otro, donde el autor los aproveche para explicar
su punto de vista y dar forma a las teorías que quiere explorar.</p>

<h2>Qué encontre</h2>

<p>Más o menos lo que esperaba. A través de una historia llena de problemas a
solucionar, el autor expone las teorías que quiere difundir. Estas teorías
están relacionadas con el desarrollo de software y más concretamente con el
mundillo DevOps.</p>

<p>En realidad, el autor defiende unas prácticas que son la fundación del
movimiento DevOps, pero para llegar hasta ahí, el protagonista de la historia
comienza con un ascenso que le lleva a ser el director del departamento de TI
de una empresa que no destaca por su gestión de servicios tecnológicos, pero
que solucionando problema tras problema, y con la ayuda de una figura un poco
enigmática (muy al estilo de <em>La meta</em>), va mejorando hasta hacer del
departamento y la empresa un lugar mucho mejor.</p>

<h2>Conclusiones</h2>

<p>Por un lado, el libro me ha gustado. Es un libro sobre el mundo del desarrollo
de software, muy al estilo de <em>La meta</em>, que también me gustó. Y describe el
proceso que sigue una empresa ficticia de ser un desastre, a ser una empresa
envidiable en su sector.</p>

<p>Pero por otro, me ha decepcionado un poco. Esperaba que estuviera más centrado
en el desarrollo, pero está más centrado en la gestión y provisión de servicios
de TI. No es nada malo, pero estoy más interesado en lo primero.</p>

<p>De todas formas, el libro es interesante, sobre todo si quieres conocer cómo
hacer bien las cosas en un departamento de TI. Creo que este libro es una buena
aproximación al mundo DevOps. Pero no deja a los desarrolladores en muy buen
lugar, así que si eres desarrollador, no te tomes todas las cosas que dicen
sobre nosotros muy a pecho.</p>

<h2>Qué he aprendido</h2>

<blockquote><p>La única cosa más peligrosa que un desarrollador, es un desarrollador
conspirando sobre temas de seguridad</p></blockquote>

<!-- space -->


<blockquote><p>Eliyahu M. Goldratt, quien creó la teoría de las restricciones, nos mostró
que cualquier mejora echa en cualquier sitio que no sea el cuello de botella
es una ilusión, es inútil</p></blockquote>

<!-- space -->


<blockquote><p>Los tiempos de espera dependen de la utilización del recurso</p></blockquote>

<!-- space -->


<blockquote><p>La necesidad reducir contínuamente los ciclos de tiempo es parte del <em>Primer
Camino</em>. La necesidad de la amplificación de los bucles de <em>feedback</em> (o
realimentación), idealmente desde el cliente, es parte del <em>Segundo Camino</em>.
El <em>Tercer Camino</em> va de asegurarnos de estar introduciendo tensión
continuamente en el sistema, de forma que estamos contínuamente reforzando
hábitos y mejorando algo</p></blockquote>

<h2>Recursos relacionados</h2>

<ul>
<li><a href="http://rchavarria.github.io/blog/2013/04/10/la-meta">La meta</a>, de Eliyahu M. Goldratt</li>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/phoenix-project-by-gene-kim.markdown">Notas sobre el libro</a></li>
<li>Blog de <a href="http://www.eferro.net/2016/03/some-books-i-recently-read.html">Eduardo Ferro</a></li>
<li><a href="https://es.wikipedia.org/wiki/Teor%C3%ADa_de_las_limitaciones">Teoría de las restricciones</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: octavo asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2016/12/31/elixir-octavo-asalto/"/>
    <updated>2016-12-31T19:13:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2016/12/31/elixir-octavo-asalto</id>
    <content type="html"><![CDATA[<p>Último post del año, que no de la serie sobre aprender <a href="http://elixir-lang.org/">Elixir</a>. Este asalto va de nodos, PIDs y un poquito (muy poco) de entrada/salida.</p>

<p>Aprenderemos qué es un nodo, cómo crear nuevos nodos y cómo comunicarlos a un nivel muy básico. Y algo muy interesante, cómo hacer que un nodo ejecute una función a nuestro antojo.</p>

<p>Todo esto, siguiendo el <a href="http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir/">método de aprendizaje</a> con el que comenzé la serie:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="center" src="http://rchavarria.github.io/images/2016/risk.jpg"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/3pUVs">Risk</a> de <a href="https://www.flickr.com/photos/benstephenson/">Ben Stephenson</a>, <a href="https://creativecommons.org/licenses/by/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by/2.0/">CC BY 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<h4>Nodos - La clave para los servicios distribuidos</h4>

<p>Un <strong>nodo</strong> no es más que una instancia de la máquina virtual de Erlang
ejecutándose. Es como un sistema operativo completo, y ofrece servicios como
tal a procesos locales o remotos.</p>

<h5>Nombres de nodos</h5>

<p>En <code>iex</code>, podemos saber el nombre del nodo actual con <code>Node.self</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iex&gt; Node.self
</span><span class='line'>:"rchavarria@localhost"</span></code></pre></td></tr></table></div></figure>


<p>Podemos dar un nombre al nodo al iniciar <code>iex</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ iex -name foobar@localhost
</span><span class='line'>iex(foobar@localhost)&gt; Node.self
</span><span class='line'>:"foobar@localhost"</span></code></pre></td></tr></table></div></figure>


<p>Si te fijas, el valor devuelto por <code>Node.self</code> tiene los dos puntos delante,
como si fuera un <code>Atom</code>. Y es que en Elixir, los nombres de los nodos son
tratados como <code>Atom</code>s, lo que hace super sencillo referenciar nodos en el
código.</p>

<p>También, podemos saber qué nodos conoce un nodo al que estemos conectados:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iex(node_two)&gt; Node.list
</span><span class='line'>[]
</span><span class='line'>
</span><span class='line'># y al conectarnos a un nodo, aparecerá como conectado
</span><span class='line'>iex(node_two)&gt; Node.connect :"node_one@localhost"
</span><span class='line'>true
</span><span class='line'>iex(node_two)&gt; Node.list
</span><span class='line'>[ :"node_one@localhost" ]</span></code></pre></td></tr></table></div></figure>


<p>Podemos ejecutar una función en un nodo remoto:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>iex(node_one)&gt; func = fn -&gt; IO.puts "Hello, I'm in #{inspect Node.self}"
</span><span class='line'>iex(node_one)&gt; Node.spawn( :"node_two@localhost", func )
</span><span class='line'>Hello, I'm in :"node_two@localhost"</span></code></pre></td></tr></table></div></figure>


<p><code>Node.spawn</code> es impresionante. Podemos ejecutar una función en otro nodo
fácilmente. Pero aunque se ejecute en <code>node_two</code>, hereda lo que se llama <em>group
leader</em>, con lo que es capaz de mostrar mensajes por consola en <code>node_one</code> (en
lugar del dos, que es donde se ejecuta).</p>

<p>Además de poder dar un nombre a un nodo, podemos establecer su <em>cookie</em>. La
cookie de un node no es más que un token, y se utiliza para permitir que los
nodos se conecten entre sí. Nodos con la misma cookie se pueden conectar. Si es
distinta, los nodos rechazarán la conexión. Las cookies se mandan en texto
plano, así que cuidado con las conexiones a través de internet.</p>

<h5>Nombrando tus procesos</h5>

<p>Cada proceso se identifica con un PID. Un PID está compuesto por tres números,
aunque sólo contiene dos campos: el número de nodo (<code>0</code> si el nodo es el local)
y el número de proceso en sí. Este número de proceso está compuesto por sus
bits más y menos representativos (de ahí que veamos tres números en un PID como
éste <code>#PID&lt;0.71.0&gt;</code>). El id de node es el id del nodo donde <em>vive</em> el proceso.</p>

<h4>Entrada/salida, PIDs y Nodos</h4>

<p>La entrada/salida en la máquina virtual de Erlang se hace a través de
servidores de entrada/salida. Elixir y Erlang proporcionan librerías para no
tener que lidiar con ellos, ya que son a muy bajo nivel.</p>

<p>En Elixir, se identifica un fichero por el PID del proceso del servidor de
entrada/salida que lo está manejando.</p>

<p>Por ejemplo, la función <code>IO.puts</code> utiliza el PID devuelto por
<code>:erlang.group_leader()</code> como valor por defecto para enviar una cadena al
proceso que la muestra por consola: <code>send :erlang.group_leader(), str</code> podría
ser el código equivalente.</p>

<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li>Ejercicio 1: en el código del servidor de ticks (<a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-08/ticker.ex">ticker.ex</a>), el autor habla
de que el tick se envía cada 2 segundos más o menos.  Pero el timeout está
puesto a 2 segundos exactos. ¿Por qué habla de <em>más o menos</em>?</li>
</ul>


<p><strong>Respuesta</strong></p>

<p>El timeout es de justo 2 segundos, pero el timeout solo saltará si no se
registra ningún cliente en esos 2 segundos. Si un cliente se registra (digamos
en el momento 1.55 segundos) no saltará el timeout hasta los 3.55 segundos
siguientes (1.55 segundos que pasaron desde el anterior tick hasta el registro
del último cliente más 2 segundos del timeout normal).</p>

<ul>
<li><p>Ejercicio 2: modificar el servidor de ticks para que mande solo un
tick cada vez, de forma circular, a cada uno de los clientes registrados (el
primer tick al primer cliente, el segundo tick al segundo cliente
registrado,&#8230;). El programa deberá lidiar con nuevos clientes registrados.</p></li>
<li><p>Ejercicio 3: reimplementar el servidor de ticks, pero esta vez
debe ser circular, de forma que el cliente 1 mande un tick al cliente 2.
Pasados 2 segundos, el cliente 2 mandará un tick al 3. Y así hasta el último, el cual
enviará un tick al 1. Y vuelta a empezar. El problema está en cómo añadir
clientes al círculo (o <em>ring</em>) y quién tiene la responsabilidad de actualizar
ese círculo de clientes.</p></li>
</ul>


<p><strong>Respuesta</strong></p>

<p>Me costó un tiempo dar con la solución al ejercicio (<a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-08/ring_ticker.ex">ring_ticker.ex</a>). Puede
que el <em>ring</em> lo tenga que gestionar el servidor central. De otra forma, los
clientes perderán el timeout del <code>receive</code> y se volverán un poco locos.</p>

<h2>Enseñar lo aprendido, y repetir desde el paso 7</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta
el siguiente asalto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The 4 hour body]]></title>
    <link href="http://rchavarria.github.io/blog/2016/12/04/the-4-hour-body/"/>
    <updated>2016-12-04T18:14:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2016/12/04/the-4-hour-body</id>
    <content type="html"><![CDATA[<h6>de Tim Ferriss</h6>

<p><img class="left" src="https://raw.githubusercontent.com/rchavarria/blog-post-incubator/master/published-book-notes/img/4-hour-body-cover.jpeg" width="200" height="250"></p>

<h3>Por qué lo he leído</h3>

<p>Soy un oyente del podcast de <a href="http://fourhourworkweek.com/about/">Tim Ferriss</a>, <a href="http://fourhourworkweek.com/podcast/">the 4 hour workweek podcast</a>, y me parece una persona bastante peculiar, con unas ideas bastante rompedoras, y muy preocupado por el aprender y dominar muy distintas disciplinas rápidamente. No estoy de acuerdo con todo lo que Tim <em>predica</em>, pero la verdad es que muchas de sus ideas me parecen muy buenas y les han dado resultados a muchos de sus seguidores. Entiendo que eso no quiere decir que funcionen en todos los casos, pero al menos las ideas locas de Tim han sido probadas más de una vez.</p>

<p><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/4-hour-body-by-tim-ferriss.markdown">The 4 hour body</a>, o <em>El cuerpo perfecto en 4 horas</em> que es su título en español, trata de dos cosas básicamente: cómo perder peso, y cómo ganar músculo. Y yo estoy interesado en perder peso, asi que ¿por qué no conocer algunas ideas de una persona seguida por millones?</p>

<!-- more -->


<h3>De qué trata el libro</h3>

<p>El libro trata de enseñarte cómo conseguir un cuerpo perfecto en 4 horas. Bueno, el título creo que está más escogido para cuadrar con otros libros del autor como <em>La semana laboral de 4 horas</em> y otros con títulos similares.</p>

<p>Trata temas relacionados con la pérdida de peso, otros temas sobre cómo ganar músculos de forma brutal o de cómo tener sexo increíble. En el libro propone seguir una dieta que llama <em>de bajos hidratos de carbono</em> y sugiere seguir una serie de ejercicios para ganar músculo basado en el concepto de <em>mínima dosis efectiva</em>.</p>

<p>Al tratar temas muy diversos y con objetivos casi contradictorios (no puede ser que quieras perder peso y que quieras tener cuerpo de culturista a la vez), el autor explica que no es necesario leer el libro de principio a fin, basta con concentrarte en los aspectos que a uno más le interesen.</p>

<h3>Conclusiones y valoración</h3>

<p>Como ya he dicho, el tema que me interesaba (y me interesa) es el de la pérdida de peso. Por eso no puedo valorar el libro al completo, pero la parte de la pérdida de peso es algo controvertida.</p>

<p>A lo largo de su vida, el autor ha experimentado con varios alimentos y técnicas para conseguir reducir la grasa corporal y con ejercicios para ganar músculo. Son métodos fuera de lo común y no parecen estar basados en datos muy científicos. En realidad, creo que el autor se queda con los estudios científicos que apoyan sus creencias.</p>

<p>Aún así, con todo lo inusual de sus consejos, algunos me parece que tienen su lógica, y cogiéndolos con cuidado, creo que se pueden aprovechar algunas ideas. Aunque hay otras, como por ejemplo el consejo de no comer nada de fruta si se quiere perder grasa corporal (porque se supone que la fructosa es un azúcar que se absorve rápidamente y luego se convertirá en grasa) no me gusta mucho. Una cosa es estar interesado en perder peso y otra cosa es dejar de comer alimentos saludables por conseguirlo más rápido. Además, parece ser que la carencia de vitaminas debido a dejar de comer fruta, la aconseja suplir tomando complementos vitamínicos. Y eso no me mola, no tengo ganas de tomar pastillas para suplir un alimento que tengo al alcance de la mano.</p>

<h3>Qué he aprendido</h3>

<p>Dieta para perder peso, ejercicio para ganar musculo</p>

<p>Concepto de <strong>Mínima Dosis Efectiva</strong>: la mínima dosis que produce el resultado esperado. Cualquiercosa por encima de MED es desperdicio. Por ejemplo, para hervir agua necesitas hasta 100ºC. Todo lo que sobrepases esa temperatura no va a hacer que hierba más. O si necesitas 15 minutos de sol para activar la melanina, 4 horas friéndote en la playa no te van a poner mucho más moreno.</p>

<p>Dieta básica baja en carbohidratos: evita carbohidratos blancos, come las mismas pequeñas comidas una y otra vez, no hagas menús complicados, no bebas calorías, no comas fruta, tómate un día de descanso a la semana</p>

<h3>Frases que me gustaría recordar</h3>

<blockquote><p>Cualquier dieta popular se puede resumir en estos 4 puntos: comer más verdura, comer menos grasa saturada, hacer más ejercicio y quemar más calorías, comer más ácidos grasos omega-3</p></blockquote>

<!-- more -->


<blockquote><p>Es <strong>tu responsabilidad</strong>, no la de tu médico o dietista, aprender a qué es lo que mejor responde tu cuerpo (<em>algo así como: experimenta con tu cuerpo</em>)</p></blockquote>

<!-- more -->


<blockquote><p>En el contexto del libro, hay dos dosis mínimas a tener en cuenta: para eliminar grasa acumulada: hacer lo mínimo necesario para disparar una cascada de hormonas específicas de pérdida de grasa, y que para añadir músculo: hacer lo mínimo necesario para disparar mecanismos de crecimiento específicos (músculos) y sistémicos (hormonales)</p></blockquote>

<!-- more -->


<blockquote><p>Tu peso viene y va, como un yo-yo. Acéptalo, búscalo, eso es mejor buscar un balance fijo.</p></blockquote>

<!-- more -->


<blockquote><p>Diferentes fuentes de calorías producen diferentes resultados. Influyen 3 variables: digestión, la proporción hidratos-proteína-grasa y el tiempo.</p></blockquote>

<!-- more -->


<blockquote><p>4 principios de comportamientos anti-fallos: hazlo consciente (diario de ingestas, foto de comida que vas a comer), hazlo como un juego (medidas, motivacion,&#8230;), hazlo competitivo (acepta la presión de otros como tú), hazlo pequeño y temporal (en lugar de correr 1h todos los días, corre 5min los primeros días)</p></blockquote>

<!-- more -->


<blockquote><p>Dieta básica baja en carbohidratos: evita carbohidratos blancos, come las mismas pequeñas comidas una y otra vez, no hagas menús complicados, no bebas calorías, no comas fruta, tómate un día de descanso a la semana</p></blockquote>

<!-- more -->


<blockquote><p>Alimentos que bajan el nivel de glucosa en sangre (aunque no quiere decir que adelgacen por sí mismos): alimentos con alto contenido graso, fructosa, zumo de limòn y canela</p></blockquote>

<!-- more -->


<blockquote><p>Más que la cantidad, es el tamaño y la velocidad de las comidas que determina el nivel de glucosa. Lo mejor que puedes hacer es comer despacio.</p></blockquote>

<h3>Recursos relacionados</h3>

<ul>
<li>Todas las <a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/4-hour-body-by-tim-ferriss.markdown">notas sobre el libro</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mi Codemotion 2016]]></title>
    <link href="http://rchavarria.github.io/blog/2016/11/28/mi-codemotion-2016/"/>
    <updated>2016-11-28T22:00:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2016/11/28/mi-codemotion-2016</id>
    <content type="html"><![CDATA[<p>Y otro año más, me lo he pasado genial en el <a href="https://2016.codemotion.es/">Codemotion</a>. No creo que necesite
presentación. Es el evento técnico más grande en España: dos días completos,
más de 2000 asistentes, 150 charlas y talleres. Una auténtica monstruosidad. Y
llena de monstruos de la industria.</p>

<div style="background-image: url('/images/2016/codemotion-2016.jpg');
            width: 100%;
            height: 14em;
            background-position: center 0;
            background-size: cover;"></div>




<div style="text-align: center">
  <span style="font-size: 60%">
Foto: <a href="https://flic.kr/p/NjN8Hv">_MG_1926</a> de <a href="https://www.flickr.com/photos/78483623@N07/">Codemotion Madrid</a>, &copy; Todos los derechos reservados, reproducida con <a href="https://twitter.com/codemotion_es/status/803259905213952000">permiso explícito</a>
  </span>
</div>




<!-- more -->


<h2>Mis impresiones</h2>

<p>La organización tomó nota de una de las quejas más escuchadas el año pasado: la
masificación de alguna sala. Este año se pidió a los asistentes que votaran a
qué charlas tenían intención de acudir, y repartieron las salas en
consecuencia. Por supuesto, es imposible hacerlo perfecto, aún hubo algún caso
en el que la sala se quedó pequeña. Pero nada comparable a otros años.
Impresionante organización.</p>

<p>La comida me pareció exactamente igual al año anterior. En mi opinión se queda
corta, pero hay una ligera variedad de sabores y también vi que había
sandwiches espciales para celíacos. Muy buen detalle. Es una lata tener que
desplazarse a un pabellón exterior, pero es comprensible por la cantidad de
asistentes. Es una delicia ver que hay gente repartida por todo el recinto a la
hora de la comida y el café.</p>

<p>Hay gente que se queja de la mala gestión por parte de la organización para
favorecer que haya más presencia femenina. No estoy seguro, pero mi impresión
es que este año ha habido más mujeres que en años anteriores. No tengo datos,
simplemente me guio por mis sensaciones.</p>

<p>Así como me pareció que había más mujeres, también tuve la impresión de que
hubo menos ponentes extranjeros. Quizá fui yo que no encontré una charla
interesante ofrecida por alguno de ellos. Este tema me recuerda mucho a un post
reciente de Carlos Blé hablando sobre <a href="http://www.carlosble.com/2016/11/el-ingles-la-diversidad-y-la-comida-en-las-conferencias/?lang=es">el idioma en los eventos técnicos</a>.</p>

<h2>Charlas a las que asistí</h2>

<h3><a href="https://2016.codemotion.es/agenda.html#5732408326356992/90194003">Los androides no sueñan con ovejas eléctricas, sueñan con conciliar</a> de Susana Morcuende, Yamila Moreno y Jorge Arévalo</h3>

<p>Charla sobre conciliación. Como bien explicó Susana, todavía seguimos asociando
el término <em>conciliación</em> solamente con la familia (cuidar de hijos, abuelos,
enfermos,&#8230;). Los ingleses tienen un término mejor para esto: <em>work-life
balance</em>. Es decir, un término medio entre la vida en general (ocio, familia,
amigos,&#8230;) y el trabajo.</p>

<p>Susana habló de buscar la conciliación desde el minuto cero, desde el proceso
de selección. Y presentó la iniciativa <a href="http://yosoytumadre.es">Yo soy tu madre</a>, donde empresas muy a
favor de la conciliación tienen una especial cabida.</p>

<p>Después, Yamila y Jorge expusieron sus casos particulares. Yamila en Kaleidos,
y Jorge en Pronoide. Ambos contaron multitud de acciones llevadas a cabo en sus
empresas que les permiten conciliar.</p>

<blockquote><p>Si otras empresas lo están haciendo, es porque la conciliación es posible,
plantéalo en tu empresa</p></blockquote>

<h3><a href="https://2016.codemotion.es/agenda.html#5732408326356992/88334002">Teletrabajo en el mundo real</a> de Pablo Alba</h3>

<p>Pablo nos habló sobre teletrabajo y sus diferencias con el trabajo en remoto.
Contó que existen varios retos a superar: comunicación, coordinación,
felicidad, productividad y sentimiento de equipo.</p>

<p>Luego pasó a describir multitud de herramientas para hacer frente a esos retos.
Herramientas de videoconferencia, de conferencia de audio, chats, gestión del
código fuente, hardware,&#8230;</p>

<p>Un comentario que me sorprendió mucho fue el de tener el audio conectado
siempre, para que quien esté solo en casa pueda escuchar el ruido de la
oficina. No es que vaya a ser partícipe de todas las conversaciones, pero un
poco de compañía sí le hará.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5732408326356992/85544001">8 formas de mejorar tu vida gracias a los logs</a> de Joaquín Diez y Fran Rodríguez</h3>

<p>Joaquín nos habló de cómo deberían ser los logs mientras que Fran nos habló más
del lado de operaciones.</p>

<p>Los logs los deberíamos escribir para que los entendieran las máquinas, no los
humanos. Deberíamos definir claramente el formato de los mismos, y las
estructuras de datos que queremos loguear. También, que los logs deben estar
disponibles para todo el mundo. Todos deberían ser capaces de verlos, leerlos,
buscar en ellos,&#8230; Para ello es posible que tengamos que desarrollar
aplicaciones o usar algunas de terceros.</p>

<p>Los logs nos sirven para monitorizar, monitorizar el estado y la actividad de
nuestros sistemas. Estos logs deben estar centralizados. Cada vez más creamos y
destruimos máquinas con más facilidad, y los logs deben sobrevivir a las
máquinas.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5732408326356992/84654003">Intraemprendimiento para frikis</a> de Roberto Canales</h3>

<p>Aquí, Roberto nos contó en qué se ha equivocado Autentia en sus múltiples
intentos de pasar de ser una empresa de servicios a ser una empresa de
producto. No es que les vaya mal vendiendo servicios, pero lo que realmente
quieren hacer es hacer productos. Una empresa de servicios no escala, lo que
vendes es <em>horas hombre</em>, y Autentia no ha querido entrar en el juego del body
shopping.</p>

<p>Así pues, buena parte de los beneficios que tenían los han ido invirtiendo en
productos.</p>

<p>Primero, dedicando tiempos muertos de los empleados a desarrollar una
aplicación para uso interno. Pero el producto lo tocaban demasiadas manos, sin
un objetivo global concreto, y el producto se resiente.</p>

<p>En otras ocasiones, han invertido en otras empresas, para aprender de cómo lo
hacen otros. También han <em>dado</em> dinero a otras personas para que hagan realidad
sus ideas.</p>

<p>Si algo han aprendido es que te debes centrar en que tu producto lo use la
gente <strong>pronto</strong>.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5732408326356992/86444010">Aprender a distinguir el problema de la solución</a> de Carlos Blé</h3>

<p>Carlos comenzó fuerte:</p>

<blockquote><p>La forma de ir más rápido no es correr más, es evitar más desperdicio</p></blockquote>

<p>Cuando nos decantamos por una solución, estamos descartando otras.
Probablemente más sencillas, más baratas, más apropiadas. O peores, porqué no.</p>

<p>Antes de ponernos a implementar la solución, hay que comprender las necesidades
del cliente, hay que identificar correctamente el problema. Los clientes
normalmente vienen con soluciones, con <em>cómo</em> quieren que se les soluciones el
problema que tienen. Es ahí donde debemos pararnos y analizar el problema,
analizar el <em>qué</em>. Entendiendo bien su problema, podemos mostrarles varias
soluciones donde ellos podrán elegir la que mejor les convenga. Para conocer el
problema, podemos ayudarnos de todas estas técnicas de análisis:</p>

<p><img class="center" src="http://rchavarria.github.io/images/2016/carlosble-analisis.png"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Slide #15 de <a href="http://www.slideshare.net/carlosble/distinguir-entre-problema-y-solucin">Distinguir entre problema y solución</a> de <a href="http://www.slideshare.net/carlosble">Carlos Blé</a>, reproducida con permiso del autor
  </span>
</div>


<blockquote><p>Para saber el valor de un producto, compáralo con una hoja de cálculo ~
<em>Carlos Blé</em></p></blockquote>

<p>Ésta fue una charla no técnica, de las <em>filosóficas</em>. Este tipo de charlas te
hacen pensar. Te hacen pensar en tu situación, en cómo trabajas, en si
realmente te gusta lo que haces y si estás haciendo lo correcto. Muy, muy
relacionada con los conceptos de Lean: posponer decisiones, evitar desperdicio,
conocer contexto del cliente,&#8230;</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5732408326356992/83544002">99 líneas que lo simplifican todo</a> de Daniel Molina</h3>

<p>Daniel estuvo contando las múltiples tecnologías que usan en su empresa. Un
testimonio bastante bueno. Nos introdujo en las mismas poco a poco, comenzando
por un modelo sencillo, y ampliándolo y complicándolo poco a poco.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5716304078045184/84664007">Lo que deberías saber sobre testing para irte de cañas con @pedro_g_s y no empezar con resaca</a> de Sergio Arroyo</h3>

<p>Charla muy técnica. Tocó innumerables conceptos relacionados con los tests.</p>

<p>En cuanto a tests unitarios, hay dos conceptos básicos: inyección de
dependencias y dobles de tests. También, además de las características
<a href="https://pragprog.com/magazines/2012-01/unit-tests-are-first">F.I.R.S.T.</a> de los mismos, añadió: <strong>I</strong>mmutable (no deben de dejar rastros) y
<strong>T</strong>rusted (los falsos positivos minan la confianza de los programadores en
los tests).</p>

<p>Me gustó mucho la parte donde comentó qué es lo que hace que un código NO sea
testeable:</p>

<p><img class="center" src="http://rchavarria.github.io/images/2016/non-testable-design-smells.png"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Slide #66 de <a href="http://www.slideshare.net/delr3ves/lo-que-deberas-saber-sobre-testing-para-irte-de-caas-con-pedrogs-y-no-empezar-con-resaca">#codemotion2016: Everything you should know about testing to go with @pedro_g_s, @flipper83 & @kinisoftware avoiding the hangover</a> de <a href="http://www.slideshare.net/delr3ves">Sergio Arroyo</a>, <a href="https://creativecommons.org/licenses/by/4.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a>
  </span>
</div>


<p>Y para terminar: ¿quién vigila al vigilante? ¿quién prueba que los tests son
correctos? Nadie. Y precisamente por esa razón debemos mantener los tests lo
más sencillos posible. Nada de <code>if</code>s, nada de bucles. Sencillos.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5716304078045184/84664009">Clean code</a> de Álvaro García</h3>

<p>El título de la charla no da para muchas sorpresas. Álvaro habló sobre el libro
de Robert C. Martin, Clean Code.</p>

<p>Durante toda la charla aparecieron multitud de conceptos. La charla fue un buen
recordatorio del contenido del libro. Habló de Craftsmanship, de la Regla del
Boy Scout, de la Teoría de las Ventans Rotas, de la importancia de nombrar
correctamente las clases, métodos y variables, de la longitud de los métodos,
de los comentarios (o la falta de ellos) en el código,&#8230;</p>

<p>Súper, súper interesante. Bueno, hubo un tema que me escamó un poco: se
recomienda no utilizar códigos de error para informar de que ha habido un fallo
en nuestro código, se recomienda usar excepciones. Últimamente me he inclinado
más hacia no usar excepciones para eso, no usarlas para controlar el flujo de
mis programas. Un tema bastante polémico éste de tratar las excepciones.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5716304078045184/84664008">Time to grow up</a> de Jorge Barroso</h3>

<p>En mi opinión la mejor charla del Codemotion. Jorge habló de cómo ve él el
mundo del desarrollo. Y tiene mucho que decir. Jorge es bastante conocido en el
mundo del software y su opinión es bastante respetable.</p>

<p>Habló de que debemos aprender oratoria, los speakers del tipo de conferencias
como el Codemotion tienen mucho <em>poder</em>, tienen mucha responsabilidad. Pero
también la tenemos quienes estamos escuchando. Debemos hacerlo de forma
crítica, y no creernos todo lo que nos cuentan los que están en el <em>púlpito</em>.</p>

<p>Debemos hacer las empresas más humanas, evitar que <em>hagan el mal</em>. Y no nos
debemos vender por un futbolín, o por la posibilidad de pasar más horas en la
oficina. Debemos conseguir que la empresa nos valore como personas.</p>

<p>Construimos software como en la edad media se construían catedrales:</p>

<blockquote><p>Ponían mucha gente a hacer una cúpula. Se caía. Conclusión que sacaban: &#8220;pues
así no era&#8221;</p></blockquote>

<p>No podremos resolver los retos del futuro como lo hacemos ahora, lanzando más y
más gente a los proyectos.</p>

<p>Jorge habló de que no está totalmente de acuerdo con el movimento Software
Craftsmanship (no hay que ser dogmático, si no pragmático, hay que conocer las
normas para saber cuándo hay que romperlas), tampoco lo está con el término
<em>Computer Science</em> (no usamos el método científico, no somos ingenieros). Se
identifica más con el mundo de la cocina, donde conocen la química, las
bases, los ingredientes. Pero ser cocinero es más que eso. Es comunidad. Es
comunicación con tus iguales.</p>

<p>Comentó la necesidad de tener un lenguaje común entre los desarrolladores. Nada
de diferenciarnos entre back y front, entre web y escritorio o móvil. ¿Qué
hacen tus compañeros? Pregunta. Y sobre todo, no te comportes como un idiota:
escucha, mejora a tus compañeros, aprende, enseña, no impongas tus opiniones,
pide feedback.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5716304078045184/88324007">Cómo gestionar el estado de tu UI: El camino hacia el Virtual DOM y RxJS</a> de Ricardo Borillo</h3>

<p>Ricardo comentó cómo podemos mejorar la gestión del estado de la interfaz
gráfica. En un principio, toda esa información estaba incrustada en la interfaz
gráfica, estaba almacenada en el DOM (si hablamos de aplicaciones web). Pero el
DOM es muy lento. Algunas librería aliviaban este acoplamiento, pero el Virtual
DOM ha venido para desacoplar todavía más del DOM real.</p>

<p>Prosiguió la charla comentando cómo tecnologías como React, Redux y RxJS
encajan perfectamente en la nueva visión acerca de cómo hay que gestionar el
estado de nuestra aplicación del lado cliente. Hay sólo una fuente de verdad,
por lo que hay un estado global. Y nos explicó cómo éste estado global es
gestionado, almacenado, modificado y notificado por contenedores, middlewares,
dispatchers,&#8230; en la arquitectura planteada por React y compañía.</p>

<p>Sinceramente, están pegando fuerte estas tecnologías y el mundo funcional
parece que está calando en el lado cliente. El de Ricardo es, como siempre, un
testimonio de cómo se pueden hacer las cosas mucho mejor en el mundo web.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5716304078045184/85554005">¿Con 40+ y programando? Sácale provecho a tu experiencia</a> de Daniel López</h3>

<p>Daniel nos cuenta su propia historia, ¿por qué sigue programando pasados los
40? Pues porque le gusta, se le da bien, y puede seguir aportando valor. Aporta
valor por que soluciona problemas, no los crea, y porque no se queda
simplemente con teclear. Debes aportar algo más, si no quieres ser
reemplazable.</p>

<p>Entre los múltiples consejos: encuentra un nicho (o varios) muy específico, un
tema donde no haya muchos expertos; no puedes escalar, así que no apuntes a
cantidad, si no a calidad; entiende y hazte entender; adaptabilidad, búscate
las habichelas; capacidad de análisis crítico.</p>

<blockquote><p>El buen programador no nace, se va haciendo con el tiempo, con el trabajo
duro y con el aprendizaje</p></blockquote>

<p>Y como muestra de sabiduría, unos consejos o mantras:</p>

<ul>
<li>Fuerza: para cambiar lo que se pueda cambiar</li>
<li>Paciencia: para aguantar lo que no se pueda</li>
<li>Sabiduría: para saber distiguir entre ellas</li>
</ul>


<h3><a href="https://2016.codemotion.es/agenda.html#5716304078045184/83544008">Data! Data! Data!</a> de David Bonilla</h3>

<p>La idea principal de la charla rondó las bases de datos. David nos hizo ver que
las bases de datos están en todas y cada una de nuestras aplicaciones. Unas son
más avanzadas que otras, y existen multitud de tipos de ellas. Cada una de
ellas con sus ventajas y sus inconvenientes, así que no debemos pensar que hay
una base de datos que nos pueda resolver todos nuestros problemas.</p>

<p>Aún así, aunque todos lidiamos con ellas todos los días, son unas grandes
desconocidas para nosotros. David nos animó a que aprendiéramos más sobre
ellas, que nos interesáramos más en ellas. Al fin y al cabo, es una de las
pocas tecnologías que están en prácticamente todas las aplicaciones.</p>

<h2>Conclusión</h2>

<p>En general, las charlas a las que asistí fueron de un gran nivel, y me
sorprendió que en casi todas ellas comenzaran exponiendo el tema principal de
la charla. Muy bien hecho. Es como si la organización se lo hubiera
recomendado.</p>

<p>Otro detalle, muchos de los ponentes publicaron las presentaciones antes o
durante la charla, lo que permitía a la gente seguir las trasparencias en el
móvil o portátil con conexión a internet, y de esta forma no dejarse los ojos
intentando ver la imagen del proyector. Una idea brillante.</p>

<p>En definitiva, es un evento que siempre me ha merecido la pena asistir. Es
barato, hay multitud de charlas donde elegir (quizá demasiadas), acude lo mejor
de la industria. Sólo podría pedir que se celebrara más de una vez al año y más
cerca de mi casa. Por pedir, que no quede.</p>

<p>Aún así, los dos días se me quedaron cortos para charlar con la gente. No puedo
con todo. O atiendo a charlas interesantes, o me quedo por los pasillos. Pero
no siempre que me quedo por los pasillos coincido con alguien conocido. Asi que
es un tema que me lleva de cabeza.</p>

<p><strong>Muchísimas gracias a los organizadores: Nacho, Abraham y Laura. Y gracias
también a los patrocinadores y voluntarios. Todos ellos hacen que Codemotion
sea posible.</strong></p>

<h2>Recursos</h2>

<p>Aparte de todas las presentaciones a las que asistí, he escaneado <a href="https://github.com/rchavarria/rchavarria.github.com/tree/master/images/2016/codemotion">las notas que tomé</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Global Day of Code Retreat 2016]]></title>
    <link href="http://rchavarria.github.io/blog/2016/10/27/global-day-of-code-retreat-2016/"/>
    <updated>2016-10-27T21:46:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/10/27/global-day-of-code-retreat-2016</id>
    <content type="html"><![CDATA[<p>Siento que el título esté inglés, no he encontrado una traducción que suene bien
en español: ¿<em>Día global del retiro del código</em>? Uff, no lo veo.</p>

<p>A lo que vamos, el pasado día (<em>day</em>) sábado 22 se celebró a nivel mundial (<em>global</em>)
un evento en el que programadores se reúnen (<em>retreat</em>) para&#8230; programar (<em>code</em>).</p>

<p>Sí, como lo oyes. Hay gente a la que le chirría que unas personas que se dedican
profesionalmente a programar se reúnan con compañeros de profesión para seguir
programando un día no laborable. Pero es que este evento no tiene nada que ver con
lo laboral, aunque sí con la profesión. Una definición tirando a formal sería:</p>

<blockquote><p>Un «code retreat» es un evento de un día, de intensa práctica, enfocado en los
fundamentos del diseño y desarrollo de software. El formato ha demostrado ser
un medio efectivo de mejora de habilidades dado que proporciona a los
desarrolladores la oportunidad de tomar parte en prácticas focalizadas,
dejando de lado las presiones de tener un que terminar un trabajo.</p></blockquote>

<p><em>(traducción libre de la definición sacada de <a href="http://coderetreat.org/about">Code retreat</a>)</em></p>

<p><img class="center" src="http://rchavarria.github.io/images/2016/gdcr16.jpg"></p>

<div style="text-align: center; margin: -20px 0 0 0">
  <span style="font-size: 60%">
  Foto: «Global Day of Code Retreat 2016», por <a href="https://twitter.com/eferro">Eduardo Ferro</a>
  </span>
</div>




<!-- more -->


<p>Más concretamente, en el Global Day of Code Retreat, se trata de resolver el
problema del <a href="https://es.wikipedia.org/wiki/Juego_de_la_vida">Juego de la vida de Conway</a>. La definición habla de práctica
intensa y focalizada, de fundamentos de diseño y desarrollo. Para potenciar
esta práctica, el día está dividido en <em>iteraciones</em> de duración relativamente
corta. Y en cada iteración, el facilitador propone una serie de restricciones.
Así fué nuestro <a href="https://github.com/SoftwareCraftsmanshipMadrid/global-day-of-coderetreat-2016/blob/master/presentation/theday.md">día</a>.</p>

<h1>Restricciones</h1>

<p>Nuestro día consistió de seis iteraciones, y cada una de ellas contó con las
siguientes restricciones:</p>

<ol>
<li><p><strong>Ping-pong</strong>: en estos eventos siempre se programa en parejas y haciendo TDD.
Programar en modo ping-pong significa que una persona escribe el primer test
y la otra escribe la mínima implementación para pasar el test y vuelve a
escribir el siguiente test. La primera persona hace pasar el test y vuelve a
escribir uno nuevo. Ping. Pong.</p></li>
<li><p><strong>Nada de primitivas</strong>: esta comienza a ser divertida, está prohibido el uso de
primitivas. ¿Que necesitas pasar un entero para indicar una posición en un
array? No, no. ¿Que quieres usar <code>true</code> como flag para controlar el flujo?
Nanai. Esta restricción te obliga a crear abstracciones, a nombrar todas esas
primitivas que pueden significar cualquier cosa. Esta restricción es una de mis
favoritas.</p></li>
<li><p><strong>No se puede usar el ratón</strong>, y se limitan las <em>discusiones</em> a 3 minutos: menos
mal que esta la realizé con herramientas que uso en mi día a día (porque
esto no te lo explica nadie, quizá te toque de pareja a alguien que no programa
en tu amado lenguaje, o ni siquiera en tu mismo entorno, divertido ¿verdad?) y
me gusta usar atajos de teclado. Si no, lo hubiera pasado mal. Como curiosidad,
existe el plugin <a href="https://github.com/athiele/key-promoter-fork">Key promoter</a> para los IDEs de JetBrains que te interrumpe
cada vez que usas el ratón.</p></li>
<li><p><strong>Prohibidos las sentencias condicionales</strong>: esta restricción siempre me marca
mucho. Está prohibido utilizar <code>if</code>s, <code>switch</code>es, operadores ternarios,&#8230;
«Muy fácil, utiliza polimorfismo» diría uno. «Eso lo solucionas con un mapa»,
pero no es tan fácil, lo siento. La primera vez me parecía imposible de
conseguir. Desde entonces, continuamente veo oportunidades para aplicar lo que
aprendo cada vez que juego con esta restricción.</p></li>
<li><p><strong>No se puede hablar</strong>: una de las más complicadas, sobre todo si tienes de
pareja a alguien a quien has conocido este día, lo cual suele ser bastante
habitual. El objetivo de esta restricción es hacer nuestro código lo más
expresivo posible, de forma que no tengamos que explicar nuestras intenciones.
También consigue que te pongas a escribir código desde el minuto cero y te
dejes de discusiones.</p></li>
<li><p><strong>Intercambio de código</strong>: se trata de intercambiar, no sólo el código, si no el
ordenador al completo con otra pareja. Por lo cual puedes encontrarte
cualquier cosa: un fichero en blanco, ningún test, la solución muy bien
encaminada, un código sobredimensionado,&#8230; Me pareció muy divertida, y una
forma muy dinámica de hacer la última iteración, donde las fuerzas ya flaquean.
Me pareció muy interesante, porque nada más cambiar de código (entorno,
ordenador, lenguaje,&#8230;) te encuentras como perdido. Pero luego empiezas a
darte cuenta de que los tests son muy parecidos a los que llevas en la cabeza.
Empiezas a hacer conexiones, a reconocer objetos, relaciones. Y ¡BUM! En cinco
minutos ya estás en marcha otra vez. Cuando cambié de código me encontré con
que debía programar en C++, que no veía desde la universidad (qué miedo,
incluir ficheros <code>.h</code> y manejar punteros), con un IDE que no conocía para nada,
y encima ¿escribir test automáticos?. Pues sí, lo conseguimos mis compañeros de
iteración y yo. Muy, muy revelador.</p></li>
</ol>


<h1>Personas y agradecimientos</h1>

<p>Y porque el software no es sólo unos y ceros, si no también personas&#8230; No sólo
es el qué, si no a quién me he <em>llevado</em> de allí:</p>

<ul>
<li><a href="https://twitter.com/juandvegarguez">Juan D. Vega</a>, facilitador del evento. Muchas gracias por guiarnos, por las
restricciones y por conectarnos con otros grupos que también celebraban el
code retreat.</li>
<li><a href="https://twitter.com/luisrovirosa">Luis Rovirosa</a>, co-facilitador, co-organizador. Generando intensas y sanas
discusiones con sus incisivas preguntas.</li>
<li><a href="https://twitter.com/eferro">Eduardo Ferro</a>, me alegró poder conocerle en persona, soy seguidor de su
<a href="http://www.eferro.net/">blog</a> desde hace un tiempecillo.</li>
<li><a href="https://twitter.com/dmj200">Álvaro Fidalgo</a>, no sabía nada de él, pero me pareció un gran profesional.</li>
<li><a href="https://twitter.com/helderdoliveira">Helder de Oliveira</a>, otra persona a la que quería conocer en persona, y no
me equivocaba.</li>
<li><a href="https://twitter.com/ludobermejo">Ludo Bermejo</a>, estuvo muy interesante la discusión que partío de él sobre
optimizaciones en el código, y nos recordó que no en todos los contextos la
memoria y la CPU son <em>gratis</em>.</li>
<li><a href="https://twitter.com/gelsanz">Ángel Sanz</a>, no pude programar con él, pero hablamos un rato en las
cervezas, y me cayó muy muy bien.</li>
<li><a href="https://es.linkedin.com/in/garciajavier">Javier García</a>, con quien tampoco pude programar, pero charlamos durante las
cervezas.</li>
</ul>


<p>Y por supuesto, agradecer a <a href="http://idealista.com">idealista.com</a> por el espacio y la comida.</p>

<h1>Recursos</h1>

<ul>
<li><a href="https://github.com/athiele/key-promoter-fork">Key promoter</a>. El enlace es un fork de un plugin que parece descontinuado:
<a href="https://plugins.jetbrains.com/plugin/4455">Key promoter plugin</a>.</li>
<li>Github de <a href="https://github.com/SoftwareCraftsmanshipMadrid/global-day-of-coderetreat-2016">Software Craftmanship Madrid</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zen y el arte en el mantenimiento de motocicletas]]></title>
    <link href="http://rchavarria.github.io/blog/2016/09/18/zen-arte-mantenimiento-motocicletas/"/>
    <updated>2016-09-18T16:56:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/09/18/zen-arte-mantenimiento-motocicletas</id>
    <content type="html"><![CDATA[<h6>de Robert M. Pirsig</h6>

<p><img class="left" src="https://raw.githubusercontent.com/rchavarria/blog-post-incubator/master/published-book-notes/img/zen.jpg"></p>

<h3>Por qué lo he leído</h3>

<p>El título no es que sea muy llamativo, parece más un libro sobre filosofía (con
un subtítulo un poco extraño eso sí). Pero estaba recomendado por Mattias
(<a href="https://twitter.com/mpjme">@mpjme</a>) en el capítulo 18 de
<a href="https://www.youtube.com/watch?v=lrf6xuFq1Ms&amp;t=90">FunFunFunction</a>, su <em>canal</em>
de YouTube, y no era la primera vez que oía hablar de
<a href="https://www.amazon.es/Arte-Mantenimiento-Motocicleta-Narrativa-Sexto/dp/8415601956/">Zen y el arte en el mantenimiento de motocicletas</a>.</p>

<p>Así que&#8230; si recibes varias referencias de un libro por distintas personas y
en distintas ocasiones, es que puede ser un libro interesante.</p>

<!-- more -->


<h3>De qué trata el libro</h3>

<p>Me esperaba una historia, una novela, que sirviera de hilo conductor para que
el autor fuera exponiendo una serie de consejos sobre la vida en general y
sobre cómo mantener las cosas materiales en esta vida, ya fueran motocicletas,
ordenadores,&#8230; cualquier cosa. De echo, las personas que hablaban del libro
decían que varias ideas eran bastante trasladables al área del desarrollo del
software.</p>

<p>Y sí, en parte el libro va de eso. Cuenta una historia, un viaje de un padre y
su hijo, en busca de algo, o alguien. Y durante el viaje, el autor cuenta
multitud de historias de <em>abuelo cebolleta</em>.</p>

<h3>Conclusiones y valoración</h3>

<p>El libro está lleno de historias interesantes, e incluso divertidas. Hay
multitud de consejos sobre la vida, y en general estoy muy de acuerdo con
ellos. Me gusta cuidar las cosas, me gusta disfrutar de ellas. Cojo cariño a
mis máquinas, me acostumbro a ellas, tiendo a aceptarlas como son, con sus
deficiencias. Me siento muy identificado con muchos aspectos de los que habla
el protagonista.</p>

<p>Pero el libro no ha calado en mi. ¿El inglés? ¿Muchas historias? ¿La filosofía
detrás de ellas? No sé, pero no he podido terminarlo.</p>

<p>Podría recomendar el libro a gente joven, que tiene toda una vida por delante,
para que aprendiera a disfrutar de las cosas sencillas de la vida. Podría
recomendárselo a gente no tan joven, para que aprendiera lo mismo (nunca es
tarde). Pero tendría que advertirles que tiene un componente muy filosófico, y
que al menos a mí, creo que es lo que me ha hechado hacia atrás a la hora de
terminarlo. No diría que el libro es malo, simplemente que no ha suscitado el
interés suficiente en mí.</p>

<h3>Frases que me gustaría recordar</h3>

<blockquote><p>Diferencias entre <em>pensamiento clásico</em> (o científico, basado en hechos, con el
que me siento más identificado) y el <em>pensamiento romático</em> (más idílico, más
centrado en la belleza, más artístico)</p></blockquote>

<!-- -->


<blockquote><p>Cada motocicleta (o máquina) tiene su personalidad propia y única. Según vas
manteniendo las cosas, vas cogiéndoles cariño, las vas haciendo tuyas según va
pasando el tiempo, las vas conociendo.</p></blockquote>

<p>Varios pasos a la hora de hacer un análisis lógico:</p>

<ol>
<li>Describir el problema</li>
<li>Describir diferentes hipótesis que describan el problema</li>
<li>Crear experimentos para testear cada una de las hipótesis</li>
<li>Predecir los resultados de los experimentos</li>
<li>Anotar los resultados obtenidos de los experimentos</li>
<li>Realizar conclusiones a partir de los resultados de los experimentos</li>
</ol>


<h3>Recursos relacionados</h3>

<ul>
<li>Mis <a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/zen-and-the-art-of-motorcycle-maintenance-by-robert-m-pirsig.markdown">notas sobre Zen y el arte en el mantenimiento de motocicletas</a></li>
<li>El libro <a href="https://www.amazon.es/Arte-Mantenimiento-Motocicleta-Narrativa-Sexto/dp/8415601956/">Zen y el arte en el mantenimiento de motocicletas</a> en Amazon</li>
<li><a href="https://twitter.com/mpjme">Mattias P. Johansson</a> en twitter</li>
<li><a href="https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q">Canal de YouTube FunFunFunction</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: séptimo asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2016/09/18/elixir-septimo-asalto/"/>
    <updated>2016-09-18T16:20:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/09/18/elixir-septimo-asalto</id>
    <content type="html"><![CDATA[<p>El aprendizaje va avanzando, ya vamos por el séptimo asalto. Éste trata sobre
cómo <a href="http://elixir-lang.org/">Elixir</a> maneja múltiples procesos, por lo que trataremos algún tema de
concurrencia. También veremos algunas cosas básicas sobre cómo monitorizar los
procesos de los que consta nuestra aplicación.</p>

<p>Sin olvidar del método de aprendizaje con el que <a href="http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir/">comenzé</a>:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="right" src="http://rchavarria.github.io/images/2016/you-gotta-fight-for-your-right-to-eat.jpg"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/4rvPED">You gotta fight for your right to&#8230; eat</a> de <a href="https://www.flickr.com/photos/r2wk/">ldjpg</a>, <a href="https://creativecommons.org/licenses/by-nc-nd/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by-nc-nd/2.0/">CC BY NC ND 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<p><strong>Trabajando con múltiples procesos</strong></p>

<p>Elixir usa el <a href="https://en.wikipedia.org/wiki/Actor_model">modelo de actores</a> para gestionar la concurrencia.</p>

<p>Elixir se apoya en Erlang para gestionar los procesos, que no son los procesos
del sistema operativo.</p>

<p>Para crear un proceso, se hace con la llamada <code>spawn</code>. <code>spawn</code> puede crear un
proceso y ejecutar en él código que tengas en un módulo cualquiera. El proceso
puede empezar en cualquier momento (asíncrono total) y se utilizan mensajes
entre procesos para sincronizarlos.</p>

<p>Los mensajes no tienen por qué ser <code>Strings</code>, pueden ser de cualquier tipo
(generalmente tuplas o atoms). Los mensajes se mandan con <code>send</code>, y debes usar
un <code>PID</code> (devuelto por <code>spawn</code>).</p>

<p>El receptor, espera mensajes con <code>receive</code>. <code>receive</code> funciona como <code>case</code>: se
pueden poner varios casos, y el primero que coincida, se ejecuta.</p>

<p><code>receive</code> maneja sólo un mensaje. Si queremos recibir varios, debemos volver a
llamar al método que contiene el <code>receive</code>, de forma recursiva (y Elixir es muy
bueno con la recursividad). <code>receive</code> también acepta un parámetro, <code>after</code>,
para definir un timeout.</p>

<p>El autor dice que los procesos en Elixir son como los objetos en lenguajes
orientados a objectos, pero con mejor sentido del humor. El hecho es que son
muy livianos, y pueden mantener estado, así que podemos pensar en ellos como en
objetos de la programación orientada a objetos.</p>

<p><strong>Enlazar procesos</strong></p>

<p>Normalmente, un proceso no sabe cuando muere un proceso hijo. Debemos hacer
algo manualmente para que se notifique. Podemos crear procesos <em>enlazados</em>
(linked) con <code>spawn_link</code>. Por defecto, si un proceso hijo muere, mata al
proceso padre. Para controlar esto y poder escuchar el mensaje que lanza el
proceso hijo al morir, debemos <em>atrapar la salida</em> mediante
<code>Process.flag(:trap_exit, true)</code> justo antes de hacer <code>spawn_link</code>.</p>

<p>Dos procesos enlazados pueden comunicarse bidireccionalmente.</p>

<p>Elixir usa el framework OTP para construir árboles de procesos. OTP lleva mucho
tiempo en funcionamiento, y debemos confiar en que lo hace mucho mejor que
nosotros, por lo que lo usaremos prácticamente siempre. OTP incluye el concepto
de <em>Supervisor de procesos</em>. Más adelante estudiaremos temas relacionados con
OTP.</p>

<p><strong>Monitorizando procesos</strong></p>

<p>Si <code>spawn_link</code> permite comunicación bidireccional, <code>spawn_monitor</code> solo la
permite unidireccional. El proceso hijo puede notificar al padre, pero no al
revés.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># monitor devuelve el pid del proceso hijo y una referencia de la monitorización
</span><span class='line'>res = spawn_monitor(&lt;module&gt;, &lt;function&gt;, &lt;params&gt;)
</span><span class='line'>IO.inspect res
</span><span class='line'># =&gt; { #PID{3.3.3.3}, #Reference{1.2.3.4} }</span></code></pre></td></tr></table></div></figure>


<p>También se puede monitorizar un proceso existente con <code>Process.monitor</code>.</p>

<p>¿Cuándo utilizar cada uno? Depende de la utilidad. Si la muerte de un hijo
debería matar al padre, usa procesos enlazados. Si la muerte/fallo de un hijo
solamente debería notificar al padre, usa monitorización.</p>

<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-07/exercise-01-round-07.exs">exercise-01-round-07.exs</a>: ejecutar el programa que pasa mensajes en cadena
de un proceso a otro hasta llegar al millón de procesos.</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-07/exercise-02-round-07.exs">exercise-02-round-07.exs</a>: escribir un código que cree dos procesos, y que a
cada uno le mande un token (p.e.: &#8220;pepito&#8221; y &#8220;fulanito&#8221;), y que los procesos
lo devuelvan. En teoría, ¿es determinista el orden en el que se reciben las
respuestas? ¿Y en la práctica? En caso de que no, ¿cómo podría hacerse que
fuera determinista?.</li>
</ul>


<p><strong>Resultados</strong></p>

<p>Parece que sí es determinista (al menos con dos procesos). Depende del orden en
el que se creen los procesos, incluso si invertimos el orden en el que se
envían los tokens, el primer proceso creado es el primero en responder.</p>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-07/exercise-03-round-07.exs">exercise-03-round-07.exs</a>: usa <code>spawn_link</code> para crear un proceso, el cual
envía un mensaje al padre y finaliza inmediatamente. Mientras, en el padre,
después de crear el proceso, espera 500ms y luego comienza a recibir todos los
mensajes que están esperando. Tracea todo lo que recibas. ¿Importa que no
estuvieras recibiendo notificaciones cuando el hijo terminó?</li>
</ul>


<p><strong>Resultados</strong></p>

<p>No recibe ningún mensaje, el hijo termina, terminando al padre durante la
espera.</p>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-07/exercise-04-round-07.exs">exercise-04-round-07.exs</a>: repite el ejercicio anterior, pero en lugar de
terminar con <code>exit</code>, que el hijo lance una excepción. ¿qué diferencia notas?</li>
</ul>


<p><strong>Resultados</strong></p>

<p>No hay mucha difrencia. El padre sigue terminando, sin escuchar ningún mensaje.
Al menos, la excepción aparece por consola, mostrándose un error diciendo que
el proceso hijo (con su PID) ha lanzado una excepción. En el ejercicio
anterior, solamente aparecía que el proceso padre terminaba, nada más.</p>

<p>Usando <code>Process.flag(:trap_exit, true)</code>, el proceso padre recibe mensajes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ elixir -r exercise-03-round-07.exs -e "Exercise3.run"
</span><span class='line'>Parent's PID #PID&lt;0.48.0&gt;
</span><span class='line'>PID's child #PID&lt;0.53.0&gt;
</span><span class='line'>Received: "Hello!"
</span><span class='line'>Received: {:EXIT, #PID&lt;0.53.0&gt;, :boom}
</span><span class='line'>
</span><span class='line'>$ elixir -r exercise-04-round-07.exs -e "Exercise4.run"
</span><span class='line'>Parent's PID #PID&lt;0.48.0&gt;
</span><span class='line'>Child's PID #PID&lt;0.53.0&gt;
</span><span class='line'>
</span><span class='line'>22:46:14.313 [error] Process #PID&lt;0.53.0&gt; raised an exception
</span><span class='line'>** (RuntimeError) Child finished
</span><span class='line'>    exercise-04-round-07.exs:19: Exercise4.child/1
</span><span class='line'>Received: "Hello!"
</span><span class='line'>Received: {:EXIT, #PID&lt;0.53.0&gt;, %{RuntimeError{message: "Child finished"},
</span><span class='line'>[{Exercise4, :child, 1, [file: 'exercise-04-round-07.exs', line: 19]}]}}</span></code></pre></td></tr></table></div></figure>


<p>Las diferencias están en lo recibido en el mensaje de terminación del hijo. En
caso de <code>exit</code> se recibe <code>:EXIT</code>, un PID, y la causa de la salida. En el caso
de la excepción: <code>:EXIT</code>, un PID y la excepción, parece, porque tiene pinta de
pila de llamadas, con su módulo, función, parámetros,&#8230;</p>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-07/exercise-05-round-07.exs">exercise-05-round-07.exs</a>: repetir el ejercicio pero con <code>spawn_monitor</code>.</li>
</ul>


<p><strong>Resultados</strong></p>

<p>No creo que lo esté haciendo bien. Se supone que monitorizando la comunicación
no es bidireccional, pero el padre recibe el mensaje que envía el hijo, así
como el mensaje que se envía al terminar o lanzar la excepción. La única
diferencia visible es que en lugar de recibir solamente un PID, se recibe un
PID y la referencia de monitorización.</p>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-07/exercise-06-round-07.exs">exercise-06-round-07.exs</a>: escribir una función implementando <em>pararell
map</em>, que es como una función <code>map</code> pero cada elemento es procesado por un
proceso distinto. Preguntas: ¿por qué es necesario guardar en la variable <code>me</code>
el PID del proceso padre? Se debe utilizar <code>^pid</code> para recibir los resultados
en orden, pero&#8230; ¿qué pasa si se utiliza <code>_pid</code>? ¿cómo hacer para que falle:
esperas, aumentar número elementos, que la función que procesa cada elemento
sea más complicada,&#8230;?</li>
</ul>


<p><strong>Resultados</strong></p>

<p>Aumentando el número de elementos afecta al orden en el que se reciben los
mensajes. También he conseguido recibir mensajes en orden distinto con el
siguiente código:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Parallel.pmap 1..10, fn (i) -&gt;
</span><span class='line'>  # la espera es más corta según el elemento `i` se va a haciendo mayor
</span><span class='line'>  wait_up_to = round(10 / i)
</span><span class='line'>  :timer.sleep(wait_up_to)
</span><span class='line'>  i
</span><span class='line'>end
</span><span class='line'>  #=&gt; [ 7, 8, 9, 10, 5, 6, 3, 4, 2, 1 ]</span></code></pre></td></tr></table></div></figure>


<p>Volviendo a poner <code>^pid</code> el orden vuelve a ser correcto.</p>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-07/exercise-07-round-07.exs">exercise-07-round-07.exs</a>: toma como referencia un planificador (servidor de
Fibonacci) de un ejercicio del libro y crea otro similar. Esta vez, se deben
contar las apariciones de la palabra <code>cat</code> en cada fichero que se encuentre en
un directorio dado. Cada fichero será procesado por un proceso distinto.
¿Podrías escribir el planificador de una forma más genérica?</li>
</ul>


<h2>Enseñar lo aprendido, y repetir desde el paso 7</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta
el siguiente asalto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: sexto asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2016/09/14/elixir-sexto-asalto/"/>
    <updated>2016-09-14T21:32:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/09/14/elixir-sexto-asalto</id>
    <content type="html"><![CDATA[<p>Sexto asalto. En esta ocasión no veremos nada del lenguaje, si no del
ecosistema de <a href="http://elixir-lang.org/">Elixir</a>. Elixir viene acompañado de unas magníficas herramientas
que complementan en lenguaje de programación en sí: <code>mix</code>, la herramienta de
construcción de aplicaciones y herramientas de testing como <code>ExUnit</code> y
<code>DocTests</code>. Además de estas herramientas, exploraremos también los sitios web
donde los desarrolladores alojan la mayoría de las librerías y proyectos Elixir
disponibles.</p>

<p>Sigo con la metodología de aprendizaje explicada en el <a href="http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir/">primer post sobre Elixir</a>:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="right" src="http://rchavarria.github.io/images/2016/more-gladiators.png"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/6xvcMz">More gladiators</a> de <a href="https://www.flickr.com/photos/archeon/">Hans Splinter</a>, <a href="https://creativecommons.org/licenses/by-nd/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by/2.0/">CC BY 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<p>Elixir viene con la herramienta <code>mix</code>, la herramienta oficial de construcción
de proyectos (creación, testeo, construcción, gestión de dependencias,&#8230;). En
este asalto crearemos una aplicación que nos permitirá listar los últimos <code>n</code>
<em>issues</em> de cualquier proyecto de <a href="https://github.com">GitHub</a>.</p>

<p><code>mix help</code> lista los comandos disponibles. Los más interesantes podrían ser:
<code>mix run</code> para ejecutar el proyecto, <code>mix test</code> para ejecutar los tests o <code>mix
new</code> para crear uno nuevo.</p>

<p>Crearemos un nuevo proyecto, llamado <code>rct_issues</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mix new rct_issues</span></code></pre></td></tr></table></div></figure>


<p>Listando los ficheros y directorios que ha creado el comando, encontramos los
siguientes:</p>

<ul>
<li><code>/README.md</code>: aquí podemos poner la descripción del proyecto.</li>
<li><code>/config/</code>: donde vivirá la configuración del proyecto</li>
<li><code>/lib/</code>: aquí irá el código fuente de nuestro proyecto</li>
<li><code>/test/</code>: aquí irá el código de tests</li>
<li><code>mix.exs</code>: opciones de configuración del proyecto en sí</li>
</ul>


<p><strong>Transformación: parsear la línea de comandos</strong></p>

<p>La aplicación de ejemplo tomará los parámetros de la línea de comandos. Las
aplicaciones Elixir consisten en una serie de transformaciones, y la primera de
ellas será la de parsear la línea de comandos.</p>

<p>En Elixir existen una serie de convenciones:</p>

<ul>
<li>El código que gestiona la línea de comandos va en un módulo llamado
<code>&lt;proyecto&gt;.CLI</code>, así que nuestro código iría en un módulo llamado
<code>RctIssues.CLI</code></li>
<li>Cada módulo va en un fichero distinto</li>
<li>Cada módulo va dentro del espacio de nombres del proyecto, por lo que todos
los módulos colgarán de <code>RctIssues</code></li>
<li>Los <em>espacios de nombres</em> corresponden con directorios en el árbol del
proyecto. Así, el módulo <code>RctIssues.CLI</code> se escribiría en el directorio
<code>/lib/rct_issues/cli.ex</code>. Ver fichero de código fuente <a href="https://github.com/rchavarria/learning-elixir/blob/master/projects/rct_issues/lib/rct_issues/cli.ex">cli.ex</a></li>
</ul>


<p><strong>Los primeros tests</strong></p>

<p>Elixir viene con un pequeño framework de testing llamado <code>ExUnit</code>.</p>

<p>En el fichero <code>/test/cli_test.exs</code> escribiremos los tests para el módulo que
acabamos de escribir (echar un vistazo al fichero <a href="https://github.com/rchavarria/learning-elixir/blob/master/projects/rct_issues/test/cli_test.exs">cli_test.exs</a>)</p>

<p><strong>Transformación: obtener datos de GitHub</strong></p>

<p>La siguiente transformación sería obtener datos de GitHub. Para ello
necesitaremos alguna librería externa. Hay varios lugares donde buscar:</p>

<ol>
<li>Librerías propias de Eixir, en <a href="http://elixir-lang.org/docs">http://elixir-lang.org/docs</a></li>
<li>Librerías propias de Erlang (también distribuidas con Elixir), en
<a href="http://erlang.org/docs">http://erlang.org/docs</a></li>
<li>Si todo esto falla, podemos buscar en el repositorio de <a href="http://hex.pm">Hex</a>,
el gestor de dependencias de Elixir</li>
<li>Si aún así, todo falla, siempre nos quedará Google y GitHub</li>
</ol>


<p>El autor recomienda usar <code>HTTPoison</code> como librería. Esta librería se encuentra
en <code>Hex</code>, con lo que es muy fácil incluirla en nuestro proyecto. Simplemente
hay que modificar el método <code>deps</code> dentro del fichero <code>/mix.exs</code>, indicando el
nombre y la versión de la librería que queremos usar:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defp deps do
</span><span class='line'>  [
</span><span class='line'>    { :httpoison, "~&gt; 0.4" }
</span><span class='line'>  }
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Con el comando <code>mix deps</code> podremos saber el estado de las dependencias del
proyecto. Con <code>mix deps.get</code> podremos descargar las dependencias que no estén
instaladas localmente. En caso de estar instaladas, lo estarán en el directorio
<code>/deps</code>, como proyectos Elixir, con lo que podremos navegar a través de ellas.</p>

<p>Ahora ya podemos usarla. Lo haremos en un nuevo módulo, escrito en
<a href="https://github.com/rchavarria/learning-elixir/blob/master/projects/rct_issues/lib/rct_issues/github_issues.ex"><code>/lib/rct_issues/github_issues.ex</code></a>. También modificaremos el método
<code>applications</code> de <code>mix.exs</code> para indicar que la dependencia <code>HTTPoison</code> va a
ser ejecutada como una <em>subaplicación</em> dentro de nuestro proyecto (hablará más
adelante sobre ello en el libro).</p>

<p><strong>Transformación: parsear la respuesta JSON</strong></p>

<p>Para la siguiente transformación incluiremos una dependencia que proviene del
mundo Erlang. <code>mix</code> es capaz de incluir dependencias de muy diversas fuentes,
Erlan entre ellas. Se añade la librería <code>jsx</code>, como dependencia del proyecto.
Añadir la línea <code>{ :jsx, "~&gt; 2.0" }</code> al fichero <code>mix.exs</code> y ejecutar el comando
<code>mix deps.get</code> para instalarla localmente.</p>

<p>Modificaremos nuestro módulo que debe parsear la respuesta,
<code>lib/rct_issues/github_issues.ex</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def handle_response(%{status_code: 200, body: body}) do
</span><span class='line'>  { :ok, :jsx.decode(body) }
</span><span class='line'>end          
</span><span class='line'>
</span><span class='line'>def handle_response(%{status_code:   _, body: body}) do
</span><span class='line'>  { :error, :jsx.decode(body) }
</span><span class='line'>end          </span></code></pre></td></tr></table></div></figure>


<p><strong>Configuración de la aplicación</strong></p>

<p>Cuando creamos el proyecto con <code>mix</code>, éste crea un directorio de configuración,
<code>config/</code>, con el fichero <code>config.exs</code>, donde podremos escribir ciertas
configuraciones de nuestro proyecto.
Cada línea de configuración suele ser un registro de clave valor, por ejemplo, para nuestro proyecto añadiríamos:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>use Mix.Config
</span><span class='line'>config :rct_issues, github_url: "https://api.github.com"</span></code></pre></td></tr></table></div></figure>


<p>Más adelante, podremos usar este valor configurado gracias al módulo
<code>Application</code>, así</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># crea una variable de clase llamada github_url
</span><span class='line'>@github_url Application.get_env(:rct_issues, :github_url)</span></code></pre></td></tr></table></div></figure>


<p><strong>Construir un ejecutable</strong></p>

<p>Para ello es necesario modificar el fichero <code>mix.exs</code>, para configurar la
herramienta <code>escript</code> y poder indicarle el módulo principal de la aplicación
que se va a construir, el cual debe de tener un método llamado <code>main</code>.</p>

<p>Para construir, simplemente ejecutar el comando:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mix escript.build</span></code></pre></td></tr></table></div></figure>


<p>Y tendremos un ejecutable que podremos ejecutar como cualquier otra aplicación
de consola de Unix/Linux</p>

<p><strong>Ejecutando los comentarios</strong></p>

<p>¿Cómo? ¿Ejecutar los comentarios? No te preocupes, Elixir puede ejecutar
ciertos comentarios como si fueran tests. En realidad, ejecuta comentarios
escritos en cierta forma como si fueran sesiones de la herramienta <code>iex</code>. Esto
sí que es documentación ejecutable. Simplemente, espectacular.</p>

<p>Un comentario del tipo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@doc """   
</span><span class='line'>Given a list of rows, where each row contains a keyed list
</span><span class='line'>of columns, return a list containing lists of the data in
</span><span class='line'>each column. The `headers` parameter contains the
</span><span class='line'>list of columns to extract
</span><span class='line'>
</span><span class='line'>## Example 
</span><span class='line'>
</span><span class='line'>    iex&gt; list = [Enum.into([{"a", "1"},{"b", "2"},{"c", "3"}], HashDict.new),
</span><span class='line'>    ...&gt;         Enum.into([{"a", "4"},{"b", "5"},{"c", "6"}], HashDict.new)]
</span><span class='line'>
</span><span class='line'>    iex&gt; Issues.TableFormatter.split_into_columns(list, [ "a", "b", "c" ])
</span><span class='line'>    [ ["1", "4"], ["2", "5"], ["3", "6"] ]
</span><span class='line'>"""        
</span><span class='line'>def split_into_columns(rows, headers) do
</span><span class='line'># ...</span></code></pre></td></tr></table></div></figure>


<p>Creamos un nuevo fichero de tests en <code>test/doc_test.exs</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defmodule DocTest do
</span><span class='line'>  use ExUnit.Case
</span><span class='line'>  doctest Issues.TableFormatter
</span><span class='line'>end  </span></code></pre></td></tr></table></div></figure>


<p>Donde <code>Issues.TableFormatter</code> es el módulo donde hemos incluido el comentario
<em>ejecutable</em>. Podemos lanzar los comentarios testeables con los comandos <code>mix
test test/doc_test.exs</code> o simplemente <code>mix test</code>.</p>

<p>Para crear la documentación del proyecto, está la herramienta ExDoc, similar a
JavaDoc. Para ello hay que añadirlo como dependencia del proyecto en el fichero
<code>mix.exs</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defp deps do
</span><span class='line'>[
</span><span class='line'># ...
</span><span class='line'>  { :ex_doc, github: "elixir-lang/ex_doc" },
</span><span class='line'># ...
</span><span class='line'>]
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Para generarlos, instalar la dependencia con <code>mix deps.get</code>, y generar la
documentación con <code>mix docs</code>.</p>

<h2>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</h2>

<ul>
<li>Necesitarás consular documentación sobre <code>OptionParser</code> para ser capaz de
hacer el primer ejercicio&#8230; No solamente eso, si no que he escrito unos
tests para aprender cómo funciona <a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-05/exercise-01-round-06.exs">tests de exercise-01-round-06</a></li>
<li>¿Como se hace para formatear una cadena siempre con la misma anchura?
(¿<code>String.pad</code> o algo así?). Parece que <a href="http://elixir-lang.org/docs/stable/elixir/String.html#ljust/3"><code>String.ljust/3</code></a> hace el trabajo.</li>
</ul>


<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-06/exercise-01-round-06.exs">exercise-01-round-06</a>: repetir (honestamente) el proceso de crear un nuevo
proyecto y crear un módulo que parsee opciones de la línea de comandos y un
test para ello</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-06/exercise-02-round-06.exs">exercise-02-round-06</a>: seguir implementando el ejemplo del libro lo más
honestamente que se pueda. Se implementarán las siguientes transformaciones:
obtener los datos de GitHub con HTTPoison, parsear el JSON resultante con JSX,
extraer sólo la información que nos interesa, ordenarla y recuperar sólo la
cantidad que quiere el usuario.</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-06/exercise-03-round-06.exs">exercise-03-round-06</a>: implementar el resto de la funcionalidad de la
aplicación</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-06/exercise-04-round-06.exs">exercise-04-round-06</a>: escribir una aplicación que pida datos a un organismo
de EEUU sobre el tiempo, parsee los datos XML y los muestre de forma
agradable</li>
</ul>


<h2>Enseñar lo aprendido, y repetir desde el paso 7</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta
el siguiente asalto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: quinto asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2016/09/11/elixir-quinto-asalto/"/>
    <updated>2016-09-11T11:43:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/09/11/elixir-quinto-asalto</id>
    <content type="html"><![CDATA[<p>Y ya vamos por el quinto asalto, el quinto de la serie sobre el aprendizaje del
lenguaje <a href="http://elixir-lang.org/">Elixir</a>. En este asalto aprenderemos estructuras de control de flujo,
esenciales en cualquier lenguaje de programación. No sé en otros lenguajes
funcionales, pero en Elixir, estas estructuras no son muy bien acogidas. De
todas formas, son parte del lenguaje, son sencillas y nos servirán para
establecer conexiones con lenguajes que ya conozcamos.</p>

<p>Para seguir con el aprendizaje, sigo con el método seguido en otros asaltos
partiendo del post <a href="http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir/">aprendiendo Elixir</a>:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="right" src="http://rchavarria.github.io/images/2016/fight-II-harc-II.jpg"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/6bQhPq">Fight II / Harc II</a> de <a href="https://www.flickr.com/photos/silangel/">silangel</a>, <a href="https://creativecommons.org/licenses/by-nc/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by/2.0/">CC BY 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<p>En Elixir no se usan mucho, se suelen escribir métodos pequeños, que junto con
claúsulas de guarda y <em>pattern matching</em> nos alejan bastante de lo que aquí
estudiaremos. Normalmente, se suelen favorecer esos mecanismos frente a
estructuras de control. Al principio cuesta acostumbrarse, pero luego uno se va
dando cuenta de que los cuerpos de los métodos quedan más pequeños y más
enfocados a hacer una sola cosa, aunque despista un poco que una misma función
tenga varios cuerpos.</p>

<p><strong><code>if</code> y <code>unless</code></strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Ambos toman dos parámetros, una condición y una *keyword list*, cuyas claves posibles son `do:` y `else:`.
</span><span class='line'>if 1 == 2, do: "truthy", else: "falsy"
</span><span class='line'>unless 2 == 1, do: "do not execute", else: "execute this"
</span><span class='line'>
</span><span class='line'># igual que las funciones, se puede acortar un poco
</span><span class='line'>if 1 == 2 do
</span><span class='line'>  "truthy"
</span><span class='line'>else
</span><span class='line'>  "falsy"
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><strong><code>cond</code></strong></p>

<p>En realidad es una macro, como muchas otras construciones del lenguaje, y
acepta una serie de condiciones. Se ejecutará el código de la primera condición
que se evalúe a <code>true</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Resolver la kata FizzBuzz
</span><span class='line'>cond do
</span><span class='line'>  rem(current, 3) == 0 and rem(current, 5) == 0 -&gt; "FizzBuzz"
</span><span class='line'>  rem(current, 5) == 0 -&gt; "Buzz"
</span><span class='line'>  rem(current, 3) == 0 -&gt; "Fizz"
</span><span class='line'>  true -&gt; current
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>En muchos casos, una mejor alternativa puede ser utilizar múltiples funciones,
pattern matching y claúsulas de guarda en lugar del bloque <code>cond</code>.</p>

<p><strong><code>case</code></strong></p>

<p><code>case</code> permite evaluar una serie de patrones, y ejecuta el código asociado a
dicho patrón. También se pueden usar claúsulas de guarda.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># para controlar errores al abrir un fichero
</span><span class='line'>case File.open("some file.txt") do
</span><span class='line'>  { :ok, file } -&gt; IO.puts "First line: #{IO.read(file, :line)}"
</span><span class='line'>  { :error, reason } -&gt; IO.puts "Failed to open file: #{reason}"
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'># con claúsulas de guarda
</span><span class='line'>dave = %{name: "Dave", age: 27}
</span><span class='line'>case dave do
</span><span class='line'>  person = %{age: age} when is_number(age) and age &gt;= 21 -&gt; IO.puts "You are allowed #{person.name}"
</span><span class='line'>  _ -&gt; IO.puts "You are not allowed"
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><strong>Excepciones</strong></p>

<p>Las excepciones en Elixir se usan para casos excepcionales. Por ejemplo, si hay
un fallo al leer un fichero de configuración, con un nombre fijo. Pero no si
hay un error al leer un fichero que el usuario ha introducido el nombre,
podemos controlar eso, y no sería un error excepcional.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># lanzando una RuntimeError
</span><span class='line'>raise "Giving up"
</span><span class='line'>
</span><span class='line'># o con algunos argumentos
</span><span class='line'>raise RuntimeError, message: "Stack overflow"
</span><span class='line'>
</span><span class='line'># por convención, se suele escribir `!` al final de una llamada que puede
</span><span class='line'># devolver una excepción bien conocida, por ejemplo
</span><span class='line'>{ ok: file } = File.open!("foo.bar")</span></code></pre></td></tr></table></div></figure>


<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li>[exercise-01-round-05.exs]: reescribe la kata FizzBuzz con <code>case</code></li>
<li>[exercise-02-round-05.exs]: muchas funciones tienen una segunda
implementación, que termina con <code>!</code>, la cual, si el resultado no coincide con
<code>{ :ok, data }</code> lanza una excepción. Implementa una función <code>ok!</code> que haga
exactamente esto</li>
</ul>


<h2>Enseñar lo aprendido, y repetir desde el paso 7</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta
el siguiente asalto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: cuarto asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2016/08/10/elixir-cuarto-asalto/"/>
    <updated>2016-08-10T17:20:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/08/10/elixir-cuarto-asalto</id>
    <content type="html"><![CDATA[<p>Éste es el cuarto asalto en mi aventura aprendiendo <a href="http://elixir-lang.org/">Elixir</a>. En esta ocasión
trato con tipos de datos binarios, cadenas y <strong>sigils</strong>. No es mucho, pero las cadenas son
una parte esencial de cualquier lenguaje de programación. Y dominarlas
significa dominar una gran parte del lenguaje.</p>

<p>Por supuesto, sigo aprendiendo con el método descrito en el post sobre <a href="http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir/">aprender Elixir</a>:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="right" src="http://rchavarria.github.io/images/2016/fourth-fight.jpg"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/5yHK4Y">Muñeco de Gohan y Bu peleando</a> de <a href="https://www.flickr.com/photos/alotor/">Alonso Javier Torres</a>, <a href="https://creativecommons.org/licenses/by-nc/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by/2.0/">CC BY 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<p>Para definir una cadena se pueden usar comillas simples o comillas dobles.
También se puede usar comillas triples, para escribir lo que llaman <code>heredocs</code>,
y se suelen usar para escribir comentarios para documentar métodos y módulos.</p>

<p>En Elixir, existe lo que llaman <em>sigils</em> (que se podría traducir como código,
señal o símbolo mágico). Comienzan con <code>~</code>, seguido de una letra que determina
el tipo de símbolo:</p>

<ul>
<li><code>c</code> para una lista de carácteres</li>
<li><code>r</code> para expresión regular</li>
<li><code>w</code> para una lista de palabras separado por espacios</li>
<li>y hay más</li>
</ul>


<p>y cuyo valor se puede enmarcar en distintos delimitadores: <code>&lt;..&gt;</code>, <code>{...}</code>,
<code>[...]</code>,&#8230;</p>

<p>Un uso muy típico es para escribir expresiones regulares:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~r{[0-9]+[A-Z]*}</span></code></pre></td></tr></table></div></figure>


<p>Los <em>sigils</em> pueden incluso personalizarse, y crear los tuyos propios.</p>

<p>Las cadenas definidas mediante comillas dobles, son lo que se conoce en otros
lenguajes como <em>strings</em>. Las cadenas con comillas simples, se llaman
<em>character lists</em> (o <em>char list</em>), listas de carácteres, y son listas, arrays.</p>

<p><strong>Cadenas con comillas simples</strong></p>

<p>Son una lista de códigos que representan los carácteres. Y como son una lista,
podemos usar métodos de <code>List</code>: <code>++</code>, <code>--</code>, <code>List.zip</code>, <code>[ head | tail ]</code>,&#8230;</p>

<p>Para saber el número entero que representa un carácter, se puede usar la
notación <code>?&lt;chr&gt;</code>, por ejemplo, <code>?a</code> o <code>?4</code>, para saber los valores numéricos
de los carácteres <code>a</code> y <code>4</code> respectivamente.</p>

<p><strong>Binarios</strong></p>

<p>Qué mejor que un poco de código para ver cómo se usa este tipo de datos</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># el tipo *binario* representa una secuencia de bits
</span><span class='line'>iex&gt; b = &lt;&lt; 1, 2, 3 &gt;&gt;
</span><span class='line'>&lt;&lt;1, 2, 3&gt;&gt;
</span><span class='line'>iex&gt; byte_size b
</span><span class='line'>3
</span><span class='line'>iex&gt; bit_size b
</span><span class='line'>24
</span><span class='line'>
</span><span class='line'># se puede especificar también la cantidad de bits que queremos que ocupen
</span><span class='line'>iex&gt; b = &lt;&lt; 1::size(2), 1::size(3) &gt;&gt;
</span><span class='line'>&lt;&lt;9::size(5)&gt;&gt;
</span><span class='line'>iex&gt; byte_size b
</span><span class='line'>1
</span><span class='line'>iex&gt; bit_size b
</span><span class='line'>5
</span><span class='line'>
</span><span class='line'># también se pueden almacenar enteros, floats y otros binarios
</span><span class='line'>iex&gt; an_int = &lt;&lt; 1 &gt;&gt;
</span><span class='line'>&lt;&lt;1&gt;&gt;
</span><span class='line'>iex&gt; a_float = &lt;&lt; 2.5 :: float &gt;&gt;
</span><span class='line'>&lt;&lt;64, 4, 0, 0, 0, 0, 0, 0&gt;&gt;
</span><span class='line'>iex&gt; mix = &lt;&lt; an_int :: binary, a_float :: binary &gt;&gt;
</span><span class='line'>&lt;&lt;1, 64, 4, 0,......&gt;&gt;
</span><span class='line'>
</span><span class='line'># extraer valores (echa un vistazo a cómo se codifican los floats según
</span><span class='line'># el estándar IEEE 754)
</span><span class='line'>iex&gt; &lt;&lt; sign::size(1), exp::size(11), mantissa::size(52) &gt;&gt; = &lt;&lt; 3.14159::float &gt;&gt;
</span><span class='line'>iex&gt; (1 + mantissa / :math.pow(2, 52)) * :math.pow(2, exp-1023)
</span><span class='line'>3.14159
</span><span class='line'>
</span><span class='line'># las cadenas con comillas dobles "" (dqs: double quoted string) son de
</span><span class='line'># tipo binario, y están codificadas en UTF-8 lo que significa que la
</span><span class='line'># longitud de la cadena no tiene por qué coincidir con el tamaño en bytes
</span><span class='line'>iex&gt; dqs = "∂x/∂y"
</span><span class='line'>"∂x/∂y"
</span><span class='line'>iex&gt; String.length dqs
</span><span class='line'>5
</span><span class='line'>iex&gt; byte_size dqs
</span><span class='line'>9</span></code></pre></td></tr></table></div></figure>


<p><strong>Procesando cadenas</strong></p>

<p>Igual que podemos dividir una lista en <code>head</code> y <code>tail</code>, podemos extraer el
primer carácter (se refiere a él como <em>grapheme</em>, grafema/grafo/&#8230;) de una
cadena binaria o <em>dqs</em> especificando que <code>head</code> es de tipo <code>utf8</code> y que <code>tail</code>
sigue siendo de tipo binario:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defp each(&lt;&lt; head::utf8, tail::binary &gt;&gt;), do [ head | each(tail) ]
</span><span class='line'>defp each(&lt;&lt;&gt;&gt;), do []</span></code></pre></td></tr></table></div></figure>


<h2>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</h2>

<p>Está claro que hay que ver la documentación del módulo <a href="http://elixir-lang.org/docs/stable/elixir/String.html"><code>String</code></a>, que contiene
métodos para manipular cadenas encerradas en comillas dobles (recuerda, son de
tipo binario).</p>

<p>Las expresiones regulares son bastante comunes, y en Elixir se suelen usar
mediante <a href="http://elixir-lang.org/getting-started/sigils.html"><em>sigils</em></a>. Son un aspecto bastante curioso del lenguaje y pueden ser
personalizados.</p>

<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-04/exercise-01-round-04.exs">exercise-01-round-04.exs</a>: escribe una función que devuelva <code>true</code> si el
parámetro (una lista de carácteres) contiene sólo carácteres imprimibles (del
espacio a la tilde)</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-04/exercise-02-round-04.exs">exercise-02-round-04.exs</a>: escribe una función que devuelva <code>true</code> en el
caso de que dos palabras sean anagramas. <code>anagram?(word1, word2)</code></li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-04/exercise-03-round-04.exs">exercise-03-round-04.exs</a>: escribe una funcion que calcule suma, resta,&#8230;
de una cadena pasada como parámetro: <code>calculate('123 + 27') # =&gt; 150</code>. Este
es especialmente difícil (al menos para mi nivel): devolver tuplas, parsear
números (utilizando recursión de una forma muy imaginativa), utilizando pattern
matching para construir funciones dependiendo del operador,&#8230;</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-04/exercise-04-round-04.exs">exercise-04-round-04.exs</a>: escribe una función que pasándole una lista de
dqs (double quoted strings) las imprima centradas en un ancho de la palabra
más larga, cada una en una línea distinta.</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-04/exercise-05-round-04.exs">exercise-05-round-04.exs</a>: escribe una función que pase a mayúsculas la
primera letra de cada frase en una cadena</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-04/exercise-06-round-04.exs">exercise-06-round-04.exs</a>: escribe una función que parsee un fichero CSV
(que tendrá los campos id, estado y cantidad neta), y que se lo pase a la
función desarrollada en el tercer asalto, al ejercicio
<code>exercise-02-round-03.exs</code>.</li>
</ul>


<h2>Enseñar lo aprendido, y repetir desde el paso 7</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta el siguiente asalto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Practical Vim]]></title>
    <link href="http://rchavarria.github.io/blog/2016/07/17/practical-vim/"/>
    <updated>2016-07-17T23:15:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/07/17/practical-vim</id>
    <content type="html"><![CDATA[<h6>de Drew Neil</h6>

<h3>Por qué lo he leído</h3>

<p><img class="left" src="https://raw.githubusercontent.com/rchavarria/blog-post-incubator/master/published-book-notes/img/practical-vim.jpg"></p>

<p>Hace un tiempo decidí que quería <a href="http://rchavarria.github.io/blog/2014/10/11/aprendiendo-vim/">aprender a utilizar Vim</a>. Entre los muchos
recursos para aprender se encontraba este libro, pero encontré más prácticos
una serie de videos. Pero más adelante, escuchando el podcast <a href="http://giantrobots.fm/">Giant Robots</a>,
hablaron de este libro, y cuando recibes varias señales, quiere decir algo.</p>

<!-- more -->


<h3>De qué trata el libro</h3>

<p>El libro no es un manual desde cero. Tampoco es un manual avanzado. Es un
conjunto de trucos, de sugerencias, que trata de explicar y convencer al lector
de la filosofía y bondades del editor. Entre estos trucos encontrarás muchos
que te sean de utilidad, y otros tantos tan extraños que ni te molestarás en
entenderlos. Pero lo más importante es que describe una <em>forma de pensar en
Vim</em>. A la hora de editar ficheros de texto no hay una única forma de hacer las
cosas, ni tampoco una forma superior a otras alternativas, pero en Vim sí que
hay una filosofía, una idea de atacar cada edición. Este libro te sumerge en
ella.</p>

<h3>Conclusiones y valoración</h3>

<p>El libro es una maravilla. Está lleno de trucos. Muchos de ellos los conocía, y
otros ni siquiera sabía que existían. En cambio, otros, después de llevar un
tiempo usando Vim, tenía una ligera sospecha de que se podrían hacer, pero no
había invertido el tiempo en averiguar cómo.</p>

<p>Si tienes ganas de incarle el diente a un editor que sobrevive al paso del
tiempo, échale un vistazo al libro.</p>

<p>Debería echar un vistazo al proyecto de Mozilla <a href="https://github.com/mozilla/doctorjs">Doctor JS</a>, que contiene la
herramienta <code>jsctags</code>, para generar ficheros ctags de proyectos JavaScript.</p>

<h3>Frases que me gustaría recordar</h3>

<blockquote><p>La fórmula del punto: una pulsación de tecla para mover, una pulsación de
tecla para ejecutar la edición</p></blockquote>

<!-- -->


<blockquote><p>La estrategia óptima de edición es hacer que tanto el cambio como el
movimiento sean repetibles</p></blockquote>

<!-- -->


<blockquote><p>Podemos hacer que el comando deshacer opere en palabras, frases o párrafos
enteros solamente haciendo un uso corrrecto de la tecla <code>Esc</code></p></blockquote>

<!-- -->


<blockquote><p>La combinación de operadores con movimientos forman una especie de gramática.
Aprender nuevos movimientos y operadores is como aprender el vocabulario de
Vim. Si seguimos las reglas sencillas de la gramática, podremos expresar más
y mejores ideas según vaya creciendo nuestro vocabulario</p></blockquote>

<!-- -->


<blockquote><p>Una buena forma de trabajar con macros sería: normalizar la posición del
cursor, llegar hasta el objetivo con un movimiento repetible, hacer que la
macro aborte cuando el movimiento falle y no encuentre el objetivo</p></blockquote>

<!-- -->


<blockquote><p>La sintaxis para definir un rango en los Ex commands es muy flexible. Se
pueden mezclar números de línea, marcas y patrones de búsqueda. Y se puede
aplicar un offset a cada uno de ellos</p></blockquote>

<!-- -->


<blockquote><p>Intenta crear el hábito de crear una marca global (<code>m{capital letter}</code>) antes
de usar cualquier comando que interacciones con la lista de arreglos rápidos,
lista de buffers o lista de argumentos</p></blockquote>

<!-- -->


<blockquote><p>Para editar una macro grabada en el registro <code>q</code>, simplemente podemos pegar
el contenido de dicho registro con <code>"qy</code>, editar la línea y modificar el
registro <code>q</code> con <code>"qy$</code></p></blockquote>

<h3>Qué he aprendido</h3>

<p>Hay toda una serie de nuevos comandos, combinaciones de ellos y herramientas
que todavía no conocía o que he encontrado muy útiles:</p>

<ul>
<li><code>~</code>: intercambia el carácter actual de mayúsculas a minúsculas y viceversa</li>
<li><code>g~</code>, <code>gu</code>, <code>gU</code>: intercambia mayúsculas/minúsculas en la selección, pasa a minúsculas, pasa a mayúsculas, respectivamente.</li>
<li><code>&lt;C-h&gt;</code>, <code>&lt;C-w&gt;</code>, <code>&lt;C-u&gt;</code>: en modo inserción o modo comando, borra hacia atrás un carácter, una palabra o la línea completa, respectivamente.</li>
<li><code>&lt;C-r&gt;{register}</code>: en modo inserción, inserta el texto desde el registro <code>register</code></li>
<li><code>&lt;C-r&gt;&lt;C-p&gt;{register}</code>: idem, pero más inteligentemente, ya que arregla cualquier error de indentación por descuido</li>
<li><code>&lt;C-v&gt;{code}</code>: en modo inserción, inserta un carácter especial por su código <code>code</code></li>
<li><code>R</code>: nos lleva del modo normal al <em>modo de reemplazo</em>, donde cada carácter insertado reemplaza a un carácter existente</li>
<li><code>v</code>, <code>V</code>, <code>&lt;C-v&gt;</code>: entra en los distintos modos visuales: de carácter, de línea o de bloque.</li>
<li><code>o</code>: dentro del modo visual, la selección tiene dos extremos, con este comando intercambiamos entre ellos, de forma que podemos expandir la selección hacia adelante o hacia atrás</li>
<li><code>.</code>, <code>%</code>: en el modo comando tienen significado especial cuando se especifica un rango. Significan la línea actual y todas las líneas, respectivamente.</li>
<li><code>:t</code>: comando para duplicar líneas. <code>:3t 5</code> copia la línea 3 y la pega en la 5. <code>:.+2t .</code> copia dos líneas más abajo y la pega en la línea actual</li>
<li><code>:m</code>: comando para mover líneas</li>
<li><code>@:</code>: repite el último Ex Command, lo cual es muy útil cuando estamos haciendo cambios en múltiples ficheros, o vamos recorriendo la lista de búferes</li>
<li>en modo comando, se pueden ejecutar comandos del modo normal, con el Ex Command <code>normal</code>. Por ejemplo, <code>:%normal A;</code> hace lo siguiente: <code>:</code> entramos en modo comando, <code>%</code> indica que afectará a todas las líneas del fichero, <code>normal</code> indica que introduciremos un comando del modo normal, <code>A;</code> es un comando del modo normal, y lo que hace es añadir al final de la línea el carácter <code>;</code>.</li>
<li><code>&lt;C-o&gt;</code>: vuelve atrás en la lista de saltos (cambios de buffer, grandes saltos de líneas, búsquedas,&#8230;)</li>
<li><code>&lt;Tab&gt;</code>, <code>&lt;C-n&gt;</code>, <code>&lt;Left&gt;</code> y <code>&lt;S-Tab&gt;</code>, <code>&lt;C-p&gt;</code>, <code>&lt;Right&gt;</code>: para movernos adelante y atrás durante el autocompletado</li>
<li><code>&lt;C-r&gt;&lt;C-w&gt;</code>: en modo comando, copia la palabra debajo del cursor y la pega en la línea de comandos</li>
<li><code>&lt;C-p&gt;</code>, <code>&lt;C-n&gt;</code>: después de entrar en el modo comando con <code>:</code> o <code>/</code>, podemos pulsarlos para ir hacia adelante o atrás en el historial de comandos o búsquedas</li>
<li><code>q/</code>: abre la ventana <em>línea de comandos</em> con el historial de búsquedas</li>
<li><code>q:</code>: abre la ventana <em>línea de comandos</em> con el historial de comandos</li>
<li><code>&lt;C-f&gt;</code>: en modo comando, cambia a la ventana de línea de comandos</li>
<li><code>:read !{shell command}</code>: pone el resultado del comando shell en el buffer actual</li>
<li><code>:write !{shell command}</code>: usa el contenido del buffer actual como entrada para el comando shell</li>
<li><code>:bnext</code>, <code>:bprevious</code>, <code>:bfirst</code>, <code>:blast</code>: para moverse por los buffers</li>
<li><code>:edit {path to a dir}</code>: abre el contenido del directorio en un buffer, de forma que podemos navegar el sistema de ficheros sin necesidad de ningún plugin. <code>.</code> significa el actual directorio de trabajo. <code>:explore</code> o <code>:E</code> hace lo mismo. <code>:Sexplore</code> divide los buffers horizontalmente, <code>:Vexplore</code> divide los buffers verticalmente</li>
<li>igual que existen <code>w</code>, <code>b</code>, <code>e</code> y <code>ge</code> (mueve al final de la palabra anterior), existen <code>W</code>, <code>B</code>, <code>E</code> y <code>gE</code> para hacerlo con PALABRAS, no con palabras</li>
<li><code>is</code>, <code>as</code>, <code>ip</code>, <code>ap</code>: son movimientos (que se pueden usar con los comandos <code>d</code>, <code>c</code>, <code>y</code>,&#8230;) que engloban la actual frase (sentencia) o párrafo</li>
<li><code>&lt;C-o&gt;</code>, <code>&lt;C-i&gt;</code>: para movernos adelante y atrás en los saltos que vamos dando</li>
<li><code>:changes</code>: muestra el historial de cambios</li>
<li><code>g;</code>, <code>g,</code>: para movernos adelante y atrás por el historial de cambios</li>
<li><code>gi</code>: vuelve al último punto donde abandonamos el modo de inserción, entrando en dicho modo</li>
<li><code>"_d{motion}</code>: borra lo indicado pero no copia el contenido en ningún sitio (bueno, sí, en el registro <code>_</code>, pero éste no guarda el contenido). Si no se indica nada, los comandos <code>x</code>, <code>s</code>, <code>d</code> y <code>c</code> modifican el registro sin nombre, con lo que pueden eliminar el contenido que hayamos copiado con <code>y</code>.</li>
<li>el registro de copiado es el <code>0</code>, y éste no es modificado nunca por los comandos <code>x</code>, <code>s</code>, <code>d</code> y <code>c</code>.</li>
<li>si al copiar o borrar nombramos un registro con mayúsculas, el contenido se añadirá a lo que contenga el registro</li>
<li><code>\v</code>: activa la magia en los patrones de búsqueda. Hace que todos los carácteres excepto los alfanuméricos y <code>_</code> tengan un significado especial</li>
<li><code>:%s///gn</code>: cuenta las ocurrencias del patrón actual de búsqueda</li>
<li>flags del comando de sustitución: <code>g</code> reemplaza todas las ocurrencias en una línea, no solo la primera; <code>c</code> pide confirmación, <code>n</code> cuenta las ocurrencias, <code>&amp;</code> reusa los últimos flags</li>
<li><code>:%s//\=@0/g</code>: sustituye todas las ocurrencias (flag <code>g</code>) de todas las filas (rango <code>%</code>) del último patrón buscado (<code>//</code>) con el contenido del registro <code>0</code> (<code>\=</code> evalúa una expresión, <code>@0</code> accede al registro <code>0</code>)</li>
<li><code>&amp;</code>: repite los cambios hechos por el último comando de sustitución <code>:s/pattern/.../</code></li>
<li><code>g&amp;</code>: repite el último comando de sustitución en todo el fichero</li>
<li><code>:vimgrep {pattern} {file pattern}</code>: busca el patrón en la lista de ficheros y rellena la lista <em>quickfix</em>. Luego podemos pasar el resultado a la lista de argumentos con el plugin <em>qargs</em></li>
<li><code>:global/{pattern}/{command}</code> o <code>:g</code>: permite ejecutar un comando en cada línea que cumpla con el patrón</li>
<li><code>&lt;C-]&gt;</code>: mover hasta la definición de la palabra clave (tag) donde se encuentra el cursor</li>
<li><code>&lt;C-t&gt;</code>: vuelve atrás en la última tag visitada</li>
<li><code>:copen</code>, <code>:cclose</code>: abre/cierra la ventana de lista <em>quickfix</em></li>
<li><code>:cnext</code>, <code>:cprevious</code>, <code>:cfirst</code>, <code>:clast</code>: para moverse por los marcadores de la lista quickfix</li>
<li><code>:colder</code>, <code>:cnewer</code>: para pasar de listas quickfix más nuevas a las más viejas y viceversa</li>
</ul>


<h3>Recursos relacionados</h3>

<ul>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/practical-vim-by-drew-neil.markdown">Notas tomadas sobre Practical Vim</a>, y en <a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/practical-vim-by-drew-neil.en.markdown">inglés</a> también</li>
<li>Debería echar un vistazo al proyecto de Mozilla <a href="https://github.com/mozilla/doctorjs">Doctor JS</a>, que contiene la
herramienta <code>jsctags</code>, para generar ficheros ctags de proyectos JavaScript.</li>
</ul>

]]></content>
  </entry>
  
</feed>
