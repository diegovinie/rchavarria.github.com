<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2015-06-21T22:11:34+02:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning JavaScript design patterns]]></title>
    <link href="http://rchavarria.github.io/blog/2015/05/29/learning-javascript-design-patterns/"/>
    <updated>2015-05-29T01:04:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/05/29/learning-javascript-design-patterns</id>
    <content type="html"><![CDATA[<h5>de Addy Osmany</h5>

<h2>Por qué lo he leído</h2>

<p><img class="left" src="http://www.addyosmani.com/resources/essentialjsdesignpatterns/cover/cover.jpg" width="206" height="271" title="JavaScript desing patterns" ></p>

<p>Ya llevo un tiempo programando con JavaScript de forma profesional, y empiezo
a sentir que necesito ir un paso más allá con el lenguaje. No creo que conozca
todo lo que ofrece el lenguaje, todo lo contrario, a veces siento que me queda
mucho por aprender y que necesito profundizar en muchos y muchos temas. Con
este libro pretendía trasladar mis conocimientos sobre patrones de diseño con
Java a JavaScript.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Esperaba grandes cosas de este libro. Ya tenía referencias anteriores del autor,
creo que es un profesional como la copa de un pino. Así que un libro escrito
por él, pues tenía buena pinta.</p>

<p>Supongo que esperar encontrar una estructura de libro muy parecido a otros:
clasificaciones, descripciones, catalogaciones,&#8230;</p>

<h2>Qué encontré</h2>

<p>Encontré un libro con mucho código, cosa que no tiene que ser ni bueno, ni malo.
En el caso de este libro, es una ayuda muy buena. Las explicaciones de Addy son
clarísimas y hay multitud de ejemplos y casos reales.</p>

<h2>Conclusiones</h2>

<p>Aunque es un libro que no miente, trata sobre patrones de diseño, el libro me
ha defraudado un poco. Esperaba más del autor. Quizá no he sabido aprovechar
el contenido del libro, pero me ha parecido superficial en algunos capítulos,
y en otros ha entrado a describir con mucho detalle librerías como jQuery o
plugins para él.</p>

<p>En realidad, el libro que andaba buscando era <a href="http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752">JavaScript patterns</a>, de
Stoyan Stefanov, pero me daba más confianza Addy porque era un autor que ya
conocía. Toca ponerle remedio y ya me he puesto con el libro de Stoyan.</p>

<p>Eso sí, tengo que reconocer que es el primer lugar donde he encontrado una buena
descripción de lo que son cada una de las arquitecturas MVx (MVC, MVP, MVVM,&#8230;)</p>

<h2>Qué he aprendido</h2>

<ul>
<li>Se pueden añadir propiedades a objetos a través del método
<code>Object.defineProperties()</code></li>
<li>Los métodos de un objeto, no se deben declarar en la función constructor, sino
modificando el prototipo de la misma</li>
<li>Se debe intentar conseguir un bajo acoplamiento, algunos patrones (Observer,
Mediator,&#8230;) ayudan a ello</li>
<li>Mixins</li>
<li>Patrón Flyweight, consiste en agrupar o manejar conjuntamente funcionalidades
que pueden compartir un subconjunto de sus datos</li>
<li><p>Diferencias entre los distintos MVx</p>

<ul>
<li>En MVC, las Vistas tienen acceso directo al Modelo</li>
<li>En MVP, los Presentadores escuchan eventos de la Vista y del Modelo y median en la acciones entre ellos</li>
<li>MVVM nos permite crear partes específicas de las Vistas de un Modelo en concreto</li>
</ul>
</li>
<li><p>Expresiones de Función Inmediatamente Invocadas (IIFE - Immediately-Invoked Function Expressions)</p></li>
</ul>


<h2>Recursos relacionados</h2>

<ul>
<li><a href="http://www.addyosmani.com/resources/essentialjsdesignpatterns/book">Learning JavaScript design patterns</a>, by Addy Osmani</li>
<li><a href="http://www.2ality.com/2014/09/es6-modules-final.html">Sintaxis definitiva de módulos</a></li>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/learning-javascript-design-patterns.markdown">Notas tomadas</a></li>
<li><a href="http://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752">JavaScript patterns</a>, de Stoyan Stefanov</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dart Streams]]></title>
    <link href="http://rchavarria.github.io/blog/2015/03/28/dart-streams/"/>
    <updated>2015-03-28T01:39:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/03/28/dart-streams</id>
    <content type="html"><![CDATA[<p>Siendo Dart un lenguaje muy influenciado por JavaScript, no podría dejar de lado
conceptos como la <strong>programación asíncrona</strong>. Existen varios métodos para manejar
la asincronía, y uno de ellos son los <strong>Streams</strong>. Si estás muy interesado en
el método te recomiendo una charla de <a href="http://r.va.gg">Rod Vagg</a>, <a href="https://www.youtube.com/watch?v=oeKkwZhKgP0">Embrace the asynchronous</a>.</p>

<p>Los <em>Streams</em> en Dart forman una interfaz única para cualquier cosa que necesite
enviar repetidamente una serie de datos de forma asíncrona, ya sean eventos HTML
(como escuchar clicks del usuario), o eventos de entrada/salida en una aplicación
de servidor.</p>

<p>Operaciones sobre <em>Streams</em>:</p>

<ul>
<li>Consumir: los datos son sacados de un <code>Stream</code> a uno o varios <code>StreamSubscriber</code></li>
<li>Producir: los datos son introducidos en un <code>Stream</code> desde un <code>StreamController</code></li>
</ul>


<!-- more -->


<h2>Consumiendo un <code>Stream</code></h2>

<p>En lugar de introducir datos al Stream a través de un <code>StreamController</code>,
que podría ser algo largo de contar, vamos a utilizar el constructor
<code>Stream.fromIterable()</code>, el cual nos permite construir un <code>Stream</code> a partir de
una lista de objetos, por ejemplo.</p>

<p>Típicamente, se usa el método <code>listen()</code> para subscribirse a un <code>Stream</code>. Este método
es llamado cada vez que se recibe un dato:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var data = [1, 2, 3, 4, 5];
</span><span class='line'>var stream = new Stream.fromIterable(data);
</span><span class='line'>
</span><span class='line'>// subscribe to the streams events
</span><span class='line'>stream.listen((value) {
</span><span class='line'>  print("Received: $value");
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p><code>Stream</code> también tiene otros métodos: <code>first</code>, <code>last</code>, <code>length</code> y <code>isEmpty</code>. Todos
ellos devuelven un <code>Future</code>, como los que estudiamos en <a href="http://rchavarria.github.io/blog/2015/01/29/operaciones-asincronas-en-dart-con-futures/">Futures con Dart</a>, el cual
se completará con el valor apropiado dentro del <code>Stream</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>streamProperties() {
</span><span class='line'>  var stream;
</span><span class='line'>
</span><span class='line'>  stream = new Stream.fromIterable([1, 2, 3, 4, 5]);
</span><span class='line'>  stream.first.then((value) =&gt; print("stream.first: $value"));  // 1
</span><span class='line'>
</span><span class='line'>  stream = new Stream.fromIterable([1, 2, 3, 4, 5]);
</span><span class='line'>  stream.last.then((value) =&gt; print("stream.last: $value"));  // 5  
</span><span class='line'>
</span><span class='line'>  stream = new Stream.fromIterable([1, 2, 3, 4, 5]);
</span><span class='line'>  stream.isEmpty.then((value) =&gt; print("stream.isEmpty: $value")); // false
</span><span class='line'>
</span><span class='line'>  stream = new Stream.fromIterable([1, 2, 3, 4, 5]);
</span><span class='line'>  stream.length.then((value) =&gt; print("stream.length: $value")); // 5
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>También se pueden tener varios listeners, pero para eso hay que convertir el <code>Stream</code>
en un stream de broadcast con <code>asBroadcastStream()</code>. Podremos comprobar de qué tipo
es un stream con la propiedad <code>isBroadcast</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var data = [1, 2, 3, 4, 5];
</span><span class='line'>var stream = new Stream.fromIterable(data);
</span><span class='line'>var broadcastStream = stream.asBroadcastStream();
</span><span class='line'>
</span><span class='line'>broadcastStream.listen((value) =&gt; print("stream.listen: $value")); 
</span><span class='line'>broadcastStream.first.then((value) =&gt; print("stream.first: $value"));
</span><span class='line'>//...</span></code></pre></td></tr></table></div></figure>


<h2>Subconjuntos de datos de un <code>Stream</code></h2>

<p>Los <code>Stream</code>s tienen algunos métodos de utilidad que permiten seleccionar un subconjunto
de los datos que vendrán en él. Cada uno de estos métodos devuelve un
<code>Stream</code> al que podemos registrar un listener. Para una lista completa de estos métodos
se puede consultar la documentación oficial: <a href="http://api.dartlang.org/dart_async/Stream.html">API Streams</a>.</p>

<p><code>where</code>: selecciona aquellos datos que cumplen una condición:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>broadcastStream
</span><span class='line'>    .where((value) =&gt; value % 2 == 0) 
</span><span class='line'>    .listen((value) =&gt; print("where: $value"));</span></code></pre></td></tr></table></div></figure>


<p><code>take</code>: toma solo los <code>n</code> primeros elementos:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>broadcastStream
</span><span class='line'>    .take(3) 
</span><span class='line'>    .listen((value) =&gt; print("take: $value"));</span></code></pre></td></tr></table></div></figure>


<p><code>skip</code>: se salta los <code>n</code> primeros elementos:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>broadcastStream
</span><span class='line'>    .skip(3)
</span><span class='line'>    .listen((value) =&gt; print("skip: $value"));</span></code></pre></td></tr></table></div></figure>


<p><code>takeWhile</code>: va tomando datos mientras la condición sea verdadera:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>broadcastStream
</span><span class='line'>    .takeWhile((value) =&gt; value &lt; 3) 
</span><span class='line'>    .listen((value) =&gt; print("takeWhile: $value"));</span></code></pre></td></tr></table></div></figure>


<p><code>skipWhile</code>: va saltando datos mientras la condición sea verdadera:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>broadcastStream
</span><span class='line'>    .skipWhile((value) =&gt; value &lt; 3)
</span><span class='line'>    .listen((value) =&gt; print("skipWhile: $value"));</span></code></pre></td></tr></table></div></figure>


<h2>Transformando streams</h2>

<p>El método <code>Stream.transform()</code> admite un parámetro de tipo <code>StreamTransformer</code>.
Es posible crear uno con el método <code>fromHandlers()</code>, el cual admite un
método como parámetro. Este método se llamará con 2 parámetros: cada uno de
los valores del <code>Stream</code> original, y un <code>StreamSink</code> al cual podremos añadir
el valor transformado. La salida de <code>transform()</code> es un nuevo <code>Stream</code> cuyos
valores han sido transformados por el <code>StreamTransformer</code>.</p>

<p>Todo esto se ve mucho más claro con un poco de código:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var transformer = new StreamTransformer.fromHandlers(handleData: (value, sink) {
</span><span class='line'>  // create two new values from the original value
</span><span class='line'>  sink.add("Message: $value");
</span><span class='line'>  sink.add("Body: $value");
</span><span class='line'>});
</span><span class='line'>    
</span><span class='line'>// transform the stream and listen to its output
</span><span class='line'>stream.transform(transformer).listen((value) =&gt; print("listen: $value"));</span></code></pre></td></tr></table></div></figure>


<p>Un ejemplo de la vida real podría ser la lectura de un fichero o de una
petición HTTP, transformando los datos recibidos a <code>String</code> con el decodificador
<code>UTF8.decoder()</code> del paquete <code>dart:convert</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>File file = new File("some_file.txt");
</span><span class='line'>file.openRead()
</span><span class='line'>    .transform(UTF8.decoder) // use a UTF8.decoder
</span><span class='line'>    .listen((String data) =&gt; print(data));</span></code></pre></td></tr></table></div></figure>


<h2>Validando los valores de un <code>Stream</code></h2>

<p>Otros métodos útiles podrían ser <code>any()</code>, <code>every()</code> y <code>contains()</code>, los cuales
devuelven todos <code>Future&lt;boolean&gt;</code>, es decir, un <code>Future</code> que se completa con un
valor de <code>true</code> o <code>false</code>.</p>

<p>Estos métodos servirían para realizar ciertas comprobaciones sobre los datos
recibidos por el <code>Stream</code>. Siguiendo con el ejemplo que crea un <code>Stream</code> a partir
de un array con los valores del 1 al 5:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>broadcastStream
</span><span class='line'>    .any((value) =&gt; value &lt; 5)
</span><span class='line'>    .then((result) =&gt; print("Any less than 5?: $result")); // true
</span><span class='line'>  
</span><span class='line'>broadcastStream
</span><span class='line'>    .every((value) =&gt; value &lt; 5)
</span><span class='line'>    .then((result) =&gt; print("All less than 5?: $result")); // false
</span><span class='line'>  
</span><span class='line'>broadcastStream
</span><span class='line'>    .contains(4)
</span><span class='line'>    .then((result) =&gt; print("Contains 4?: $result")); // true</span></code></pre></td></tr></table></div></figure>


<h2>Gestión de errores con <code>StreamSubscription</code></h2>

<p>Existen dos alternativas para la gestión de errores en los streams. Usando el
objeto <code>StreamSubscription</code> que retorna <code>listen()</code> o pasando los manejadores de
eventos al propio método <code>listen()</code>.</p>

<p>Usando <code>StreamSubscription</code> devuelto por <code>listen()</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var subscription = stream.listen(null);
</span><span class='line'>subscription.onData((value) =&gt; print("listen: $value"));
</span><span class='line'>subscription.onError((err) =&gt; print("error: $err"));
</span><span class='line'>subscription.onDone(() =&gt; print("done"));</span></code></pre></td></tr></table></div></figure>


<p>Pásandolos como parámetros:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var subscription = stream.listen(
</span><span class='line'>    (value) =&gt; print("listen: $value"),
</span><span class='line'>    onError: (err) =&gt; print("error: $err"),
</span><span class='line'>    onDone: () =&gt; print("done")
</span><span class='line'>    );</span></code></pre></td></tr></table></div></figure>


<h2>Eliminando la suscripción a un <code>Stream</code></h2>

<p>Con el método anterior de obtener un objeto <code>StreamSubscription</code>, podemos
utilizar dicha referencia para cancelar la suscripción con el método <code>cancel()</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var subscription = stream.listen(null);
</span><span class='line'>subscription.onData((value) {
</span><span class='line'>  print("listen: $value");
</span><span class='line'>  if (value == 2) subscription.cancel();
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<h2>Referencias:</h2>

<ul>
<li><a href="https://www.youtube.com/watch?v=oeKkwZhKgP0">Embrace the asynchronous</a></li>
<li><a href="http://rchavarria.github.io/blog/2015/01/29/operaciones-asincronas-en-dart-con-futures/">Futures con Dart</a>, en este propio blog</li>
<li><a href="http://api.dartlang.org/dart_async/Stream.html">API Streams</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stop stealing dreams]]></title>
    <link href="http://rchavarria.github.io/blog/2015/03/13/stop-stealing-dreams/"/>
    <updated>2015-03-13T00:39:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/03/13/stop-stealing-dreams</id>
    <content type="html"><![CDATA[<h5>de Seth Godin</h5>

<h2>Por qué lo he leído</h2>

<p><img class="right" src="http://s1.hubimg.com/u/11789820_f260.jpg" width="200" height="300" title="Stop stealing dreams" ></p>

<p>Decidí leerlo básicamente porque tengo un hijo. Empezó el <em>colegio de mayores</em>
el pasado mes de septiembre, y desde un tiempo atrás ya me empezó a preocupar
el tema de su educación.</p>

<p>Y la verdad, con todos las reformas que ha sufrido la educación en España en
los últimos años, creo que la calidad de la misma se ha visto bastante reducida.</p>

<p>Por otra parte, he leído algún libro de Seth Godin, y sigo su blog, y creo que
tiene muchas ideas revolucionarias (con otras no estoy muy de acuerdo, o
simplemente no me interesan mucho), pero tenía ganas de saber qué piensa Seth
sobre la educación.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Viniendo de Seth Goding, me esperaba una serie de ideas revolucionarias sobre
cómo educar a los hijos, o consejos sobre cómo comportarse para intentar conseguir
que los pequeños sean más independientes, estén más preparados para un mundo
cambiante, que sean más individuales pero colaborativos.</p>

<h2>Qué encontre</h2>

<p>En parte encontré lo que buscaba, pero gran parte del libro (o <em>manifiesto</em> como
le llama el autor) está dedicado a criticar el sistema educativo (está centrado
en el norteamericano, pero es extrapolable a otros, por lo menos al
español sí lo es, más o menos), desde primaria hasta la universidad.</p>

<h2>Conclusiones</h2>

<p>Es un libro que no defraudará a ningún padre, y tampoco a ningún profesor de
escuela, instituto o universidad que esté preocupado hacia dónde va la educación.
La idea principal es que la escuela pública, o la educación para la mayoría,
nació como una necesidad de crear obreros, de crear una clase obrera. Pero
ya no existe esa necesidad de la era industrial, ahora las necesidades han
cambiado, y la escuela debe cambiar.</p>

<p>No estoy seguro de si el autor tiene toda la razón en su idea principal, pero
de lo que sí estoy seguro es que existen iniciativas distintas para la educación
(<a href="https://www.khanacademy.org">Khan Academy</a>, <a href="http://online.stanford.edu">Stanford University online</a>, <a href="http://ocw.mit.edu/index.htm">MIT open courses</a>,&#8230;) y que pueden ser pioneras
en el cambio que la educación necesita.</p>

<p>Estoy de acuerdo en que el profesor no debería malgastar su tiempo en dar una
clase estándar, para todos igual, si no que cada alumno disponga de toda la
información de la materia a estudiar, haga el progreso a su ritmo, y que el
profesor sea la persona que le guie, le ayude cuando se encuentre en un callejón
sin salida. Sentí algo parecido en la universidad, las clases parecían una
pérdida de tiempo, pero no llegué a ver el problema expuesto por Seth.</p>

<h2>Frases que me gustaría recordar</h2>

<ul>
<li>La educación a gran escala no fue desarrollada para motivar a los niños o para crear eruditos, fue para crear adultos sumisos, trabajadores para líneas de montaje en las fábricas</li>
<li>¿Para qué es la escuela?

<ol>
<li>Para crear una sociedad culturalmente coordinada. La televisión gana</li>
<li>Para llevar más lejos la ciencia y el conocimineto y perseguir la información por placer. Eso está bien, pero luego asociamos leer libros con los exámenes, poca gente lee por el placer de leer y aprender</li>
<li>Para mejorar la civilización mientras le damos a la gente herramientas para tomar decisiones conscientes e informadas. Pero fallamos al elevar los estándares del pensamiento racional, investigación escéptica, y la toma de decisiones financieras de utilidad</li>
<li>Para entrenar a gente en ser trabajadores productivos. Este punto es en el que hemos destacado en los últimos tiempos, según el autor.</li>
</ol>
</li>
<li>Podemos enseñar a la gente a comprometerse, a superar sus miedos, a negociar transarentemente, a iniciar y planificar un curso, a desear tener una vida de contínuo aprendizaje, a expresarse por sí mismos y a innovar. Pero en lugar de eso, hemos hecho que se olviden del coraje, la creatividad y la iniciativa</li>
<li>He aquí 12 formas en las que la escuela puede ser reformada:

<ol>
<li>Deberes por el día, en clase; las clases orales del profesor por la noche, en casa</li>
<li>Libro abierto, cuaderno abierto, todo el tiempo</li>
<li>Acceso a cualquier curso y asignatura, desde cualquier parte del mundo</li>
<li>Instruciones precisas y focalizadas, en lugar de instrucciones generalizadas y en masa</li>
<li>Prohibidos exámenes tipo test</li>
<li>Experiencias en lugar de notas en los examenes como medida de logros</li>
<li>Dejemos de medir como un resultado la obediencia (el silencio, el aceptar las cosas porque sí)</li>
<li>Cooperacion en lugar de aislamiento (en lugar de aislar estudiantes, deberiamos conectarlos : trabajo en grupo, clases intractivas, &#8230;)</li>
<li>Amplificacion de los estudiantes sobresalientes, de los profesores y de las ideas</li>
<li>Transformación del rol del profesor</li>
<li>Aprendizaje contínuo, trabajo más temprano</li>
<li>Dejemos de pensar que la universidad famosa, la que tiene fama, es la mejor en cuanto a educación</li>
</ol>
</li>
<li><em>Economía conectada</em>: los estudiantes tienen la habilidad y la facilidad de investigar lo que hay fuera y descubrir que el profesor (o libro de texto) está equivocado</li>
<li>El atajo para alcanzar el objetivo de las escuelas (crear ciudadanos sumisos) es el <strong>miedo</strong>. Haz esto y &#8230;, &#8220;se lo diremos a tus padres&#8221;, &#8220;o te suspenderemos&#8221;,&#8230;</li>
<li>El atrevimiento (a probar cosas nuevas, a salirse del guión) en la escuela está castigado, no recompensado</li>
<li>Tener habilidades que escasean combinadas con actitudes aún más escasas casi siempre llevan a un desempleo bajo y altos salarios</li>
<li>Solía ser sencillo: el profesor era el policía, el maestro, la fuente de todas las respuestas y el guardián de los recursos. Ahora, no necesitamos un humano a nuestro lado para enseñarnos como buscar la raiz cuadrada de un número, o cómo afilar un hacha. Lo que necesitamos es alguien que nos convenza de que queremos aprender esas cosas</li>
<li>Estamos entrando en una revolución de ideas mientras producimos una generación que, en lugar de ideas, lo que quiere son instrucciones</li>
<li>¿Es muy peligroso hacer lo correcto? ¿Pueden los padres hacerlo bien? ¿Porqué debería la escuela hacer ese trabajo y no los padres? Lo que importa es que buscar un camino que <em>podría</em> ser mejor es demasiado riesgo para alquien que sólo tiene una oportunidad de educar a sus hijos correctamente</li>
<li>La única forma para un estudiante de obtener respeto en la escuela es ganarse la aprovación temporal de un profesor al que probablemente no volverá a ver en un futuro cercano. Si el profesor es temperamental, inconsistente, mal profesor, el estudiante está obligado a aguantarle. ¿No te parece que debe ser muy frustrante tener que contentar a alquien a quien no vas a volver a ver en la vida?</li>
<li>Lo que se necesita de los profesores no es dar cuantas más clases mejor, o corregir exámenes o gestionar una clase de estudiantes. Lo que se necesita es una atención individualizada, trabajo emocional y la habilidad de motivar</li>
<li>Debemos tener en cuenta que no hay que valorar simplemente la habilidad, porque el niño mayor tiene ventaja, hay que valorar pasión, los sueños del niño</li>
<li>Debemos inculcar a los niños la pasión por leer</li>
<li>La universidad proporciona 4 cosas:

<ol>
<li>Acceso a la información. Pero ya tenemos acceso online, por lo que no necesitamos a la universidad para esto</li>
<li>Acreditación o un título (que antes era escaso). Pero ahora todo el mundo puede tener un título</li>
<li>Membresía a una tribu. Esta es quizá la mejor razón por la que mudarse a un campus universitario para conseguir una carrera</li>
<li>Una situación para el crecimiento y desarrollo. Ésta sería la razón por la que elegir la universidad, porque es imposible de imitar en una experiencia online. La universidad adecuada es la última y mejor oportunidad para multitud de adolescentes de encontrarse a sí mismos en situaciones donde no hay otra opción nada más que la de crecer, y rápido</li>
</ol>
</li>
<li><strong>¿Qué enseñamos?</strong>:

<ol>
<li>Cuando enseñamos a un niño a tomar buenas decisiones, nos beneficiamos de una vida llena de buenas decisiones</li>
<li>Cuando enseñamos a un niño a amar el aprendizaje, la cantidad de aprendizaje se volverá ilimitada</li>
<li>Cuando enseñamos a un niño a lidiar con un mundo cambiante, nunca se quedará obsoleto</li>
<li>Cuando somos lo suficientemente valientes como para enseñar a un niño que cuestione la autoridad, incluso la nuestra, nos protegemos a nosotros mismos de quien usaría su autoridad en contra de cada uno de nosotros</li>
<li>Y cuando le damos a los estudiantes el deseo de hacer cosas, aunque sean elecciones, creamos un mundo repleto de gente que consigue crear e inventar cosas</li>
</ol>
</li>
</ul>


<h2>Recursos relacionados</h2>

<ul>
<li><a href="https://github.com/rchavarria/book-notes/tree/master/published/stop-stealing-dreams-by-seth-godin.md">Notas extendidas sobre el libro</a></li>
<li><a href="https://www.khanacademy.org">Khan Academy</a></li>
<li><a href="http://online.stanford.edu">Stanford University online</a></li>
<li><a href="http://ocw.mit.edu/index.htm">MIT open courses</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Operaciones asíncronas en Dart con Futures]]></title>
    <link href="http://rchavarria.github.io/blog/2015/01/29/operaciones-asincronas-en-dart-con-futures/"/>
    <updated>2015-01-29T22:06:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/01/29/operaciones-asincronas-en-dart-con-futures</id>
    <content type="html"><![CDATA[<p><a href="http://dartlang.org">Dart</a> es un lenguaje de programación que se ejecuta en un único hilo. Si un
bloque de código bloquea dicho hilo (por ejemplo haciendo una operación de
entrada-salida de larga duración), la aplicación quedará <em>congelada</em>. Las
operaciones asíncronas permiten al programador crear operaciones sin bloquear
la aplicación entera. Dart usa la clase <code>Future</code> para realizar estas
operaciones asíncronas.</p>

<p>En el <a href="https://www.dartlang.org/docs/tutorials/futures/">tutorial sobre Futures</a> podrás encontrar información acerca de cómo
usar esta API de Dart.</p>

<!-- more -->


<h2>Introducción</h2>

<p>El siguiente código haría que la aplicación quedara congelada:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import 'dart:io';
</span><span class='line'>
</span><span class='line'>void printDailyNewsDigest() {
</span><span class='line'>  File file = new File("dailyNewsDigest.txt");
</span><span class='line'>  print(file.readAsStringSync());
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>void main() {
</span><span class='line'>  printDailyNewsDigest();
</span><span class='line'>  printWinningLotteryNumbers();
</span><span class='line'>  printWeatherForecast();
</span><span class='line'>  printBaseballScore();
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>El problema de este código es que <code>readAsStringSync()</code> no retorna hasta que no
termina, con lo que las llamadas al resto de métodos serán retrasadas.</p>

<p>Para lograr hacer que esa llamada no bloquee la ejecución del resto, Dart proporciona
los <em>Futures</em>.</p>

<h2>¿Qué es un <em>Future</em>?</h2>

<p>Es simplemente un medio para obtener un valor en algún momento en el futuro.</p>

<p>La forma en la que funciona es la siguiente: una función que necesita hacer una
acción muy costosa en el tiempo, encola dicha acción como un trabajo para hacer y
devuelve un objeto <code>Future</code> inmediatamente, de esta forma se consigue no bloquear
el hilo de ejecución de Dart. Más adelante, cuando el trabajo ha terminado, y el
valor está disponible, se dice que el <code>Future</code> se ha completado con dicho valor.</p>

<p>Para obtener el valor que representa <code>Future</code>, se usa el método <code>then()</code>, pasándole
como parámetro una función de callback que será llamada con el valor del <code>Future</code>.</p>

<h2>¿Cómo se usa?</h2>

<p>El método bloqueante anterior quedaría así usando <code>Future</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>import 'dart:io';
</span><span class='line'>import 'dart:async';
</span><span class='line'>
</span><span class='line'>void printDailyNewsDigest() {
</span><span class='line'>  File file = new File("dailyNewsDigest.txt");
</span><span class='line'>  Future future = file.readAsString();
</span><span class='line'>  future.then((content) {
</span><span class='line'>    print(content);
</span><span class='line'>  });
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>Esta vez, para leer el fichero se usa el método <code>readAsString()</code>, el cual no bloquea
el hilo y retorna un <code>Future</code>. Después, se registra un callback a través del método
<code>then()</code>. Este callback recibe como parámetro el valor que esperamos que retorne
<code>readAsString()</code>, que es el contenido del fichero. Es en este callback donde
se imprime el contenido del fichero leído.</p>

<p>El propio método <code>then()</code> devuelve también un <code>Future</code>, por lo cual se pueden
encadenar distintas llamadas <code>then()</code>.</p>

<h2>Gestión de errores</h2>

<p>La gestión de errores con <code>Future</code> es muy sencilla, ya que la clase proporciona el
método <code>catchError()</code> que será llamado si se produce un error a la hora de conseguir
el valor que representa el <code>Future</code>.</p>

<p>El método anterior se puede reescribir así:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>void printDailyNewsDigest() {
</span><span class='line'>  File file = new File("dailyNewsDigest.txt");
</span><span class='line'>  Future future = file.readAsString();
</span><span class='line'>  future.then((content) =&gt; doSomethingWith(content))
</span><span class='line'>        .catchError((e) =&gt; handleError(e));
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>De esta forma, si <code>readAsString()</code> produce un error, la variable <code>future</code> se completará
con error (en lugar de completarse con el valor del contenido del fichero), lo que
provocará que el <code>Future</code> devuelto por <code>then()</code> se complete también con error, lo que hará
que se llame al método <code>catchError()</code>, el cual gestionará el error.</p>

<h2>Encadenando múltiples llamadas a <code>then()</code></h2>

<p>Supongamos que existen tres funciones: <code>expensiveA()</code>, <code>expensiveB()</code> y <code>expensiveC()</code>. Todas
ellas devolviendo <code>Future</code>s, de forma que se pueden encadenar llamadas a <code>then()</code> de esta
forma:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>expensiveA().then((aValue) =&gt; expensiveB()) 
</span><span class='line'>            .then((bValue) =&gt; expensiveC()) 
</span><span class='line'>            .then((cValue) =&gt; doSomethingWith(cValue));</span></code></pre></td></tr></table></div></figure>


<p>También existe otra posibilidad, y es esperar a que termine la ejecución de las tres, para
realizar alguna acción solamente cuando los tres <code>Future</code>s se hayan completado. Para ello,
el API proporciona el método <code>wait()</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Future.wait([expensiveA(), expensiveB(), expensiveC()])
</span><span class='line'>      .then((List responses) =&gt; chooseBestResponse(responses));</span></code></pre></td></tr></table></div></figure>


<p>Aquí, <code>wait()</code> devuelve un <code>Future</code> cuyo valor es una lista con los valores de todos los
<code>Future</code>s pasados como parámetros.</p>

<h2>Creando tus propios <code>Future</code></h2>

<p>De acuerdo, entendido cómo se usan. Pero, ¿y si lo que quiero es ser yo quien comienza la
cadena de <code>Future</code>s? ¿Cómo se crea el primero de ellos?</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Future methodReturningAFuture() {
</span><span class='line'>    return new Future.value('foo bar');
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>El método del código anterior devuelve un valor, un <code>Future</code> que se resuelve al valor
<code>foo bar</code>. Si quisiéramos imprimir esa cadena por consola, haríamos lo siguiente:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>methodReturningAFuture()
</span><span class='line'>    .then((message) =&gt; print(message));</span></code></pre></td></tr></table></div></figure>


<h2>Conclusión</h2>

<p>Si así <em>en papel</em> no te ha quedado lo suficientemente claro, te recomiendo que te pases
por el <a href="https://www.dartlang.org/docs/tutorials/futures/">tutorial sobre Futures</a> o que le eches un ojo al <a href="https://github.com/rchavarria/dart-tutorials/tree/master/futures">código completo</a> del tutorial.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Calcular hashes MD5 en Dart con cipher]]></title>
    <link href="http://rchavarria.github.io/blog/2015/01/22/calcular-md5-dart-cipher/"/>
    <updated>2015-01-22T23:02:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/01/22/calcular-md5-dart-cipher</id>
    <content type="html"><![CDATA[<p>Cuando estoy aprendiendo un lenguaje de programación, me gusta practicar
con él, me gusta escribir código con él. Puedes leer los libros o los blogs
que quieras, pero hasta que no escribas aplicaciones y las ejecutes, nunca
apredenderás nada de ese lenguaje.</p>

<p>Para practicar me gusta <a href="http://solveet.com">Solveet</a>. Puedes encontrar problemas muy diversos,
tanto fáciles como más complicados. Publicas tu código, con lo que todo el
mundo puede verlo (por eso te esfuerzas en dejar tu código un poquito más
limpio).</p>

<p>Recientemente decidí resolver un problema en el que se trata de escribir
un <a href="http://www.solveet.com/exercises/Acceder-a-la-API-Marvel/299">acceso a la API pública de Marvel</a>. Uno de los pasos para acceder a dicha
API es calcular el hash MD5 de unos parámetros a pasar a la API para
autenticarte. Dart es un lenguaje moderno, así que pensé que sería muy
fácil calcular hashes MD5. ¡Menuda decepción me llevé!</p>

<!-- more -->


<h2>Crypto</h2>

<p>En realidad no soy ningún experto en Dart, pero no encontré que el lenguaje
proporcionara clases o métodos para hacerlo. Existe una librería llamada
crypto, que parece haber sido escrita por alguien de dentro, pero me
pareció que estaba abandonada y sin documentación (repito, fue una impresión
mía, que me perdone el autor(es)).</p>

<h2>Cipher</h2>

<p>Por suerte encontré <a href="https://github.com/izaera/cipher">cipher</a>, una librería escrita por <a href="https://twitter.com/izaera">Iván Zaera</a>, que me
puso las cosas más fáciles. El repositorio en git parece activo y tiene
una documentación mucho mejor que la de crypto. Al menos encontré la forma
de usar la librería y hacer lo que quería.</p>

<p>Pero no encontré exactamente lo que buscaba, lo encontré algo desperdigado
entre las páginas de la wiki. Así que este post es para mostrar el método
que encontré para <strong>calcular hashes MD5 en Dart con cipher</strong>.</p>

<h2>Código</h2>

<p>Para usar la librería, hay que añadir la dependencia de la librería al
fichero <code>pubspec.yaml</code> del proyecto:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>...
</span><span class='line'>dependencies:
</span><span class='line'>    cipher: "&gt;=0.7.1 &lt;0.8.0"
</span><span class='line'>...</span></code></pre></td></tr></table></div></figure>


<p>La siguiente clase, contiene un método público, <code>digest</code>, que acepta un
<code>String</code> como parámetro y devuelve un <code>String</code> con el hash MD5 del mismo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// needs `cipher` as a project's dependency
</span><span class='line'>import 'package:cipher/cipher.dart';
</span><span class='line'>import 'package:cipher/impl/server.dart';
</span><span class='line'>import 'dart:typed_data';
</span><span class='line'>import 'dart:convert';
</span><span class='line'>
</span><span class='line'>/**
</span><span class='line'> * Uses cipher package to compute the MD5 hash of a given String
</span><span class='line'> */
</span><span class='line'>class Utf8String2MD5 {
</span><span class='line'>
</span><span class='line'>    Utf8Encoder encoder;
</span><span class='line'>    Digest md5;
</span><span class='line'>
</span><span class='line'>    Utf8String2MD5() {
</span><span class='line'>        // cipher must be initialized before using any class from the package
</span><span class='line'>        initCipher();
</span><span class='line'>
</span><span class='line'>        // cipher class to compute the MD5
</span><span class='line'>        md5 = new Digest('MD5');
</span><span class='line'>        encoder = new Utf8Encoder();
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>    /**
</span><span class='line'>     * @param message Message which MD5 hash will be computed
</span><span class='line'>     * @return the MD5 hash of `message`
</span><span class='line'>     */
</span><span class='line'>    String digest(String message) {
</span><span class='line'>        // get utf-8 values of the message
</span><span class='line'>        List&lt;int&gt; utf8Data = encoder.convert(message);
</span><span class='line'>        // convert to the input data for the cipher class
</span><span class='line'>        Utf8List inputData = new Uint8List.fromList(utf8Data);
</span><span class='line'>        // compute the MD5
</span><span class='line'>        Uint8List digestValue = md5.process(inputData);
</span><span class='line'>
</span><span class='line'>        return digestValue
</span><span class='line'>            .map((i) =&gt; i.toRadixString(16)) // converts to hexadecimal string
</span><span class='line'>            .map((s) =&gt; s.padLeft(2, '0')) // pad strings with 0
</span><span class='line'>            .join(); // join all elements in the List to build a String
</span><span class='line'>    }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla técnica: Is TDD dead? Of course not!]]></title>
    <link href="http://rchavarria.github.io/blog/2015/01/17/charla-tecnica-is-tdd-dead/"/>
    <updated>2015-01-17T17:35:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/01/17/charla-tecnica-is-tdd-dead</id>
    <content type="html"><![CDATA[<p>Hace poco, vi posteada una charla de <a href="http://twitter.com/emilybache">Emily Bache</a> titulada <a href="https://www.youtube.com/watch?v=PCEHRFHKZSk">Is TDD dead? Of course not!</a>
en el blog <a href="http://garajeando.blogspot.com/2015/01/interesting-talk-is-tdd-dead-of-course.html">Garajeando</a>, un blog que suelo leer. Poco después la vi posteada
en otro blog que suelo leer, <a href="http://alvarogarcia7.github.io/blog/2015/01/06/talk-is-tdd-dead-of-course-not-by-emily-bache">The long way through Software Craftsmanship</a>. ¿Algo debería tener
la charla no? Aquí hay un resumen de lo que la charla me a aportado a mí:</p>

<!-- more -->


<p>Básicamente, la charla habla de las tres críticas que <a href="http://twitter.com/dhh">David Heinemeier Hansson</a>
hizo a la práctica de TDD con su <a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html">TDD is dead, long live testing</a>.</p>

<ol>
<li>Fundamentalismo: para evitarlo, experimenta TDD, inténtalo por tí mismo, que no
te lo cuenten. Después, juzga por tí mismo. Para experimentarlo existen prácticas
como las <em>code katas</em> o <em>coding dojos</em> y herramientas como <a href="http://cyber-dojo.org">cyber-dojo.org</a>.</li>
<li>Daña el diseño: diseñar es difícil (con o sin TDD). TDD
te empuja a introducir nuevos niveles de indirección, hacia el Principio de
Inversión de Dependencias. Aún así, es <strong>tu responsabilidad</strong> como programador
saber cuándo tu aplicación tiene demasiados niveles de indirección y actuar en
consecuencia.</li>
<li>Foco en tests unitarios: puede que David tenga razón aquí, hay mucho foco
en los tests unitarios. Emily nos habla de unos <a href="http://coding-is-like-cooking.info/tag/approval-testing">tests de Aprobación</a> como
complemento a los unitarios.</li>
</ol>


<p>Un montón de consejos (la mayoría) sobre TDD son para principiantes de TDD.
Así que, cuando te den alguno, piensa si ya has superado esa barrera, y si lo
has hecho, ignora el consejo, porque tú ya estas por encima de él. Aprende a
discernir qué información es válida para tu nivel.</p>

<iframe width="560" height="315" src="http://rchavarria.github.io//www.youtube.com/embed/PCEHRFHKZSk" frameborder="0" allowfullscreen></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extreme Programming explained]]></title>
    <link href="http://rchavarria.github.io/blog/2015/01/02/extreme-programming-explained/"/>
    <updated>2015-01-02T10:24:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/01/02/extreme-programming-explained</id>
    <content type="html"><![CDATA[<h5>de Kent Beck</h5>

<p><img class="right" src="http://ecx.images-amazon.com/images/I/71kDsLjbnsL.jpg" width="240" height="300"></p>

<h2>Por qué lo he leído</h2>

<p>Estoy muy interesado en las metodologías ágiles, pero yo osy más una persona
técnica, un ingeniero preocupado por los aspectos técnicos de los proyectos,
más que por los aspectos de gestión. Creo que Extreme Programming explica lo
básico, los inicios de Agile.</p>

<p>Ya conocía algunas prácticas de XP, pero quería conocerlas más a fondo.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Sencillo, buscaba un libro que me explicara los valores, principios y prácticas
de XP. Existe un recurso online donde poder encontrar estos recursos,
<a href="http://www.extremeprogramming.org">http://www.extremeprogramming.org</a>,
pero buscaba algún recurso que los tratara con más profundidad.</p>

<h2>Qué encontre</h2>

<p>Justamente lo que buscaba. El libro trata XP a fondo, no sólo explicando y
dando sentido a los valores, principios y prácticas, sino también multitud
de experiencias reales.</p>

<p>También encontré mucha información acerca de <em>pair programming</em>, práctica
en la que estoy muy interesado, así como la forma en que las distintas
prácticas se interconectan entre sí.</p>

<p><img class="center" src="http://rchavarria.github.io/images/2015/xp-practices.jpg" title="Cómo están interconectadas las prácticas XP" ></p>

<h2>Conclusiones</h2>

<p>Un libro totalmente recomendable. Trata el tema de Extreme Programming con
mucha claridad, exponiendo todas las partes que lo componen, explica cada
uno de los papeles que juegan los integrantes de un equipo XP (aunque se
ha quedado un poco obsoleto para hoy en día, pero puesto en perspectiva
toma mucho sentido).</p>

<p>La verdad es que parece mentira que el autor esté hablando sobre estos
temas por el año 1999/2000 y que todavía en 2015 estemos como estamos.</p>

<h2>Frases que me gustaría recordar</h2>

<blockquote><p>XP es un experimento para responder a la pregunta: ¿Cómo programarías si
tuvieras suficiente tiempo? Donde se explica la diferencia entre la <em>Mentalidad
de la suficiencia</em> frente a la <em>Mentalidad de la escasez</em> (parábola de la
tribu del bosque y de la montaña)</p>

<p>Si no cambiaran los requisitos o no aprendiéramos nada durante el proceso
sería mejor diseñar para el futuro pero <strong>yo no me
arriesgo</strong> a que no haya cambios y mucho menos a no aprender nada.</p>

<p>Los Programadores confiados y agresivos son valiosos precisamente porque ellos
son confiados y agresivos</p>

<p>Primordialmente las emociones (especialmente el miedo) son lo que hace que XP
sea tan duro de practicar y aplicar</p>

<p>Los cuatro valores de XP: comunicación, simplicidad, feedback y coraje</p>

<p>Cuatro actividades básicas: codificar, testear, escuchar y diseñar</p>

<p>El trabajo del programador no se acaba cuando el ordenador entiende qué es lo
que tiene que hacer. Su trabajo más importante es la comunicación con el resto
de la gente</p>

<p>Una habilidad necesaria para los programadores es <em>pair programming</em></p>

<p>Otra habilidad necesaria es el hábito de la simplicidad</p></blockquote>

<h2>Recursos relacionados</h2>

<ul>
<li><a href="https://github.com/rchavarria/book-notes/blob/master/published/extreme-programming-explained-by-kent-beck.md">Extensas notas sobre el libro</a></li>
<li><a href="http://www.amazon.es/Extreme-Programming-Explained-Embrace-Embracing/dp/0321278658/ref=sr_1_1?ie=UTF8&amp;qid=1420044502&amp;sr=8-1&amp;keywords=extreme+programming+explained">Extreme Programming explained, en Amazon</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crear Web Components con Dart y Polymer]]></title>
    <link href="http://rchavarria.github.io/blog/2014/12/13/crear-web-components-con-dart-y-polymer/"/>
    <updated>2014-12-13T18:42:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2014/12/13/crear-web-components-con-dart-y-polymer</id>
    <content type="html"><![CDATA[<p><a href="http://dartlang.org">Dart</a> es un lenguaje de programación, no muy conocido hoy en día, pero
que tiene un gran potencial, ya que está pensado para aplicaciones
web, tanto para la parte servidora como para la parte cliente. Así,
con Dart puedes escribir código que se ejecuta en el navegador y
código ejecutándose en un servidor que responda a ese cliente.</p>

<p><a href="http://polymer-project.org">Polymer</a> es una implementación del estándar HTML Web Components,
un estándar que quiere revolucionar la manera en la que se desarrollan
aplicaciones web en los navegadores.</p>

<p>En este tutorial describo lo que he aprendido siguiendo el tutorial acerca
de <a href="https://www.dartlang.org/docs/tutorials/polymer-intro/">Cómo crear un Web Component con Dart y Polymer</a>. Si quieres bucear
en el código directamente, puedes hacerlo en mi repositorio de Github
<a href="https://github.com/rchavarria/dart-tutorials/tree/master/custom-element-dart-tutorial">Custom element Dart tutorial</a>.</p>

<!-- more -->


<h2>Qué vamos a crear</h2>

<p>El Web Component que crearemos con este tutorial es un sencillo cronómetro,
con el cual podremos comenzar a contar el tiempo, pausarlo o detenerlo completamente.</p>

<p>Rápidamente, los pasos que vamos a seguir son:</p>

<ol>
<li>Importar el fichero HTML que contiene la definición del Web Component</li>
<li>Usar el Web Component en nuestra propia página web</li>
<li>Inicializar Polymer. La librería de Dart que vamos a usar ya proporciona
el mecanismo para hacerlo, no te preocupes</li>
</ol>


<h2>Ficheros de los que consta el tutorial</h2>

<ul>
<li><code>web/index.html</code>: es el punto de entrada de la aplicación. Inicializa Polymer,
importa el Web Component y usa el mismo.</li>
<li><code>web/tute_stopwatch.html</code>: código HTML que define el Web Component.
importa el Web Component y usa el mismo.</li>
<li><code>web/tute_stopwatch.dart</code>: código Dart que implementa el Web Component.</li>
</ul>


<h2>Instalando Polymer.dart</h2>

<p>Para poder usar Polymer, primero es necesario instalarlo como una dependencia del
proyecto. Para ello, modificar el fichero <code>pubspec.yaml</code> y añadir el siguiente
contenido:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies:
</span><span class='line'>  polymer: "&gt;=0.15.1 &lt;0.16.0"</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Después, ejecutar el comando <code>pub get</code>. <code>pub</code> es una herramienta que viene con el
SDK de Dart. Dart Editor también puede ejecutar este comando para instalar todas
las dependencias del proyecto.</p>

<p>Para inicializar Polymer, modificar <code>web/index.html</code> y añadir esta línea al final
del mismo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>...
</span><span class='line'><span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;application/dart&quot;</span><span class="nt">&gt;</span><span class="kr">export</span> <span class="s2">&quot;package:polymer/init.dart&quot;</span><span class="p">;</span><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>...
</span></code></pre></td></tr></table></div></figure>


<h2>Incluir Polymer en la aplicación</h2>

<p>Estos son los ficheros a modificar para usar Polymer en la creación del
Web Component:</p>

<p><code>web/tute_stopwatch.html</code>: importar el fichero <code>packages/polymer/polymer.html</code>
antes de definir cualquier Web Component en la aplicación:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;import&quot;</span> <span class="na">href=</span><span class="s">&quot;packages/polymer/polymer.html&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;polymer</span><span class="na">-element</span> <span class="na">name=</span><span class="s">&quot;tute-stopwatch&quot;</span><span class="nt">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>web/tute_stopwatch.dart</code>: importar la librería Polymer en el fichero Dart:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>import &#39;dart:html&#39;;
</span><span class='line'>import &#39;package:polymer/polymer.dart&#39;;
</span><span class='line'>// ...
</span></code></pre></td></tr></table></div></figure>


<h2>Instanciar un Web Component</h2>

<p>En la página web donde se va a usar el Web Component, debemos importar la definición
del mismo, usar un tag con su nombre (como si fuera un componente HTML normal) e
inicializar Polymer. De forma que <code>web/index.html</code> quedaría parecido a:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html&gt;</span>
</span><span class='line'><span class="nt">&lt;html&gt;</span>
</span><span class='line'>  <span class="nt">&lt;head&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- importa la definición del Web Component --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;import&quot;</span> <span class="na">href=</span><span class="s">&quot;tute_stopwatch.html&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/head&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;body&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- usa el Web Component --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;tute</span><span class="na">-stopwatch</span><span class="nt">&gt;</span><span class="err">&lt;</span>/tute-stopwatch&gt;
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- inicializa Polymer --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;application/dart&quot;</span><span class="nt">&gt;</span><span class="kr">export</span> <span class="s2">&quot;package:polymer/init.dart&quot;</span><span class="p">;</span><span class="nt">&lt;/script&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/body&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Definiendo el Web Component</h2>

<p>La definición del mismo está en el fichero <code>web/tute_stopwatch.html</code>. Para definirlo
hay que usar el tag <code>&lt;polymer-element&gt;</code> y asignar un nombre al Web Component. En
este caso <code>tute-stopwatch</code>.</p>

<p>El tag <code>&lt;polymer-element&gt;</code> puede tener dos tags hijos: <code>&lt;template&gt;</code>, que contiene
el código HTML; y <code>&lt;script&gt;</code>, que contiene el código Dart.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;polymer</span><span class="na">-element</span> <span class="na">name=</span><span class="s">&quot;tute-stopwatch&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;template&gt;</span>
</span><span class='line'>    ...
</span><span class='line'>  <span class="nt">&lt;/template&gt;</span>
</span><span class='line'>  <span class="nt">&lt;script </span><span class="na">type=</span><span class="s">&quot;application/dart&quot;</span> <span class="na">src=</span><span class="s">&quot;tute_stopwatch.dart&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="err">&lt;</span>/polymer-element&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Dando comportamiento al Web Component</h2>

<p>El comportamiento es implementado en Dart, en el fichero <code>web/tute_stopwatch.dart</code>.
En este fichero, se declara una clase que extiende de <code>PolymerElement</code> y está
anotada con <code>@CustomTag</code>. El contenido de <code>@CustomTag</code> debe coincidir con el
nombre dado en la definición del Web Component.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@CustomTag(&#39;tute-stopwatch&#39;)
</span><span class='line'>class TuteStopwatch extends PolymerElement {
</span><span class='line'>    TuteStopwatch.created() : super.created();
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Para que todo esté correcto, la clase <code>TuteStopwatch</code> debe heredar de <code>PolymerElement</code> o
implementar las interfaces <code>Polymer</code> y <code>Observable</code>. Además, debe definir un
constructor <em>nombrado</em> que llame a <code>super.created()</code>.</p>

<h2>Enlazando datos entre Dart y HTML</h2>

<p>En la parte visual (HTML) se pueden usar las llaves dobles <code>{{...}}</code> para utilizar una
variable anotada como <code>@observable</code> en la parte de comportamiento (Dart). Por ejemplo,
para usar una <code>String</code> que al modificarla en Dart se actualice la vista HTML, los
ficheros <code>web/tute_stopwatch.html</code> y <code>web/tute_stopwatch.dart</code> quedarían:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;polymer</span><span class="na">-element</span> <span class="na">name=</span><span class="s">&quot;tute-stopwatch&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;template&gt;</span>
</span><span class='line'>    <span class="nt">&lt;div&gt;</span>{{counter}}<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/template&gt;</span>
</span><span class='line'>  ...
</span><span class='line'><span class="err">&lt;</span>/polymer-element&gt;
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@CustomTag(&#39;tute-stopwatch&#39;)
</span><span class='line'>class TuteStopwatch extends PolymerElement {
</span><span class='line'>    ...
</span><span class='line'>    @observable String counter;
</span><span class='line'>
</span><span class='line'>    void aMethod() {
</span><span class='line'>        counter = &#39;14:59&#39;;
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Para hacer un doble enlace, de Dart a HTML y viceversa, se puede consultar en enlace
<a href="https://www.dartlang.org/docs/tutorials/forms/#binding-data">Two-way data binding using Polymer</a>.</p>

<h2>Creando manejadores de eventos</h2>

<p>De la misma forma que se puede enlazar variables, se pueden enlazar manejadores de
eventos que gestionen las interacciones del usuario. Por ejemplo, para responder
ante un click del usuario, en HTML:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">on-click=</span><span class="s">&quot;{{start}}&quot;</span><span class="nt">&gt;</span>Start<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mientras que en Dart:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>@CustomTag(&#39;tute-stopwatch&#39;)
</span><span class='line'>class TuteStopwatch extends PolymerElement {
</span><span class='line'>    ...
</span><span class='line'>    void start(Event evt, var detail, Node target) {
</span><span class='line'>        ...
</span><span class='line'>    }
</span><span class='line'>}
</span></code></pre></td></tr></table></div></figure>


<p>Donde:</p>

<ul>
<li><code>evt</code>: contiene información sobre el evento</li>
<li><code>detail</code>: puede proveer información adicional sobre el evento</li>
<li><code>target</code>: el nodo HTML que lanzó el evento</li>
</ul>


<p>Para más información, como los manejadores de eventos disponibles y más, consultar
<a href="http://www.polymer-project.org/polymer.html#declarative-event-mapping">Declarative event mapping</a>.</p>

<h2>Desplegando la aplicación</h2>

<p>Antes de desplegar, es necesario el uso de <em>transformadores</em> de Polymer para
completar el proceso. Para ello, modificar <code>pubspec.yaml</code> añadiendo las siguientes
líneas:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>...
</span><span class='line'>dependencies:
</span><span class='line'>  polymer: ...
</span><span class='line'>transformers:
</span><span class='line'>- polymer:
</span><span class='line'>    entry_points: web/index.html
</span></code></pre></td></tr></table></div></figure>


<p>Definiendo <code>entry_points</code> indicamos a Polymer qué ficheros HTML queremos que transforme.</p>

<p>Para probar el Web Component desarrollado podemos seleccionar <em>Ejecutar como JavaScript</em>
sobre el fichero <code>web/index.html</code> desde Dart Editor.</p>

<p>O también, tenemos el comando <code>pub serve</code> en línea de comandos. Este comando nos indicará
una dirección URL donde poder probar la aplicación.</p>

<p>El comando <code>pub build</code> genera ficheros que pueden ser desplegados en un servidor
aparte y que hará posible ejecutar la aplicación en cualquier navegador moderno.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to start conversations and make friends]]></title>
    <link href="http://rchavarria.github.io/blog/2014/12/05/how-to-start-conversations-and-make-friends/"/>
    <updated>2014-12-05T18:11:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2014/12/05/how-to-start-conversations-and-make-friends</id>
    <content type="html"><![CDATA[<h5>de Don Gabor</h5>

<p><img class="left" src="http://rchavarria.github.io/images/2014/how-to-start-conversation.jpg" width="200" height="306" title="Portada del libro How to start a conversation" ></p>

<h2>Por qué lo he leído</h2>

<p>En el mundo del software se suele hablar mucho de la excelencia técnica, de
tecnologías, de las últimas buenas prácticas,&#8230; Y también de las personas.
Yo soy de esos que está convencido de que en esta profesión (en realidad en
todas las profesiones) las relaciones personales son una parte vital de la
misma.</p>

<p>Como buen técnico, se me da mejor tratar con las máquinas que con las personas,
así que, ¿por qué no aprender un poco más acerca de ellas?</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Por un lado me apetecía leer el libro, para aprender cosas nuevas y leer algo
<em>no-técnico</em>, pero por otro lado me daba pereza porque esperaba algún tipo
de libro de autoayuda, de <em>buenrrollismo</em>,&#8230; Bueno, un poco de americanada
para vender la moto, poco más.</p>

<h2>Qué encontre</h2>

<p>Bueno, pues un libro un poco de autoayuda la verdad es que sí. Pero también
encontré trucos útiles para recordar nombres, por ejemplo, y algún que
otro consejo que sirve perfectamente para la vida real.</p>

<h2>Conclusiones</h2>

<p>Aunque el libro lo veo ahora como un poquitín de autoayuda, no se me hizo
pesado de leer, y tampoco muy repetitivo (como suelen pecar aquellos).
El autor enfatiza algunos aspectos una y otra vez, pero está bien.</p>

<p>También utiliza algunos conceptos propios, pero son sencillos de compreder,
y aunque el libro está lleno de conceptos de sentido común, creo que
cualquier persona encontrará ideas que, o no se había dado cuenta, o no
se había planteado.</p>

<h2>Qué he aprendido</h2>

<p>Sobretodo he recordado algo que ya sabía: para conectar con la gente hay que
ser educado y detallista.</p>

<p>Aparte de esto, estas son unas ideas que debería tener en cuenta a partir de
ahora:</p>

<ol>
<li>Mira a los ojos, sonríe y saluda</li>
<li>Se el primero en decir <em>Hola</em></li>
<li>Preséntate a los demás</li>
<li>Deja que los demás te conozcan</li>
<li>Que no te importe responder a <em>preguntas rituales</em> cotidianas</li>
<li>Mantén el contacto con los amigos y conocidos</li>
<li>Pregunta a los demás acerca de temas que hablásteis la última vez que os vísteis</li>
<li>Escucha atentamente acerca de <em>información gratuita</em></li>
</ol>


<h2>Frases que me gustaría recordar</h2>

<p>Como son muchísimas las notas que he tomado de este libro, y básicamente lo
que quiero recordar ya lo he escrito antes, aquí dejo un enlace a
<a href="https://github.com/rchavarria/book-notes/blob/master/published/how-start-conversation-make-friends-by-don-gabor.md">Mis notas sobre How to start conversations and make friends</a>.</p>

<h2>Recursos relacionados</h2>

<ul>
<li><a href="http://www.amazon.com/How-Start-Conversation-Make-Friends/dp/1451610998">Comprar el libro en Amazon</a></li>
<li><a href="https://github.com/rchavarria/book-notes/blob/master/published/how-start-conversation-make-friends-by-don-gabor.md">Mis notas sobre How to start conversations and make friends</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mis notas sobre Codemotion 2014]]></title>
    <link href="http://rchavarria.github.io/blog/2014/11/29/notas-codemotion-2014/"/>
    <updated>2014-11-29T00:48:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2014/11/29/notas-codemotion-2014</id>
    <content type="html"><![CDATA[<p>Por tercer año consecutivo asistí al evento Codemotion, &#8220;un evento de
desarrolladores para desarrolladores&#8221;. Me encanta la descripcion del
evento. La verdad es que es una pasada, un evento al que este año acudimos
casi 2000 profesionales del desarrollo sofware, donde unos ponente (incluso
extranjeros) cuentan sus experiencias en la vida real. Impresionante.</p>

<p>Antes de nada me gustaría agradecer a los organizadores del evento, a todos
los voluntarios que nos soportan, a los patrocinadores y no me puedo olvidar
de la Universidad San Pablo CEU, que cedió las instalaciones.
Hay muchas quejas por <em>el intenné</em> sobre ciertos aspectos de la organización:
salas abarrotadas, comida insuficiente,&#8230; Creo que tienen razón, pero
también hay que entender que un evento así no es fácil organizarlo. A mí
me ha encantado la cantidad de tiempo disponible entre charla y charla. No
me he perdido ninguna de las charlas a las que quería asistir.</p>

<p><img class="center" src="http://rchavarria.github.io/images/2014/codemotion.png"></p>

<!-- more -->


<p>Este año he podido disfrutar más de las charlas técnicas que el año pasado,
por lo que he aprendido y conocido multitud de nuevas herramientas,
técnicas e ideas.</p>

<p>Aún así, me he quedado con una espinita clavada. Me hubiera gustado
<em>pasillear</em> algo más, pero no se puede tener todo, o pasillo o charla.
También me hubiera gustado acercarme a más ponentes para darles las gracias
y comentar con ellos las tecnologías o herramientas que expusieron.</p>

<p>Pero no todo está perdido, he conocido a unos cuantos buenos profesionales
más y eso es una parte importante de estos eventos: ver viejos amigos y
hacer nuevos.</p>

<h2>Notas sobre las charlas</h2>

<p>Y a continuación, una transcripción de algunas notas que fuí tomando en
todas las charlas a las que asistí. En la
<a href="2014.codemotion.es/es/agenda.html">agenda del Codemotion</a>
podrás encontrar cada una de las charlas que se impartieron con detalles
del ponente, presentaciones, vídeos,&#8230; Para ir aguantando hasta el año
que viene.</p>

<h3>What if everything is awesome, Christian Heilmann</h3>

<p>Opinión de la charla: muy amena, se nota que Christian es un profesional dando
charlas por todo el mundo; muy buena historia, muy bien hilada y cortita, al
grano.</p>

<p>La prensa publicita casos demasiado idílicos.</p>

<p>Los programadores tenemos tendencia a recrear (reinventar la rueda) en lugar de
mejorar (¿porqué si no hay N variantes de frameworks web, por ejemplo?). <strong>Mejora
las cosas que ya existen</strong></p>

<p>No expliques, demuéstralo con código o algo mejor, arregla el bug.</p>

<p>Si tus aplicaciones están dirigidas por datos, duraran mucho tiempo.</p>

<p>Agradece, da feedback, a tus usuarios y a los creadores de tus apps.</p>

<p><strong>Acción</strong>: Echar un vistazo a los recursos de las diapositivas.</p>

<h3>Lean Node.js, Ricardo Borillo</h3>

<p>Opinión: multitud de herramientas, multitud de consejos prácticos. De la charla
salí con alguna idea para poner en práctica inmediatamente.</p>

<p>Ricardo hace incapié en cuatro puntos lean:</p>

<ol>
<li>eficiencia / automatización</li>
<li>no cometer errores</li>
<li>evitar desperdicios</li>
<li>mejora contínua</li>
</ol>


<p>Relativo a la construcción de nuestra aplicación:</p>

<ul>
<li>grung Vs gulp para automatización de tareas</li>
<li>browser sync: inyecta CSS en el navegador sin recargar la página, para evitar
errores y conseguir un desarrollo más rápido.</li>
</ul>


<p>Relativo a testear nuestra aplicación:</p>

<ul>
<li>Solo se puede reducir el numero de errores con tests.</li>
<li>karma, jasmine, karma + virtual box (probar IE en Linux o Mac), protractor</li>
</ul>


<p>Relativo al despliegue:</p>

<ul>
<li>upstart (reinicia servidor en caso de que caiga)</li>
<li>forever (nodejitsu)</li>
<li>fusion passenger, nginx + docker</li>
<li>pm2 (cluster, monitorización, &#8230;)</li>
</ul>


<p>Código y ejemplos en el <a href="https://github.com/borillo/codemotion-2014">repo Codemotion de R. Borillo</a></p>

<h3>Workshop, designing a release pipeline, Jose Luis Soria</h3>

<p>Opinión: el taller me defraudó un poco, porque al final fue más una charla larga
que un taller propiamente dicho. Aunque me llevé algunos consejos e ideas que me
pueden servir en mi día a día.</p>

<p>9 pasos a seguir para diseñar una pipeline de entrega:</p>

<ol>
<li>Definir componentes: nombre, dependencias, deploy target, &#8230;</li>
<li>Identificar subpipelines: 1 solo pipeline o 1 pipeline por componente o 1 pipeline por
equipo</li>
<li>Definir etapas y orquestación
a. cada etapa me tiene que dar feedback, información
b. crecer a lo ancho, no a lo largo (en el flujo, paralelizando etapas)
c. necesito: nombre, meta a conseguir, fuentes, flujo, &#8230;</li>
<li>Definir entornos (no deben estar atados a etapas)</li>
<li>Definir los pasos (partes de cada una de las etapas)</li>
<li>Definir automatizacion y herramientas</li>
<li>Definir modelo ejecucion</li>
<li>Planificar para futuras mejoras: comienza simple y evoluciona</li>
<li>Inspecciona y adáptate (mejora contínua)</li>
</ol>


<p>Recursos:</p>

<ul>
<li>libro Continuous Delivery</li>
<li>Agile testing cuadrant</li>
<li>Herramientas de orquestación: ThoughtWorks Go, MS VS Release Management</li>
</ul>


<h3>Loves always takes care and humility, Chema Alonso</h3>

<p>Opinión: la charla comenzó muy bien, una bonita historia (aunque me perdí la
primera parte el año pasado), va contando conceptos de seguridad,&#8230; Hasta que
aparece en pantalla <em>LATCH</em>. A partir de ahí, todo pareció un anuncio, y mi
cerebro desconectó.</p>

<p>La charla cuenta una historia entre una Developar y un Hacker.</p>

<p>Dev: preocupada por la seguridad. Cree que algo está seguro si está bien hecho
(best practices).</p>

<p>Hacker: tiene muchas otras maneras de romper la seguirdad.</p>

<p>Hacker: quiere nuevos metodos aplicando la ciencia: doble factor autenticación, usb con llave,
matrices de numeros, &#8230;</p>

<p>Dev: ve problemas, a cada nuevo método le encuentra una debilidad.</p>

<h3>20 languages in 40 minutes, Alonso Torres</h3>

<p>Opinión: charla muy amena y friki, una pasada. El tono fue muy tranquilizador y
Alonso transmitia confianza. En definitiva, me encantó.</p>

<p>¿programar es un arte? no lo sé, pero sí se que es creativo</p>

<p>Alonso nos quiere dar una razón para cada uno de los lenguajes, porque en charlas
técnicas de 1h intentan venderte de usar su lenguaje. Alotor le sobra con 2 min/lenguaje</p>

<p>OOP Vs Functional</p>

<ul>
<li>scala tiene ambos</li>
<li>haskell</li>
<li>F#</li>
<li>clojure: lenguaje funcional con cierta flexibilidad</li>
</ul>


<p>Estático Vs Dinámico</p>

<ul>
<li>groovy: ambos</li>
<li>python: para aprender dinámico</li>
<li>ruby: favorece implícito (potencia sin control)</li>
<li>php: desarrollo rápido</li>
<li>js: para integración con otros sistemas</li>
</ul>


<p>De sistema, de bajo nivel</p>

<ul>
<li>C: potencia</li>
<li>C++: añade cierta estructura a C</li>
<li>Go: concurrencia</li>
<li>Rust: gestión memoria</li>
</ul>


<p>Lenguajes del sigle XXI</p>

<ul>
<li>ceylon: modularidad</li>
<li>elm: funcional en interactivo (I/O): es un haskell para el navegador</li>
<li>julia: cálculo científico y macros</li>
</ul>


<p>Y para terminar, Piet: cada pixel, con su color, es una instruccion. El
hola mundo con este lenguaje es el más bonito que he visto nunca.</p>

<p>Las slides y los ejemplos de código en el <a href="https://github.com/Alotor/20-languages-demos">repo Codemotion de Alotor</a></p>

<h3>Keynote del segundo día</h3>

<p>Presentación del producto IBM Bluemix, una especie de heroku, Google App Engine,&#8230;</p>

<ul>
<li>learn</li>
<li>be fast</li>
<li>avoid the grind</li>
</ul>


<p><strong>Acción</strong>: buscar presentacion para dar con los 3 consejos.</p>

<h3>Teaching programming online, Pamela Fox</h3>

<p>Opinión: no venía muy convencido a la charla, pensaba que trataría de docencia, de
cómo enseñar a programar online. En lugar de eso Pamela destripó el curso que da
sobre ciencia de la programación: herramientas, problemas, diversas actividades, &#8230;</p>

<p>Si quieres que la gente vea tus vídeos, haz que duren menos de 10min</p>

<p>Frameworks y herramientas: Backbone, FB React Vs Angular; js parsers, js hint, js babyhint,&#8230;</p>

<p>Si alguna vez creas un sistema de programación online, chequea los bucles infinitos.
Los tendrás que sufrir, seguro.</p>

<p>También, deberás tener herramientas, que mediante diferenciación, sea capaz de
detectar si dos alumnos han copiado. Estos cursos suelen tener miles de alumnos, y
es imposible detectarlas manualmente.</p>

<p>Actividades de las que consta el curso en Kahn Academy:</p>

<ul>
<li>Exercises</li>
<li>Projects: permiten a los alumnos ser más creativos.</li>
<li>Algoritmo de votado para crear una lista de los proyectos más llamativos, y cómo
los alumnos se las ingenian para engañar al sistema.</li>
<li>Spin­offs: o una vuelta de tuerca más a los proyectos.</li>
</ul>


<p>En definitiva:
aprende > practica > crea > comparte > ayuda</p>

<p><a href="https://github.com/Khan/live-editor">Live editor</a> es el proyecto en el que está
trabajando la ponente.</p>

<h3>Analizando y debuggeando tu plataforma, Luis Bosque</h3>

<p>Opinión: esperaba algo diferente de la charla, no sé muy bien el qué, pero algo
diferente. Con todo esto, estuvo muy bien. Multitud de herramientas, multitud de
consejos y muchos ejemplos reales usados en CartoDB.</p>

<p>No valen las sensaciones, debes analizar tu plataforma para saber cómo se comportan
tus usuarios y para saber cómo afectan los cambios que haces.</p>

<p>No hay un manual sobre que medir, pero no hay que medir todo.</p>

<p>Analisis corto plazo: monitoring, alerting.</p>

<p>Analisis medio plazo: buscar patrones de uso, optimizar para su uso. Análisis de casos
especiales te pueden llevar a optimizaciones a incorporar</p>

<p>Stadísticas al usuario:</p>

<ul>
<li>tiempo de sus queries en ejecutarse</li>
<li>número de visualizaciones de su app</li>
<li>widgets más usados</li>
</ul>


<p>Herramientas análisis logs: logstash, fluentd, splunk, syslog</p>

<p>No volverte loco con las métricas, no se puede medir todo, debes decidir qué
precisión quieres (queries de mas de 30seg), definir una politica de retención de
datos (no todas las métricas tienen el mismo ciclo de vida)</p>

<p>Ante todo, ten en cuenta el impacto técnico, es muy, muy grande.</p>

<h3>Lo que la cafeína le hizo a JavaScript, Sergio Arbeo</h3>

<p>Opinión: charla muy divertida y amena, Sergio comunica muy bien y se nota que sabe
de lo que habla. La charla es muy técnica y va de cosas muy sencillas hasta
ciertos problemas que te hacen estrujarte la mente un poco.</p>

<p>CoffeeScript mejor que ES5, CoffeeScript peor que ES6</p>

<p>¿Qué trae ES6?</p>

<ul>
<li>Destructuring, con su operación inversa, funciona con arrays</li>
<li>Modules</li>
<li>let / const</li>
<li>classes</li>
<li>propiedades computadas (ejemplo de código implementando <code>pluck</code></li>
<li>function: sspread operator: convierte varios argumentos en un array</li>
<li>function: sdefault parameters</li>
<li>arrow functions</li>
</ul>


<p><strong>Acción</strong>: Librería ESNext para usar ES6 hoy</p>

<h3>The Google Glass revolution, Alain Regnier, @altolabs, GDG Paris</h3>

<p>Opinión: impresionante por la demo en vivo de las gafas. Me sirvió para
conocer de primera mano las Google Glass y pasar un poco de envidia de
poder cacharrear con un prototipo tecnológico.</p>

<ul>
<li>Multitud de sensores</li>
<li>Organizado en Cards: como si fuera un timeline</li>
<li>Controles: voz, táctil, mover cabeza</li>
<li>Glass Mobile, MyGlass web</li>
<li>Un detalle queno me gustó nada es que parece muy enlazado a tu móvil</li>
</ul>


<p>Programar para GGlass</p>

<ol>
<li>Mirror API: nunca te conectas a tu GGlass
tu server ­> google server ­> tus gafas</li>
<li>GDK: accede a hardware de tu GGlass</li>
<li>WearScript: javascript para wearables</li>
</ol>


<h3>Usando behat para no abusar de F5, Alfonso Machado, GeeksHub</h3>

<p>Opinión: una charla muy práctica, donde Alfonso nos cuenta su experiencia con <code>behat</code> a raiz
de unos problemas que tuvo él. Ejemplos con código y demo en vivo. Muy interesante.</p>

<p>Implementación de Gerkin inspirado en Cucumber</p>

<p>Mink: drivers para emular navegadores con Selenium (java and the like) + acciones predefinidas</p>

<p>Instalacion difícil, mejor con composer</p>

<h3>Scrum bad smells, Juanma Gómez</h3>

<p>Opinión: muy animada, Juanma conecta perfectamente con la gente. Intentó tirar de nosotros,
pero era la última hora y nos resistíamos un poco. Eso sí, a la hora de las preguntas la
gente se extendió bastante. Buena señal.</p>

<p>Patrones en la implantación agile</p>

<ul>
<li>2 trampas: yo ya lo se todo; esto no se puede hacer</li>
<li>Las empresas esperan que no cambien nada</li>
<li>“nosotros hacemos nuestro scrum”</li>
<li>equipo multidisciplinar no es que todos hacemos de todo, no es un hombre orquesta, sino que es
un equipo con perfiles especializados que se complementan</li>
<li>dueño de producto sin capacidad (o experiencia) en la toma de decisiones o de visión estratégica</li>
<li>jefe de proyecto que pasa a scrum master: el rol del SM es complejo porque debe tratar
sobretodo de personas</li>
<li>Iteraciones variables</li>
<li>Definir todo al principio (como en cascada)</li>
<li>Hacer cascadas pequeñas</li>
<li>Control y seguimiento en lugar de responsabilidad y confianza</li>
<li>“yo ya he hecho mi trabajo”</li>
</ul>


<p>Mitos:</p>

<ul>
<li>ser agil es ser rápido</li>
<li>en scrum sólo hay visión a corto plazo: debemos tener una visión a largo plazo</li>
</ul>


<p>Como resumen:</p>

<ul>
<li>1º aprender</li>
<li>siempre hay alcantarillas que abrir, siempre va a salir algo que huele mal</li>
<li>scrum conlleva un cambio cultural</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mi primer Code Retreat]]></title>
    <link href="http://rchavarria.github.io/blog/2014/11/18/mi-primer-code-retreat/"/>
    <updated>2014-11-18T23:54:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2014/11/18/mi-primer-code-retreat</id>
    <content type="html"><![CDATA[<p>El pasado 15 de noviembre se celebró la edición de 2014 del
<a href="http://globalday.coderetreat.org">Global Day of Code Retreat</a>. Es un evento a nivel muncial
que se celebró en <strong>141</strong> ciudades y sus correspondientes paises.
El año pasado ya me quedé con ganas de participar, pero este año
(aunque por poco) pude hacerlo.</p>

<!--more-->


<p>La agenda del evento comprende seis iteraciones, en las que se trata de implementar
el <a href="https://es.wikipedia.org/wiki/Juego_de_la_vida">Juego de la vida, de Conway</a>, pero hay dos normas muy interesantes: una vez
terminada la iteración hay que borrar <strong>todo</strong> el código escrito, y en cada iteración
se va a programar atendiendo a una <strong>restricción</strong> diferente.</p>

<p>A continuación, una breve descripción de cómo fue cada una de ellas:</p>

<p><img class="left" src="http://rchavarria.github.io/images/2014/gdcr14-restrictions.jpg" width="360" height="474" title="Algunas restricciones" ></p>

<ol>
<li>Estuve emparejado con Eduardo. Al ser nuestra primera iteración, estábamos algo
perdidos. Era un problema nuevo para ambos, pero aún así tuvimos una discusión muy
interesante al inicio del ejercicio.</li>
<li>Esta vez programé con Rocío. Las restricciones de esta iteración (clases de
menos de 3 métodos y métodos de menos de 5 líneas) no tuvo efecto en nosotros, ya
que no pudimos avanzar todo lo deseado.</li>
<li>Después de un repostaje de café, me senté junto a <a href="http://juanmagomezr.es">Juanma</a> a programar Java.
Grandes recuerdos, gran compañero y mejores discusiones sobre cómo nombrar los
métodos, las clases y los tests.</li>
<li>Para terminar la mañana <a href="https://twitter.com/RaycoNoTieneTW">Rayco</a> y yo nos pusimos a ello. La restricción de
no poder hablar y de no poder utilizar tipos primitivos lo pusieron muy difícil.
Pero programar con el método ping-pong es súper divertido.</li>
<li>(y 6) Después de comer ya estábamos algo cansados y teníamos ganas de dar
el salto en la resolución del problema. Todos más o menos nos quedábamos siempre
en el mismo punto (el cambio de parejas y lenguajes ayudaban a ello), así que
decidimos hacer una iteración más larga para darnos tiempo a llegar más lejos
en el juego de la vida. Creo que Jose, <a href="https://twitter.com/jfrancoleza">Jorge</a> y yo hicimos buena <em>pareja</em> y
conseguimos llegar a puntos difíciles de solucionar, aunque no pudimos profundizar
en la utilidad de <a href="https://es.wikipedia.org/wiki/Desarrollo_guiado_por_pruebas">TDD</a> en estas situaciones.</li>
</ol>


<h2>Conclusión</h2>

<p>La experiencia fue una pasada. Reunirte con compañeros de profesión, muchos de los
cuales no conoces absolutamente de nada, y pasarlo bien durante un día entero,
discutiendo de temas técnicos sin problemas, sin prejuicios, sin presiones, sin
jefes que te estén exigiendo resultados inmediatos,&#8230; es una liberación.</p>

<p>Una experiencia muy recomendable.</p>

<h2>Agradecimientos</h2>

<p>El post no podría cerrarlo sin agradecer a los organizadores y facilitadores
<a href="https://twitter.com/rafael_luque">Rafa</a>, Jose y <a href="http://juanmagomezr.es">Juanma</a>, por no olvidar a <a href="http://osoco.es">Osoco</a>. Sin ellos no habría habido
Code Retreat para mí, por lo que les estoy muy agradecido.</p>

<p>El año que viene, más! Espero.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mi primer katayuno]]></title>
    <link href="http://rchavarria.github.io/blog/2014/11/02/mi-primer-katayuno/"/>
    <updated>2014-11-02T01:14:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2014/11/02/mi-primer-katayuno</id>
    <content type="html"><![CDATA[<p>El pasado 25 de octubre asistí a un <a href="http://katayunos.com">katayuno</a> organizado por <a href="http://aprendiendotdd.com">Aprendiendo TDD</a>.
Esta pequeña reunión tuvo lugar en <a href="http://www.materiagriscoworking.com">MateriaGris Coworking</a>, un espacio de coworking
que ha montado un gran amigo mío.</p>

<p>El katayuno consistía en resolver un sencillísimo problema (el tema no es resolver
un gran problema sino practicar TDD): desarrollar un método que, tomando como parámetros
dos números enteros <code>a</code> y <code>b</code>, devuelva una lista con el doble de todos los números
impares entre ambos. Realizamos dos iteraciones, cada vez haciendo <em>pair programming</em>
con una pareja distinta.</p>

<p>En este post voy a describir cómo fueron mis dos iteraciones, y algo de código <a href="http://dartlang.org">Dart</a> que
he escrito después intentando simularlas, para poder ilustrar todo el proceso.</p>

<!-- more -->


<h2>Iteración 1</h2>

<p>En este primera iteración seguimos unos pasos que a mí me parecían correctos.
Empezamos solucionando los casos más sencillos, como aquellos que el resultado
era una lista vacía por ejemplo, para terminar con los más complicados. Estos
pasos me parecían correctos, quizá porque estoy acostumbrado a resolverlos de
ese modo.</p>

<p>Más tarde, como vimos en la pequeña restrospectiva de la iteración mi pareja
y yo mostramos nuestro código, y criticaron bastante nuestro código, la verdad.
No es nada malo, de hecho, aprendimos bastante y otras parejas nos enseñaron
otro enfoque que me pareció interesante.</p>

<p>Al final de la iteración, nuestro código quedó más o menos así:</p>

<pre><code>class OddDoubler {

    List&lt;int&gt; compute(int a, int b) {
        List&lt;int&gt; list = new List&lt;int&gt;();

        while (a &lt;= b) {
            if (isOdd(a)) {
                list.add(a * 2);
            }
            a++;
        }

        return list;
    }

    boolean isOdd(n) =&gt; n % 2 != 0;
}
</code></pre>

<p>El código completo, incluidos tests:
<a href="https://github.com/rchavarria/katayuno-octubre-2014/blob/master/iteration-1/odd-doubles.dart">iteración 1</a>.</p>

<p>A mí, personalmente, el código de producción me gusta, sencillo y
al grano. Pero para llegar a él, hay un paso,
<a href="https://github.com/rchavarria/katayuno-octubre-2014/commit/135d644fdbe75c5c8d6e17cd8f1461f7eaac67ce">donde introducimos el bucle while</a>
que quizá sea un paso demasiado grande, por lo que quizá los tests
elegidos no sean los más adecuados.</p>

<h2>Iteración 2</h2>

<p>En esta segunda iteración cambiamos de pareja. Y también cambiamos la forma
de atacar el problema. Esta vez, siguiendo los consejos de los compañeros
de la iteración anterior, decidimos resolver el problema avanzando por
estados intermedios. Así que esta vez, no solucionamos el problema
desde los casos más sencillos hasta los más complicados.</p>

<p>Decidimos que los pasos intermedios serían:</p>

<ul>
<li>Decidir si un número is impar o no</li>
<li>Implementar un método que nos diera una lista de todos los números entre
dos números dados</li>
<li>Implementar un método que nos eliminara de una lista los números pares</li>
<li>Implementar un método que multiplicara por 2 todos los elementos de
una lista</li>
</ul>


<p>No llegamos a completarlo del todo, la iteración se nos quedó corta, pero
la idea la implementé más tarde y éste es el resultado de la
segunda iteración:</p>

<pre><code>class OddDoubler {

    boolean isOdd(int n) =&gt; n % 2 != 0;

    List&lt;int&gt; getNumbers(int a, int b) =&gt; new List&lt;int&gt;.generate((b - a + 1), (int index) =&gt; a + index);

    List&lt;int&gt; filterOdds(List&lt;int&gt; numbers) {
        numbers.removeWhere((n) =&gt; !isOdd(n));
        return numbers;
    }

    List&lt;int&gt; doubleNumbers(List&lt;int&gt; numbers) =&gt; numbers.map((n) =&gt; n * 2);

    // This method should be the only public method
    // It resolves the KATA
    List&lt;int&gt; compute(int a, int b) =&gt; doubleNumbers(filterOdds(getNumbers(a, b)));
}
</code></pre>

<p>El código completo, incluidos tests:
<a href="https://github.com/rchavarria/katayuno-octubre-2014/blob/master/iteration-2/odd-doubles.dart">iteración 2</a>.</p>

<p>Me gusta más la aproximación de esta iteración, pero lo que no me gusta
es que hay métodos públicos que en realidad deberían ser privados. Son
públicos porque hemos creado tests para comprobar su funcionamiento, pero
deberían ser privados porque no aportan nada fuera de la implementación
de la clase.</p>

<p>Como todo en el desarrollo del software, toda decisión tiene su parte
buena y su parte no tan buena.</p>

<h2>Conclusión</h2>

<p>Es la primera vez que participo en un evento de este tipo, y espero que no
sea la última. La experiencia me encantó.</p>

<p>Sí, es cierto, en la primera iteración nos dieron bastante caña a mi pareja
y a mí, pero eso nos sirvió para entender que no todas las aproximaciones son
igual de buenas, y que hay que ser humilde para tener la mente abierta y
poder aprender de los demás compañeros.</p>

<p>Este tipo de eventos nos ayudan a ser mejores profesionales, y era mi objetivo
al participar en él. Gracias a <a href="http://aprendiendotdd.com">Aprendiendo TDD</a> y a <a href="http://www.materiagriscoworking.com">MateriaGris Coworking</a>
creo que todos aprendimos algo aquella mañana.</p>

<p>Gracias chicos.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Screencast de programacion: el Juego del disparejo]]></title>
    <link href="http://rchavarria.github.io/blog/2014/10/23/screencast-programacion-juego-disparejo/"/>
    <updated>2014-10-23T00:12:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2014/10/23/screencast-programacion-juego-disparejo</id>
    <content type="html"><![CDATA[<p>En este post te presento un screencast que he creado mostrándote cómo resuelvo
un problema de programación. Todo empezó viendo los
<a href="http://www.carlosble.com/screencasts/es/">Screencasts de programación de Carlos Blé</a>.
Deberías echarles un vistazo, merecen la pena, en serio.</p>

<p>Me gustaron tanto que me pregunté si podría crear yo algunos. Por aquel tiempo
estaba trasteando con un problema de solveet.com, el <a href="http://www.solveet.com/exercises/Juego-del-disparejo/306">Juego del disparejo</a>.
Así que tenía todo: el gusanillo de crear algo, y un problema sobre el que
trabajar.</p>

<!-- more -->




<iframe src="http://rchavarria.github.io//player.vimeo.com/video/109688257" 
        width="500"
        height="281"
        frameborder="0"
        webkitallowfullscreen mozallowfullscreen allowfullscreen>
</iframe>


<p>El problema lo resuelvo con el lenguaje de programación <a href="http://dartlang.org/">Dart</a>. No por
nada en particular, si no porque lo estoy aprendiendo, y para ello me
da por resolver problemas de programación (donde solveet.com entra en
juego).</p>

<p>El proceso que sigo es el ciclo TDD: red ➭ green ➭ refactor. Para evolucionar
el código y las refactorizaciones, aplico técnicas aprendidas de <a href="http://www.carlosble.com">Carlos</a> y
sus screencasts, así como las <a href="http://blog.8thlight.com/uncle-bob/2013/05/27/TheTransformationPriorityPremise.html">Transformation Priority Premise</a> del
gran maestro <a href="https://en.wikipedia.org/wiki/Robert_Cecil_Martin">Uncle Bob</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins CI: inyectar variable de entorno]]></title>
    <link href="http://rchavarria.github.io/blog/2014/10/17/jenkins-ci-inyectar-variable-de-entorno/"/>
    <updated>2014-10-17T08:44:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2014/10/17/jenkins-ci-inyectar-variable-de-entorno</id>
    <content type="html"><![CDATA[<p>Recientemente, me ha surgido la necesidad de inyectar, o modificar más bien, una
variable de entorno en el servidor de integración contínua que usamos en el
trabajo, <a href="http://www.jenkins-ci.org">Jenkins</a>.</p>

<p>Uno de los <em>jobs</em> de Jenkins necesita una aplicación recientemente instalada, y
dicha aplicación no está alojada en ningún directorio definido dentro de la
variable de entorno <code>PATH</code>. Por lo cual, el <em>job</em> fallaba.</p>

<p>Una posible solución a este problema era el de modificar la variable de entorno
a nivel global, pero eso podría entrar en conflicto con otros <em>jobs</em>. Por lo cual
decidí cambiarla sólo a nivel de <em>job</em>. Por lo que llegamos a la pregunta:
¿Cómo se inyecta una variable de entorno en un <em>job</em> de Jenkins?</p>

<!-- more -->


<h2>Requisitos</h2>

<p>Para poder hacerlo se requiere tener instalado en plugin
&#8217;<a href="https://wiki.jenkins-ci.org/display/JENKINS/EnvInject+Plugin">Environment Injector Plugin</a>&#8217;. Este plugin añade una nueva sección en la página
de configuracion de los trabajos de jenkins: <em>Build Environment</em>.</p>

<h2>Proceso</h2>

<p>Una vez que el plugin está instalado, seguir estos sencillos pasos:</p>

<ol>
<li>Ir a la página de configuración del trabajo.</li>
<li>Localizar la sección <em>Build Environment</em>.</li>
<li>Activar la opcion <em>Inject environment variables to the build process</em> (Inyectar
variables de entorno en el proceso de construcción).</li>
<li>En el campo <em>Properties Content</em>, modificar la variable de entorno que necesitamos.</li>
</ol>


<p>En la siguiente imagen se puede ver el texto necesario para inyectar la variable
<code>PATH</code> en un entorno Linux. A dicha variable le estoy añadiendo una ruta donde
se encuentra la aplicación que necesita el <em>job</em> que estoy configurando.</p>

<p><img class="center" src="http://rchavarria.github.io/images/2014/jenkins-build-environment.png"></p>

<p>Este ejemplo muestra como se configura un Jenkins instalado en un Linux, en
Windows se utilizaría de otra forma ya que las variables de entorno no
son exactamente iguales, así como la configuración de las mismas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aprendiendo Vim]]></title>
    <link href="http://rchavarria.github.io/blog/2014/10/11/aprendiendo-vim/"/>
    <updated>2014-10-11T01:31:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2014/10/11/aprendiendo-vim</id>
    <content type="html"><![CDATA[<p>Hubo un momento en mi carrera profesional en la que un compañero me dió a conocer
<em>Vim</em>, el editor de código. Me pareció una herramienta arcaica, básica. Línea
de comandos, nada de modo gráfico. ¿Pero dónde estaba? ¿En los años 80?. Pero la
pasión con la que hablaba del editor mi picaba la curiosidad.</p>

<p>Luego, en años venideros, he visto y usado muchos editores de texto, de código
e incluso IDEs. Nunca me había atrevido a usar Vim, pero de vez en cuando
escuchaba (de la forma que se escucha en internet: twitter, blogs, &#8230;) algunas
campanadas de que Vim era un súper editor.</p>

<p>Pero nunca me decidía a darle una oportunidad, hasta&#8230;</p>

<!-- more -->


<p>Hasta que cayó un post de <a href="http://elkarmadelteclado.com">Pablo Bernardo</a> en mi lector RSS:
<a href="http://elkarmadelteclado.com/asi-que-quieres-aprender-usar-vim/">Asi que quieres aprender a usar Vim</a>.</p>

<p>En este post, Pablo detalla toda una serie de recursos disponibles en <em>la nube</em>
y no sé porqué, pero me tocó la fibra sensible. Y decidí empezar por uno de los
videos.</p>

<p>El video en cuestión, es un hangout de LinuxIO, de <a href="http://www.desarrolloweb.com">Desarrollo Web</a>, y que se
titula &#8221;<a href="http://youtu.be/cpL32a_GP3k">El mítico editor Vim</a>&#8221;. Este video fue el detonante de que decidiera
darle una oportunidad a Vim, una oportunidad seria. Así que decidí comenzar a
aprenderlo.</p>

<p>La idea es que este post no se acabe aquí, si no que vaya creciendo con el
tiempo, que vaya actualizandolo según voy consumiendo los recursos que indica
Pablo, y los que me encuentre por el camino. Para cada uno de ellos me gustaría
ir describiendo qué es lo que he aprendido de él.</p>

<p>De esta forma, según vaya pasando el tiempo, aquí tendré el camino recorrido,
y así otros podrán saber cómo lo recorrí para aprender Vim.</p>

<!--
LinuxIO, con @ktzar, que anima bastante https://www.youtube.com/watch?feature=player_embedded&v=cpL32a_GP3k

Segunda parte del LinuxIO: https://www.youtube.com/watch?feature=player_embedded&v=XvCD78eA46E

Un semi-dios del vim, Drew Neil : https://vimeo.com/53144573

Pagina de Drew Neil : http://drewneil.com/
Con enlaces a vimcasts, peer-to-peer.io, ...

Libros en open libra (no leidos) http://www.etnassoft.com/biblioteca/?search_term=VIM&books_category=libros_programacion&books_criteria=post_date_DESC&lang=all&since=all

Videos de Derek Wyatt : http://derekwyatt.org/vim/tutorials/

-->


<h2>El mítico editor Vim, #linuxIO</h2>

<p><a href="https://twitter.com/ktzar">Miguel Luis González</a> y <a href="https://twitter.com/voylinux">Pablo</a> nos presentan <a href="http://youtu.be/cpL32a_GP3k">El mítico editor Vim</a>. Miguel pone tanta pasión,
tanto conocimiento, que impresiona. Este es el video que me convenció. Y
éste es un resumen de lo que aprendí de él (y estoy poniendo en práctica escribiendo
este post :D ).</p>

<ul>
<li>Movimientos básicos: <code>h</code>, <code>j</code>, <code>k</code>, <code>l</code>. Nada de usar las flechas, ¡Cobarde!</li>
<li><code>i</code> para <strong>i</strong>nsertar</li>
<li><code>a</code> para <strong>a</strong>ñadir. Inserta, pero después de la posición del cursor</li>
<li><code>:o &lt;fichero&gt;</code> para abrir (<strong>o</strong>pen) un fichero</li>
<li><code>:q</code> para salir del Vim. <code>:q!</code> para salir ignorando los cambios</li>
<li><code>:w</code> para guardar (<strong>w</strong>rite)</li>
<li><code>u</code> para deshacer (<strong>u</strong>ndo)</li>
<li><code>CTRL + r</code> para rehacer</li>
<li><code>w</code> para mover el cursor a la siguiente palabra (<strong>w</strong>ord)</li>
<li><code>b</code> para mover el cursor a la palabra anterior (<strong>b</strong>efore)</li>
<li><code>e</code> para mover el cursor al final (<strong>e</strong>nd) de la siguiente palabra</li>
<li><code>x</code> para borrar un carácter</li>
<li><code>p</code> para <strong>p</strong>egar. <code>P</code> para hacerlo antes del cursor</li>
<li><code>r</code> para reemplazar un carácter</li>
<li><code>f&lt;carácter&gt;</code> para encontrar (<strong>f</strong>ind) el siguiente carácter en la línea</li>
<li><code>0</code> mover el cursor al inicio de la línea. <code>$</code> para ir al final</li>
<li><code>d</code> borrar (<strong>d</strong>elete). <code>dw</code> borra palabra. <code>dd</code> borra línea</li>
<li><code>c</code> para <strong>c</strong>ambiar. Por ejemplo, <code>cw</code> cambia una palabra. <code>cc</code> cambia una linea</li>
<li><code>y</code> para copiar (<strong>y</strong>ank). <code>yw</code> copia una palabra. <code>yy</code> una línea. <code>yf)</code> copia
hasta que encuentra el caracter <code>)</code> inclusive.</li>
<li><code>t&lt;carácter&gt;</code> para mover hasta (un<strong>t</strong>ill). <code>yt)</code> para copiar hasta el carácter
<code>)</code> sin copiar el carácter.</li>
<li><code>%</code> para mover el cursor al carácter complementario. Por ejemplo, si estamos en
un carácter <code>(</code>, nos mueve hasta el siguiente <code>)</code>. De <code>[</code> al <code>]</code>. ¿Lo pillas?</li>
</ul>


<h2>(12-10-2014) Vim sobre Linux, comandos avanzados y plugins</h2>

<p>Miguel y Pablo siguen hablando de Vim, de <a href="http://youtu.be/XvCD78eA46E">comandos avanzados y plugins</a>, temas más
avanzados que en el anterior vídeo, pero con el mismo tono alegre y pasión.
Esto es lo que aprendí en él:</p>

<ul>
<li><code>s</code> para sustituir un carácter. Borra el carácter donde está el cursor y entra
en modo edición.</li>
<li><code>C</code> para cambiar una línea entera.</li>
<li>Números como modificadores de comandos. Por ejemplo, <code>5dd</code> borra 5 líneas. <code>3yy</code>
copia 3 líneas.</li>
<li><code>/&lt;texto&gt;</code> para buscar la cadena de texto hacia adelante</li>
<li><code>n</code> para moverse a la siguiente (<strong>n</strong>ext) ocurrencia de la búsqueda. <code>N</code> para
moverse a la anterior.</li>
<li><code>?&lt;texto&gt;</code> para buscar la cadena de texto pero hacia atrás</li>
<li><code>*</code> entra en modo búsqueda, usando la palabra donde estamos como texto de búsqueda</li>
<li><em>Movimientos interiores</em>. <code>i</code> expande el cursor o la selección en el <strong>i</strong>nterior
de un texto encerrado entre dos comillas, o dos paréntesis, o dos llaves.
Por ejemplo, <code>ci'</code> <strong>c</strong>ambia el <strong>i</strong>nterior del texto entre comillas. <code>di(</code>
borra (<strong>d</strong>elete) el <strong>i</strong>nterior del texto entre paréntesis. <code>cit</code> <strong>c</strong>ambia
el <strong>i</strong>nterior del <strong>t</strong>ag HTML.</li>
<li><code>v</code> entra en modo <strong>v</strong>isual. <code>V</code> modo <strong>v</strong>isual línea a línea</li>
<li><code>CTRL + v</code> entra en modo <strong>v</strong>isual pero selecciona columnas</li>
<li><code>CTRL + p</code> autocompletado, buscando en palabras anteriores a la actual y en todos
los ficheros abiertos. <code>CTRL + n</code> muestra también una lista de posibles palabras
para autocompletar, pero dando preferencia a texto encontrado hacia abajo</li>
<li><code>%s/&lt;texto a buscar&gt;/&lt;texto a reemplazar&gt;/g</code> busca y reemplaza un texto por otro,
se puede hacer en todo el fichero o dentro de una zona seleccionada con <code>v</code></li>
<li><code>=</code> indenta un texto. <code>==</code> indenta una línea entera</li>
<li><code>&lt;</code> y <code>&gt;</code> aumentan o disminuyen la indentación de la línea</li>
<li><code>gg</code> mueve el cursor al inicio del fichero. <code>G</code> lo mueve al final del fichero</li>
<li><code>:!&lt;comando unix&gt;</code> ejecuta un comando unix. <code>%</code> se reemplaza por la ruta del
fichero actual. También puede actuar sobre regiones de selección visuales.
<code>:'&lt;, '&gt;!sort</code> ordena la selección visual</li>
<li><code>q&lt;tecla&gt;</code> comienza la grabación de una macro, almacenándola en <code>&lt;tecla&gt;</code>. Volver
a pulsar <code>q</code> para parar la grabación.</li>
<li><code>@&lt;tecla&gt;</code> ejecuta la macro almacenada en <code>&lt;tecla&gt;</code></li>
<li><code>@@</code> ejecuta la última macro</li>
<li><code>:split</code>, <code>:vsplit</code> para abrir varios ficheros y verlos simultáneamente</li>
<li><code>:buffer &lt;número&gt;</code> para abrir un buffer o nuevo fichero. Por ahora los buffers
es un tema algo complicado. Más adelante aprenderé más sobre ellos.</li>
</ul>


<p>Plugin <a href="http://vim.sourceforge.net/scripts/script.php?script_id=1658">NERDTree</a>.
Con <code>CTRL + w</code> se entra en un modo para poder moverse por las
ventanas (<strong>w</strong>indows). Se pueden utilizar las teclas de movimiento <code>h</code>, <code>j</code>, <code>k</code>, <code>l</code>
para moverse por los ficheros que muestra el plugin en forma de árbol.</p>

<p>Se puede utiliar Vim como una herramienta para comparar ficheros. El comando unix
<code>vimdiff</code> abre Vim con dos ficheros para compararlos.</p>

<p>Toda la configuración de Vim se guarda en el directorio <code>~/.vim</code>. Los plugins se
guardan en <code>~/.vim/plugin</code> y los ficheros de ayuda en <code>~/.vim/doc</code>. Configuraciones
de teclas, colores, indentación y otras se guardan en el fichero <code>~/.vimrc</code>.</p>

<p>Plugin <a href="https://wincent.com/products/command-t">Command-T</a>. Para abrir ficheros con
las teclas <code>CTRL + t</code>. Parecido a la misma funcionalidad de TextMate o Sublime. Al
parecer necesita Ruby, así que la instalación quizá no sea muy sencilla.</p>

<h2>(12-10-2014) Derek Wyatt: Basic movements II</h2>

<p>El primer video de Derek decidí saltármelo, ya que todos los comandos estarían
cubiertos con los videos de #LinuxIO. En el de <a href="http://vimeo.com/6185584">Movimientos básicos II</a>
aprendí lo siguiente:</p>

<ul>
<li><code>H</code> mueve el cursor a la cabecera (<strong>h</strong>ead) del texto que se muestra en pantalla</li>
<li><code>M</code> mueve el cursor a la parte <strong>m</strong>edia del texto en pantalla</li>
<li><code>L</code> mueve el cursor a la última (<strong>l</strong>ast) línea del texto en pantalla</li>
<li><code>&lt;número&gt;G</code> nos lleva a la línea número <code>&lt;número&gt;</code></li>
<li><code>#</code> busca la palabra sobre la que buscamos, pero hacia atrás. Es como el comando
que ya vi anteriormente <code>*</code></li>
<li><code>g*</code> busca el texto, como <code>*</code>, pero no tiene porqué ser la palabra completa</li>
</ul>


<h2>(12-10-2014) Derek Wyatt: Basic movements III</h2>

<p>En el video de <a href="http://vimeo.com/6216655">Movimientos básicos III</a> ya no podían quedar
muchos más movimientos que aprender, y la verdad es que los que aquí aparecen son ya
movimientos un poco más extraños, aunque no por eso dejan de ser útiles.</p>

<ul>
<li><code>:help motion.txt</code> para ver la ayuda sobre movimientos, para que no se olvide
ninguno</li>
<li><code>]]</code> mueve el cursor hasta el siguiente carácter <code>{</code> que exista en la columna 0.
Ideal para movernos por ficheros de código. Existen otras combinaciones, como
<code>[[</code>, <code>[]</code> y <code>][</code>, pero actuando sólo sobre la columna 0, no sé si les voy a sacar
mucho provecho.</li>
</ul>


<p>El plugin <a href="http://www.vim.org/scripts/script.php?script_id=39">matchit</a> amplía la
funcionalidad del comando <code>%</code> (que movía el cursor hasta el siguiente carácter
complementario: de <code>(</code> a <code>)</code>, de <code>[</code> a <code>]</code>, &#8230;).</p>

<p><code>:help marks</code> para conocer acerca de marcadores. No los suelo utilizar en mi día
a día, pero no está de más saber que existen.</p>

<ul>
<li><code>m&lt;tecla&gt;</code> define un marcador en <code>&lt;tecla&gt;</code></li>
<li><code>'&lt;tecla&gt;</code> nos mueve al marcador definido en <code>&lt;tecla&gt;</code></li>
<li><code>''</code> nos lleva al último lugar donde editamos, ya que Vim almacena en <code>'</code> dicha
posición de forma automática</li>
</ul>


<h2>(13-10-2014) Derek Wyatt: basic editing I</h2>

<p>No es que aprendiera mucho en el video de <a href="http://vimeo.com/6329762">Edición básica</a> de
Derek, pero la mayoría de comandos ya estaban cubiertos con los videos de #LinuxIO.</p>

<ul>
<li><code>x</code> borra el carácter donde esta el cursor. <code>X</code> borra hacia atrás</li>
<li><code>r</code> <strong>r</strong>eemplaza un carácter. <code>R</code> <strong>r</strong>eemplaza varios carácteres, hasta que pulsemos <code>ESC</code>.
<code>5rx</code> reemplaza 5 caracteres por una <code>x</code>.</li>
</ul>


<p>El comando <code>:set cpoptions+=$</code> configura una funcionalidad adicional para el
comando <code>c</code> (<strong>c</strong>ambiar). Lo que hace es que aparezca el carácter <code>$</code> al
final del texto que se va a cambiar.</p>

<h2>(13-10-2104) Derek Wyatt: basic editing II</h2>

<p>No hay gran cosa que destacar en el video de
<a href="http://vimeo.com/6332848">Edición básica II</a>.</p>

<ul>
<li><code>F&lt;carácter&gt;</code> encontrar (<strong>f</strong>ind) un carácter hacia atrás</li>
<li><code>J</code> une (<strong>j</strong>oin) una línea con la inmediatamente inferior. <code>gj</code> une dos líneas
sin dejar ningún espacio en blanco.</li>
<li><code>gv</code> selecciona el último bloque visual</li>
</ul>


<h2>(13-10-2014) Derek Wyatt: working with many files I</h2>

<p>En el episodio de <a href="https://vimeo.com/6306508">Múltiples ficheros I</a> aprendí un
manejo básico de buffers, es decir, manejar varios ficheros a la vez.</p>

<ul>
<li><code>:e &lt;fichero&gt;</code> abre un buffer con ese <fichero></li>
<li><code>:ls</code> lista todos los buffers abiertos</li>
<li><code>:buffer &lt;número&gt;</code> cambia al buffer número <code>&lt;número&gt;</code>. <code>:b &lt;nombre&gt;</code> cambia al
buffer del fichero con el nombre <code>&lt;nombre&gt;</code>. <code>b#</code> cambia al buffer anterior.</li>
<li><code>:bdelete</code> o <code>bd</code> cierra el buffer abierto en ese momento</li>
<li><code>:%bd</code> cierra todos los buffers (<code>%</code> significa <em>todo el rango</em>)</li>
</ul>


<h2>(13-10-2014) Derek Wyatt: working with many files II</h2>

<p>El episodio de <a href="https://vimeo.com/6307101">Múltiples ficheros II</a> sigue enseñándome
a manejar varios buffers o ficheros a la vez.</p>

<ul>
<li><code>:wn</code> (<strong>w</strong>rite and move <strong>n</strong>ext), escribe el buffer actual y se mueve al
siguiente</li>
<li><code>:n</code> mueve al siguiente (<strong>n</strong>ext) buffer</li>
<li><code>:bufdo &lt;comando&gt;</code> ejecuta el comando en todos y cada uno de los buffers
abiertos</li>
<li><code>:wall</code> escribe todos (<strong>all</strong>) los buffers</li>
<li><code>:bfirst</code> se mueve al primer buffer. <code>:bn</code> se mueve al siguiente. <code>:bp</code> se
mueve al anterior (<strong>p</strong>revious)</li>
</ul>


<p>Todos estos comandos son potentes si se usa <strong>una sola sesión de Vim</strong>, y
son inútiles si tienes abiertos N Vims con N ficheros. Así que recuerda:
una sola sesión de Vim.</p>

<h2>(13-10-2014) Derek Wyatt: working with many files III</h2>

<p>En el <a href="https://vimeo.com/6342264">último episodio sobre múltiples ficheros</a>
hay más y más comandos que aprender, a cual más útil.</p>

<ul>
<li><code>CTRL-w o</code> te deja con sólo una ventana abierta</li>
<li><code>:split &lt;fichero&gt;</code>, <code>:sp &lt;fichero&gt;</code> divide la pantalla y abre una ventana debajo
de otra con el nuevo fichero</li>
<li><code>CTRL-w x</code> intercambia (e<strong>x</strong>change) dos ventanas</li>
<li><code>CTRL-w v</code> divide la pantalla en vertical, mostrando dos ventanas con el mismo
buffer. También se puede hacer con <code>:vsplit</code> o <code>:vsp</code></li>
<li><code>CTRL-w</code> seguido de <code>h</code>, <code>j</code>, <code>k</code> o <code>l</code> te permite moverte de ventana en ventana
igual que si lo estuvieras haciendo dentro de un fichero</li>
<li><code>CTRL-w</code> seguido de <code>H</code>, <code>J</code>, <code>K</code> o <code>L</code> mueve la ventana a la derecha, abajo,
arriba o a la derecha</li>
<li><code>CTRL-w p</code> mueve el cursor a la última ventana visitada</li>
<li><code>CTRL-w c</code> <strong>c</strong>ierra la ventana</li>
<li><p><code>CRTL-w</code> mueve el cursor a la siguiente ventana, de una en una, una especie de
<code>CTRL-TAB</code> o así</p></li>
<li><p><code>CTRL-w c</code> <strong>c</strong>ierra la ventana</p></li>
<li><code>CRTL-w</code> mueve el cursor a la siguiente ventana, de una en una, una especie de
<code>CTRL-TAB</code> o así</li>
</ul>


<h2>(14-10-2014) Derek Wyatt: how to use the help system</h2>

<p>Para aprender acerca de <a href="http://vimeo.com/7035132">cómo usar la ayuda</a> este
video es lo mejor, aquí va un resumen:</p>

<ul>
<li><code>:help</code> o <code>:h</code> abre una ventana como si fuera un buffer donde muestra la ayuda</li>
<li><code>CTRL+]</code> para seguir un hiperenlace de la ayuda (no se si funcionara con
teclado español). <code>CTRL+t</code> para volver hacia atrás</li>
<li><code>:help &lt;tag&gt;</code> abre la ayuda de una etiqueta. Las etiquetas tienen la forma
de <code>*:&lt;command&gt;*</code> en la ayuda.</li>
<li><code>:help &lt;function&gt;()</code> abre la ayuda de una función</li>
<li>the command <code>wildmenu</code> (o <code>wmnu</code>) habilita el autocompletado de comandos en
con <code>TAB</code>. Para activarla, escribir <code>:set wildmenu</code>. Para desactivarla
<code>:set nowildmenu</code></li>
<li><code>:helpgrep</code> (<code>:helpg</code>) busca un patrón en los ficheros de ayuda. Con el
filtro <code>[@xx]</code> busca sólo para el lenguaje <code>xx</code>. Para movernos por los resultados
se puede hacer con <code>:cn</code> (siguiente o <strong>n</strong>ext) o con <code>:cwin</code> nos abre una
ventana llamada <em>quickfix</em> (<code>:h quickfix</code> para saber más)</li>
</ul>


<h2>(23-10-2014) Derek Wyatt: Vim runtime y el fichero .vimrc</h2>

<p>Sigo aprendiendo Vim con este tío, esta vez sobre el
<a href="http://derekwyatt.org/vim/tutorials/intermediate/#vimrc">fichero de configuración .vimrc y el runtime</a>:</p>

<ul>
<li>El fichero <code>vimrc</code> se usa para configurar Vim cuando arranca</li>
<li>En Linux, el fichero <code>vimrc</code> se encuentra en <code>~/.vimrc</code></li>
<li>Puedes escribir los mismos comandos que en el modo comando, cuando empieza por <code>:</code></li>
<li>Echar un vistazo a MiniBufExplorer plugin</li>
<li><code>:h vimrc</code> para leer la ayuda</li>
<li><code>nnoremap</code> es un comando interesante para remapear ciertos comandos</li>
<li><code>:h 'runtimepath'</code> muestra la ayuda sobre vim runtime path</li>
<li><code>~/.vim/</code> es el runtime path por defecto en Linux. Ahí es donde irán instalados
los ficheros de ayuda, los plugins, los colores de syntaxis, &#8230;</li>
<li><code>~/.vim/doc</code> es donde se guarda la ayuda</li>
<li><code>~/.vim/colors</code> es donde se guardan los esquemas de colores</li>
<li><code>~/.vim/plugin</code> es donde <em>viven</em> los plugins</li>
</ul>


<h2>(24-10-2014) Derek Wyatt: Vim modes introduction</h2>

<p>Los modos es la característica que diferencia a Vim (sobre todo de emacs, su eterno
enemigo), y ya iba siendo hora de apreder sobre ellos. Los modos de Vim son:
normal, visual, inserción, comando y ¿¡ejecución!?, así que aquí va una
<a href="http://derekwyatt.org/vim/tutorials/intermediate/#modes-intro">introducción a los modos de Vim</a>:</p>

<ul>
<li>modo <em>Normal</em>: donde puedes introducir los comandos del editor</li>
<li>modo <em>Visual</em>: como el modo normal, pero según te mueves por el fichero, el texto
se va resaltando, como si fuera una selección visual</li>
<li>modo <em>Inserción</em>: es el modo donde se introduce el texto</li>
<li>modo <em>Línea de comandos</em>: donde puedes introducir comandos en una línea abajo
del todo de la ventana de Vim. Los comandos comienzan con <code>:</code>, <code>/</code>, <code>?</code> o <code>!</code></li>
<li>Y hay otros modos menos usados, que más que modos distintos son como una
mezcla de varios de los básicos, como el modo <em>Inserción Normal</em>, que, estando
en el modo de inserción, te permite ejecutar un comando (uno sólo) y luego
vuelve a entrar en el modo de inserción.</li>
</ul>


<h2>(28-10-2014) Derek Wyatt: Insert mode</h2>

<p>En este video Derek profundiza en uno de los modos importantes de Vim, el
<a href="https://vimeo.com/7133419">modo de inserción</a>, en el cual podemos usar
autocompletado, indentar líneas y muchas cosas más.</p>

<ul>
<li><code>:help i_CTRL-A</code> muestra la ayuda para la combinación de teclas <code>CTRL a</code> pero
exclusivamente para el modo de inserción, de ahí el <code>i_</code></li>
<li><code>expandtab</code> es una opción que indica el número de espacios a insertar cuando
se presiona la tecla <code>TAB</code></li>
<li><code>CTRL w</code> borra la palabra anterior (si estamos en modo de inserción)</li>
<li><code>CTRL t</code> incrementa en uno la indentación</li>
<li><code>CTRL d</code> decrementa en uno la indentación</li>
<li><code>:help ins-special-special</code> muestra la ayuda de comandos en el modo inserción,
como por ejemplo <code>CTRL g j</code> para mover el cursor una línea abajo.</li>
<li><code>CTRL m</code>, <code>CTRL p</code> busca palabras para autocompletar buscando hacia abajo o
hacia arriba</li>
<li><code>CTRL x</code> + <code>CTRL l</code> autocompleta líneas enteras, es decir, en lugar de buscar
palabrejas, busca líneas completas.</li>
<li><code>CTRL x</code> + <code>CTRL f</code> autocompleta rutas de ficheros</li>
</ul>


<h2>(02-11-2014) Derek Wyatt: One Vim&#8230; just one</h2>

<p>Es cortito video acerca de <a href="http://vimeo.com/4446112">mantener una y solo una sesión de Vim</a>
se enfoca en solamente un comando de la shell:</p>

<pre><code>gvim --remote-silent
</code></pre>

<p>Este sencillo comando nos permite abrir varios ficheros en una única sesión
gráfica de vim.</p>

<p>Tal y como dicen los comentarios del vídeo, este comando solamente funciona por
defecto en la interfaz gráfica de Vim, no en la versión de Vim que se ejecuta
en la línea de comandos.</p>

<h2>(02-11-2014) Derek Wyatt: Destruction is good</h2>

<p>En este video Derek muestra cómo utilizar
<a href="http://vimeo.com/6110008">comandos destructivos para editar</a>
el contenido que queremos.</p>

<p>Comandos utilizados:</p>

<ul>
<li><code>:v/&lt;some pattern&gt;/&lt;some command&gt;</code>: es el comando <code>:vglobal</code> (usar <code>:help :vglobal</code>
para saber más). Este comando realiza acciones sobre líneas que NO cumplen el patrón
especificado.</li>
<li><code>:help :substitute</code> muestra ayuda del comando utilizado para sustituir unas cadenas
por otras.</li>
<li>Expresiones regulares, que son ya un problema en sí mismas y que darían para
mucho tiempo de aprendizaje.</li>
</ul>


<h2>(24-11-2014) Derek Wyatt: Using a Vim macro to edit many files</h2>

<p>Y después de un tiempo sin ver nada nuevo de Vim, hoy toca ver cómo se puede
<a href="http://vimeo.com/4456458">utilizar una macro para editar varios ficheros</a>, del cual,
se pueden sacar los siguientes macros y consejos:</p>

<ul>
<li><code>q + a</code> para comenzar a grabar una macro en la posición <code>a</code></li>
<li><code>@ + a</code> para ejecutar la macro grabada en la posición <code>a</code></li>
<li><code>@ + @</code> para ejecutar la última macro</li>
<li><code>5 + @ + a</code> para ejecutar la macro en <code>a</code> 5 veces</li>
<li><code>:wn</code> guardar todos los cambios y moverse al siguiente buffer</li>
<li><code>:prev</code> moverse al buffer anterior</li>
<li><code>" + a + p</code> imprime la macro guardada en la posición <code>a</code></li>
</ul>


<h2>(08-01-2015) Derek Wyatt: Vim macros and global commands</h2>

<p>Sigo aprendiendo cosas sobre Vim, esta vez sigo con
<a href="https://vimeo.com/4448635">macros en Vim y comandos globales</a>. Estos son los
comandos y nuevos consejos que aprendí:</p>

<ul>
<li><code>CTRL + A</code> incrementa en uno el primer número que encuentra en la línea</li>
<li><code>20 CTRL + A</code> incrementa en 20 el primer número de la línea</li>
<li>Grabar y ejecutar macros, visto en el anterior</li>
<li><code>:g/sometext/normal 20^A</code> es un comando global (en modo :normal, lo que sea eso
que signifique), que busca la cadena <code>sometext</code> (ya he visto antes cómo buscar
cadenas de texto) y ejecuta el comando <code>20 CTRL + A</code>. Para ello, para poder
escribir <code>CTRL + A</code> como comando, hay que pulsar <code>CTRL + V</code> para que la
siguiente pulsación la tome de forma literal, y luego pulsar <code>CTRL + A</code></li>
<li><code>CTRL + V</code> hace que Vim tome la siguiente pulsación de forma literal, muy útil
cuando se escriben comandos globales, por ejemplo.</li>
</ul>


<h2>(08-01-2015) Derek Wyatt: Vim expression register</h2>

<p>Una vez acabados los vídeos de nivel intermedio, toca comenzar con los de
nivel avanzado. Comienzo con el <a href="http://vimeo.com/4446843">registro de expresiones</a>. ¿Qué es?
¿Para qué sirve? En el vídeo lo descubro:</p>

<ul>
<li>¿Qué es? Es un registro, un lugar donde almacenar <em>cosas</em>. ¿Y qué cosas
son esas? Pues son comandos.</li>
<li>¿Para qué sirve? Lo utilizan los programadores de plugins para extender
Vim y para integrarlo con herramientas de terceros.</li>
<li><code>:imap &lt;c-j&gt;d &lt;c-r&gt;=system('echo foo')&lt;cr&gt;</code> mapea (en modo <strong>i</strong>nserción)
la combinación de teclas <code>CTRL + J, D</code> para que ejecute el comando de
sistema <code>echo foo</code> e inserte el resultado en el archivo que estamos
editando. <code>&lt;c-r&gt;</code> significa <code>CTRL + R</code>, que accede al <em>registro de expresiones</em>
del que estamos hablando.</li>
</ul>


<h2>(18-01-2015) Derek Wyatt: Vim autocomands</h2>

<p>Siguiendo con vídeos de nivel avanzado, esta vez toca <em>auto comandos</em>. Parece
una funcionalidad super útil de Vim. Es una funcionalidad donde puedes configurar
Vim para que realice los comandos que quieras cuando ocurra algún evento: por
ejemplo, cuando se guarda un fichero en disco, o cuando se mueva el cursor.
El vídeo está disponible en <a href="http://vimeo.com/4454614">Autocomandos</a>,
y es muy cortito, que no te de pereza.</p>

<ul>
<li><code>:help :autocmd</code></li>
</ul>


<h3>(18-01-2015) Derek Wyatt: Find command and the path</h3>

<p>El vídeo anterior era realmente corto, y solamente saqué en claro un comando
para Vim, <code>:autocmd</code>, pero para su uso es necesario de tener funciones u
otros comandos para que realmente haga algo.</p>

<p>Así pues, el siguiente es <a href="http://vimeo.com/6154082">Find command and the Path</a>
para aprender a buscar ficheros y cargarlos para su edición.</p>

<ul>
<li><code>:set path=&lt;directorio&gt;</code>: establece la variable <code>path</code> en Vim, para búsqueda
de ficheros por ejemplo.</li>
<li><code>:find &lt;filename&gt;</code>: busca por un fichero y lo abre para su edición</li>
<li><code>:pwd</code>: muestra el directorio de trabajo actual</li>
</ul>


<h3>(Marzo 2015) Comando <code>set statusline</code></h3>

<p>Esta vez no tengo nada de ningún video, pero es igualmente interesante. Mediante
el comando <code>set statusline</code> se puede configurar la apariencia de la <em>barra de
estado</em> de Vim. Existen muchos símbolos (por llamarlos de alguna manera) que a
modo de función <code>printf</code> pueden ser sustituidos por diversos campos dentro del
editor: nombre del fichero, número de línea, codificación del fichero,&#8230;</p>

<p>A partir de <a href="http://stackoverflow.com/questions/21069164/osx-vim-set-laststatus-2-shows-only-the-filename-but-i-want-to-see-everythin">esta pregunta en Stack Overflow</a>
encontré el fichero de configuración de <a href="https://github.com/sk1418/myConf/blob/master/common/.vimrc#L506">sk1418</a>
en el cual me basé para crearme mi propia configuarción de la barra de estado:</p>

<pre><code>set laststatus =2 " always show status bar
set statusline=%&lt;%f%h%m%r%=%b\ 0x%B\ \ %l,%c%V\ %p\ %P
</code></pre>

<p>La cual me muestra:</p>

<ul>
<li>Nombre del fichero, con la ruta completa</li>
<li>Una marca para saber si el fichero está modificado</li>
<li>Valor decimal del carácter donde está situado el cursor</li>
<li>Valor hexadecimal del mismo</li>
<li>Columna o línea del fichero donde está el cursor</li>
<li>Fila</li>
<li>Tanto por ciento del fichero donde está el cursor</li>
</ul>


<!--
Next: [Globals, commands and functions](http://vimeo.com/15443936)
-->



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Plantilla para módulos NodeJS]]></title>
    <link href="http://rchavarria.github.io/blog/2014/09/24/plantilla-para-modulos-nodejs/"/>
    <updated>2014-09-24T00:45:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2014/09/24/plantilla-para-modulos-nodejs</id>
    <content type="html"><![CDATA[<p>Hace poco, viendo los <a href="http://www.carlosble.com/screencasts/es/">screencasts de Carlos Blé</a>
sobre programación, a un compañero de trabajo le picó la curiosidad e
intentó repetir el ejercicio que practicaba Carlos. Carlos desarrolla algunos
screencasts en JavaScript, y utiliza <a href="http://visionmedia.github.io/mocha/">Mocha</a> y <a href="http://chaijs.com">Chai</a> como frameworks para tests.
Yo recordé haber montado algo parecido algún día, y con este proyecto de github
quiero ayudar a los demás a que puedan montar un <a href="https://github.com/rchavarria/nodejs-module-template/tree/template-ready">proyecto NodeJS con Gulp, Mocha y Chai</a>.</p>

<!-- more -->


<h1>Plantilla para módulos NodeJS</h1>

<p>En este proyecto encontrarás una estructura para módulos <a href="http://nodejs.org">NodeJS</a> lista
para comenzar a trabajar. El proyecto está compuesto de las siguientes
librerías:</p>

<ul>
<li><a href="http://gulpjs.com">Gulp</a>: como herramienta para automatizar tareas</li>
<li><a href="http://visionmedia.github.io/mocha/">Mocha</a>: como herramienta para ejecutar tests</li>
<li><a href="http://chaijs.com">Chai</a>: como librería de checkeos (<em>asserts</em> a falta de una traducción mejor)
para tests</li>
<li><a href="http://cjohansen.no/sinon">Sinon</a>: como una librería de dobles de tests</li>
</ul>


<p>En este fichero están las instrucciones para instalar y poner en funcionamiento
todas estas librerías.</p>

<h1>¿Cómo instalar NodeJS?</h1>

<p>Lo primero de todo, instalar NodeJS.</p>

<p>Para instalarlo en Ubuntu, simplemente ejecutar el comando:</p>

<pre><code>sudo apt-get install nodejs
</code></pre>

<p>Para instalarlo en otros sistemas operativos, visitarla página
<a href="http://nodejs.org/download">NodeJS download page</a>.</p>

<p>Hay otra forma de instalarlo, y es a través de <code>nvm</code> (<a href="http://carlosazaustre.es/blog/como-instalar-node-js-en-ubuntu">Node Version Manager</a>).</p>

<p>El resto de librarías las instalaremos a través de la herramienta <code>npm</code>.</p>

<h1>Inicializar <code>npm</code></h1>

<p>Ejecutar el comando:</p>

<pre><code>npm init
</code></pre>

<p>El comando te guiará por unos pasos para introducir información básica del módulo
donde trabajarás. Entre esa información se encuentra el nombre del proyecto,
la descripción y la version.</p>

<p>Un fichero <code>package.json</code> tipo podría ser el siguiente:</p>

<pre><code>{
    "name": "nodejs-module-template",
    "version": "0.0.0",
    "description": "A template for NodeJS modules",
    "main": "index.js",
    "directories": {
        "test": "test"
    },
    "dependencies": {},
    "devDependencies": {},
    "scripts": {
        "test": "test"
    },
    "author": "Ruben Chavarria http://rchavarria.github.io",
    "license": "BSD-2-Clause"
}
</code></pre>

<h1>Instalar Gulp</h1>

<p>Es muy fácil, con <code>npm</code>:</p>

<pre><code>npm install --save-dev gulp
</code></pre>

<p>El flag <code>--save-dev</code> insertará una nueva línea en el fichero <code>package.json</code> para
indicar a <code>npm</code> que hay una nueva dependencia para tiempo de desarrollo.</p>

<p>Para comprobar que se ha instalado correctamente, ejecutar el comando
<code>gulp --version</code>.</p>

<h1>Configurar Gulp</h1>

<p>Crea un fichero <code>gulpfile.js</code> en el directorio raiz del proyecto. El contenido
del fichero podría ser el siguiente:</p>

<pre><code>var gulp = require('gulp');

gulp.task('default', function() {
    console.log('Hello gulp!');
});
</code></pre>

<p>Ejecuta el comando <code>gulp</code> para ver un mensaje por consola.</p>

<h1>Instalar librerías de tests</h1>

<p>Es tan fácil como instalar Gulp, simplemente escribir el comando:</p>

<pre><code>npm install --save-dev mocha chai sinon sinon-chai
</code></pre>

<p>Para probar que se ha instalado Mocha adecuadamente, escribir
<code>node node_modules/mocha/bin/mocha --version</code>.</p>

<h1>Antes de escribir el primer test</h1>

<p>Antes de escribir el primer test, crearemos un fichero de inicializacion para
Mocha, para inicializar las librerias y evitar tener que escribir el mismo
código una y otra vez en todos nuestros tests.</p>

<p>Crea un fichero llamado <code>test/bootstrap.js</code> y escribe en él este contenido:</p>

<pre><code>global.chai = require('chai');
global.sinon = require('sinon');
global.expect = chai.expect;

var sinonChai = require('sinon-chai');
chai.use(sinonChai);
</code></pre>

<p>Esto cargará las librerías Chai y Sinon, crea una variable global llamada
<code>expect</code> (la usaremos en todos los tests) y configura Chai para que use métodos
y funcionalidades proporcionados por Sinon.</p>

<p>Ahora, crearemos una tarea en Gulp para ejecutar los tests. Para ello necesitamos
un plugin de Gulp que sea capaz de lanzar Mocha. Tan fácil como lo anterior:</p>

<pre><code>npm install --save-dev gulp-mocha
</code></pre>

<p>Luego, edita el fichero <code>gulpfile.js</code> y déjalo como el siguiente:</p>

<pre><code>var gulp = require('gulp'),
    mocha = require('gulp-mocha');

gulp.task('test', function () {
    return gulp
        .src(['test/bootstrap.js', 'test/scripts/**/*.js'])
        .pipe(mocha({ reporter: 'spec' }));
});
</code></pre>

<h1>Ahora sí, el primer test</h1>

<p>Crea un fichero llamado <code>test/scripts/firstSpec.js</code> con el siguiente contenido:</p>

<pre><code>describe('Mocha', function() {
    it('expects using Chai', function() {
        expect(2 + 2).equals(4);
    });
});
</code></pre>

<p>Para ejecutar este sencillo test, escribe el comando <code>gulp test</code>.</p>

<h1>Cómo escuchar cambios en ficheros de tests y de producción</h1>

<p>Es posible configurar Gulp para ejecutar una tarea específica cada vez que un
fichero (o varios) cambia. Configuraremos que se ejecute la tarea <code>test</code> cada
vez que se cambie un fichero de test o de producción. Para ello, añade la
siguiente tarea al fichero <code>gulpfile.js</code>.</p>

<pre><code>gulp.task('test-watch', function () {
    return gulp.watch(['src/scripts/**/*.js', 'test/scripts/**/*.js'], ['test']);
});
</code></pre>

<p>Para probar que funciona, escribe el comando <code>gulp test-watch</code>, cambia <code>firstSpec.js</code>
y guarda los cambios. Verás cómo el test se vuelve a ejecutar automáticamente.</p>

<h1>Por fin, probar algún código de producción</h1>

<p>Escribe un sencillo módulo NodeJS que sume dos enteros, guárdalo como
<code>src/scripts/adder.js</code>:</p>

<pre><code>module.exports = function adder(a, b) {
    return a + b;
};
</code></pre>

<p>Reemplaza el contenido de <code>test/scripts/firstSpec.js</code> por este otro (o escribe
tú mismo un nuevo fichero con este test):</p>

<pre><code>describe('Adder module', function() {
    // imports the adder module
    var adder = require('../../src/scripts/adder.js');

    it('adds two integers', function() {
        var sum = adder(2, 2);
        expect(sum).equals(4);
    });
});
</code></pre>

<p>Lánzalos con <code>gulp test</code>.</p>

<h1>Seguir leyendo</h1>

<p>Puedes leer documentación de <a href="http://gulpjs.com">Gulp</a> para saber cómo crear más y mejores tareas,
<a href="http://visionmedia.github.io/mocha/">Mocha</a> y <a href="https://github.com/sindresorhus/gulp-mocha">Mocha&#8217;s plugin for Gulp</a> para conocer más sobre las opciones de Mocha,
<a href="http://chaijs.com">Chai</a> para aprender a escribir tests con el API <code>expect</code>, <a href="http://cjohansen.no/sinon">Sinon</a> para aprender
sobre dobles de tests (mocks, spies, stubs) cuando escribas tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla sobre eXtreme Programming]]></title>
    <link href="http://rchavarria.github.io/blog/2014/09/20/charla-sobre-extreme-programming/"/>
    <updated>2014-09-20T01:27:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2014/09/20/charla-sobre-extreme-programming</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://rchavarria.github.io/images/2014/xppractices.jpg" width="360" height="270" title="Prácticas de eXtreme Programming" ></p>

<p>Recientemente he dado una charla en el trabajo acerca de <a href="http://www.extremeprogramming.org">eXtreme Programming</a>.
No es nada del otro mundo, tampoco pretendo dar lecciones a nadie y tampoco
he descubierto nada que no estuviera escrito ya. Pero al hacer la charla he
reunido un poco de información de aquí y de allá, y ya que he hecho ese
pequeño esfuerzo, ¿por qué no plasmarlo aquí?</p>

<p>A continuación os dejo el guión que escribí mientras la preparaba. No conté
todo lo que está, ni está todo lo que conté, pero este fue mi pequeño trabajo
de campo.</p>

<!-- more -->


<h2>Introducción al desarrollo ágil de software</h2>

<p>El desarrollo de software comenzó siendo hecho por ingenieros, de los de toda
la vida (que no quiere decir que sea malo, pero como veremos fue diferente),
lo que condicionó su forma de hacerlo, pero construir software es más parecido
a crear una obra de arte: requiere <em>creatividad</em> y <em>artesanía</em>.</p>

<p>A diferencia de otros productos de la ingeniería, el software es maleable,
muchas veces ilógico y siempre se encuentra incompleto (por eso se parece
a una obra de arte).</p>

<p>Al entender estas diferencias es cuando empiezan a surgir nuevas forma de
desarrollar software, como el desarrollo ágil de software.</p>

<p>No existen metodologías o procesos ágiles (en contra de todo lo que se vende
últimamente), sólo existen <strong>equipos ágiles</strong>. Eso que se describe como
metodología ágil no es más que la construcción de un entorno para que los
equipos aprendan a ser ágiles.</p>

<p>Diferencias con lo que se venía haciendo hasta ahora:</p>

<ul>
<li>La forma en la que el equipo trabaja junto es más importante que cualquier
proceso (gente y comunicación frente a procesos y herramientas).</li>
<li>El cliente, el usuario, pasa a ser un miembro esencial del equipo.</li>
<li>El mayor problema con el desarrollo de software son los requisitos
cambiantes. Para la mayoría de los proyectos, aceptar los cambios puede
costar menos que asegurar que los requisitos no van a cambiar nunca.</li>
</ul>


<p>Al cambiar la forma de ver los cambios, resulta que es más fácil cambiar cómo
se gestionan los proyectos. En lugar de gestionar actividades y esperar al
final del todo a tener una aplicación, los agilistas gestionan los requisitos
(aceptando que éstos van a cambiar) y se muestra al cliente cómo la aplicación
va cambiando con el tiempo.</p>

<h2>Gestión por funcionalidades</h2>

<p>En la gestión tradicional, se planifican las actividades una detrás de otra,
cuando finaliza una comienza la siguiente. Así hasta el final del proyecto.
Es entonces la única vez donde se muestra el software creado.</p>

<p>¿Cómo funciona? Los requisitos son constantes a lo largo del tiempo, y fluyen a
través de las actividades como por una línea de montaje. Cada actividad finaliza
con los requisitos a la vez  y al final de la línea se entrega un software.
Podemos tener gente especializada en cada actividad, e ir cambiando de equipo
según vamos cambiando de actividad. La única pega que tiene es que los requisitos
no son constantes, por lo que todo lo demás no sirve de nada.</p>

<p>¿Y Agile? Agile considera que los requisitos no son constantes. Cada requisito,
cada funcionalidad se presenta al cliente como una Historia de Usuario. El gráfico
anterior se gira 90º y el proceso en sí mismo es el que permanece constante. Se
planifican los requisitos por prioridad, y se va trabajando uno a uno pasándolo por
todas las actividades, por lo que vamos teniendo requisitos completos poco a poco.
Tener los requisitos priorizados permite cambiarlos a antojo. Y no solo eso,
también permite finalizar el proyecto en el momento en el que queramos.</p>

<p>Este giro de 90º permite a los managers a tener una estimación de coste por
requisito, no por actividad.</p>

<p>Uno de los costes de gestionar requisitos es que siempre hay que estar listo para
nuevas funcionalidades, por lo que se debe mantener una calidad muy alta tanto en
diseño como en código.</p>

<h2>Cómo evoluciona el software</h2>

<p>En todo desarrollo de software llega un momento en el al que arreglar un bug,
resulta que se crean uno o varios pequeños bugs por ahí dispersos.</p>

<p>Barry Boehm ya encontró que según va avanzando un proyecto software en su ciclo
de vida, el coste de un cambio se vuelve cada vez más y más grande. Un concepto
que lo explica mejor podría ser el Principio de Oxidación del Software.</p>

<p>Esta curva se comenzó interpretando de forma que se debían crear documentos de
requisitos lo más detallados y lo más estáticos posibles. Agile no lo considera
así, en lugar de eso se prepara para que los cambios en los requisitos cuesten
poco.</p>

<p>Para eso, y para combatir la oxidación del software, Agile propone:</p>

<ul>
<li>Refactorizar: hacerlo sin descanso, sin límites, sin parar, sin excusas…
refactoriza</li>
<li>Tests: unitarios y de aceptación. También se aceptan otros: de integración,
de sistema, de lo que sea, pero tests. Automáticos, eso si. Con ellos se logra
eliminar el miedo a los cambios.</li>
<li>Entrega temprana y frecuente: con ello se aumenta el feedback del cliente y
ayuda a identificar cambios. Y cuanto antes se detecten estos cambios, menor
coste tendrán.</li>
</ul>


<p>¿Cómo mantener la capacidad de poder realizar cambios manteniendo el coste en
niveles aceptables? Sólo porque el cliente no vea el código no significa que
no tengamos que hacer esfuerzo para mantener la capacidad de realizar cambios.
Y esto se consigue manteniendo un alto nivel de calidad, una baja complejidad
y una cobertura de tests lo más alta posible.</p>

<h2>Introducción a XP</h2>

<p>El primer proyecto en el que se usó eXtreme Programming comenzó el 6 de marzo
de 1996. XP es uno de los famosos Procesos Ágiles, entre los que se encuentran
Scrum, Kanban,…</p>

<p>En lugar de entregar todo lo que el cliente desea en un futuro lejano, XP va
entregando el software trocito a trocito, según se va necesitando.</p>

<p>XP hace hincapié en el trabajo en equipo. Managers, clientes y programadores
forman parte del mismo equipo. Los clientes se sienten bien siendo parte del
equipo, los programadores contribuyen activamente y los managers se encargan
de que exista una buena comunicación.</p>

<p>¿Por qué extremo? Por una serie de reglas y prácticas las lleva a su máxima
expresión, mucho más que en proyectos tradicionales.</p>

<h2>De vuelta a lo básico, qué es lo que en realidad importa</h2>

<p>Como ya sabemos, crear software es muy complicado. Por lo que no tiene sentido
perder el tiempo en tareas que no importan. XP se deshace de tareas o actividades
que se consideran que no aportan valor.</p>

<p>XP tiene una serie de reglas que se pueden englobar en estos cuatro aspectos:</p>

<ul>
<li><em>Escuchar</em>: hay que aprender, hay que conocer el problema. Eso te dirá qué es
lo que debes testear. Como probablemente no lo averigües tú solo, deberás
escuchar a los clientes, a los usuarios, managers y demás gente de negocio.</li>
<li><em>Diseñar</em>: hay que escuchar lo que el código nos cuenta acerca de cómo quiere
estar estructurado, y darle forma poco a poco.</li>
<li><em>Codificar</em>: si al final del día no hay un software ejecutable, no habrás
hecho nada.</li>
<li><em>Testear</em>: hay que saber cuándo hemos terminado. De otra forma, estarás atascado
pensando si todo cumple con lo establecido o no. Pero lo peor de todo, es que
tampoco vas a saber cómo de cerca estás de tu destino.</li>
</ul>


<h2>Reglas</h2>

<p>Algunas reglas sueltas quizá no tengan sentido, pero combinadas se puede ver
hacia dónde van, qué es lo que quieren conseguir.</p>

<h3>Escuchar</h3>

<p>Se escriben Historias de Usuario (las cuales son el corazón de la planificación
en un proyecto XP).</p>

<p>El proyecto se divide en iteraciones o sprints.</p>

<p>Al final de cada iteración, se realiza una pequeña entrega de funcionalidades.</p>

<p>Se crean tres niveles de planificación:</p>

<ul>
<li>Release plan: mira hacia el futuro unos cuantos meses y agrupa historias
en grandes entregas.</li>
<li>Next Iteration plan: se agrupan las historias que se van a realizar en
la próxima iteración.</li>
<li>Current Iteration plan: las historias definidas para esta iteración se
dividen hasta que se encuentran tareas que se pueden acometer fácilmente.
Los planes se toman como algo vivo, no como algo estático. Si el cliente
cambia de idea, se cambian los planes. Si el equipo se retrasa en una entrega,
se cambian los planes.</li>
</ul>


<p>Se intenta conseguir un Ritmo Sostenible.</p>

<p>Cada dia comienza con un Stand-up Meeting.</p>

<p>Se mide la Velocidad del Proyecto.</p>

<p>Se favorecen los Espacios Abiertos y se fomenta la Movilidad de las Personas.</p>

<h3>Diseñar</h3>

<p>Simplicidad, se busca siempre lo más sencillo posible. Para poder mostrárselo
al cliente lo antes posible y obtener feedback.</p>

<p>Siempre se usa una Metáfora del Sistema, se busca usar el lenguaje propio
del negocio, la jerga que se usa en el entorno para el cual se está
desarrollando el software.</p>

<p>Se crean Spikes, para reducir riesgos.</p>

<p>Ninguna funcionalidad se añade prematuramente (yagni).</p>

<p>Se Refactoriza en cualquier momento y en cualquier lugar que sea posible.</p>

<p>Se usan Tarjetas CRC para las decisiones de diseño. Así, todos los miembros
del equipo entienden y contribuyen al diseño.</p>

<h3>Codificar</h3>

<p>El cliente siempre está disponible para resolver dudas sobre el software.</p>

<p>El código se escribe siguiendo unos Estándares consensuados por el equipo.</p>

<p>Primero, se escriben los Tests Unitarios, luego el código de producción.</p>

<p>Todo el código de producción se escribe mientras se Programa por Parejas.</p>

<p>Se Integra Frecuentemente, mejor con Integración Contínua.</p>

<p>El código es de todos, Collective Ownership.</p>

<h3>Testear</h3>

<p>En un proyecto XP, los programadores toman la actitud de ser ellos quien
demuestran al cliente que los requisitos funcionan, y no al revés, no es
el cliente quien demuestra que lo que pidió no funciona.</p>

<p>Todo el código debe tener Tests Unitarios. Y todos los tests pasan antes
de sacar una versión.</p>

<p>Cuando se encuentra un bug, se crea un test para reproducirlo, arreglarlo,
y que nunca vuelva a salir una versión con ese bug.</p>

<p>Se escriben Tests de Aceptación. Se ejecutan frecuentemente y su puntuación
se hace pública.</p>

<h2>Valores</h2>

<p>XP mejora un proyecto software en cinco aspectos fundamentales, que se han
convertido en los valores de XP. Las reglas que acabamos de ver son consecuencia
de maximizar estos valores.</p>

<ul>
<li>Simplicidad: se hace lo que es necesario, pero nada más. No se añade complejidad
extra porque sí. Se avanza a pasos pequeños pero firmes.</li>
<li>Comunicación: todo el mundo es parte del equipo. Siempre que se pueda, la
comunicación es cara a cara.</li>
<li>Feedback: al final de cada iteración se entrega un software ejecutable y
válido. Se demuestra el software pronto y frecuentemente.</li>
<li>Respeto: todo el mundo da y recibe respeto. Los programadores respetan la
experiencia de los clientes y al revés.</li>
<li>Coraje: siempre se dice la verdad sobre las estimaciones y el estado de las
tareas.</li>
</ul>


<h2>Para seguir leyendo</h2>

<ul>
<li><a href="http://www.adictosaltrabajo.com/detalle-noticia.php?noticia=379">Principio de oxidación del software (Spanish)</a></li>
<li><a href="https://en.wikipedia.org/wiki/Barry_Boehm">Barry Boehm</a></li>
<li><a href="http://www.extremeprogramming.org/lessons.html">XP lessons learned</a></li>
<li><a href="http://www.extremeprogramming.org/when.html">When should XP be used</a></li>
<li><a href="http://www.agile-process.org">Agile process</a></li>
<li><a href="http://www.amazon.com/Extreme-Programming-Explained-Embrace-Edition/dp/0321278658">Extreme programming explained</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Efectividad de 10 técnicas para estudiar]]></title>
    <link href="http://rchavarria.github.io/blog/2014/09/07/efectividad-de-10-tecnicas-para-estudiar/"/>
    <updated>2014-09-07T10:23:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2014/09/07/efectividad-de-10-tecnicas-para-estudiar</id>
    <content type="html"><![CDATA[<p>Hace poco, escuchando el episodio 20 del podcast
<a href="http://www.bastayadepicar.com/episodio/020">Basta ya de picar</a>,
los creadores del podcast proponían un artículo como muy interesante.
Dicho artículo trataba de
<a href="http://bigthink.com/neurobonkers/assessing-the-evidence-for-the-one-thing-you-never-get-taught-in-school-how-to-learn">cómo aprender a aprender</a>.</p>

<p>Lo leí y me pareció tan interesante que no pude resistirme a hacer un pequeño
resumen para poder consultarlo en un futuro, y ya de paso, ¿por qué no
publicarlo?</p>

<!-- more -->


<h2>Técnicas</h2>

<p>Aquí están las técnicas ordenadas de mayor a menor efectividad:</p>

<ul>
<li><p>Exámenes (efectifidad alta): la técnica es más efectiva cuanto más elaboradas
tengan que ser las respuestas, pero incluso los de múltiples opciones son efectivos.
También resultan muy efectivos si las preguntas las elige uno mismo.
Relacionado: <a href="http://en.wikipedia.org/wiki/Cornell_Notes">Sistema para tomar notas de Cornell</a>,
incluso se incluye una <a href="http://lsc.cornell.edu/LSC_Resources/cornellsystem.pdf">plantilla</a>.</p></li>
<li><p>Práctica distribuida (efectividad alta): qué es mejor, ¿estudiarlo todo de
golpe o dividirlo y planificarlo a lo largo del tiempo?. Algunos estudios
recomiendan dividirlo y espaciarlo entre un 10% y 20% del tiempo que queremos
retener lo aprendido. Por ejemplo, si disponemos de un año, estudiaríamos una
vez al mes. esto contrasta mucho con la práctica habitual de los estudiantes
de estudar todo el último momento (ese conocimiento no durará mucho).</p></li>
<li><p>Elaborar preguntas (efectividad media): se trata de crear explicaciones de
<strong>por qué</strong> los hechos estudiados son verdaderos. Se concentran los esfuerzos
en el <em>por qué</em>, en lugar de en el <em>qué</em>. Suele ayudar tener conocimientos
previos de lo que se está estudiando.</p></li>
<li><p>Auto-explicación (efectividad media): es muy buena técnica para aprender
conceptos abstractos. Se trata de explicar <strong>cómo</strong> uno resuelve o entiende
el problema mientras se razonan las elecciones que se van tomando. Es más
efectivo si se hace mientras se estudia que si se hace después.</p></li>
<li><p>Práctica intercalada (efectividad media): qué es mejor, ¿estudiar temas en
bloques o estudiarlos entrelazados? En realidad, no se sabe muy bien, pero parece
que funciona bastante bien para aprendizajes que mezclan lo físico y lo mental.</p></li>
<li><p>Resúmenes (efectividad baja): no es tan efectivo como las anteriores pero sí
que es más que el subrayado, utilizar palabras claves y la re-lectura.</p></li>
<li><p>Subrayado (efectividad baja): no es muy efectivo porque no necesita de una
especial atención.</p></li>
<li><p>Palabras claves como mnemónicos (efectividad baja): es efectiva para ciertos
aprendizajes, como por ejemplo recordar nombres, nuevos idiomas, términos cienticios, &#8230;</p></li>
<li><p>Asociar texto con imágenes (efectividad baja): es efectiva para recordar frases,
pero no mucho para textos largos.</p></li>
<li><p>Re-lectura (efectividad baja): es más eficiente si se espacia en el tiempo que
si se realiza justo después de terminar la primera lectura.</p></li>
</ul>


<h2>Conclusión</h2>

<p>Cada una de estas técnicas, por sí sola, no tendrá un efecto muy positivo en
nuestro aprendizaje, pero si las combinamos, seguro que notamos mejoría. Por
ejemplo, según el artículo, qué tal si la próxima vez que tengamos que
aprender algo planificamos unos intervalos de estudio a lo largo del tiempo,
mientras lo estudiamos por qué no nos formulamos una serie de preguntas
(haciendo incapié en el <em>por qué</em> de los conceptos), para después responder
con nuestras propias palabras a dichas preguntas.</p>

<h3>Cómo funciona la técnica de tomar notas de Cornell</h3>

<p>Resumen extraído de la entrada en la wikipedia:
<a href="http://en.wikipedia.org/wiki/Cornell_Notes">Cornell note-taking system</a></p>

<p>Dividir el papel en dos columnas: <em>columna de preguntas</em>, de 1/3 del ancho y
<em>columna de notas</em>, 2/3 de ancho. La columna de notas es la de tomar notas de
la lección que estamos recibiendo. La columna de preguntas es para anotar
palabras claves y preguntas que nos surjan. Esta columna se rellena cuanto
antes una vez hayamos terminado de tomar notas.</p>

<p>Al pie de página, reservar 5 o 7 líneas para hacer un resumen de las notas
tomadas. Para estudiar, simplemente tapar con la mano la columna de notas y
tratar de responder a las preguntas de la columna de preguntas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla técnica: Escribiendo JavaScript sólido como una roca]]></title>
    <link href="http://rchavarria.github.io/blog/2014/06/26/charla-tecnica-escribe-javascript-como-roca/"/>
    <updated>2014-06-26T20:00:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2014/06/26/charla-tecnica-escribe-javascript-como-roca</id>
    <content type="html"><![CDATA[<p>Hace poco, he visto una charla técnica impartida por
<a href="https://twitter.com/damian">Damian Nicholson</a>
titulada <em>Writing (testable | maintainable | scalable | rock solid) JavaScript</em>,
que traduzco libremente como <em>Escribiendo JavaScript sólido como una roca</em>.</p>

<p>En la charla, Damian analiza varios aspectos de porqué es difícil testear
cierto código JavaScript y finaliza contando su experiencia escribiendo código
para evitar todos esos errores.</p>

<!-- more -->




<iframe src="http://rchavarria.github.io//player.vimeo.com/video/68526881" width="500" height="161" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<h3>Consejos</h3>

<p>A lo largo de la charla, Damian suelta unos cuantos pequeños consejos:</p>

<ol>
<li>JavaScript + Unit testing = Good code</li>
<li>Apóyate en los objetos. Según el conferenciante, los objetos te llevarán a
diseñar clases, éstas a agruparlas en módulos, y los módulos a organizar mejor
tus ficheros JavaScript.</li>
<li>Sobretodo, uno debería testear su API pública, aunque no limitarse a ella.</li>
</ol>


<h3>Problemas a la hora de testear código JavaScript</h3>

<p>A través de un sencillo snipet de código, Damian expone algunos de los problemas
más comunes a la hora de escribir código JavaScript que lo hace difícilmente
testeable:</p>

<ul>
<li>Funciones anónimas.</li>
<li>Acoplamiento fuerte con el DOM, por ejemplo en el uso y abuso de ids en elementos
HTML</li>
<li>Hacer llamadas al servidor mezcladas con otra lógica de nuestra aplicación.</li>
<li>Callbacks anidados.</li>
<li>Mezclar código HTML y JavaScript, por ejemplo, excribiendo <em>templates</em> HTML a
fuego en JavaScript.</li>
</ul>


<h3>Su propia experiencia</h3>

<ul>
<li>usar data-attributes para parametrizar, o configuraciones. Depender menos de ids
en los elementos HTML.</li>
<li>Conocer el ciclo de vida de los frameworks que utilizamos, y <em>engancharnos</em> a los
eventos del ciclo que dirigen el proceso.</li>
<li>Aislar nuestra aplicación de los detalles de plugins de terceros (gran consejo éste).</li>
<li>Apóyate en <a href="http://lostechies.com/derickbailey/2012/10/07/javascript-mixins-beyond-simple-object-extension">mixins</a>.
Con ellos podrás extender la funcionalidad de tus objetos, de una forma parecida a
la herencia, aunque muy diferente a ella.</li>
<li>Mantén funcionalidades privadas en ámbitos privados
(patrón <a href="http://www.codeproject.com/Articles/247241/Javascript-Module-Pattern">módulo</a>).</li>
</ul>


<h3>Conclusión</h3>

<p>Es una charla eminentemente práctica, por lo que es totalmente recomendable
si quieres conocer de primera mano buenos consejos sobre cómo escribir código
JavaScript testeable.</p>

<p>No estoy de acuerdo en todos los consejos que comenta Damian, pero la voz de
la experiencia tiene muchísimo valor, por lo que la charla me parece fenomenal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla técnica: JavaScript masterclass]]></title>
    <link href="http://rchavarria.github.io/blog/2014/06/21/charla-tecnica-javascript-masterclass/"/>
    <updated>2014-06-21T17:23:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2014/06/21/charla-tecnica-javascript-masterclass</id>
    <content type="html"><![CDATA[<p>Recientemente he visto una charla técnica impartida por
<a href="https://twitter.com/angelinamagnum">Angelina Fabro</a> titulada <em>JavaScript masterclass</em>.
En este post quiero dejar unas notas que me gustaría recordar, no es un resumen de la
charla, pero sí son algunas ideas que me gustaría resaltar.</p>

<p>La primera parte de la charla Angelina explica qué no es un programador junior, y en la
segunda parte qué no es un programador experto, para terminar sugiriendo unos cuantos
consejos sobre cómo pasar de un estado a otro.</p>

<!-- more -->


<h3>Angelina Fabro, a JavaScript masterclass</h3>

<iframe width="560" height="315" src="http://rchavarria.github.io//www.youtube.com/embed/v0TFmdO4ZP0" frameborder="0" allowfullscreen></iframe>


<h3>¿Quién es un gran programador?</h3>

<p>Bueno, pues eso depende de a quién le preguntes, pero algunas respuestas que te
darán podrían ser:</p>

<ul>
<li>Aquel que cumple con todas las fechas de entrega (si dejamos a un lado la calidad).</li>
<li>Aquel que soluciona de la forma más rápida los problemas de los clientes.</li>
<li>Aquel que hace ganar el mayor dinero posible a los dueños de los negocios.</li>
<li>Aquel que es el mejor mentor para un programador junior.</li>
<li>Aquel a quien le encanta unirse a otros programadores en la <em>batalla</em>.</li>
</ul>


<h3>¿Qué necesito aprender para ser uno de ellos?</h3>

<p>Como conclusión a su charla, Angelina nos deja unos cuantos consejos que podemos
aplicar para dar un salto en nuestra carrera profesional:</p>

<ul>
<li>Pregúntate <em>¿por qué?</em> obsesivamente, hasta el punto de molestarte a tí mismo.</li>
<li>Enseña y/o habla en un evento.</li>
<li>Trabaja a través de una seria de libros recomendados por los que más saben.</li>
<li>Experimenta alocadamente. Haz barbaridades, al código no le importa ni le hace daño.</li>
<li>Modela tus propias opiniones, debes tenerlas, debes mojarte.</li>
<li>Busca a un mentor que te guíe por el camino.</li>
<li>Programa mucho, mucho. Pero para de vez en cuando, tu cerebro necesita descansos.</li>
<li>Escribe en varios lenguajes.</li>
<li>Piensa como un programador aunque no estés cerca de un teclado.</li>
<li>Aprende a distinguir el buen feedback del malo, y desecha el malo claro.</li>
<li>Libérate del <a href="https://es.wikipedia.org/wiki/S%C3%ADndrome_del_impostor">síndrome del impostor</a>.</li>
</ul>


<h2>Conclusiones</h2>

<p>En general, la charla me ha encantado, y me ha dado un poquito de chispa para seguir mejorando
como profesional y me ha dado nuevas ideas. Aunque no estoy de acuerdo con todos los consejos que
Angelina propone, me voy a quedar con dos de ellos que no me había planteado hasta ahora:
pregúntate por qué obsesivamente y experimenta alocadamente.</p>

<p>Nos recomienda un libro, <em>The secrets of a JavaScript ninja</em>, de John Resig.</p>
]]></content>
  </entry>
  
</feed>
