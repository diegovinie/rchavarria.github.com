<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.com/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.com/"/>
  <updated>2013-09-17T14:00:13+02:00</updated>
  <id>http://rchavarria.github.com/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Servlet redirecciona a una JSP]]></title>
    <link href="http://rchavarria.github.com/blog/2013/09/17/servlet-redirecciona-jsp/"/>
    <updated>2013-09-17T13:27:00+02:00</updated>
    <id>http://rchavarria.github.com/blog/2013/09/17/servlet-redirecciona-jsp</id>
    <content type="html"><![CDATA[<div style="margin:2%; padding:2%; background-color:#E0E0E0; ">
    Find a lightweight English version of this post directly in the <a href="https://github.com/rchavarria/javaee-6-demos/tree/master/request-parameters-jsp">source code repository</a>.
</div>


<p>Este post es una pequeña extensión del anterior, un servlet que leía los parámetros
de una petición HTTP. La demo anterior presentaba los parámetros leídos de una
forma muy tosca y básica. En esta demo, la información se va a presentar al usuario
de una forma más trabajada. Además, orientándonos hacia una arquitectura MVC,
separaremos las tareas de lectura de los parámetros y presentación de los datos.</p>

<p>Se puede ver el código fuente de la demostración en el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/request-parameters-jsp"><code>request-parameters-jsp</code></a>
del repositorio de las demos en github.</p>

<!-- more -->


<h2>Demo</h2>

<p>La demostración va a ser muy sencilla: crearemos en servlet, lo configuraremos
para que responda cuando un usuario envíe los campos de un formulario de login,
y haremos que redireccione a una página JSP, esta página se encargará de renderizar
los datos que viajarán como atributos de la petición.</p>

<p>Para ejecutar la demo, simplemente hay que descargase el código fuente y ejecutar
<code>mvn jetty:run</code> desde el directorio raiz de la demo. Visitar la página de login
<a href="http://localhost:8080/login.html">http://localhost:8080/login.html</a>, introducir
unos valores cualquiera y enviar los datos del formulario. Como resultado, veremos
el renderizado de la página JSP en el navegador.</p>

<p><img class="center" src="http://rchavarria.github.com/images/2013/request-parameters-jsp.png" title="Respuesta del servlet" ></p>

<h2>Dependencias</h2>

<p>Como viene siendo habitual, para la demostración usaremos
<a href="http://maven.apache.org/">Apache Maven</a> para la gestión de dependencias.
En nuestro fichero <code>pom.xml</code> incluiremos la única dependencia del proyecto,
<code>javax-servlet-api</code> y listo.</p>

<h2>El servlet</h2>

<p>Nuestro servlet se trata de un servlet HTTP, luego heredará de <code>javax.servlet.http.HttpServlet</code>.
Lo configuraremos mediante anotaciones, con <code>@WebServlet</code>. Primero leerá los parámetros
enviados en la petición HTTP, igual que vimos en la anterior demo, y lo almacenará como un
atributo del objeto <code>request</code>, para que pueda ser leído por nuestra página JSP.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Parameter</span><span class="o">&gt;</span> <span class="n">params</span> <span class="o">=</span> <span class="n">buildParamList</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span><span class='line'><span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&quot;params&quot;</span><span class="o">,</span> <span class="n">params</span><span class="o">);</span>
</span><span class='line'><span class="c1">//...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Luego, redireccionará la petición a nuestra página JSP. Se ha decidido hacer un
<code>forward</code> de la petición en lugar de hacer una redirección completa,
ya que la redirección provocaría una nueva petición HTTP y perderíamos los parámetros
de la petición original, y esto es algo que no deseamos.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="n">request</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="s">&quot;/params.jsp&quot;</span><span class="o">).</span><span class="na">forward</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'><span class="c1">//...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>La página JSP</h2>

<p>Finalmente, la página JSP se encarga de presentar la información. De esta forma tenemos
construida nuestra demo siguiendo un patrón MVC (aunque es muy sencillo en este caso, ya
que solo contamos con un servlet y una página JSP), donde la página JSP juega el papel
de <em>vista</em>.</p>

<p>El código que nos interesa dentro del JSP es el que se encarga de iterar el
atributo que estableció el servlet, al que hemos llamado <code>params</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="err">&lt;</span>%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;c:forEach</span> <span class="na">var=</span><span class="s">&quot;p&quot;</span> <span class="na">items=</span><span class="s">&quot;${params}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>${p.key}: ${p.value}<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/c:forEach&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Código fuente</h2>

<p>Para echar un ojo al código fuente, visitar el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/request-parameters-jsp"><code>request-parameters-jsp</code></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leer parámetros desde un servlet]]></title>
    <link href="http://rchavarria.github.com/blog/2013/09/13/servlet-lee-parametros/"/>
    <updated>2013-09-13T12:39:00+02:00</updated>
    <id>http://rchavarria.github.com/blog/2013/09/13/servlet-lee-parametros</id>
    <content type="html"><![CDATA[<div style="margin:2%; padding:2%; background-color:#E0E0E0; ">
    Find a lightweight English version of this post directly in the <a href="https://github.com/rchavarria/javaee-6-demos/tree/master/request-parameters">source code repository</a>.
</div>


<p>En este post veremos cómo un servlet puede leer los parámetros que vienen
encapsulados en la petición HTTP que realiza un usuario a nuestra aplicación web.
La configuración de dicho servlet la haremos mediante anotaciones para tener un
proyecto más sencillo.</p>

<p>Se puede ver el código fuente de la demostración en el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/request-parameters"><code>request-parameters</code></a>
del repositorio de las demos en github.</p>

<!-- more -->


<h2>Demo</h2>

<p>La demostración va a ser muy sencilla: crearemos en servlet, lo configuraremos
para que responda cuando un usuario envíe los campos de un formulario de login,
y haremos que responda con una página HTML que incluye una lista con los valores
de los campos de dicho formulario.</p>

<p>Para ejecutar la demo, simplemente hay que descargase el código fuente y ejecutar
<code>mvn jetty:run</code> desde el directorio raiz de la demo. Visitar la página de login
<a href="http://localhost:8080/login.html">http://localhost:8080/login.html</a>, introducir
unos valores cualquiera y enviar los datos del formulario. Veremos el resultado
que devuelve el servlet al leer los parámetros de la petición HTTP que hemos
enviado al servidor.</p>

<p><img class="center" src="http://rchavarria.github.com/images/2013/request-parameters.png" title="Respuesta del servlet" ></p>

<h2>Dependencias</h2>

<p>Para esta demostración usaremos <a href="http://maven.apache.org/">Apache Maven</a> para
la gestión de dependencias. Esto nos facilitará enormemente nuestra labor de
programación. Si echamos un vistazo al fichero <code>pom.xml</code> de la demo, podremos
ver que solamente existe una dependencia externa, <code>javax-servlet-api</code>, que es
la que nos permitirá crear nuestro servlet.</p>

<h2>Página de login</h2>

<p><img class="right" src="http://rchavarria.github.com/images/2013/login-form.png" title="Respuesta del servlet" ></p>

<p>La entrada a nuestra demo será la página de login, la cual contiene un formulario
muy simple, con dos campos principales: email del usuario y contraseña.</p>

<p>En el código HTML de la página, se ha establecido la acción del formulario a
<code>RequestParametersServlet</code>. Ésta va a ser la URL a la que nuestro servlet deberá responder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;RequestParametersServlet&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;email&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Email address&quot;</span> <span class="na">autofocus</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Password&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span><span class="nt">&gt;</span>Log me in<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>El servlet</h2>

<p>Nuestro servlet se trata de un servlet HTTP, luego heredará de <code>javax.servlet.http.HttpServlet</code>.
Lo configuraremos mediante anotaciones, con <code>@WebServlet</code>. Y retornará un sencillo
código HTML que mostrará al usuario el valor de los parámetros enviados desde el
formulario de login.</p>

<p>La definión del servlet quedaría así:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">urlPatterns</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;/RequestParametersServlet&quot;</span><span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestParametersServletDemo</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mientras que el código que lee los parámetros de la petición HTTP estaría agrupado en un
método con esta pinta:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="nf">outputParametersList</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Enumeration</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">();</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(!</span><span class="n">names</span><span class="o">.</span><span class="na">hasMoreElements</span><span class="o">())</span> <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;&lt;ul&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">while</span><span class="o">(</span><span class="n">names</span><span class="o">.</span><span class="na">hasMoreElements</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">names</span><span class="o">.</span><span class="na">nextElement</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;&lt;li&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;&lt;/li&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;&lt;/ul&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Para echar un ojo al código fuente, visitar el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/request-parameters"><code>request-parameters</code></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un sencillo servlet HTTP]]></title>
    <link href="http://rchavarria.github.com/blog/2013/09/03/sencillo-servlet-http/"/>
    <updated>2013-09-03T13:41:00+02:00</updated>
    <id>http://rchavarria.github.com/blog/2013/09/03/sencillo-servlet-http</id>
    <content type="html"><![CDATA[<div style="margin:2%; padding:2%; background-color:#E0E0E0; ">
    Find a lightweight English version of this post directly in the <a href="https://github.com/rchavarria/javaee-6-demos/tree/master/simple-http-servlet">source code repository</a>.
</div>


<p>En este post veremos cómo crear un sencillo servlet HTTP. La configuración de dicho
servlet la haremos mediante anotaciones, y así veremos cómo Java EE 6 puede
ahorrarnos a los desarrolladores cierto trabajo con ficheros XML de configuración.</p>

<p>Se puede ver el código fuente de la demostración en el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/simple-http-servlet"><code>simple-http-servlet</code></a>
del repositorio de las demos en github.</p>

<!-- more -->


<h2>Demo</h2>

<p>La demostración va a ser muy sencilla: crearemos en servlet, lo configuraremos
para que responda cuando un usuario visite una página web en concreto, y haremos
que responda de una forma muy, pero que muy sencilla.</p>

<p>Para ejecutar la demo, simplemente hay que descargase el código fuente y ejecutar
<code>mvn jetty:run</code> desde el directorio raiz de la demo. Ya se puede ver el resultado
del servlet visitando
<a href="http://localhost:8080/SimpleHttpServlet">http://localhost:8080/SimpleHttpServlet</a>.</p>

<p><img class="center" src="http://rchavarria.github.com/images/2013/simple-http-servlet.png" title="Respuesta del servlet" ></p>

<h2>Dependencias</h2>

<p>Para esta demostración usaremos <a href="http://maven.apache.org/">Apache Maven</a> para
la gestión de dependencias. Esto nos facilitará enormemente nuestra labor de
programación. Si echamos un vistazo al fichero <code>pom.xml</code> de la demo, podremos
ver que solamente existe una dependencia externa, <code>javax-servlet-api</code>, que es
la que nos permitirá crear nuestro servlet.</p>

<h2>El servlet</h2>

<p>Como ya he comentado antes, se trata de un servlet HTTP, luego nuestro servlet
heredará de <code>javax.servlet.http.HttpServlet</code>.</p>

<p>Java EE 6 nos permite configurar los servlets sin hacer uso del fichero descriptor
de la aplicación web, <code>web.xml</code>. Esto es posible mediante la anotación <code>@WebServlet</code>.
Suponiendo que queremos que el servlet responda cuando el usuario visite la dirección
<code>/SimpleHttpServlet</code>, la signatura de la clase de nuestro servlet quedaría:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">urlPatterns</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;/SimpleHttpServlet&quot;</span><span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HttpServletDemo</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Respuesta del servlet</h3>

<p>El objetivo de la demo es ver cómo configurar un servlet HTTP mediante anotaciones,
por lo que la respuesta proporcionada por él es lo más sencilla posible: obtiene
un <code>writer</code> de la respuesta HTTP y escribe un sencillo mensaje en texto plano.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PrintWriter</span> <span class="n">out</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
</span><span class='line'><span class="k">try</span><span class="o">{</span>
</span><span class='line'>    <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&lt;h2&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;This servlet has been configured simply by: &quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;@WebServlet(urlPatterns = {\&quot;/SimpleHttpServlet\&quot;})&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&lt;/h2&gt;&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">out</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Para echar un ojo al código fuente, visitar el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/simple-http-servlet"><code>simple-http-servlet</code></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Demos de tecnologías Java EE]]></title>
    <link href="http://rchavarria.github.com/blog/2013/09/03/demos-tecnologias-javaee/"/>
    <updated>2013-09-03T12:55:00+02:00</updated>
    <id>http://rchavarria.github.com/blog/2013/09/03/demos-tecnologias-javaee</id>
    <content type="html"><![CDATA[<p>Este post va a servir de índice o tabla de contenidos para una serie de post que
me gustaría ir escribiendo poco a poco, sin prisa pero sin pausa, que el blog ya
lleva mucho tiempo si actualizarse y hay que darle vida.</p>

<p>Estos posts van a tratar sobre tecnologías Java EE, de cómo usar estas tecnologías
en nuestros proyectos software y de cómo estas tecnologías nos permiten crear
aplicaciones. Intentaré que estas aplicaciones estén más orientadas a las aplicaciones
web.</p>

<p>Comenzaré con temas y aplicaciones muy sencillas, que prácticamente no tienen sentido
en el Mundo Real™, pero que me permitirán ir adentrándome en todo el mundo Java EE.</p>

<!-- more -->


<p>Lista de posts:</p>

<ul>
<li><a href="http://rchavarria.github.com/blog/2013/09/03/sencillo-servlet-http">Un sencillo servlet HTTP</a>: En este post veremos
que crear un servlet en Java EE 6 es sincillísimo, y que incluso no es necesario
contar con un archivo descriptor de la aplicación web.</li>
<li><a href="http://rchavarria.github.com/blog/2013/09/13/servlet-lee-parametros">Acceder a los datos de un formulario desde un servlet</a>:
Es posible acceder a datos enviados por el usuario en la petición HTTP desde un servlet.
En este post veremos cómo.</li>
</ul>


<!--
    http://theopentutorials.com/examples/java-ee/servlet/get-all-parameters-in-html-form-using-getparameternames/
    https://baurdotnet.wordpress.com/2011/01/31/getting-a-request-parameter-in-a-servlet/
    
    ampliarlo mediante un ejemplo de cómo enviar un archivo?  
-->


<ul>
<li>Servlet listeners: Veremos el uso que le podemos dar a los distintos listeners asociados
a los servlets y su ciclo de vida: ServletContextListener,
ServletContextAttributeListener, ServletRequestListener y HttpSessionListener.</li>
<li>Crear una EJB sin estado: Aquí crearemos una EJB local sin estado y accederemos a
ella a través de un servlet, que será quien responda al usuario de nuestra aplicación.</li>
<li>Crear una EJB remota: En esta ocasión crearemos una EJB sin estado y remota, de forma
que se pueda acceder a ella desde una aplicación cliente, que también la desarrollaremos.</li>
</ul>


<p>Más adelante ya iré viendo por dónde seguirían las demos: páginas JSPs,
filtros para los servlets, logging, datos en la sesión, redirección&#8230;</p>

<!-- 
    Por donde seguir?

    http://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServlets.html
    http://www.journaldev.com/1877/java-servlet-tutorial-with-examples-for-beginners
    http://www.journaldev.com/1997/servlet-example-in-java-with-database-connection-and-log4j-integration
    http://www.journaldev.com/1933/java-servlet-filter-example-tutorial

-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aprendiendo a colaborar en github]]></title>
    <link href="http://rchavarria.github.com/blog/2013/05/30/aprendiendo-a-colaborar-en-github/"/>
    <updated>2013-05-30T08:45:00+02:00</updated>
    <id>http://rchavarria.github.com/blog/2013/05/30/aprendiendo-a-colaborar-en-github</id>
    <content type="html"><![CDATA[<p>Recientemente, hablando con mi amigo <a href="http://twitter.com/dagarfol">David</a> sobre un
proyectillo que llevamos a medias (estamos empezando, espero que podamos tener algo
publicable pronto), salió el tema de cómo empezar a colaborar con
amigos/compañeros/quien-sea con <a href="http://git-scm.com/">git</a> en <a href="http://github.com">github</a>.</p>

<p>Yo le comenté que era bastante sencillo comenzar, pero de boquilla se pueden decir
muchas cosas (la mayoría mentira), así que para que no se quede en agua de borrajas,
en este post encontrarás 5 comandos y acciones básicas para comenzar a
trabajar en equipo con git y github.</p>

<!-- more -->


<h2>¿Qué necesito?</h2>

<p>Lo primero que se necesita es tener una cuenta en github. Si no tienes una, uno puede
<a href="https://github.com/users">registrarse</a> fácilmente. Es como crearse una cuenta de correo.</p>

<p><img class="center" src="http://rchavarria.github.com/images/2013/github-overview.jpg"></p>

<p>Después, es necesario que <a href="http://git-scm.com/downloads">descargues e instales git</a>
en el ordenador donde vayas a trabajar. En windows es tan sencillo como instalar cualquier
otro programa, así que no hay excusa para parar aquí.</p>

<p>Para configurar git y poder usarlo con github, debemos configurarlo. Para ayudarnos, los
chicos de github se han currado una aplicación,
<a href="https://help.github.com/articles/set-up-git">Github for Windows</a>. También se puede
<a href="https://help.github.com/articles/set-up-git#platform-linux">configurar github en linux</a>.</p>

<h2>Obtener el código fuente</h2>

<p>Para comenzar a colaborar, necesitas un repositorio donde esté almacenado el código fuente
sobre el cual vais a trabajar. Dos formas muy comunes de crear un repositorio en tu
cuenta de github son:</p>

<ol>
<li><a href="https://help.github.com/articles/create-a-repo">Crear un repositorio desde cero</a>.</li>
<li><a href="https://help.github.com/articles/fork-a-repo">Copiar el repositorio de otra persona (fork)</a>.</li>
</ol>


<p>Con tu repositorio en github, ya puedes <em>descargarlo</em> a tu máquina de trabajo. En realidad
lo que vas a hacer es una copia entera y completamente funcional del repositorio en github.</p>

<figure class='code'><figcaption><span>Clonando un repositorio </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/username/Spoon-Knife.git</span></code></pre></td></tr></table></div></figure>


<p>Esto creará un directorio llamado <code>Spoon-Knife</code> donde se encuentra el repositorio completo.</p>

<h2>Modificar ficheros y subir los cambios</h2>

<p>Ya podemos realizar los cambios que queramos al código fuente.</p>

<p>Para subir estos cambios al repositorio de github, debemos seguir varios pasos:</p>

<ol>
<li>Añadir los fichero nuevos al área temporal de git llamada <code>stage</code> para poder hacer <code>commit</code>
al repositorio (existen más opciones para este comando, pero el más básico es éste):</li>
</ol>


<figure class='code'><figcaption><span>Añadiendo ficheros al área de stage </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Hacer <code>commit</code> de esos cambios. De esta forma, nuestro repositorio ya contendrá los cambios,
sólo hará falta incorporarlos al repositorio de github (repositorio remoto):</li>
</ol>


<figure class='code'><figcaption><span>Commiteando ficheros al repositorio local </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git commit -m "Mensaje del commit"</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Subir los cambios del repositorio local al repositorio remoto (github). El comando más básico
para ello es el siguiente:</li>
</ol>


<figure class='code'><figcaption><span>Sincronizando con el repositorio remoto </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push</span></code></pre></td></tr></table></div></figure>


<p>Si vamos a nuestro repositorio en github veremos cómo aparecen los commits que hicimos en nuestro
repositorio local. BIEN!</p>

<h2>Descargar cambios del repositorio de github</h2>

<p>Con el siguiente comando (esta es su sintaxis más sencilla) podrás incorporar los cambios que haya
en el repositorio remoto de github a tu repositorio local:</p>

<figure class='code'><figcaption><span>Sincronizando el repositorio local con cambios del remoto </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git pull</span></code></pre></td></tr></table></div></figure>


<p>Esta es su sintaxis más sencilla. Para avanzar en este aspecto, tendría que hablar de
<a href="http://gitref.org/remotes/">remotes</a>, pero es un concepto bastante extenso y quedaría un
post muy largo.</p>

<h2>Compartir nuestros cambios con los compañeros</h2>

<p>De acuerdo, ya tenemos nuestros cambios en nuestro repositorio local y los hemos subido a nuestro
repositorio remoto en github. Existe una forma muy sencilla en github de informar a nuestros compañeros
de que hemos hecho cambios, los llamados
<a href="https://help.github.com/articles/using-pull-requests">Pull Request</a>.</p>

<p><img class="right" src="http://rchavarria.github.com/images/2013/github-pull-request.jpg"></p>

<p>Mediante un Pull Request estás indicando a un compañero que le quieres pasar unos cambios que
tú has hecho. Ahora tu compañero deberá decidir si acepta los cambios y él incorporará esos
cambios a su repositorio remoto</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Save InformaticOS, mi primer open space]]></title>
    <link href="http://rchavarria.github.com/blog/2013/04/30/save-informaticos/"/>
    <updated>2013-04-30T12:23:00+02:00</updated>
    <id>http://rchavarria.github.com/blog/2013/04/30/save-informaticos</id>
    <content type="html"><![CDATA[<p>Wow! Menudo chute! No puedo decir más! El sábado 27 de abril estuve en mi primer
<a href="en.wikipedia.org/wiki/Open_space">Open Space</a>,
<a href="http://saveinformaticos.reeelab.com/2013/03/07/un-open-space-para-debatir-sobre-nuestra-profesion/">Save InformaticOS</a>,
y fue un día muy intenso y agotador, pero también revitalizante y enriquecedor.
Me alegro muchísimo de haber podido ir. He tenido la oportunidad de conocer a mucha gente
interesante, y espero poder seguir encontrándome con ellos en el futuro.</p>

<p>Escribo esto justo el sábado por la noche, para no perder el subidón (aunque lo haya publicado
unos días después). Ya he acostado a mi hijo, y tengo un ratito de reflexión, así que ahí va:</p>

<!-- more -->


<p><img class="center" src="http://rchavarria.github.com/images/2013/panoramica-saveinfos.jpg" width="1250" height="228" title="La rotonda en SaveInfos" ></p>

<p>Lo primero de todo, mil gracias a <a href="https://twitter.com/MaicaTrinidad">Maica</a>,
<a href="https://twitter.com/jmbeas">Jose Manuel</a> y
<a href="https://twitter.com/dgomezg">David</a> por haberlo hecho posible. Han hecho un esfuerzo enorme
de organización y promoción. Gracias.</p>

<p>Creo que la profesión de <strong>Desarrollador</strong> tiene muchos problemas, y tengo la impresión de que sufro
bastantes de ellos en mis propias carnes. No quiero echar la culpa a nadie, el máximo responsable
soy yo, en mis manos está cambiar esta situación. Y por eso he asistido a este evento: porque
quiero conocer de mis compañeros de profesión soluciones a estos problemas. Está claro que en un
sólo día no se van a solucionar todos ellos, pero al menos, esperaba llevarme unas cuantas
soluciones, o más que soluciones, una serie de acciones que poder poner en práctica para ir
mejorando poco a poco.</p>

<p>Todo el día fue <strong>muy</strong> intenso. El formato de Open Space no deja espacio para el relax. Está pensado
para que haya un flujo contínuo de conversaciones. Algunos se quejaron de que nos saltamos algunas
reglas de este formato, pero había tanta pasión en las conversaciones que veía difícil mantener
un único rumbo, veía difícil acotar las discusiones a una sola hora. Quizá intentamos poner límites
donde deberíamos haber dejado que los círculos siguieran su curso. Yo, al menos, me llevo muchas
conversaciones muy agradables, con gente que no conocía anteriormente, y eso hace que valore esta
experiencia muy positivamente.</p>

<p>Durante la última sesión, la de retrospectiva, hicimos un resumen de lo hablado durante todo el día.
Algunos se quejaron de que no habíamos sido capaces de encontrar soluciones concretas a los problemas
de esta nuestra profesión, pero en mi opinión, aparecieron unas cuantas acciones/soluciones para
mejorar la situación. Las que aparecen aquí no son todas, en la página de SaveInformaticOS hay un
<a href="http://saveinformaticos.reeelab.com/resumenes/">resumen de cada una de las conversaciones</a>,
pero son las que más influyeron en mí:</p>

<ul>
<li>empatizar con tus superiores, negociar con ellos para conseguir solucionar problemas,
fusionar las capas (desde desarrollo hasta alta dirección)</li>
<li>acciones de guerrilla, haz algo a pequeña escala y demuetra que es algo que funciona</li>
<li>generar envidia (sana), por ejemplo, hablar de lo que mola el libro aquel que leíste</li>
<li>organizar coding dojo&#8217;s o charlas en la universidad</li>
<li>aprende marketing, técnicas de negociación, véndete y vende lo que haces, haz
comprender el trabajo, tiempo, esfuerzo y dinero que vale
(como dice Bonilla en una de sus bonilistas:
<a href="http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;id=92e3e39bcd&amp;e=72f3cbeaf8">haz de evangelista técnico</a>).</li>
<li>llevar a alguien nuevo a eventos de este tipo u otros</li>
</ul>


<p>¿Y ahora qué? Por mi parte, me gustaría madurar algunas ideas, hacer un plan de acción, definir
algunas acciones que podría llevar a cabo en mi situación, y finalmente, atreverme a ponerlas
en acción. Por parte de la organización del open space, seguro que habrá más,
<a href="http://twitter.com/saveinfos">stay tuned!</a>.</p>

<p>Y como bola extra: en una de las conversaciones tratamos de hacer un ejercicio que me
encantó. Aunque el resultado no fue exactamente como se planteó el ejercicio. Pondría una
imagen aquí, pero Jose Manuel Beas lo ha hecho perfectamente en
<a href="http://saveinformaticos.reeelab.com/2013/04/28/back-to-the-future">Back to the Future</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notas sobre un video de marketing online]]></title>
    <link href="http://rchavarria.github.com/blog/2013/04/17/notas-sobre-un-video-de-marketing-online/"/>
    <updated>2013-04-17T06:15:00+02:00</updated>
    <id>http://rchavarria.github.com/blog/2013/04/17/notas-sobre-un-video-de-marketing-online</id>
    <content type="html"><![CDATA[<p>En este post incluyo las notas que fui tomando mientras visualizé el siguiente vídeo:
<a href="http://youtu.be/33vKaNuJh4o">Marca personal, mktIO</a> de la serie #mktIO que regularmente
se publica en el canal de youtube de
<a href="http://www.youtube.com/user/desarrollowebcom">Desarrollo Web</a>. No solo publican estos vídeos,
si no que son hangouts que realizan semanalmente, y sobre muy diversos temas:
desarrollo software, php, desarrollo web, SEO, &#8230;</p>

<p>Me gustó tanto este vídeo y otros relacionados con él que he creado una lista en
youtube donde tenerlos a mano:
<a href="http://www.youtube.com/watch?v=rnXD3-5Sipk&amp;list=PLUGn62zSm3gp_xv0y7Lv3fjNhvEGLEFbC">Lista de #mktIO en youtube</a>.</p>

<!-- more -->


<p>Estas notas son muy personales, y no pretendo que sean una guía para nadie ni son
un resumen escrito del mismo. Son notas que quiero conservar, que quiero recordar.
El vídeo está ahí, por lo que si quieres conocer más sobre el tema te recomiendo
que lo veas, es sumamente interesante. Pero antes, dejo el vídeo por si lo quieres
ver antes.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/33vKaNuJh4o" frameborder="0" allowfullscreen></iframe>


<h1>Notas que tomé sobre LinkedIn</h1>

<ul>
<li><p>Piensa en inglés, es un producto anglosajón, así que piensa en inglés, sobretodo
cuando añadas <em>Aptitudes y conocimientos</em> (Skills &amp; expertise).</p></li>
<li><p>Las recomendaciones están perdiendo su valor debido al abuso que suelen hacer los
usuarios de ellas.</p></li>
<li><p>Defínete a tí mismo con las Aptitudes y conocimientos.</p></li>
<li><p>Haciendo click en una aptitud, puedo ver otras aptitudes relacionadas y conocer
nuevos profesionales de fuera de mi red.</p></li>
<li><p>¿Cómo elegir qué aptitudes añadir? No importa cuáles elijas, pero debes conseguir
una buena valoración en ellas. LinkedIn las valora a través de palabras clave en
experiencias, cursos, actividad, grupos, &#8230;</p></li>
<li><p>En el extracto deberías indicar hacia dónde quieres ir.</p></li>
<li><p>¿Cómo conseguir que te valoren? Invitando a tus contactos a que lo hagan,
(fácil, ¿no?).</p></li>
<li><p>Se pueden mover elementos de tu perfil (aptitudes, experiencia, extracto, &#8230;), para
poder destacar aptitudes sobre experiencia, o publicaciones sobre educación, por ejemplo.</p></li>
<li><p>Es posible añadir elementos visuales (imágenes y vídeos) a cada una de las experiencias
que hayamos añadido. De esta forma puedes mostrar tu trabajo, no solo contarlo.</p></li>
<li><p>Para que seas visible debes participar en los grupos, ayudar a resolver problemas
a tus contactos, aportar tu experiencia en discusiones, pero de forma altruista, sin
ánimo de lucro.</p></li>
<li><p>Buscar grupos y contactos con los que poder relacionarte, pero no para buscar
trabajo, si no para darte a conocer, aprender, participar, enriquecerte, &#8230;</p></li>
</ul>


<h1>Otras notas</h1>

<p>En el vídeo se habla de otras herramientas y otras redes sociales, pero me quedé
bastante impresionado con estos consejos sobre LinkedIn y son las notas que quiero
conservar.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La meta]]></title>
    <link href="http://rchavarria.github.com/blog/2013/04/10/la-meta/"/>
    <updated>2013-04-10T10:06:00+02:00</updated>
    <id>http://rchavarria.github.com/blog/2013/04/10/la-meta</id>
    <content type="html"><![CDATA[<h4>La meta</h4>

<h5>Eliyahu Goldratt</h5>

<p><img class="right" src="http://ecx.images-amazon.com/images/I/51E50P52AXL._SY300_.jpg" width="195" height="300" title="La meta" ></p>

<h2>Por qué lo he leído</h2>

<p>Nunca había oído hablar de este libro, pero cuando asistí a la CAS2012, el año pasado en Cáceres,
varias personas que allí conocí (<a href="https://twitter.com/rferlei">Roberto</a> y
<a href="https://twitter.com/anuskiaranda">Ana</a>) me hablaron maravillas de él, así que decidí
ponerlo en la lista de libros a leer.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Bueno, en realidad ya me habían contado de qué iba el libro, así que ya llevaba una buena idea
de lo que se iba a tratar. Y tenía bastantes buenas espectativas.</p>

<h2>Qué encontre</h2>

<p>Encontré un magnífico libro. La verdad es que es muy ameno y divertido. También es intrigante
ir leyendo cómo el autor va relatando a través del protagonista un proceso de descubrimiento de
soluciones a todos sus problemas.</p>

<p>La verdad es que se hace muy fácil de leer y comprender los principios Lean y la teoría de las
restricciones a través de la historia contada a través del protagonista.</p>

<h2>Conclusiones</h2>

<p>El libro me ha encantado, aunque me hubiera gustado mucho más haberlo leído un tiempo atrás, ya
que trabajé en una fábrica como Ingeniero de Desarrollo (para desarrollar nuevos productos). Por
lo menos ha sido divertido revivir experiencias de aquel trabajo, ya que muchos de los principios
(y problemas también) expuestos en el libro ya los viví en mis propias carnes.</p>

<p>Así pues, este es un libro recomendado sobre todo a todos aquellos interesados en mejorar procesos
de producción. No parece un tema muy de desarrollo de software, que es a lo que me dedico, pero
estos principios son la base de las metodologías Lean, y por ende, Agile. Además, es un libro
que se lee relativamente rápido, y, de verdad, es muy divertido, así que tampoco cuesta tanto.</p>

<h2>Pasajes que quiero recordar de este libro</h2>

<blockquote><p>Comprar a precios económicos no es la meta.</p>

<p>La meta no es vender, hay veces que se vende perdiendo dinero o con márgenes ínfimos.</p>

<p>Qué es lo que la gente piensa que son las metas: compras baratas, contratación de gente adecuada,
tecnología punta, fabricacón de bienes de calidad, venta de bienes de calidad,
conquista tasa de mercado, comunciaciones o cumplimiento de los deseos del cliente.
Pero esos son medios para alcanzar la meta.</p>

<p>La calidad sola, es importante, pero no es la meta.</p>

<p>Tecnologia, es importatne, pero no es la meta.</p>

<p>Trabajar no es sinónimo de ganar dinero.</p>

<p>Ésta es la meta: ganar dinero aumentando los beneficios netos y al mismo tiempo el rendimiento
de la inversión (ROI) y la liquidez.</p>

<p>Parámetros que expresan la meta y que permiten establecer procedimientos operativos para
dirigir la fábrica: ingresos, inventarios y gastos de operación.</p>

<p>Una fabrica, en la que todo el mundo produce ininterrumpidamente, es muy poco productiva.</p>

<p>Una regla que expresa la relación entre cuellos de botella y los demas recursos: equilibrar
el flujo, no la capacidad.</p>

<p>El grado de utilización de un recuros &#8216;no-cuello&#8217; de botella no vendrá dado por su propia
capacidad sino por alguna otra restricción del sistema.</p>

<p>Se pueden distinguir 4 tipos de tiempos desde que el material entra en la fábrica hasta
que sale de ella: de preparación, de proceso, en cola y de espera.</p>

<p>Tres consejos sobre cómo dirigir: Saber convencer a otras personas, desprender las capas
de la práctica común y vencer la resistencia al cambio.</p>

<p>Nunca des las respuestas, solo plantea las preguntas.</p>

<p>¿Qué cabmiar? ¿Hacia qué cambiar? ¿Cómo provocar el cambio? Basicamente estamos pidiendo
las habiliades fundamentales que uno debería esperar de un directivo.</p></blockquote>

<h2>Conceptos</h2>

<ul>
<li><p>Productividad: significa hacer las cosas de tal manera que, en el caso de la empresa, ésta
se aproxime lo más posible a su meta. Todo aquello que lleve a una compañía más cerca de su meta
es productivo, todo aquello que no la lleve es imprductivo.</p></li>
<li><p>Ingresos: tasa de generacion de dinero a traves de las ventas.</p></li>
<li><p>Inventario: todo el dinero que el sistema ha invertido en adquierrir cosas que pretende vender.</p></li>
<li><p>Gastos de operación: todo el dienro que el sistema gasta para convertir el inventario en ingresos netos.</p></li>
</ul>


<h2>Otras lecturas y enlaces relacionadas</h2>

<ul>
<li><a href="http://rchavarria.github.com/blog/2012/10/10/lean-software-development/">Lean software development</a>, de Mary y Tom Poppendiek.</li>
<li><a href="https://plus.google.com/105077077543737057709">Roberto Hens</a> también lo ha leído, y esto es lo que le parece:
<a href="http://robertohens.blogspot.com.es/2013/04/Kanban-el-Origen-The-Goal.html">Kanban, el origen</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[microtip] eclipse: Detail Formatters]]></title>
    <link href="http://rchavarria.github.com/blog/2013/02/19/microtip-eclipse/"/>
    <updated>2013-02-19T17:19:00+01:00</updated>
    <id>http://rchavarria.github.com/blog/2013/02/19/microtip-eclipse</id>
    <content type="html"><![CDATA[<p>A través del post de <a href="http://twitter.com/kinisoftware">Kinisoftware</a>:
<a href="http://kinisoftware.com/2013/02/a-la-caza-del-bug-en-eclipse/">A la caza del bug en eclipse</a>
me encontré con un link muy recomendable, si trabajas con Eclipse como IDE:
<a href="http://eclipsesource.com/blogs/2013/01/08/effective-java-debugging-with-eclipse/">Effective Java debugging with Eclipse</a>.</p>

<p>En ese link aparecen multitud de consejos sobre cómo hacer debug en eclipse de una manera
mucho más productiva. Entre estos consejos están los <em>Detail Formatters</em>, para formatear
de una forma mucho más avanzada que con un simple <code>toString()</code> aquellas clases que desees.</p>

<!-- more -->


<p>En un primer momento, me parecieron muy útiles, pero no profundicé en ellos. Pensé que
cada vez que iniciara la depuración de una aplicación, debía crearme los Detail
Formatters que deseaba, y me pareció muy laborioso.</p>

<p>Pero no es así, estos formatters se guardan en tus preferencias, y los puedes
editar siempre que quieras. Los encontrarás en el menú <code>Window</code> > <code>Preferences</code>.
Y dentro de preferencias, en <code>Java</code> > <code>Debug</code> > <code>Detail Formatters</code>.</p>

<h2>Buscando una excusa</h2>

<p>Una vez que me convencí de su utilidad, había que crear alguno, ¿no?. Actualmente
me encuentro con que trabajo bastante con el tipo de Java <code>java.awt.geom.Rectangle2D</code>,
y la verdad es que no me gusta nada cómo Eclipse me muestra este tipo de datos
en una sesión de debugging.</p>

<p><img class="center" src="http://rchavarria.github.com/images/2013/rectangle2d-without-detail-formatter.png" width="804" height="151" title="Rectangle2D sin detail formatter" ></p>

<h2>Crear un detail formatter</h2>

<p>Manos a la obra. Primero, establecemos un punto de ruptura donde podamos ver en la vista
<em>Variables</em> una variable de la clase deseada, en este caso de <code>java.awt.geom.Rectangle2D</code>.</p>

<p>Pinchamos con el botón derecho del ratón y seleccionamos la opción <em>New Detail Formatter&#8230;</em>.</p>

<p>Ahora tenemos a nuestra disposición una ventana donde podemos introducir código Java de forma
que retorne una <code>String</code> con la representación que nosotros queramos. Yo he usado el siguiente
código:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">text</span><span class="o">.</span><span class="na">NumberFormat</span> <span class="n">nf</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">java</span><span class="o">.</span><span class="na">text</span><span class="o">.</span><span class="na">NumberFormat</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Locale</span><span class="o">.</span><span class="na">ENGLISH</span><span class="o">);</span>
</span><span class='line'><span class="n">nf</span><span class="o">.</span><span class="na">setMaximumFractionDigits</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'><span class="n">nf</span><span class="o">.</span><span class="na">setGroupingUsed</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span>
</span><span class='line'>    <span class="s">&quot;x: &quot;</span> <span class="o">+</span> <span class="n">nf</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">getX</span><span class="o">())</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span> <span class="o">+</span>
</span><span class='line'>    <span class="s">&quot;y: &quot;</span> <span class="o">+</span> <span class="n">nf</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">getY</span><span class="o">())</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span> <span class="o">+</span>
</span><span class='line'>    <span class="s">&quot;w: &quot;</span> <span class="o">+</span> <span class="n">nf</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">getWidth</span><span class="o">())</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span> <span class="o">+</span>
</span><span class='line'>    <span class="s">&quot;h: &quot;</span> <span class="o">+</span> <span class="n">nf</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">getHeight</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Y éste es el resultado, para mi gusto, mucho más compacto y directo:</p>

<p><img class="center" src="http://rchavarria.github.com/images/2013/rectangle2d-using-detail-formatter.png" width="548" height="116" title="Rectangle2D usando detail formatter" ></p>

<h2>Conclusión</h2>

<p>En cualquier proyecto nos podemos encontrar con clases que no podremos modificar (frameworks,
librerías, código legacy, &#8230;). Pero no nos tenemos que conformar con sus tristes y aburridos
métodos <code>toString()</code>. Podemos escribir nuestro propio código para formatear estos tipos de datos.
Y lo mejor de todo, podemos reutilizarlo, ya que nuestros formatters se guardan como preferencias
de nuestro IDE favorito.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile estimating and planning]]></title>
    <link href="http://rchavarria.github.com/blog/2013/02/13/agile-estimating-and-planning/"/>
    <updated>2013-02-13T13:08:00+01:00</updated>
    <id>http://rchavarria.github.com/blog/2013/02/13/agile-estimating-and-planning</id>
    <content type="html"><![CDATA[<h4>Agile estimating and planning</h4>

<h5>Mike Cohn</h5>

<p><img class="right" src="http://www.mcwherter.net/Portals/McWherter/9780131479418.jpg" width="245" height="324" title="Agile estimating and planning" ></p>

<h2>Por qué lo he leído</h2>

<p>últimamente estoy leyendo muchos libros relacionados con las metodologías ágiles, y en muchos de ellos se hacía referencia a este libro, así que pensé que debía ser un libro imprescindible. Y así es.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Esperaba encontrar muchas técnicas de estimación, métricas para controlar que una planificación no se desvía del plan inicial y cosas así.</p>

<p>También esperaba encontrar una serie de consejos a aplicar a la hora de hacer las estimaciones, y la verdad es que el libro no me ha defraudado para nada.</p>

<h2>Qué encontre</h2>

<p>Encontré todo eso y mucho más. Descubrí nuevos conceptos (ver último apartado) y conocí de primera mano técnicas que hasta ahora solo había conocido por encima, como los diagramas <em>burndown</em>, para registrar los puntos de historia que se han implementado en una iteración.</p>

<h2>Conclusiones</h2>

<p>El libro me ha encantado. Creo que es una lectura obligatoria para cualquier persona que esté relacionada con las planificaciones de los proyectos software. Estoy seguro de que aprendería muchísimas cosas. Claro, que si eres desarrollador también te conviene conocer las técnicas explicadas en este libro.</p>

<p>Una cosa que me ha gustado muchísimo es que al final de cada capítulo hay un resumen exponiendo las ideas principales del capítulo. Muy útil por si tienes que ojearlo una vez leído.</p>

<h2>Pasajes que quiero recordar de este libro</h2>

<blockquote><p>En 1981, Barry Boehm dibujó su primera versión del <a href="https://raw.github.com/tapichu/scrum/gh-pages/img/03%20-%20cono%20de%20incertidumbre.png"><em>cono de incertidumbre</em></a>. La imagen del enlace muestra los rangos iniciales de incertidumbre en diferentes puntos de un proceso de desarrollo secuencial (&#8220;en cascada&#8221;)</p>

<p>El &#8220;cono de incertidumbre&#8221; se va estrechando conforme el proyecto va avanzando.</p>

<p>Un plan <em>ágil</em> is aquel que no es que no queramos cambiar, sino que estamos ansiosos de hacerlo, y queremos
cambiarlo porque eso significa que hemos aprendido algo o que hemos sorteado una dificultad.</p>

<p>Las funcionalidades son la unidad de valor para el cliente, y no las actividades, aunque nosotros
planificamos basándonos en actividades, por eso muchos proyectos fallan.</p>

<p>La multitarea se convierte en un problema para los proyectos planificados tradicionalmente porque
incentiva enfocarse en la máxima utilzizacion de todos los individuos en lugar de mantener un margen
suficiente para poder manejar la variabilidad típica de las tareas de los proyectos software.</p>

<p>Un equipo <em>ágil</em> trabaja como una unidad, no hay espacio para la mentalidad &#8220;ahí lo dejo y ya está&#8221;. Un
buen equipo <em>ágil</em> debe tener una mentalidad de estamos todos juntos en esto.</p>

<p>Las <em>historias de usuario</em> son una técnica poco pesada para expresar los requisitos del software.</p>

<p>Los equipos ágiles planifican a tres niveles: release, iteración y dia. <strong>release</strong>: determina el alcance,
las fechas y los recursos de un proyecto. <strong>iteración</strong>: identfica tareas de alta prioridad que el equipo
debería realizar en la siguiente iteración. <strong>dia</strong>: coordina el trabajo y sincroniza los esfuerzos
del dia a dia.</p>

<p>Los proyectos se deberían ver como una forma de generar un flujo de nuevas capacidades y conocimientos,
conocimientos sobre el producto y sobre el proyecto (equipo, tecnología, personas, &#8230;)</p>

<p>Al igual que en los restaurantes las medidas de las raciones son relativas entre sí, en el mundo software
sólo necesito saber si una funcionalidad es mayor o menor respecto a otra.</p>

<p>Además de saber que las estimaciones son más fiables si son indicadas por aquellos que realizarán la tarea,
las estimaciones son aún mejores si se basan en la colaboración del equipo al completo.</p>

<p>Las tres formas más comunes de dar una estimación son: opinión de un experto, analogía y disgregación (o
dividir una tarea en otras más pequeñas).</p>

<p>La cantidad de tiempo que llevará implementar una funcionalidad es función de su tamaño (puntos historia) y
el ratio de progreso del equipo (velocidad)</p>

<p>Se deben tener en cuenta cuatro factores a la hora de priorizar tareas: valor de las funcionalidades, coste
del desarrollo, nuevo conocimiento que generará y riesgos que eliminará la realización de la tarea.</p>

<p>Kano (link al torpedo este, con imagen y todo si es posible) nos da una forma de separar funcionalidades en tres categorías: indispensables,
lineales y excitantes/sorprendentes.</p>

<p>Entregar un subconjunto coherente de todas las capas de una funcionalidad is siempre mejor que entregar
una capa entera pero sin conexión con el resto de ellas.</p>

<p>Así como un corazón bate a un ritmo regular que mantienen el cuerpo funcionando, un duración de iteración
fija proporciona una constante que ayuda a establecer un ritmo de desarrollo y entregas ~ Simon Baker</p>

<p>Un <em>buffer</em> es un margen de error alrededor de una estimación. Hay dos tipos de buffers: de funcionalidad
(un 25-40% de las funcionalidades son opcionales) y de planificación (se añade un 30% de tiempo a lo que
creo que me va a costar).</p>

<p>Un buffer de planificación no es un alargamiento consciente. Las personas alargan conscientemente sus
estimaciones si creen que se les reprochará no terminar a tiempo. Un buffer es un margen de seguridad
necesario que sumar al conjunto de estimaciones.</p>

<p>Algo que el autor encuentra muy útil como trabajo a realizar antes de una iteración son las <em>condiciones de
satisfacción</em> de las historias de usuario a desarrollar en dicha iteración por parte del cliente.</p>

<p>Un <em>release burndown chart</em> muestra la cantidad de trabajo que queda por realizar al inicio de cada iteración.
Esto se convierte en un indicador visual de cómo y a qué velocidad se está acercando el equipo al objetivo
del proyecto.</p>

<p>La variabilidad es parte da cada estimación. No importa cuánto esfuerzo se ponga en mejorarlas, un equipo nunca
será capaz de estimar perfectamente.</p>

<p>No gestionar la velocidad individualmente. Se debe incentivar siempre que sea posible que todos los miembros
del equipo trabajen como un todo, como un único equipo.</p>

<p>Las estimaciones y planificaciones ágiles funcionan porque se separan las estimaciones de tamaño y de duración:
puntos historia * velocidad = duración</p>

<p>Las planficaciones tradicionales se enfocan en las tareas para crear el producto, mientras que las planificaciones
ágiles se centran en las funcionalidades que desea el usuario.</p>

<p>Cuando creamos un plan al principio de un proyecto y no lo actualizamos con los nuevos conocimiento adquiridos,
estamos perdiendo la oportunidad de sincronizar nuestro proyecto con la realidad.</p></blockquote>

<h2>Conceptos</h2>

<ul>
<li><a href="http://gzurita.blogspot.com.es/2006/07/idea-valiosa-el-cono-de-incertidumbre.html">Cono de incertidumbre</a></li>
<li><a href="http://ow.ly/hFQSx">Velocidad</a></li>
<li><a href="www.youtube.com/watch?v=lGXLe9RiJyY">Commitment-driven iteration planning</a>:
Una aproximación guiado por el compromiso is una alternativa a la
planificación de la iteración. El equipo va añadiendo historias a la iteración de una en una mientras que ellos
se puedan comprometer a entregarlas. Las historias son seleccionadas, descompuestas en tareas y éstas estimadas.
De una en una. En la aproximación de planificar basándose en la velocidad, se eligen un conjunto de historias
cuyas estimaciones sean iguales o menores que la velocidad del equipo.</li>
<li><a href="http://stackoverflow.com/a/3700855/1111676">Condiciones de satisfacción</a></li>
<li><a href="https://www.google.es/search?q=burndown+bar+chart&amp;tbm=isch">burndown bar chart</a></li>
</ul>


<h2>Otras lecturas y enlaces relacionadas</h2>

<ul>
<li><a href="http://jmbeas.es/guias/">Guía de conceptos ágiles</a></li>
<li><a href="http://twitter.com/joserra_diaz/">Jose Ramón Díaz</a>, de <a href="http://www.agilar.org/">Agilar</a>,
habla de <a href="http://najaraba.blogspot.com.es/2013/02/la-estimacion-agil-de-proyectos-puntos.html">estimaciones ágiles</a>
en su blog.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Formatear y parsear enumerados en Java con valores personalizados]]></title>
    <link href="http://rchavarria.github.com/blog/2013/01/22/formatear-y-parsear-enumerados-en-java-con-valores-personalizados/"/>
    <updated>2013-01-22T13:17:00+01:00</updated>
    <id>http://rchavarria.github.com/blog/2013/01/22/formatear-y-parsear-enumerados-en-java-con-valores-personalizados</id>
    <content type="html"><![CDATA[<p>A partir de la versión 1.5 de Java, nos encontramos con un tipo de datos, un tipo
especial de clases podríamos decir, los enumerados. Los tipos enumerados sirven para
acotar los posibles valores que puede tomar una variable o tipo de objeto. Java
proporciona un método para transformar un enumerado en cadena, <code>name()</code>, y un método
estático para convertir una cadena en uno de los valores del enumerado,
<code>valueOf(String)</code>. Pero estos métodos son un poco limitados, ya que no nos permiten
personalizar los valores a los cuales son transformados los enumerados.</p>

<!-- more -->


<p>Partiremos del siguiente código describiendo tres valores en un enumerado:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">States</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">EVERYTHING_IS_OK</span><span class="o">,</span>
</span><span class='line'>  <span class="n">SOMETHING_WENT_WRONG</span><span class="o">,</span>
</span><span class='line'>  <span class="n">TOTAL_FAILURE</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Así, sin más, podemos obtener la representación en <code>String</code> de <code>States.TOTAL_FAILURE</code>
simplemente llamando al método <code>States.TOTAL_FAILURE.name()</code>. De la misma forma, usando
la llamada <code>States.valueOf("EVERYTHING_IS_OK")</code> es fácil imaginar qué valor del enumerado
obtendremos.</p>

<p>Pero, y si en lugar de esa representación a <code>String</code>, ¿queremos definir la nuestra
propia?. Por ejemplo, siguiendo la siguiente tabla:</p>

<ul>
<li>EVERYTHING_IS_OK &rarr; green</li>
<li>SOMETHING_WENT_WRONG &rarr; yellow</li>
<li>TOTAL_FAILURE &rarr; red</li>
</ul>


<h2>Formatear a cadena</h2>

<p>Formatear es sencillo, y directo. Podemos declarar un campo <code>value</code> donde almacenar el
valor al cual queremos transformar el enumerado, y podemos sobreescribir el método
<code>toString()</code> de la siguiente manera:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">States</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">EVERYTHING_IS_OK</span><span class="o">(</span><span class="s">&quot;green&quot;</span><span class="o">),</span>
</span><span class='line'>  <span class="n">SOMETHING_WENT_WRONG</span><span class="o">(</span><span class="s">&quot;yellow&quot;</span><span class="o">),</span>
</span><span class='line'>  <span class="n">TOTAL_FAILURE</span><span class="o">(</span><span class="s">&quot;red&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="n">String</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">private</span> <span class="nf">States</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Parsear desde una cadena</h2>

<p>El problema viene cuando queremos obtener un valor del enumerado a partir de un <code>String</code>.
Supongamos que la transformación la vamos a hacer en un método estático, que por contraste
con el anterior método llamaremos <code>fromString</code>. Veamos qué opciones tenemos, de menos a
más apropiadas:</p>

<h3>Sentencias if</h3>

<p>La primera solución que le viene a uno a la cabeza es usar sentencias <code>if</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[...]</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">States</span> <span class="nf">fromString</span><span class="o">(</span><span class="n">String</span> <span class="n">fromValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="s">&quot;green&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">fromValue</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">EVERYTHING_IS_OK</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="s">&quot;yellow&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">fromValue</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">SOMETHING_WENT_WRONG</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="s">&quot;red&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">fromValue</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="n">TOTAL_FAILURE</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;Wrong value: &quot;</span> <span class="o">+</span> <span class="n">fromValue</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">[...]</span>
</span></code></pre></td></tr></table></div></figure>


<p>No hay mucho que decir aquí, simplemente que se debería evitar a toda costa esta solución.</p>

<h3>Bucle for</h3>

<p>Otra solución, un poco más elegante, pero básicamente siguiendo la misma filosofía, podría
ser utilizar un bucle para recorrer los posibles valores del enumerado:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[...]</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">States</span> <span class="nf">fromString</span><span class="o">(</span><span class="n">String</span> <span class="n">fromValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">States</span> <span class="n">state</span> <span class="o">:</span> <span class="n">values</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="na">value</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">fromValue</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">return</span> <span class="n">state</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;Wrong value: &quot;</span> <span class="o">+</span> <span class="n">fromValue</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">[...]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Esta solución es un poquito mejor, ya que si modificamos los valores posibles del enumerado,
no es necesario que modifiquemos este método.</p>

<h3>Prealmacenamiento de los valores en un Map</h3>

<p>Existe una solución que no involucra el uso de sentencias <code>if</code>, lo cual es muy positivo, ya
que estamos evitando la posibilidad de error, ya que no tendremos que formular una condición.</p>

<p>Esta solución la encontré en un hilo el de Stack Overflow <a href="http://stackoverflow.com/questions/1080904/how-can-i-lookup-a-java-enum-from-its-string-value">how can I lookup a Java enum
from its string value?</a>.
Lo que pretende esta solución es crear una estructura de datos, y cuando se quiera transformar
un <code>String</code> en un valor del enumerado, simplemente se consulte esa estructura de datos.</p>

<p>La estructura de datos será un <code>Map</code> estático, que se rellenará en un bloque estático y
consultaremos en nuestro método <code>fromString</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">[...]</span>
</span><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">States</span><span class="o">&gt;</span> <span class="n">dictionary</span><span class="o">;</span>
</span><span class='line'><span class="kd">static</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">dictionary</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">States</span><span class="o">&gt;();</span>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">States</span> <span class="n">state</span> <span class="o">:</span> <span class="n">values</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">dictionary</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="na">value</span><span class="o">;</span> <span class="n">state</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">[...]</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="n">States</span> <span class="nf">fromString</span><span class="o">(</span><span class="n">String</span> <span class="n">fromValue</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">States</span> <span class="n">state</span> <span class="o">=</span> <span class="n">dictionary</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">fromValue</span><span class="o">);</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">&quot;Wrong value: &quot;</span> <span class="o">+</span> <span class="n">fromValue</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">state</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">[...]</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Peligros de esta última solución</h2>

<p>En Stack Overflow, un comentario a la respuesta donde encontré la solución sugiere que esta solución
puede causar problemas debido al classloader.</p>

<p>Pero he investigado un poco el tema, y parece que el comentario es erróneo, al menos para el
uso de los enumerados que estoy exponiendo aquí. Según el
<a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#d5e12253">ejemplo 8.9.2-1 de la especificación del java</a>,
primero se inicializan los valores del enumerado, luego la variable estática y finalmente
se ejecuta el bloque de código estático, estando ya todos los valores del enumerado
inicializados.</p>

<p>Aquí os dejo unos cuantos enlaces a que confirman que la última solución es correcta:</p>

<ul>
<li><a href="http://blog.deepincode.com/2006/12/bootstrapping-static-fields-within-enums">Bootstrapping static fields within enums</a> y en enlace encontrado en ese mismo post: <a href="http://blog.deepincode.com/2006/11/type-safe-enumerations-in-java-50">Type Safe Enumerations in Java 5.0</a> (buscar al final de este último post).</li>
<li>Otro hilo de Stack Overflow, <a href="http://stackoverflow.com/questions/6827987/when-are-these-class-and-subclass-static-blocks-executed-for-an-enum">When are these class and subclass static blocks executed (for an Enum)?</a> que me lleva al recurso definitivo:</li>
<li><a href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#d5e12253">Java Language Specification - Example 8.9.2-1</a>: Si la documentación de Oracle sobre java es errónea, apaga y vámonos.</li>
</ul>


<h2>Otras soluciones</h2>

<p>Por supuesto que existen otras soluciones, quizá mejores que la última que propongo, pero
no he querido hacer más largo este post y he querido centrarme en proponer una alternativa
a los métodos <code>.name()</code> y <code>.valueOf()</code>, pertenecientes al propio enumerado.</p>

<p>Es por esto por lo que he descartado usar clases externas para formatear o parsear el
enumerado, lo cual me habría hecho llegar a otras soluciones bien distintas. Pero si crees
que tu solución es muchísimo mejor que ésta, déjame un comentario, será bienvenido.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[solveet: cifrado cesar en python]]></title>
    <link href="http://rchavarria.github.com/blog/2012/12/19/solveet-cifrado-cesar-en-python/"/>
    <updated>2012-12-19T12:31:00+01:00</updated>
    <id>http://rchavarria.github.com/blog/2012/12/19/solveet-cifrado-cesar-en-python</id>
    <content type="html"><![CDATA[<p>Me gusta resolver problemas de programación regularmente para mejorar como programdor, y para ello uso
la página <a href="http://solveet.com">Solveet</a>. El problema que he solucionado esta semana es el del
<a href="http://www.solveet.com/exercises/Cifrado-Cesar/145">Cifrado César</a>, y está englobado en la iniciativa
<a href="http://12meses12katas.com/">12meses12katas</a> en la me gusta participar.</p>

<p>El <em>cifrado César</em> es muy simple: es un tipo de cifrado por sustitución en el que una letra en el texto
original es reemplazada por otra letra que se encuentra un número fijo de posiciones más adelante
en el alfabeto.</p>

<p>Decidí usar <strong>python</strong> para este problema porque quería profundizar un poco más en este lenguaje, que lo
tengo muy verde y he escuchado maravillas de él, pero gracias a la solución del problema he aprendido
un par de cosas del lenguaje: uso de la función <code>map</code>, y las funciones <code>str.maketrans</code> y <code>str.translate</code>.</p>

<!-- more -->


<h2>Primera aproximación</h2>

<p>Debido a mi poco conocimiento del lenguaje, mi
<a href="http://www.solveet.com/exercises/Cifrado-Cesar/145/solution-1076">primera aproximación</a>
al problema no es muy elegante, y tampoco usa muchas de las fortalezas de python. La verdad es que es
una solución más al estilo de un lenguaje que conozco bastante mejor, Java.</p>

<p>Así pues, una vez publiqué mi solución, decidí echarle un vistazo a soluciones de otros usuarios.
Encontré varias en python, y de ellas aprendí un par de cosas:</p>

<h2>Uso de la función <code>map</code></h2>

<p>Python proporciona la función <code>map(function, iterable, ...)</code>
(<a href="http://docs.python.org/3.3/library/functions.html#map">documentación</a>), la cual llama a la función
<code>function</code> para cada uno de los elementos de <code>iterable</code> (se pueden usar uno o varios iterables).</p>

<p>En un principio había pensado usar esta función. <code>function</code> sería el método que realiza el cifrado
carácter a carácter e <code>iterable</code> sería la cadena de texto a cifrar. Pero el método que cifra necesita
otro argumento, el desplazamiento, y no fuí capaz de averiguar por mí mismo cómo pasar este argumento
a mi método usando <code>map</code>.</p>

<p>Lo descubrí gracias a la solución de <a href="http://www.solveet.com/exercises/Cifrado-Cesar/145/solution-1052">climens</a>,
y aprovechando lo aprendido, mi solución ahora quedaría así:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">string</span> <span class="kn">import</span> <span class="n">ascii_lowercase</span> <span class="k">as</span> <span class="n">alphabet</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">shift</span><span class="p">(</span><span class="n">character</span><span class="p">,</span> <span class="n">offset</span><span class="p">):</span>
</span><span class='line'>  <span class="n">index</span> <span class="o">=</span> <span class="n">alphabet</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">character</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">index</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">):</span> <span class="k">return</span> <span class="n">character</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">alphabet</span><span class="p">[(</span><span class="n">index</span> <span class="o">+</span> <span class="n">offset</span><span class="p">)</span> <span class="o">%</span> <span class="nb">len</span><span class="p">(</span><span class="n">alphabet</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">cipher</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">offset</span><span class="p">):</span>
</span><span class='line'>  <span class="n">ciphered</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="n">shift</span><span class="p">,</span> <span class="n">message</span><span class="p">,</span> <span class="p">[</span><span class="n">offset</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">message</span><span class="p">))</span>
</span><span class='line'>  <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">ciphered</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">decipher</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">offset</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">cipher</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="n">offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># simple tests</span>
</span><span class='line'><span class="k">assert</span> <span class="s">&quot;ibm&quot;</span> <span class="o">==</span> <span class="n">cipher</span><span class="p">(</span><span class="s">&quot;hal&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">assert</span> <span class="s">&quot;hal&quot;</span> <span class="o">==</span> <span class="n">decipher</span><span class="p">(</span><span class="s">&quot;ibm&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>El <em>truco</em> está en que a la función <code>map</code> le paso dos <code>iterables</code>: la cadena de texto, y un array de enteros
de la misma longitud y cuyos elementos son todos iguales, el desplazamiento. <strong>¡Qué sencillo ahora que lo
sé!</strong></p>

<h2>Funciones <code>str.maketrans</code> y <code>str.translate</code></h2>

<p>Desconocía completamente la existencia de estas dos funciones, pero parecen haber sido diseñadas exclusivamente
para el <em>cifrado César</em>. Las descubrí gracias a la solución de
<a href="http://www.solveet.com/exercises/Cifrado-Cesar/145/solution-1038">drabor</a></p>

<p><code>str.maketrans</code> (<a href="http://docs.python.org/3.3/library/stdtypes.html#str.maketrans">documentación</a>)
crea un mapa para ser usado en <code>str.translate</code>
(<a href="http://docs.python.org/3.3/library/stdtypes.html#str.translate">documentación</a>),
y ésta, al ser llamada sobre una cadena de caracteres, devuelve otra cadena donde cada carácter ha sido
<em>transladado</em> según el mapa creado con <code>maketrans</code>.</p>

<p>Ahora sólo hace falta crear el mapa. Uso dos iterables: el alfabeto original, y el alfabeto transladado tantas
posiciones como diga el desplazamiento del cifrado. De esta forma, con desplazamiento <code>1</code>, la letra <code>a</code>
corresponderá con la <code>b</code> y así sucesivamente. Pero todo ese trabajo lo hará <code>translate</code>, no nosotros.</p>

<p>Así queda la solución:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">string</span> <span class="kn">import</span> <span class="n">ascii_lowercase</span> <span class="k">as</span> <span class="n">alphabet</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">cipher</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">offset</span><span class="p">):</span>
</span><span class='line'>  <span class="n">dictionary_mapping</span> <span class="o">=</span> <span class="nb">str</span><span class="o">.</span><span class="n">maketrans</span><span class="p">(</span><span class="n">alphabet</span><span class="p">,</span> <span class="n">alphabet</span><span class="p">[</span><span class="n">offset</span><span class="p">:]</span> <span class="o">+</span> <span class="n">alphabet</span><span class="p">[:</span><span class="n">offset</span><span class="p">])</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">message</span><span class="o">.</span><span class="n">translate</span><span class="p">(</span><span class="n">dictionary_mapping</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">decipher</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="n">offset</span><span class="p">):</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">cipher</span><span class="p">(</span><span class="n">message</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span> <span class="o">*</span> <span class="n">offset</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># simple tests</span>
</span><span class='line'><span class="k">assert</span> <span class="s">&quot;ibm&quot;</span> <span class="o">==</span> <span class="n">cipher</span><span class="p">(</span><span class="s">&quot;hal&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">assert</span> <span class="s">&quot;hal&quot;</span> <span class="o">==</span> <span class="n">decipher</span><span class="p">(</span><span class="s">&quot;ibm&quot;</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Conclusión</h2>

<p>Cualquiera de las dos soluciones me parece mucho mejor que la mía inicial, y me parecía que debía compartir
lo aprendido al solucionar este problema.</p>

<p>Y tú, ¿Conoces python? ¿Te apetece participar en <a href="http://solveet.com">solveet</a>?
¿Tienes alguna sugerencia para mejorar estas soluciones? Deja algún comentario. Si es respetuoso,
será bienvenido.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[solveet: Torres de Hannoi]]></title>
    <link href="http://rchavarria.github.com/blog/2012/12/12/solveet-torres-de-hannoi/"/>
    <updated>2012-12-12T09:35:00+01:00</updated>
    <id>http://rchavarria.github.com/blog/2012/12/12/solveet-torres-de-hannoi</id>
    <content type="html"><![CDATA[<p>Simplemente para practicar y mejorar mis habilidades como programador, me gusta resolver problemas
de programación regularmente. Hace un tiempo conocí la página <a href="http://solveet.com">Solveet</a>, y desde
entonces intento aportar semanalmente alguna que otra solución a los problemas propuestos por otros
profesionales del desarrollo software.</p>

<p><img class="right" src="http://upload.wikimedia.org/wikipedia/commons/6/60/Tower_of_Hanoi_4.gif" width="320" height="125" title="By André Karwath aka Aka, Own work, CC-BY-SA-2.5, via Wikimedia Commons" ></p>

<p>El problema que he solucionado esta semana es el de las
<a href="http://www.solveet.com/exercises/Torres-de-Hannoi/72">Torres de Hannoi</a>, todo un clásico en el
desarrollo software, y en este post intento describir detalladamente cómo he llegado a mi solución.</p>

<!-- more -->


<h2>Introducción</h2>

<p>El punto de partida ha sido esta entrada en la wikipedia acerca de las
<a href="http://es.wikipedia.org/wiki/Torres_de_Han%C3%B3i">Torres de Hannoi</a> donde explica de una forma muy
básica la forma de solucionarlo. Ahora sólo hay que implementarlo.</p>

<p>Decidí solucionar el problema en javascript, para aprender más sobre este lenguaje, y decidí solucionar
el problema de forma iterativa, ya que me pareció más sencilla que la forma recursiva. Y ya que estoy
practicando, intenté llegar a la solución definitiva practicando TDD.</p>

<p>Puedes ver mi solución publicada en <a href="http://www.solveet.com/exercises/Torres-de-Hannoi/72/solution-1051">solveet</a>,
así como el código completo de la solución y los tests en este repositorio de
<a href="https://github.com/rchavarria/solveet-problems/tree/master/hannoi-js">github</a>.</p>

<h2>Manos a la obra</h2>

<p>La parte más fácil es mover el anillo más pequeño. Éste hay que moverlo siempre en los pasos impares,
y siguiendo siempre un de estas dos secuencias:</p>

<ul>
<li>Si el número de anillos es impar, hay que moverlo a las siguientes torres o varillas:
destino -> auxiliar -> origen, y así indefinidamente</li>
<li>Si el número de anillos es par, la secuencia será: auxiliar -> destino -> origen, &#8230;</li>
</ul>


<h2>Movimientos en los pasos pares</h2>

<p>En los pasos pares hay que mover los anillos que no son el anillo más pequeño. El anillo a mover dependerá
del número de anillos de los que conste el problema.</p>

<p>Al utilizar TDD, he ido descubriendo poco a poco cómo escoger el anillo a mover y dónde moverlo:</p>

<ul>
<li>1 anillo: no hace falta mover otros anillos ya que con un movimiento está solucionado.</li>
<li>2 anillos: solo es posible mover el anillo más grande a la torre destino, ya que el anillo más pequeño lo
habremos movido en el primer movimiento a la torre auxiliar.</li>
<li>3 anillos: desarrollando manualmente todos los movimientos, el anillo a mover es aquel que no está en la
torre destino y que tampoco es el anillo más pequeño.</li>
<li>4 anillos: desarrollando otra vez manualmente todos los movimientos, el anillo a mover es el menor anillo
(sin ser el más pequeño) y se deberá mover a la única torre posible. Esta torre la sabremos porque es aquella
torre que no contiene ni el anillo más pequeño ni el anillo a mover.</li>
</ul>


<p>A partir de los 4 anillos, la solución ya funciona con cualquier número de anillos.</p>

<h4>Reconocimientos</h4>

<ul>
<li>Imagen By André Karwath aka Aka (Own work) <a href="http://creativecommons.org/licenses/by-sa/2.5">CC-BY-SA-2.5</a>, via <a href="http://commons.wikimedia.org/wiki/File%3ATower_of_Hanoi_4.gif">Wikimedia Commons</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Por qu&eacute; cambi&eacute; mi blog en wordpress.com]]></title>
    <link href="http://rchavarria.github.com/blog/2012/12/03/por-que-cambie-mi-blog-en-wordpress-com/"/>
    <updated>2012-12-03T09:44:00+01:00</updated>
    <id>http://rchavarria.github.com/blog/2012/12/03/por-que-cambie-mi-blog-en-wordpress-com</id>
    <content type="html"><![CDATA[<p>Desde que leí el post de <a href="http://arturoherrero.com/about">Arturo Herrero</a>,
<a href="http://arturoherrero.com/2010/12/20/blogging-like-a-hacker">Blogging like a hacker</a>,
siempre me ha picado el gusanillo de hacer algo similar.</p>

<p>Arturo habla de <a href="http://cloudhead.io/toto">toto</a> y <a href="http://heroku.com">heroku</a>,
mientras que yo estoy usando <a href="http://jekyllrb.com">jekyll</a>, <a href="http://pages.github.com">github:pages</a> y
<a href="http://octopress.org/docs">octopress</a>, pero básicamente se trata de lo mismo: de bloguear
como si estuvieras escribiendo código.</p>

<p>La gota que colmó el vaso fué cuando me encontré un mensaje del administrador de wordpress
diciéndome que había violado alguno de los términos y condiciones de su <em>contrato</em>
(llamémoslo así).</p>

<!-- more -->


<p><img class="center" src="http://rchavarria.github.com/images/wordpress/wordpress-message.png" width="720" height="152"></p>

<p>En este mensaje básicamente me vienen a decir que no cumplo lo que wordpress dice en su Terms of Service
o en su Advertising policy, pero no especifican nada más.</p>

<p>Por el párrafo posterior, creo entender que wordpress piensa que uso mi blog para hacer publicidad
a otras empresas.</p>

<p>La verdad es que últimamente estaba publicando muchos posts de recopilación de enlaces, <em>enlaces de los
martes</em>, le llamaba yo (y le voy a seguir llamando):</p>

<ul>
<li><a href="http://rchavarria.wordpress.com/2012/11/27/enlaces-de-los-martes-27-11-2012">Enlaces del 27 de noviembre de 2012</a></li>
<li><a href="http://rchavarria.wordpress.com/2012/11/06/enlaces-de-los-martes-06-11-2012">Enlaces del 6 de noviembre de 2012</a></li>
</ul>


<p>Y así unos cuantos post más.</p>

<p>Escribí a wordpress comentando la situación, y parece que me entendieron y que decidieron desbloquearlo,
pero esto fué a los 2 días, así que me imagino que si antes tenía pocas visitas al blog (una media no
superior a 20 diarias), después de este bloqueo temporal, no me va a querer leer ni Rita.</p>

<p>Si esto no fuera suficiente, las visitas al blog se han desplomado (si es que se puede considerar
desplome caer desde prácticamente cero), y para muestra, una imagen de las visitas de los últimos
días. Como referencia diré que el día en que wordpress decidión bloquear mi blog fue el dia 27 de noviembre.</p>

<p><img class="center" src="http://rchavarria.github.com/images/wordpress/wordpress-visits.png" width="524" height="226"></p>

<p>Por estas quejas, y sobretodo, porque me apetece bloguear como un hacker, bienvenido a mi <em>nuevo</em> blog.
Ahora sólo queda migrar los artículos del antiguo a éste. Uff! Qué pereza. Poco a poco amigo.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Post Inicial Del Blog]]></title>
    <link href="http://rchavarria.github.com/blog/2012/11/28/post-inicial-del-blog/"/>
    <updated>2012-11-28T00:00:00+01:00</updated>
    <id>http://rchavarria.github.com/blog/2012/11/28/post-inicial-del-blog</id>
    <content type="html"><![CDATA[<p>﻿&#8212;
layout: page
title: &#8220;Post inicial del blog&#8221;
date: 2012-11-28 10:10
author: Rubén Chavarría
comments: true
categories: blog
published: true
footer: false</p>

<h2>sidebar: true</h2>

<p>Este es el post inicial, para ir familiarizándome con Octopress, Jekyll,
github:pages, y el resto de herramientas para bloguear como un hacker :P</p>

<p>¿Por qué cambiar de blog cuando ya tienes <a href="http://rchavarria.wordpress.com">uno</a>?
Encuentra mis razones en el primer post serio:
<a href="http://rchavarria.github.com/blog/2012/12/03/por-que-cambie-mi-blog-en-wordpress-com">¿Por qué cambié mi blog de wordpress?</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Agile principles, patterns and practices in C#]]></title>
    <link href="http://rchavarria.github.com/blog/2012/11/22/agile-principles-patterns-and-practices-in-c/"/>
    <updated>2012-11-22T11:22:00+01:00</updated>
    <id>http://rchavarria.github.com/blog/2012/11/22/agile-principles-patterns-and-practices-in-c</id>
    <content type="html"><![CDATA[<h4>Agile principles, patterns and practices in C#</h4>




<h5>Robert C. Martin</h5>


<p><img class="right" src="http://vig-fp.prenhall.com/bigcovers/0131857258.jpg" width="300" height="222" title="Agile principles, patterns and practices" ></p>

<h2>Por qué lo he leído</h2>


<p>Lo he leido porque me he encontrado referencias a este libro en libros anteriores que he leído, en blogs sobre desarrollo de software que suelo leer y en otros muchos sitios relacionados con el software. Si encuentro tantas referencias, será por algo, ¿no? Además, el autor es muy conocido y valorado, así que no había excusa para no leerlo.</p>

<!-- more -->




<h2>Qué esperaba</h2>


<p>Me esperaba un libro de <em>Uncle Bob™</em>. Ya he leído alguno del mismo autor, y me gusta su estilo. Algunas veces me parece un poco extremista, pero creo que es así porque cree en lo que hace y eso es lo que predica. Cuando creo que exagera, no le hago mucho caso y sigo hacia adelante, ya está.</p>

<p>Esperaba una descripción de las metodologías ágiles aplicadas al momento de escribir software y encontré &#8230;</p>

<h2>Qué encontré</h2>


<p>&#8230; un pedazo de ladrillo! Me asusté cuando vi la extensión del libro, pero enseguida entendí el porqué. El libro está lleno de diagramas <a href="http://es.wikipedia.org/wiki/Lenguaje_Unificado_de_Modelado">UML</a> y de código fuente (primero los tests, por supuesto). Así que es normal que sea tan largo.</p>

<p>En cuanto al contenido, me gustó mucho la descripción que hace de muchos patrones de diseño, (incluso he aprendido alguno que no conocía). En el libro también podrás encontrar una descripción detallada de los principios <a href="http://es.wikipedia.org/wiki/SOLID_(object-oriented_design)">SOLID</a> y de otros principios sobre cómo organizar y empaquetar los distintos componentes de tu aplicación (clases, paquetes, namespaces, lo que sea).</p>

<h2>Conclusiones</h2>


<p>Aunque el libro sea muy extenso, me ha gustado por varias razones:</p>

<ul>
    <li>He aprendido nuevos patrones de diseño.</li>
    <li>He podido profundizar sobre el patrón Model-View-Controller (ver enlaces más abajo).</li>
    <li>He encontrado una descripción muy detallada de los principios <a href="http://es.wikipedia.org/wiki/SOLID_(object-oriented_design)">SOLID.</a></li>
</ul>


<h2>Pasajes que quiero recordar de este libro</h2>


<blockquote>Un módulo que es difícil de cambiar, está roto y necesita ser arreglado, aunque funcione.</blockquote>


<blockquote>Un módulo que no comunica está roto y necesita ser arreglado.</blockquote>


<blockquote>Cuanto más conocen los programadores sobre <em>todo</em> el proyecto, más sano y más informado está el equipo que lo desarrolla.</blockquote>


<blockquote>Es el <em>big picture</em> lo que mantiene unido el sistema. Es la visión del sistema lo que hace obvia la localización y la forma de los módulos individuales. Si la forma de un módulo es inconsistente con la <em>metáfora</em>, es el módulo quien está mal, no la metáfora.</blockquote>


<blockquote>Al final, el código fuente <em>es</em> el diseño.</blockquote>


<blockquote>Se sabe que el software se está pudriendo cuando empieza a mostrar alguno de los siguientes síntomas: rigidez, fragilidad, inmovilidad, viscosidad, complejidad innecesaria, repetición innecesaria u opacidad.</blockquote>


<blockquote>El elemento más volatil en los proyectos software son los requisitos. Vivimos en un mundo de requisitos cambiantes, y nuestro trabajo es estar seguros de que nuestros software puede sobrevivir a esos cambios, así que no culpes a los requisitos cambiantes por los fallos en el software.</blockquote>


<blockquote>Los principios SOLID: <strong>S</strong>ingle responsability principle, <strong>O</strong>pen close principle, <strong>L</strong>iskov substitution principle, <strong>I</strong>nterface segregation principle, <strong>D</strong>ependency inversion principle.</blockquote>


<blockquote>Un motivo de cambio es un motivo de cambio sólo cuando el cambio ocurre, mientras tanto no.</blockquote>


<blockquote><em>Strategy </em>and <em>Template method</em> son las formas más comunes de satisfacer Open closed principle. Estos patrones representan una clara separación de la funcionalidad genérica de la implementación detallada de esa funcionalidad.</blockquote>


<blockquote><em>Fool me once, shame on you. Fool me twice, shame on me.</em> Inicialmente, escribimos nuestro código pensando que no va a cambiar. Cuando ocurre un cambio, implementamos abstraciones que nos protegen de futuros cambios de esa misma naturaleza.</blockquote>


<blockquote>Liskov substitution principle nos lleva a una importante conclusión: un modelo, visto aisladamente, no puede ser validado significativamente. La validez de un modelo puede ser expresado solo en términos de sus clientes.</blockquote>


<blockquote>Liskov substitution principle clarifica que en la programación orientada a objetos, una relación de herencia pertenece al comportamiento que puede ser asumido y que los clientes dependen de este comportamiento, lo contrario de lo que normalmente se cree, que la herencia pertenece al estado</blockquote>


<blockquote>El diseño de grandes sistemas depende críticamente de un buen diseño de componentes (paquetes, entregables, &#8230;), de esta forma, los equipos individuales puede enfocarse en componentes aislados en lugar de preocuparse por el sistema completo.</blockquote>


<blockquote>Las interfaces pertenecen al cliente que las usa, no a la implementación. El enlace lógico entre el cliente y el interfaz es más fuerte que la relación entre el interfaz y sus implementaciones. Es tan fuerte que no tiene sentido desplegar el cliente sin el interfaz, pero sí que lo tiene desplegar el interfaz sin sus implementaciones.</blockquote>




<h2>Otras lecturas y enlaces relacionadas</h2>


<ul>
    <li>[pdf] <a href="http://www.objectmentor.com/resources/articles/TheHumbleDialogBox.pdf">The humble dialog box</a>: cómo separar la lógica de negocio de la interfaz gráfica, de Michael Feathers.</li>
    <li><a href="http://www.martinfowler.com/eaaDev/ModelViewPresenter.html">Patrón model-view-presenter</a>: artículo de Martin Fowler que me llevó a éste de <a href="http://www.martinfowler.com/eaaDev/uiArchs.html">Arquitecturas GUI</a>.</li>
    <li><a href="http://apagayvuelveaencender.blogspot.com.es/2012/11/metodologias-agiles-me-las-creo-o-no-me.html">Metodologías ágiles: ¿me las creo o no me las creo?</a>: excelente post de <a href="http://twitter.com/andres_viedma">Andrés Viedma</a> que me viene ni al pelo como enlace relacionado con el libro y donde se explican los cuatro principios del desarrollo de software ágil</li>
    <li>Hace ya un tiempo, leí sobre <a href="http://rchavarria.github.com/blog/2010/03/04/principios-y-patrones-de-diseno/">principios y patrones de diseño</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[microtip] git: ramas locales y remotas]]></title>
    <link href="http://rchavarria.github.com/blog/2012/11/19/microtip-git-ramas-locales-y-remotas/"/>
    <updated>2012-11-19T11:19:00+01:00</updated>
    <id>http://rchavarria.github.com/blog/2012/11/19/microtip-git-ramas-locales-y-remotas</id>
    <content type="html"><![CDATA[<p><a href="http://es.wikipedia.org/wiki/Git"><strong>git</strong></a> es un sistema de control de version distribuido (<a href="http://en.wikipedia.org/wiki/Distributed_version_control_system">DVCS</a> por sus siglas en inglés), y una de sus características que lo hacen más atractivo es su gran rapidez para trabajar con ramas (<em>branches</em>).</p>




<p>En este pequeño post, que he llamado <strong>microtip</strong>, veremos cómo crear una rama, movernos entre ramas, realizar sencillos <em>merge</em> entre ramas y cómo hacer que estos cambios se vean reflejados en un repositorio remoto para poder compartirlo con nuestros compañeros de proyecto.</p>




<!-- more -->




<p>Para comenzar a trabajar en una rama nueva, podemos hacerlo de dos formas:
<ol>
    <li>Crear la rama y movernos a ella</li>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git branch nueva_rama
</span><span class='line'>git checkout nueva_rama</span></code></pre></td></tr></table></div></figure>
    <li>Movernos a una rama y crearla en caso de que no exista</li>
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout -b nueva_rama</span></code></pre></td></tr></table></div></figure>
</ol>
</p>




<p>Ok, ya estamos trabajando en la nueva rama. Ahora podemos añadir ficheros, hacer commit de cambios que hayamos hecho, &#8230;</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add nuevo_fichero.txt
</span><span class='line'>git commit -m &quot;mensaje para el commit&quot;</span></code></pre></td></tr></table></div></figure>




<p>Una vez tenemos los cambios deseados en nuestra rama, podemos dejarlo así, de forma que será una rama privada, solamente nosotros tendremos acceso a ella, o podremos hacerla pública a través de algún repositorio remoto para que sea accesible por nuestros compañeros:</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push origin new_branch</span></code></pre></td></tr></table></div></figure>




<p style="font-size:75%;text-align:right;">Nota: este comando supone que <em>origin</em> es un remote válido para git.</p>




<p>Si queremos pasar estos cambios otra rama, por ejemplo, master: primero nos moveremos a esa rama y luego traemos los cambios a esta rama:</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git checkout master
</span><span class='line'>git merge development master</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mi experiencia en la CAS2012]]></title>
    <link href="http://rchavarria.github.com/blog/2012/11/08/mi-experiencia-en-la-cas2012/"/>
    <updated>2012-11-08T10:08:00+01:00</updated>
    <id>http://rchavarria.github.com/blog/2012/11/08/mi-experiencia-en-la-cas2012</id>
    <content type="html"><![CDATA[<p>Más vale tarde que nunca. Tenía ganas de escribir mi experiencia en la <a href="http://conferencia2012.agile-spain.org/"><strong>CAS2012</strong></a> (mi primera CAS) pero todavía no había encontrado el hueco. Supongo que quería leer alguna experiencia de otros asistentes, o será mi alter ego perezoso, quién sabe.</p>

<p>La verdad es que volví de <a href="http://es.wikipedia.org/wiki/C%C3%A1ceres">Cáceres</a> encantadísimo, motivadísimo, y cualquier otro adjetivo que termine en <em>-ísimo</em>. ¡Qué pasada! Como ya he dicho antes, ésta ha sido mi primera CAS, y espero que se repita cada año. Sé que será difícil, pero lo intentaré.</p>

<!-- more -->


<p>Aunque fuera mi primera CAS, no me sentí para nada un extraño. Todo lo contrario, el ambiente que respiré fue de un profundo compañerismo. Era como si todos supiéramos que estábamos allí por algo, y creo que así era. Yo, al menos, acudí a la CAS porque sentía (y siento) una cierta atracción por el mundo agile, y en Cáceres noté esto mismo en todos y cada uno de los asistentes. <a href="https://twitter.com/jmbeas">Jose Manuel Beas</a> dijo que la palabra que más estaba escuchando era <strong>confianza</strong>. Yo creo que la que más escuché fue <strong>tribu</strong>. Y así me sentí yo, como perteneciente a una <strong>tribu</strong>.</p>

<p>Después de estos sentimentalismos me gustaría agradecer a la organización de la CAS su duro trabajo, la acertada elección del lugar de celebración del evento, la visita guiada por la ciudad, la organización de la cena, &#8230; tantas cosas. Los agradecimientos también a los patrocinadores, sin los cuales el evento no habría sido posible. Muchas gracias a todos por darnos este <strong>eventazo</strong>.</p>

<p>No se puede hablar de este tipo de eventos sin mencionar a la gente. Fuí a la CAS sin conocer a nadie, sólo, a la aventura, pero con ganas de conocer a profesionales que admiro por su trabajo. Y así pude conocer a gente como <a href="https://twitter.com/kinisoftware">@kinisoftware</a>, <a href="https://twitter.com/ialcazar">@ialcazar</a>, <a href="https://twitter.com/xquesada">@xquesada</a>, <a href="https://twitter.com/oyabun">@oyabun</a> y <a href="https://twitter.com/alejandropgarci">@alejandropgarci</a>. Y también tuve el placer de conocer a gente que antes no conocía como <a href="https://twitter.com/anuskiaranda">@anuskiaranda</a>, <a href="https://twitter.com/rferlei">@rferlei</a>, <a href="https://twitter.com/maicatrinidad">@maicatrinidad</a>, <a href="https://twitter.com/FPerezP">@FPerezP</a>, <a href="https://twitter.com/drobur">@drobur</a>, <a href="https://twitter.com/masaKmaeda">@masaKmaeda</a>, <a href="http://es.linkedin.com/in/joaoggama">Joao Gama</a>, <a href="https://twitter.com/eidrien">@eidrien</a>. ¡Me alegro de haberos conocido!</p>

<p>Y por último, unas cuantas frases escuchadas en las charlas a las que asistí que me gustaría destacar, no están todas las mejores, pero son las que más me impactaron y me gustaría recordar:</p>

<blockquote>Abre tu mente, abraza el cambio, haz un esfuerzo <strong>consciente</strong> de no rechazar cambios de forma instintiva. ~ <em>Masa K Maeda</em></blockquote>


<blockquote>La tiranía de la <a href="http://en.wikipedia.org/wiki/J_curve">curva J</a>, al inicio de la introducción de un cambio, todo irá a peor. ~ <em>Rodrigo Corral</em></blockquote>


<blockquote>Los desarrolladores son los <strong>únicos</strong> agentes de oxidación del software, ya que son los únicos que lo modifican. ~ <em>Alejandro Pérez</em></blockquote>


<blockquote>Deja que las personas sean creativas, da libertad al equipo para ser creativo. ~ <em>Luis Fraile</em></blockquote>


<blockquote>Mejor cuanto más caliente es la comunicación: cara a cara -&gt; videoconferencia -&gt; teléfono -&gt; chat -&gt; mail -&gt; nada ~ <em>Israel Alcázar</em></blockquote>


<blockquote>Los beneficios en la empresa son una consecuencia de los trabajadores, porqué no aportarles: transparencia, compromiso, confianza, autonomía, respeto. ~ <em>Jose Ramón Díaz</em></blockquote>




<p>Si quieres conocer más, en el siguiente <a href="https://docs.google.com/document/d/1SOxDNJd0c_14W2J1ZCyDEJp6NVYc1F5UQRpL7WyjoGo/edit">documento</a> se están recopilando enlaces y recursos sobre la CAS2012.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[En el principio... fue la l&iacute;nea de comandos]]></title>
    <link href="http://rchavarria.github.com/blog/2012/10/25/en-el-principio-fue-la-linea-de-comandos/"/>
    <updated>2012-10-25T10:25:00+02:00</updated>
    <id>http://rchavarria.github.com/blog/2012/10/25/en-el-principio-fue-la-linea-de-comandos</id>
    <content type="html"><![CDATA[<h4>En el principio&#8230; fue la línea de comandos</h4>




<h5>Neal Stephenson</h5>


<p><img class="right" src="http://curiosoperoinutil.com/wp-content/uploads/2006/12/Neal-Stephenson-En-el-principio-era-la-linea-de-comandos.jpg" width="198" height="296" title="En el principo fue la linea de comandos" ></p>

<h2>Por qué lo he leído</h2>




<p>Había oído hablar de este libro en la universidad, y me picó la curiosidad, pero nunca me había decidido a encontrarlo y leerlo. Pero hace poco, viendo uno de los <a href="http://www.youtube.com/user/desarrollowebcom?feature=watch">hangouts de Desarrollo Web</a>, lo comentaron y no perdí ni un minuto. Lo descargué y a leer se ha dicho.</p>


<p></p>

<!-- more -->




<h2>Qué esperaba</h2>




<p>No recuerdo muy bien qué esperaba. Siempre había oído hablar de este libro en contextos de sistemas operativos, ordenadores antiguos. Temas más bien históricos. Así que, lo que esperaba era una especie de <em>Historia de los sistemas operativos</em></p>




<h2>Qué encontré</h2>




<p>Neal Stephenson cuenta una historia, la historia de los sistemas operativos, no hasta nuestros días, porque el libro tiene sus añitos, pero sí una historia que resulta bastante actualizada. La verdad es que todo aquello que cuenta sobre Apple y Microsoft, todavía sigue vigente hoy en día. Hay más actores, sí (Google por ejemplo), el hardware es muy distinto (móviles, tablets), pero la esencia persiste todavía.</p>




<h2>Conclusiones</h2>




<p>En definitiva, el libro me ha encantado. No es sólo porque el autor critica a varias super-empresas (que siempre gusta ver cómo reciben los poderosos), no es sólo por el tono de humor que usa Neal, no es sólo porque es un libro muy geek. Es por todo eso y además porque es un clásico, y sólo leyéndolo se entiende por qué es un clásico.</p>


<p>Si a eso le añadimos que lo puedes adquirir libremente y que está disponible una traducción al castellano, ya no hay escusa para no leerlo.</p>


<p>Un libro muy recomendable, que se puede leer de una sentada (o casi)</p>




<h2>Pasajes que quiero recordar de este libro</h2>




<blockquote>Solo hay dos modos de vender un producto (software): precio y funcionalidades. Cuando los sistemas operativos son gratuitos, las compañías de sistemas operativos no pueden competir mediante precio, así que compiten mediante las funcionalidades. [&#8230;] Esto explica por qué Microsoft añadió un navegador a su sistema operativo, por ejemplo.</blockquote>




<blockquote>Así como la interfaz de línea d ecomandos abre un canal mucho más direcot y explícito entre usuario y máuqina que la GUI, lo mismo suced con palabras, escritor y lector comparado con Disney (que es todo imagen)</blockquote>




<blockquote>La Disney y Apple/Microsoft están en el mismo negocio: cortocircuitar la laboriosa y explícita comunicción verbal con interfaces de disño caro.</blockquote>




<blockquote>El problema es que una vez que nos hemos librado d ela capacidad de juzgar lo bueno y lo malo, loverdadero y lo falso, ya no queda cultura. La capacidad de juicio, de creencia, es el fin mismo d etener una cultura.</blockquote>




<blockquote>¿Por qué triunfan Miscrosoft y Apple si nos engañan con sus GUI&#8217;s? Porque estamos demasiado ocupados hoy en día como para comprenderlo todo con detalle. Y es mejor comprenderlo por una interfaz, oscuramente, que no comprenderlo en absoluto.</blockquote>




<blockquote>Lo primero que hicieron los hackerrs de Apple cuando consiguieron que MacOS fuese funcional fue recrear la interfaz de Unix, para poder hacer algún trabajo útil. En aquel momento, en lo que concernía a los hackers de Apple, la muy pregonada GUI del Mac era un impedimento, algo a evitar [&#8230;]</blockquote>




<blockquote>Unix es el <a href="https://www.google.es/search?q=hole+hawg&amp;hl=es&amp;sa=X&amp;prmd=imvns&amp;tbm=isch&amp;tbo=u&amp;source=univ&amp;ei=xMF-UJ_zNJOyhAfVr4G4Bw&amp;ved=0CCMQsAQ&amp;biw=1280&amp;bih=933">hole hawg</a> de los sistemas operativos.</blockquote>


<p></p>

<blockquote>Al tratar de comprender el fenómeno Linux tenemos que contemplar no a un único innovador, sino na especia de extraña Trinidad: Linus Torvals (por Linux), Richard Stallman (por las herramientas GNU) y Bill Gates (por el abaratamiento del hardware). Elimínese cualquiera d elos 3, y Linux no existiría.</blockquote>




<blockquote>A menudo, este tipo de archivos pueden encontrarse en un directorio con el nombre <code>/src</code>, que es la <em>abreviatura hebraica</em> del hacker para source, fuente.</blockquote>




<blockquote>Si hubiera algún ordenador, en algún lugar, que pudiera escupir unikversos con valores aleatoriamente escogidos para sus constantes fundamentales, por cada universo como el nuestro produciría 10^229 universos fallidos [&#8230;] así que cada vez que tu meñique pulsa ENTER, lo estás intentando.</blockquote>




<h2>Otras lecturas y enlaces relacionadas</h2>




<ul>
    <li>Página de <a href="http://biblioweb.sindominio.net/telematica/command_es">descarga del libro</a></li>
    <li><a href="http://es.wikipedia.org/wiki/En_el_principio_fue_la_l%C3%ADnea_de_comandos">Entrada del libro en la Wikipedia</a></li>
    <li>Otro libro bastante conocido de Neal Stephenson es <a href="http://es.wikipedia.org/wiki/Criptonomic%C3%B3n">Criptonomicón</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lean software development]]></title>
    <link href="http://rchavarria.github.com/blog/2012/10/10/lean-software-development/"/>
    <updated>2012-10-10T10:10:00+02:00</updated>
    <id>http://rchavarria.github.com/blog/2012/10/10/lean-software-development</id>
    <content type="html"><![CDATA[<h4>Lean software development</h4>




<h5>Mary Poppendieck, Tom Poppendiek:</h5>


<p><img class="right" src="http://www.poppendieck.com/images/Agiletoolkit.jpg" width="250" height="332" title="Lean software development" ></p>

<h2>Por qué lo he leído</h2>


<p>Después de leer <a href="http://rchavarria.wordpress.com/2012/07/06/scrum-y-xp-desde-las-trincheras/">Scrum y XP desde las trincheras</a>, me quedé con ganas de leer algún libro más de temática Agile, de desarrollo de software siguiendo prácticas lean. Me llaman mucho la atención las metodologías ágiles de desarrollo de software, y creo que son una buena alternativa a las metodologías tradicionales (aunque voy descubriendo otras como <a href="http://www.javiergarzas.com/2012/09/metodologia-gil-fdd-1.html">FDD</a> que parecen igualmente interesantes).</p>

<p>Busqué un libro <em>antiguo</em>, alguno donde pudiera leer los inicios de estas metodologías, para así poder contextualizar todo lo que escucho y leo de las metodologías ágiles a diario.</p>

<!-- more -->




<h2>Qué esperaba</h2>


<p>Esperaba un libro dedicado exclusivamente al software, que expusiera ideas que podían parecer pasadas de moda, pero que siguieran de actualidad en algún sentido.</p>

<p>No había oído nunca nada de los autores, así que tampoco me había formado grandes espectativas, simplemente, quería conocer los inicios de las metodologías ágiles.</p>

<h2>Qué encontré</h2>


<p>Me encontré un libro muy útil, y aunque es de hace bastantes años (para tratar sobre desarrollo de software), es de total actualidad. De hecho, me sorprende que todavía haya empresas, personas, organizaciones, que no hayan oido hablar de los conceptos que se hablan en el libro.</p>

<h2>Conclusiones</h2>


<p>Me sorprendió mucho que el origen de las metodologías ágiles esté en la industria de la manufactura. Me parece difícil que una metodología haya pasado de esa industria a la del desarrollo del software. Pero como indican los autores (y es la idea principal del libro), no se pueden transladar <strong>prácticas</strong> de un entorno a otro, hay que transladar <strong>principios</strong> (ideas) y crear las nuevas prácticas para el nuevo entorno.</p>

<p>Y es de lo que trata este libro, de exponer una serie de herramientas, un <em>toolkit</em>, para ayudar a comprender y a transladar una serie de principios, que está demostrado que funcionan en una industria, al desarrollo del software.</p>

<h2>Otras lecturas y enlaces relacionadas</h2>


<ul>
    <li><a href="http://www.amazon.com/Lean-Software-Development-Agile-Toolkit/dp/0321150783">Lean software development</a>, en Amazon</li>
    <li><a href="es.wikipedia.org/wiki/Lean_software_development">Lean software development</a>, en la Wikipedia (español)</li>
    <li>Web de los autores del libro, los <a href="http://www.poppendieck.com">Poppendieck</a></li>
</ul>


<h2>Pasajes que quiero recordar de este libro</h2>


<blockquote>Los siete principios del pensamiento Lean:
<ol>
    <li>Elimina desperdicios</li>
    <li>Amplifica el aprendizaje</li>
    <li>Decide tan tarde como sea posible</li>
    <li>Entrega tan rápido como sea posible</li>
    <li>Fortalece al equipo</li>
    <li>Trabajar para que haya integridad</li>
    <li>Centrarse en el todo</li>
</ol>
</blockquote>


<blockquote>Cualquier cosa que no crea valor para el cliente es desperdicio. Y, sí, los defectos (bugs, incidencias, &#8230;) son desperdicion.</blockquote>


<blockquote>Es difícil encontrar control sin realimentación (feedback), porque la realimentación de mucho mejor control y determinismo que complicados procesos de control con algoritmos predefinidos.</blockquote>


<blockquote>En la mayoría de los casos, incrementar la realimentación, en lugar de reducirla con rigurosos procesos secuenciales, es la forma más efectiva de lidiar con entornos y proyectos de desarrollo de software en problemas.</blockquote>


<blockquote><em>Set-based software development</em>: se desarrollan varias alternativas, se comunican las restricciones (en lugar de las soluciones) y se deja que la solución emerja cumpliendo todas las restricciones.</blockquote>


<blockquote>Retrasar decisiones irreversibles mientras se reduce la incertidumbre tiene valor económico. Esto lleva a tomar mejores decisiones, limita los riesgos, ayuda a gestionar la complejidad, reduce el desperdicio y hace felices a los clientes.</blockquote>


<blockquote>Los procesos de desarrollo ágiles se pueden entender como la creación de opciones que permiten retrasar las decisiones hasta que las necesidades del cliente son mejor entendidas y haya menos riesgo.</blockquote>


<blockquote>Los marines planifican, pero no predicen. Comprenden la esencia de las situaciones, buscan simplificar las suposiciones y alternan aproximaciones. Cuando entran en una misión, la estructura organizativa se diluye, y aquellos que están en el frente, quienes tienen acceso a la información más directa, son los responsables de tomar las decisiones.</blockquote>


<blockquote>El principio &#8216;entrega tan rápido como sea posible&#8217; complemente a &#8216;decide tan tarde como sea posible&#8217;. Cuanto más rápido entregues, más podrás retrasar tus decisiones.</blockquote>


<blockquote>(hablando de los <em>pull systems</em>) en lugar de planificar, sistemas como Kanban consiguen que los jefes no intervengan porque cada persona sabe qué hacer en cada momento.</blockquote>


<blockquote>Creemos que transferir prácticas de un entorno a otro es, casi siempre, un error. En lugar de ello, uno debe entender los principios fundamentales detrás de las prácticas y transformar esos principios en nuevas prácticas para el nuevo entorno.</blockquote>


<blockquote>El mejor modo de mantener el conocimiento sobre un sistema y que sea mantenible es entregar, junto con el código, un conjunto de tests automáticos, complementados por un modelo superficial de alto nivel creado al final del esfuerzo inicial de desarrollo.</blockquote>


<blockquote>Integridad conceptual significa que los conceptos centrales de un sistema son vistos contínuos, como un todo cohesionado. La clave para alcanzarla es la efectividad en los mecanismos de comunicación desarrollados por los grupos que conforman el sistema según se van tomando las decisiones que afectan al resto de grupos.</blockquote>


<blockquote>¿De dónde ha tomado la genete la idea de que todo buen diseño ocurre al inicio de un proyecto? Mucha gente encargada de desarrollar productos entiende que los grandes diseños evolucionan con el tiempo.</blockquote>


<blockquote>¿Refactorizar es rehacer el trabajo? Mejorar un diseño durante el proceso de desarrollo no es rehacer el trabajo, es una buena práctica de diseño.</blockquote>


<blockquote>Los tests proporcionan una base en la que apoyarse para que los desarrolladores realizen cambios a lo largo de todo el proceso de desarrollo.</blockquote>


<blockquote>La metodologías tradicionales de desarrollo software tienen la manía de medir tareas complejas y desestructuradas a través de partir la tarea en otras más pequeñas. La forma de estar seguro de que todo está medido es mediante agregación, es decir, mover la medida a un nivel superior, no a un nivel inferior.</blockquote>


<blockquote>Un contrato con precio fijado donde el vendedor espera obtener beneficios de los cambios pedidos, combinado con mecanismos rigurosos de aceptación de cambios para controlar el gasto, puede doblar aproximadamente el coste y tiempo que se tarda en desarrollar un proyecto a la vez que produce un resultado de pésima calidad.</blockquote>


<blockquote>Un contrato de precio flexible está diseñado para lidiar con la incertidumbre y complejidad, pero esto no elimina el riesgo, sino que lo traslada del vendedor al cliente.</blockquote>


<h2></h2>

]]></content>
  </entry>
  
</feed>
