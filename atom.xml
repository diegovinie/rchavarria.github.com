<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2014-05-29T01:08:32+02:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mejora contínua y análisis estático de código]]></title>
    <link href="http://rchavarria.github.io/blog/2014/05/05/mejora-continua-y-analisis-estatico-de-codigo/"/>
    <updated>2014-05-05T20:00:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2014/05/05/mejora-continua-y-analisis-estatico-de-codigo</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://rchavarria.github.io/images/2014/phpcs-small.png" width="350" height="140" title="Evolución del análisis estático de código" ></p>

<p>En una de las últimas retrospectivas de mi equipo de desarrollo, estuvimos
hablando sobre la mejora contínua, y qué podríamos hacer sobre ella. Afortunadamente
usamos <em>Jenkins</em> como servidor de integración contínua y hace ya tiempo configuré
un proyecto en dicha herramienta para realizar análisis estático de código frecuentemente.</p>

<p>Pero hasta ahora no habíamos tomado ninguna decisión sobre qué hacer con ella. Y
en esta retro surgió la oportunidad.</p>

<!-- more -->


<h2>La herramienta</h2>

<p>Como herramienta de análisis estático de código usamos
<a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP_CodeSniffer</a>. La razón
principal es que es una herramienta adecuada al lenguaje que queremos analizar, y
existe un proyecto que integra esta herramienta entre otras con Jenkins
(<a href="http://phpqatools.org">PHP QA Tools</a>).</p>

<p>Una vez instalada y configurada, activamos todas las reglas de estilo disponibles
en la herramienta. Estas reglas incluyen comprobaciones para nombrado de funciones,
nombrado de ficheros, uso de constantes en PHP como <code>true</code> o <code>false</code>, o ciertas
reglas de espaciado: después del nombre de función, alineación del operador de
asignación. Multitud de ellas.</p>

<blockquote><p>Si no puedes medirlo, no puedes mejorarlo</p></blockquote>

<h2>Violaciones del estándar de código</h2>

<p><img class="center" src="http://rchavarria.github.io/images/2014/phpcs-large.png" title="Descenso del número de errores" ></p>

<p>En el momento de la conversación sobre la mejora contínua nos encontrábamos en
el máximo que se aprecia en el gráfico, unas 8000 violaciones de reglas de
estilo.</p>

<p>Y nos pusimos manos a la obra. Después de un pequeño análisis por nuestra parte,
y unos pocos diálogos (la palabra discusiones tiene un pequeño significado de
lucha que no encaja en esta situación), conseguimos bajar ese número a menos de
30. Por lo tanto, está claro que hemos conseguido alguna <strong>mejora</strong>.</p>

<h2>Qué mejoras obtuvimos</h2>

<p>En el pequeños análisis realizado por nosotros, descubrimos que algunas reglas de
estilo que teníamos activadas resultaban contradictorias. Mientras que una
obligaba a abrir llaves en la misma línea que la definición de la función:</p>

<pre><code>public function doSomething() {
</code></pre>

<p>existía otra regla que obligaba a abrir llaves en una línea nueva:</p>

<pre><code>public function doSomething()
{
</code></pre>

<p>Por lo tanto, una de las dos había que desactivarla, ¿pero cuál?. He aquí la
verdadera mejora. La mejora no es utilizar una regla u otra, sino alcanzar un
consenso dentro del equipo y decidir qué estilo queremos seguir a la hora de
escribir código.</p>

<p>Algunas otras reglas nos permitieron detectar qué clases necesitaban ser
refactorizadas. Por ejemplo, si un método tiene una <em>complejidad ciclomática</em>
elevada o si un método está escrito con demasiados niveles de anidamiento.</p>

<p>Otras reglas simplemente nos enfrentaron a la toma de ciertas decisiones:</p>

<ul>
<li>Cómo queremos organizar nuestros ficheros</li>
<li>Cómo queremos dar el nombre a nuestros métodos</li>
<li>Cómo queremos indentar nuestro código</li>
</ul>


<h2>Conclusión</h2>

<p>No me importa volver a repetirlo, la verdadera mejora no surge de seguir una
regla u otra a la hora de escribir código. La verdadera mejora surge de las
conversaciones, diálogos y <em>discusiones</em> entre los miembros del equipo.</p>

<p>¿Y dónde está la parte de <em>contínua</em>? Se encuentra en el servidor de integración
contínua. Nuestro código es analizado contínuamente, y en el caso de que haya
un aumento significativo de violaciones de reglas de estilo en nuestro código,
seremos avisados y podremos tomar la decisión sobre si retomamos el control
o lo dejamos para más adelante.</p>

<h2>Referencias</h2>

<ul>
<li><a href="https://es.wikipedia.org/wiki/Proceso_de_mejora_continua">Mejora contínua</a></li>
<li><a href="https://es.wikipedia.org/wiki/Integraci%C3%B3n_continua">Integración contínua</a></li>
<li><a href="https://en.wikipedia.org/wiki/Static_code_analysis">Análisis estático de código</a>
(inglés)</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Planifica tu éxito: de aprendiz a empresario]]></title>
    <link href="http://rchavarria.github.io/blog/2014/02/18/planifica-tu-exito/"/>
    <updated>2014-02-18T22:00:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2014/02/18/planifica-tu-exito</id>
    <content type="html"><![CDATA[<h5>de Roberto Canales Mora</h5>

<p><img class="right" src="http://ecx.images-amazon.com/images/I/810ghYlRMFL._SL1500_.jpg" width="229" height="330" title="Planifica tu exito: de aprendiz a empresario" ></p>

<h2>Por qué lo he leído</h2>

<p>Tenía pensado leer <a href="http://www.amazon.es/Planifica-tu-%C3%A9xito-aprendiz-empresario/dp/841545757X/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1392882947&amp;sr=1-1">Planifica tu éxito</a> porque estoy muy interesado en mejorar como profesional
y en avanzar en mi carrera como tal. Ya simplemente el título te da una idea de progreso y tenía
curiosidad por conocer un poco más allá de mi perfil profesional actual. Si a esto le añadimos
que el autor pertenece a una empresa llena de profesionales a los que admiro y que
además el libro es un regalo, pues ya no hay excusa.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Me esperaba una descripción de una carrera profesional plena, desde <em>currito</em> hasta
magnate de empresas multinacionales. Una descripción de todas las fases por las que
pasaría una persona a lo largo de toda su trayectoria profesional, y por supuesto,
cómo pasar de una fase a la siguiente, aunque ya se que no hay ninguna
receta mágica para ello.</p>

<h2>Qué encontre</h2>

<p>Por supuesto encontré más o menos lo que esperaba, pero mucho más práctico y
adaptado al mundo real.</p>

<p>Encontré una descripción de varias fases de la carrera profesional que se puede
encontrar cualquier desarrollador software (o cualquier trabajador del conocimiento),
y una serie de pautas para brillar en cada una de esas fases. Está claro que un
directivo no tiene que tener las mismas características que un trabajador o un mando
intermedio, pero eso no quiere decir que no puedan ser la misma persona en distintos
momentos de su trayectoria laboral.</p>

<p>En el desarrollo del software existen básicamente dos caminos: el técnico y el de gestión.
Ambos perfectamente válidos y no necesariamente excluyentes, pero se necesitan
distintas aptitudes para cada uno de los caminos.</p>

<h2>Conclusiones</h2>

<p>Me parece un libro fantástico, muy recomendable, especialmente para todas aquellas
personas que desean avanzar en su carrera profesional (por el camino técnico o de
gestión). No va a tener una receta mágica, pero seguro que va a encontrar consejos
muy útiles.</p>

<p>En ocasiones me parece muy autobiográfico (al menos muy personal) y otras veces me
recuerda a los consejos que me daba mi padre (y tienen pinta que yo le daré a mi hijo).</p>

<p>Me parece un libro muy práctico, con los pies en la tierra y que no divaga con
filosofías o con idealismos. Eso hace que haya ciertas partes con las que no estoy
de acuerdo, porque echa por tierra ciertas <em>creencias</em> personales, pero creo que eso
es bueno, y comprendo totalmente el punto de vista del autor.</p>

<h2>Qué he aprendido</h2>

<p>Lo esencial, la idea principal que me ha transmitido el libro es que, para triunfar,
para ser un profesional reconocido, al menos hay que:</p>

<ul>
<li>trabajar duro, muy duro, constantemente</li>
<li>apoyarse en otros profesionales como tú, de dentro o fuera de tu empresa, de
dentro o fuera de tu ciudad, de dentro o fuera de tu pais, pero apoyarse en
otros profesinales</li>
</ul>


<h2>Frases que me gustaría recordar</h2>

<p>Hay muchas frases y conceptos que me gustaría recordar de este libro, pero las
más importantes serían:</p>

<blockquote><p>Para conseguir X hay que ser Y (pero serlo un poco más que los demás)</p>

<p>Hay dos caminos hacia el éxito: técnico o gestión</p>

<p>Lee, lee, lee y aprende nuevas habilidades, tanto técnicas como no técnicas</p>

<p>Atesora conocimiento, no dinero. Gasta poco y podrás cambiar de aires con facilidad</p>

<p>Permítete cambiar de rumbo, de objetivos y de opinión</p>

<p>En trabajos intelectuales, no valen métodos militares</p>

<p>La gente no dejará de sorprenderte por las cosas estúpidas que hace</p>

<p>Déjate encontrar: blog, comentar, publicar en medios de terceros, eventos locales
y/o internacionales</p></blockquote>

<p>El resto las he reunido en un gist:
<a href="https://gist.github.com/rchavarria/8997378">notas sobre Planifica tu éxito</a></p>

<h2>Recursos relacionados</h2>

<ul>
<li>Book crossing, conoce dónde ha estado este libro: <a href="http://bookcrossing.com">BookCrossing</a>,
introduce el BCID: 659-11704854</li>
<li>Puntero propuesto por el autor para comentar acerca del libro:
<a href="www.adictosaltrabajo.com/book_section.inc.php?book=2">Adictos al trabajo</a></li>
<li><a href="http://www.profiteditorial.com/libros-para-vivir-mejor/habilidades-personales/c%C3%B3mo-iniciar-una-conversaci%C3%B3n-y-hacer-amigos">Cómo iniciar una conversación y hacer amigos</a></li>
<li>Vídeo explicativo acerca de
<a href="http://www.youtube.com/watch?v=vCbfJGCda7E">«eficacia vs. eficiencia»</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aplicacion web RESTful con Spring MVC]]></title>
    <link href="http://rchavarria.github.io/blog/2014/01/22/restful-spring-mvc/"/>
    <updated>2014-01-22T23:10:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2014/01/22/restful-spring-mvc</id>
    <content type="html"><![CDATA[<div style="margin:2%; padding:2%; background-color:#E0E0E0; ">
    Find an English version of this post directly in the <a href="https://github.com/rchavarria/javaee-6-demos/tree/master/spring-mvc">source code repository</a>.
</div>


<p>En esta demo crearemos una aplicación web para demostrar el uso del framework
Spring MVC para crear servicios REST.</p>

<p><img class="right" src="http://rchavarria.github.io/images/2014/spring-mvc.png" title="Spring MVC" ></p>

<p>Será una aplicación web sencilla, sin persistencia en base de datos (para no
complicarla), pero será una aplicación Spring MVC completa donde, en lugar de
generar las respuestas mediante páginas JSP, éstas serán generadas en formato
JSON, para ser consumidas como si se trataran de servicios web.</p>

<!-- more -->


<p>La aplicación no será un servicio web, estrictamente hablando, pero responderá a
peticiones HTTP <code>get</code>, <code>post</code>, <code>put</code> y <code>delete</code> como si se tratara de uno de ellos.</p>

<h1>Instrucciones</h1>

<p>La aplicación será la típica que ofrece operaciones <a href="https://es.wikipedia.org/wiki/CRUD">CRUD</a>,
y gestionará una lista de casas, pisos, chalets,&#8230; Es decir, los tipos de propiedades
gestionadas por una agencia inmobiliaria. Por eso, nuestra entidad, nuestro
recurso (hablando en terminología REST), será una Propiedad o <code>Property</code>.</p>

<p>Veamos los distintos pasos que daremos para desarrollar la aplicación:</p>

<h2>Definir la URI para acceder a nuestra entidad</h2>

<p>Solamente tendremos un recurso al que acceder, una Propiedad, así que solo
tendremos una URI a la que acceder:</p>

<pre><code>http://&lt;server name&gt;/springmvc/properties
</code></pre>

<p>Debemos definir los métodos HTTP que usaremos para gestionar las Propiedades:</p>

<ul>
<li><code>GET /properties</code>: devolverá una lista de Propiedades</li>
<li><code>GET /properties/{id}</code>: devolverá los detalles de una Propiedad identificada por {id}</li>
<li><code>POST /properties</code>: creará una nueva Propiedad</li>
<li><code>DELETE /properties/{id}</code>: borrará una Propiedad</li>
<li><code>PUT /properties/{id}</code>: actualizará una Propiedad</li>
</ul>


<h1>Crear un controlador MVC de consultas</h1>

<p>El controlador, que responderá a peticiones de consulta (listar y obtener
por id), se llamará
<code>es.rchavarria.springmvc.rest.PropertiesQueriesController</code>.</p>

<p>Responderá a peticiones HTTP que consulten datos, tales como listar las Propiedades u
obtener los detalles de una de ellas.</p>

<p>Debemos marcar el controlador con anotaciones de Spring MVC de forma que Spring
reconozca la clase como controlador MVC. Usaremos las anotaciones para indicar
qué URI gestionará. Nuestro controlador vacío podría ser algo así:</p>

<pre><code>@Controller
@RequestMapping("/properties")
public class PropertiesQueriesController {
}
</code></pre>

<h2>Crear un método que liste Propiedades</h2>

<p>Nuestro primer método será uno que devuelva una lista de Propiedades. La lista
será creada/obtenida/generada por un servicio, no por el controlador en sí
mismo. En un principio, el servicio gestionará las Propiedades sin ningún tipo
de persistencia, pero siempre podremos implementarla en un futuro.</p>

<p>El método mapeará el método <code>get</code> de HTTP y su valor retornado será parte del
cuerpo de la respuesta. De esta forma, la respuesta no será generada por una
página JSP, sino que la respuesta será texto en formato JSON generado
a partir de un objeto Java:</p>

<pre><code>@RequestMapping(method = RequestMethod.GET)
@ResponseStatus(HttpStatus.OK)
@ResponseBody
public List&lt;String&gt; getAllProperties() {
    return Arrays.asList("one", "two", "three");
}
</code></pre>

<h2>Crear tests para probar el controlador</h2>

<p>Este test será un test de integración, ya que no podemos considerarlo como un
test unitario. No lo podemos considerar así ya que el test arrancará un pequeño
servidor web, arrancará nuestro controlador y realizará peticiones HTTP reales
contra él (un test unitario no debería hacer tantas tareas).</p>

<p>Usaremos <a href="https://code.google.com/p/mockito/">Mockito</a> para simular dependencias
externas y un componente proporcionado por Spring MVC, <code>MockMVC</code>. Este componente
será el servidor y gestionará las peticiones y analizará las respuestas de
nuestro controlador.</p>

<p>El siguiente código muestra cómo preparar un servidor y cómo configurar nuestro
controlador en él:</p>

<pre><code>// ...

private MockMvc mockMvc;

@InjectMocks
PropertiesQueriesController controller;

@Mock
PropertyService propertyService;

@Before
public void setup() {
    MockitoAnnotations.initMocks(this);

    mockMvc = standaloneSetup(controller)
            .setMessageConverters(new MappingJackson2HttpMessageConverter())
            .build();
}

// ...
</code></pre>

<p>Y en el siguiente código vemos cómo probar una petición HTTP <code>get</code>:</p>

<pre><code>@Test
public void testRequestAllPropertiesUsesHttpOK() throws Exception {
    when(propertyService.requestAllProperties()).thenReturn(allProperties());

    mockMvc.perform(get("/properties")
        .accept(MediaType.APPLICATION_JSON))
        .andExpect(status().isOk());
}
</code></pre>

<p>Crearemos otro test, para comprobar esta vez que el resultado es el esperado:</p>

<pre><code>@Test
public void testRequestAllPropertiesRendersOkAsJSON() throws Exception {
    when(propertyService.requestAllProperties()).thenReturn(allProperties());

    mockMvc.perform(get("/properties")
        .accept(MediaType.APPLICATION_JSON))
        .andDo(print())
        .andExpect(jsonPath("$[0].city").value("first city"))
        .andExpect(jsonPath("$[1].address").value("second address"))
        .andExpect(jsonPath("$[2].price").value(300));
}
</code></pre>

<p>Para ver más tests o los tests al completo, por favor, echa un vistazo al
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/spring-mvc">código de la demo</a>
en github.</p>

<h2>Añadir un método al controlador que acepte un parámetro en la URI</h2>

<p>Usaremos URIs del tipo <code>http://&lt;server&gt;/springmvc/properties/&lt;id&gt;</code> para obtener los
detalles de una Propiedad en concreto. <code>&lt;id&gt;</code> representa un identificador de Propiedad,
y el controlador deberá devolver los detalles de la misma en lugar de una lista con
todas las propiedades.</p>

<p>En el controlador, anotaremos un nuevo método con <code>@RequestMapping</code> la cual tendrá
dos parámetros: <code>method</code>, será el método HTTP <code>get</code>; y <code>value</code>, para dar un nombre al
parámetro. La anotación <code>@ResponseStatus</code> indica al framework el código de estado
HTTP que deberá devolver y <code>@ResponseBody</code> nos indica que el valor devuelto por el
método debe ser el cuerpo de mensaje de respuesta.</p>

<p>Este nuevo método tendrá un parámetro, anotado con <code>@PathVariable</code>. Esta anotación
mapea los parámetros del método con parámetros en la URI.</p>

<pre><code>@RequestMapping(method = RequestMethod.GET, value="/{id}")
@ResponseStatus(HttpStatus.OK)
@ResponseBody
public Property getProperty(@PathVariable String id) {
    return propertyService.findById(id);
} 
</code></pre>

<p>Crearemos un test similar al anterior test de integración, pero para no hacer eterno
este post, prefiero que le eches un vistazo al código en el
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/spring-mvc">proyecto de github</a>.</p>

<h2>Configurar controladores MVC</h2>

<p>Usaremos anotaciones para configurar nuestros controladores, Spring MVC lo hace
extremadamente fácil y proporciona una anotación, <code>@EnableWebMVC</code>, que hace
prácticamente todo por nosotros. Y esto es casi todo lo que hay que hacer para
configurar una aplicación MVC.</p>

<p>Nuestra configuración está centralizada en una clase, la cual será sencillísima
y se parecerá a ésta:</p>

<pre><code>@Configuration
@EnableWebMvc
@ComponentScan(basePackages = { "es.rchavarria.springmvc.rest.controllers" })
public class MVCConfig {}
</code></pre>

<p>También crearemos un test de integración para comprobar que configuramos bien
nuestros controladores. Busca el test <code>MVCConfigIntegrationTest</code> en el
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/spring-mvc">repositorio de código</a>
para verlo.</p>

<h2>Inicializar la aplicación web</h2>

<p>Seguiremos sin usar ficheros XML para configurar nuestra aplicación, por lo que lo haremos
a través del código.</p>

<p>Crearemos una clase que herede de una proporcionada por Spring,
<code>AbstractAnnotationConfigDispatcherServletInitializer</code>,
y sobreescribiremos los siguientes métodos:</p>

<ul>
<li><code>getRootConfigClasses</code>: debe devolver un array de clases que configuren el contexto raíz
(root context). Por ahora, no tenemos tal cosa, por lo que puede devolver un array
vacío o simplemente el valor <code>null</code>.</li>
<li><code>getServletConfigClasses</code>: debe devolver un array de clases que configuren el
contexto servlet.</li>
<li><code>getServletMappings</code>: debe devolver los mapeos del servlet.</li>
</ul>


<p>Ya estamos listos para ejecutar nuestra demo en un contenedor de servlets. En este caso,
ejecutaremos la aplicación en un servidor Tomcat 7. Para ello, añadiremos el plugin de
maven de Tomcat 7 a nuestro fichero <code>pom.xml</code>&#8230;</p>

<pre><code>&lt;plugin&gt;
    &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;
    &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;2.2&lt;/version&gt;
&lt;/plugin&gt;
</code></pre>

<p>&#8230; y ejecutaremos la aplicación con el comando <code>mvn tomcat7:run</code>.</p>

<h2>¿Por dónde seguir?</h2>

<p>Este post ya ha quedado demasiado largo para publicarse, pero no he encontrado forma de
hacerlo más corto y contar todos los pasos involucrados para este desarrollo, pero todavía
tenemos muchísimo trabajo por hacer, por lo que animo a visitar el repositorio de
código fuente de la demo.</p>

<p>Algunas tareas que quedan pendientes, podrían ser:</p>

<ul>
<li>Crear un nuevo controlador, un controlador de comandos (en contraposición a controlador de
consulta), que permita al usuario a crear, actualizar o borrar una Propiedad.</li>
<li>Crear tres métodos en el controlador, uno por cada acción (crear, actualizar y borrar).</li>
<li>Recuerda, cada método deberá estar probado por un test unitario o de integración, que no
se te olvide.</li>
</ul>


<h1>Recursos y lecturas</h1>

<ul>
<li><a href="http://spring.io/guides/tutorials/rest">Build RESTful services with Spring</a></li>
<li><a href="https://github.com/rchavarria/javaee-6-demos/tree/master/spring-mvc">Source code of this demo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache MyFaces como implementacion de JavaServer Faces]]></title>
    <link href="http://rchavarria.github.io/blog/2013/10/28/myfaces-implementacion-javaserver-faces/"/>
    <updated>2013-10-28T13:12:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2013/10/28/myfaces-implementacion-javaserver-faces</id>
    <content type="html"><![CDATA[<div style="margin:2%; padding:2%; background-color:#E0E0E0; ">
    Find an English version of this post directly in the <a href="https://github.com/rchavarria/javaee-6-demos/tree/master/jsf-basics">source code repository</a>.
</div>


<p>Esta semana, en esta demo sobre Java EE escribiremos una sencilla aplicación
para conocer JavaServer Faces 2.1, un framework MVC impulsado por los
estándares Java EE.</p>

<p>Será similar a otras demos. Tendremos una página de bienvenida, con un
formulario donde el usuario podrá introducir su email y una contraseña. Los
datos del formulario se enviarán a una nueva página que mostrará los
parámetros y sus valores enviados al servidor y permitirá navegar de vuelta
a la pantalla inicial.</p>

<p>Para probarla, simplemente bájate el código, ejecuta el comando <code>mvn</code> y
visita <a href="http://localhost:8080/login.jsf">http://localhost:8080/login.jsf</a> para disfrutar.</p>

<!-- more -->


<h2>Demo</h2>

<p>La demo será una aplicación que mostrará los parámetros enviados a través de
una petición HTTP, y el esquema de navegación será el siguiente:</p>

<p><img class="center" src="http://rchavarria.github.io/images/2013/jsf-navigation.png" title="Esquema de navegación" ></p>

<h3>Comencemos con el esqueleto</h3>

<p>La forma más rápida de comenzar es con un <em>archetype</em> de maven. Así pues,
usaremos el archetype por defecto de maven, el cual nos creará un
esqueleto inicial para comenzar con nuestra aplicación web. Escribir el
siguiente comando:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mvn archetype:generate \
</span><span class='line'>    -DgroupId=&lt;group-id&gt; \
</span><span class='line'>    -DartifactId=&lt;app-id&gt; \
</span><span class='line'>    -DarchetypeArtifactId=maven-archetype-webapp</span></code></pre></td></tr></table></div></figure>


<p>Donde <code>group-id</code> es el nombre de grupo, por ejemplo, el nombre de la empresa
seguido por el del proyecto. Esta demo usará <code>es.rchavarria.jsf</code>. <code>app-id</code> es
el nombre que queremos para nuestra nueva aplicación, digamos <code>jsf-basics</code>.</p>

<p>Este comando creará el esqueleto de una aplicación web Java, e incluirá una
primera página <code>.jsp</code> (que podemos borrar) y un descriptor de la aplicación
web, <code>web.xml</code>. Para la demo, modificaremos estos ficheros y añadiremos otros
para completarla.</p>

<h3>Añadimos dependencias</h3>

<p>El siguiente paso es añadir las dependencias necesarias a nuestro proyecto:</p>

<ul>
<li><code>myfaces-api</code>: el API pública de clases del proyecto core de Apache MyFaces.</li>
<li><code>myfaces-impl</code>: la implementación privada del API de Apache MyFaces Core</li>
<li><code>tomahawk20</code>: componentes y utilidades JSF para su uso con la implementación de
JSF 2.x.</li>
<li><code>javax-servlet</code>: para acceder al objeto <em>request</em> dentro de la aplicación.</li>
<li><code>jetty</code>: incluiremos <code>jetty</code> como nuestro servidor para desarrollo.</li>
</ul>


<h3>Configurar FacesServlet en el descriptor de la applicación web</h3>

<p>Necesitamos configurar un servlet, FacesServlet en nuestro caso, que gestione
todas las peticiones a JSF. Para ello modificaremos el fichero <code>web.xml</code> de la
siguiente forma:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;servlet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-name&gt;</span>Faces Servlet<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-class&gt;</span>javax.faces.webapp.FacesServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span><span class='line'><span class="nt">&lt;/servlet&gt;</span>
</span><span class='line'><span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-name&gt;</span>Faces Servlet<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;url-pattern&gt;</span>*.jsf<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'><span class="nt">&lt;/servlet-mapping&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Esto hará que el servlet llamado <em>Faces Servlet</em> gestionará todas las peticiones
a páginas que terminen en <code>.jsf</code>.</p>

<p>La mayoría de tutoriales se quedan aquí, pero esta configuración <strong>NO</strong> es
suficiente. Es necesario añadir un listener a nuestro servlet, que dispare la
inicializaci´on de MyFaces. Asegúrate de incluir esto en el <code>web.xml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;listener&gt;</span>
</span><span class='line'>    <span class="nt">&lt;listener-class&gt;</span>org.apache.myfaces.webapp.StartupServletContextListener<span class="nt">&lt;/listener-class&gt;</span>
</span><span class='line'><span class="nt">&lt;/listener&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Estamos en una demo, y por lo tanto bajo un entorno de desarrollo, por lo que
recomendaría usar un <em>context param</em> para indicarselo a MyFaces.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;context-param&gt;</span>
</span><span class='line'>    <span class="nt">&lt;param-name&gt;</span>javax.faces.PROJECT_STAGE<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;param-value&gt;</span>Development<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'><span class="nt">&lt;/context-param&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Para ver una lista completa de parámetros que podemos usar, no dejes de leer la
documentacón sobre cómo
<a href="https://myfaces.apache.org/core21/myfaces-impl/webconfig.html">configurar MyFaces</a>.</p>

<h3>Crear una <em>managed bean</em> llamada <code>login</code></h3>

<p>Crearemos una <em>managed bean</em>, que no es más que un POJO que será inyectado en
nuestra vista de JSF y podremos acceder a sus getters/setters y otros métodos.</p>

<p>Crearla es realmente sencillo, usaremos la anotación <code>@ManagedBean</code> y ya estará
casi todo hecho. Como primer uso, haremos que devuelva un título para nuestro
futuro formulario de login. Es un caso de uso muy sencillo, pero nos servirá para
conocer la potencia de JSF. Un vistazo al código:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">javax.faces.bean.ManagedBean</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@ManagedBean</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;login&quot;</span><span class="o">,</span> <span class="n">eager</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GreetingBean</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getMessage</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;Login user&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>En el próximo paso, veremo cómo acceder a esta managed bean.</p>

<h3>Crear una vista para la página de login</h3>

<p><a href="https://en.wikipedia.org/wiki/Facelets">Facelets</a> es el sistema de plantillas por defecto en JSF 2.0 (y posteriores).
Esto supone que el código de la vista es XML y se guarda en ficheros con la
extensión <code>.xhtml</code>. Podemos usar componentes JSF dentro de esta vista así como
acceder a managed beans a través del Expression Language, proporcionado por el
estándar Java EE.</p>

<p>Gracias a que las vistas son <em>plantillas</em>, podemos crear componentes visuales
con ellas y reutilizarlos a lo largo de nuestro proyecto.</p>

<p>Aquí muestro un extracto de nuestra vista de login, el fichero <code>login.xhtml</code> que
se encuentra en el directorio <code>src/webapp</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span>
</span><span class='line'><span class="cp">   &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.w3.org/1999/xhtml&quot;</span>
</span><span class='line'>      <span class="na">xmlns:f=</span><span class="s">&quot;http://java.sun.com/jsf/core&quot;</span>
</span><span class='line'>      <span class="na">xmlns:h=</span><span class="s">&quot;http://java.sun.com/jsf/html&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="c">&lt;!-- ... --&gt;</span>
</span><span class='line'>      <span class="nt">&lt;h:form</span> <span class="na">styleClass=</span><span class="s">&quot;form-signin&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h2&gt;</span>#{login.message}<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nt">&lt;h:commandButton</span> <span class="na">id=</span><span class="s">&quot;login&quot;</span> <span class="na">value=</span><span class="s">&quot;Log me in&quot;</span>
</span><span class='line'>                         <span class="na">styleClass=</span><span class="s">&quot;btn btn-lg btn-primary btn-block&quot;</span>
</span><span class='line'>                         <span class="na">action=</span><span class="s">&quot;#{login.submit}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/h:form&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nótese que se han definido dos nuevos <em>namespaces</em>: <code>f</code> y <code>h</code>. Esto nos permitirá
usar componentes reutilizables proporcionados por JSF.</p>

<p>En el código vemos que tomamos el título <code>h2</code> de la managed bean llamada <code>login</code>
a través de una sentencia de Expression Language: <code>#{login.message}</code>. Esto
invocará al método <code>getMessage()</code> definido en nuestra managed bean.</p>

<p>El elemento <code>h:commandButton</code> nos permite usar el método <code>submit()</code> de la managed
bean para controlar el siguiente paso a dar en nuestro modelo de navegación. Este
tipo de métodos se conocen como <em>action method</em>. Devuelven una <code>String</code>, la cual
identifica la siguiente vista a renderizar.</p>

<h3>Una nueva managed bean</h3>

<p>Crearemos una nueva managed bean, llamada <code>paramReader</code>. Su propósito será el de
leer los parámetros de la petición HTTP enviada desde la vista anterior y
devolver estos parámetros en forma de lista de valores a una nueva vista.</p>

<p>Para leer los parámetros, lo haremos a través del objeto <code>HttpServletRequest</code>,
all cual accederemos a través de <code>ExternalContext</code> del <code>FacesContext</code>, del
siguiente modo:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>  <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Parameter</span><span class="o">&gt;</span> <span class="nf">getParams</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">FacesContext</span> <span class="n">fc</span> <span class="o">=</span> <span class="n">FacesContext</span><span class="o">.</span><span class="na">getCurrentInstance</span><span class="o">();</span>
</span><span class='line'>      <span class="n">HttpServletRequest</span> <span class="n">request</span> <span class="o">=</span> <span class="o">(</span><span class="n">HttpServletRequest</span><span class="o">)</span> <span class="n">fc</span><span class="o">.</span><span class="na">getExternalContext</span><span class="o">().</span><span class="na">getRequest</span><span class="o">();</span>
</span><span class='line'>      <span class="c1">// ...      </span>
</span><span class='line'>      <span class="k">return</span> <span class="n">params</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Crear una nueva vista</h3>

<p>En esta nueva vista, manipularemos la lista de valores devueltos por la
managed bean <code>paramReader</code>. Por defecto, JSF no proporciona ningún componente
para manipular listas de datos, por lo que aquí usaremos <a href="http://myfaces.apache.org/tomahawk/index.html">Apache Tomahawk</a> y
su componente <code>dataList</code>.</p>

<p>Nuestra nueva vista, <code>success.xhtml</code>, mostrará lal lista de valores en un elemento
HTML. El código (parcial) será algo parecido a esto:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="cp">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span>
</span><span class='line'><span class="cp">   &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;</span>
</span><span class='line'><span class="nt">&lt;html</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.w3.org/1999/xhtml&quot;</span>
</span><span class='line'>      <span class="na">xmlns:h=</span><span class="s">&quot;http://java.sun.com/jsf/html&quot;</span>
</span><span class='line'>      <span class="na">xmlns:t=</span><span class="s">&quot;http://myfaces.apache.org/tomahawk&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="c">&lt;!-- ... --&gt;</span>
</span><span class='line'>      <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>        <span class="nt">&lt;t:dataList</span> <span class="na">var=</span><span class="s">&quot;aParam&quot;</span>
</span><span class='line'>                    <span class="na">value=</span><span class="s">&quot;#{paramReader.params}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;li&gt;</span>
</span><span class='line'>            <span class="nt">&lt;h:outputText</span> <span class="na">value=</span><span class="s">&quot;#{aParam.key}&quot;</span> <span class="nt">/&gt;</span> :
</span><span class='line'>            <span class="nt">&lt;h:outputText</span> <span class="na">value=</span><span class="s">&quot;#{aParam.value}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/t:dataList&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;h:form&gt;</span>
</span><span class='line'>        <span class="nt">&lt;h:commandLink</span> <span class="na">action=</span><span class="s">&quot;#{paramReader.login}&quot;</span><span class="nt">&gt;</span>Back to login page<span class="nt">&lt;/h:commandLink&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/h:form&gt;</span>
</span><span class='line'><span class="nt">&lt;/html&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Usaremos el action method <code>login()</code> en el elemento <code>h:commandLink</code> para permitir al
usuario navegar de vuelta al la página de login.</p>

<h2>Ejecutar</h2>

<p>Para ver la demo en acción, simplemente ejecutar el comando maven <code>mvn jetty:run</code>.
Esto arrancará el servidor. Después, visita la URL
<a href="http://localhost:8080/login.jsf">http://localhost:8080/login.jsf</a> y a jugar!.</p>

<h2>Enlaces y referencias</h2>

<ul>
<li><a href="https://javaserverfaces.java.net/">Mojarra project</a>:
the reference implementation of the JSF specification.</li>
<li><a href="https://en.wikipedia.org/wiki/JavaServer_Faces">JSF on Wikipedia</a>:
Wikipedia entry for JavaServer Faces.</li>
<li><a href="https://en.wikipedia.org/wiki/Facelets">Facelets</a>: Facelets is the default templating system for JSF, instead of JSP&#8217;s pages</li>
<li><a href="https://myfaces.apache.org/">MyFaces</a>:
an implementation developed by Apache.</li>
<li><a href="http://myfaces.apache.org/tomahawk/index.html">Apache Tomahawk</a>: componentes y utilidades JSF para su uso con la implementación de
JSF 2.x.</li>
<li><a href="http://java.dzone.com/articles/making-distinctions-between">Kinds of managed beans</a>:
a comparison table of several kinds of managed beans.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mi experiencia en el Codemotion 2013]]></title>
    <link href="http://rchavarria.github.io/blog/2013/10/22/mi-experiencia-en-el-codemotion-2013/"/>
    <updated>2013-10-22T12:44:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/10/22/mi-experiencia-en-el-codemotion-2013</id>
    <content type="html"><![CDATA[<p>El pasado viernes 18 de octubre asistí al <a href="http://madrid.codemotionworld.com">Codemotion 2013</a>, un evento de
desarrolladores para desarrolladores. Es solamente la segunda edición en España,
pero la considero una cita imprescindible, y encima se celebra cerca de casa,
así que no puedo pedir más. ¿Quieres un aperitivo? Échale un ojo al <a href="http://www.youtube.com/watch?v=SxP67piQp2U">trailer</a>.</p>

<p>Lamentablemente, por motivos personales no he podido asistir a los dos días,
así que tengo muuuchas charlas para ver en diferido. Pero no perdí el tiempo,
pude conocer en pesona a gente de <a href="http://www.autentia.com">Autentia</a>, <a href="http://www.deiser.com">Deiser</a>, y otros patrocinadores del
evento sin los cuales no habría sido posible: PayPal, Atlassian, Mozilla, Telefónica I+D,
Alfresco y más.</p>

<p><img class="center" src="http://rchavarria.github.io/images/2013/codemotion.png" title="Codemotion Spain 2013" ></p>

<!-- more -->


<p>El viernes no había muchas charlas ténicas, especialmente por la mañana,
y eran las que más me interesaban, así que no puedo contar gran cosa de las charlas a
las que asistí. Eso sí, me encantó el papel de las <strong>comunidades</strong> en la keynote. Es
una gozada que haya multitud de gente apasionada por el software y que participe
en actividades y comunidades locales. Toda mi admiración para ellos.</p>

<p>En compensación a esta falta de charlas técnicas, disfruté mucho del pasillo y de la visita
a los stands que distintas empresas tenían en los pasillos. Especialmente los
de <a href="http://www.deiser.com">Deiser</a> y <a href="http://www.autentia.com">Autentia</a>. Estoy contento, porque me permitió conocer profesionales
que trabajan en dos empresas que admiro, no sólo por lo que hacen, si no por cómo
lo hacen (y además me hice con un poco de <em>merchandaising</em>).</p>

<p><img class="center" src="http://rchavarria.github.io/images/2013/codemotion-merchandaising.jpg" title="Codemotion Spain 2013" ></p>

<p>Este año, mi edición del Codemotion ha sido muy ligera. Me da mucha pena, pero
los compromisos son los compromisos, que también los disfruté, por lo que no me
arrepiento de nada.</p>

<p>Así que, mientras voy viendo alguna que otra charla del canal de youtube de
<a href="http://www.youtube.com/channel/UCJ91eUdxXwLYyaeIN1rGg-g">Codemotion Madrid</a>, voy esperando con impaciencia la edición del año que viene, para
reservar agenda y estar a tope.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mi primera aplicación web con AngularJS]]></title>
    <link href="http://rchavarria.github.io/blog/2013/10/17/primera-aplicacion-angularjs/"/>
    <updated>2013-10-17T22:00:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/10/17/primera-aplicacion-angularjs</id>
    <content type="html"><![CDATA[<p>Esta semana no he podido aportar ningún tutorial a la serie de
<a href="http://rchavarria.github.io/blog/2013/09/03/demos-tecnologias-javaee">demos de tecnologías JavaEE</a> ya
que he dedicado grandes esfuerzos a realizar una prueba técnica para una
empresa.</p>

<p>La prueba consitía en realizar una aplicación web, donde el back-end está
programado en PHP y el front-end en JavaScript, utilizando el framework MVC
<a href="http://angularjs.org">AngularJS</a>.</p>

<p>Ha sido una experiencia interesantísima. Ya tenía conocimientos de arquitecturas
MVC, he participado profesionalmente en multitud de desarrollos siguiendo
este modelo, pero ésta ha sido una oportunidad increíble de conocer un
framework tan de moda y tan demandado como AngularJS. El proyecto consistía en
implementar una <a href="http://rct-ytlibrary.herokuapp.com">librería de videos de youtube</a>.</p>

<!-- more -->


<p><img class="center" src="http://rchavarria.github.io/images/2013/ytlibrary-dnd.png" title="Puedes añadir un vídeo arrastrando y soltando" ></p>

<p>En definitiva, he aprovechado esta oportunidad, y con unas pequeñas modificaciones
a la prueba técnica inicial, he eliminado la necesidad de un back-end, he creado
un servidor web básico en <em>NodeJS</em>, y he desplegado la aplicación en <em>heroku</em>.</p>

<p>Si te pica la curiosidad y quieres ver el código fuente, lo puedes encontrar en mi
repositorio de github <a href="http://github.com/rchavarria/ytlibrary">rchavarria/ytlibrary</a>.</p>

<p>La aplicación explota multitud de conceptos de AngularJS:</p>

<ul>
<li>Directivas más comunes: <code>ng-model</code>, <code>ng-repeat</code>, <code>ng-click</code>, &#8230;</li>
<li>Controladores, <code>angular.controller(...)</code>.</li>
<li>Servicios, implementados como factorías con <code>angular.factory(...)</code>.</li>
<li>Directivas, <code>angular.directive(...)</code>.</li>
<li>Posibilidad de arrastrar y soltar vídeos para añadirlos a la lista.</li>
<li>Animaciones con el módulo proporcionado por AngularJS <code>ngAnimate</code>.</li>
</ul>


<p><img class="center" src="http://rchavarria.github.io/images/2013/ytlibrary-video.png" title="Visualizar un vídeo desde la lista" ></p>

<p>Si todavía tienes ganas de más, te invito a que eches un vistazo a
<a href="http://rct-ytlibrary.herokuapp.com">Youtube library</a>. Por supuesto, si quieres,
me encantaría que me contases qué te ha parecido.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Curso de Scrum Master]]></title>
    <link href="http://rchavarria.github.io/blog/2013/10/08/curso-de-scrum-master/"/>
    <updated>2013-10-08T11:28:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/10/08/curso-de-scrum-master</id>
    <content type="html"><![CDATA[<p>Los días 3 y 4 de octubre de 2013 tuve una oportunidad única, la de asistir a
un curso <strong>GRATUITO</strong> de Scrum Master impartido por <a href="http://twitter.com/adiazmaroto">Ángel Diaz-Maroto</a> en las oficinas de
<a href="http://www.ingdirect.es">ING Direct</a>. Fue un curso espectacular, con otras 14-15 personas magníficas y
que estoy muy agradecido tanto a ING como a Ángel por hacerlo posible. Fue una
auténtica pasada.</p>

<p>Este post es para agradecérselo públicamente y para tener unas pequeñas notas y
no olvidarme de la fabulosa experiencia vivida.</p>

<!-- more -->


<h2>El curso</h2>

<p>El curso fueron 2 días muy intensos, donde aprendimos el funcionamiento de Scrum y el
papel que juega el rol del Scrum Master (porque es un rol, nunca un puesto o un título).
Por supuesto, una vez realizado el curso no eres realmente un Scrum Master, pero yo
lo veo un poco como sacarse el carnet de conducir. Es lo que te da la posibilidad
de conducir y aprender realmente a conducir en situaciones de la vida real. Este curso
es algo así, <strong>nos ha habilitado para aprender a ser Scrum Master en proyectos de la vida
real</strong>.</p>

<p>Muy pronto aprendimos la primera lección: ¿Cómo se hace Scrum? ¿Cómo se hace <em>agile</em>?.
Me quedo con la frase de Ángel:</p>

<blockquote><p>Agilear se hace aligerando</p></blockquote>

<p>La diferencia fundamental de las metodologías ágiles frente a las tradicionales,
es que las ágiles se basan en eliminar, mientras que las tradicionales se
basan en añadir capas de complejidad.</p>

<h2>Acuerdos de trabajo</h2>

<p>Lo primero de todo, antes de empezar a trabajar, lo primordial es establecer unos
acuerdos de trabajo. Sin ellos, cualquier proyecto, empresa, lo que sea, que necesite
de un trabajo en grupo, no podrá saber si todo el mundo avanza en la misma dirección.</p>

<p>Nosotros es lo primero que hicimos al comenzar el curso, y éstos fueron nuestros
<em>Acuerdos de Trabajo</em>:</p>

<p><img class="left" src="http://rchavarria.github.io/images/2013/curso-scrum-master/01-acuerdos-trabajo.jpg" width="194" height="260"></p>

<ul>
<li>Speak up! (¡Habla!): Los problemas se deben resolver cuanto antes. Si te molesta
cualquier cosa, por pequeña que sea, si crees que va a haber un problema con algo&#8230;
Dilo en voz alta, que se sepa. Esta es la única forma de que se resuelvan rápidamente.</li>
<li>Compañerismo: sin él, difícilmente se podrá crear un buen ambiente de trabajo.</li>
<li>Objetivo común: todos debemos ir en la misma dirección, si no, estaremos despediciando
esfuerzos.</li>
</ul>


<h2>Crear una visión</h2>

<p><img class="right" src="http://rchavarria.github.io/images/2013/curso-scrum-master/02-vision.jpg" width="194" height="260"></p>

<p>Uno de los acuerdos de trabajo es el de tener un objetivo común, y para ello es
necesario crear una visión.</p>

<p>La nuestra la creamos a través de una dinámica de grupo, y al final, el resultado
consensuado al que llegamos fue que nuestra visión para este curso sería:</p>

<blockquote><p>Aprender, en grupo, métodos y buenas prácticas y bases de Scrum, divirtiéndonos.</p></blockquote>

<h2>Manifiesto ágil</h2>

<p><img class="right" src="http://rchavarria.github.io/images/2013/curso-scrum-master/03-clover.jpg" width="194" height="260"></p>

<p>Una vez sentadas las bases de cómo vamos a trabajar y qué es lo que vamos a
esperar del curso, comenzamos. Y qué mejor punto para empezar que conociendo
los cuatro valores del <a href="http://www.agilemanifesto.org/iso/es/">manifiesto ágil</a>:</p>

<ul>
<li><strong>Individuos e interacciones</strong> sobre procesos y herramientas</li>
<li><strong>Software funcionando</strong> sobre documentación extensiva</li>
<li><strong>Colaboración con el cliente</strong> sobre negociación contractual</li>
<li><strong>Respuesta ante el cambio</strong> sobre seguir un plan</li>
</ul>


<h2>Scrum</h2>

<p><img class="left" src="http://rchavarria.github.io/images/2013/curso-scrum-master/04-scrum.jpg" width="194" height="260"></p>

<p>Existen multitud de metodologías que se pueden considerar ágiles, entre ellas
está <em>Scrum</em>. Aunque Scrum no es una metodología en sí, es un marco de trabajo.
No es una lista de prácticas que debes hacer, si no una serie de recomendaciones,
que puedes seguir o no, y que son totalmente independientes del campo en que
se apliquen. Y puede que estos sean los factores que han hecho que Scrum se
haya adoptado tanto en todo el mundo.</p>

<p>En el curso, aprendimos cuáles son los actores de Scrum (Product Owner, Scrum
Master, Team, &#8230;), qué elementos forman parte de él (Backlog, Spring,
Entregable, &#8230;) y qué reuniones lo hacen posible (Diaria, Retrospectiva,
Demo, &#8230;).</p>

<p>Todo se podría resumir en <em>Inspección y Adaptación</em>. Inspeccionar qué se está
haciendo y cómo, detectar dónde se podría mejorar y adaptarse para atajar
esos impedimentos para conseguir una mejora contínua.</p>

<h2>Principios y valores</h2>

<p>Luego pasamos a ver cuáles son los principios y valores de Scrum.</p>

<p>Todos ellos se podrían resumir en uno <strong>Respeto</strong>. A partir de él se pueden
ir concretando alguno más, por mencionar algunos (que surgieron a partir de
nosotros y fueron completados por Ángel):</p>

<p><img class="left" src="http://rchavarria.github.io/images/2013/curso-scrum-master/05-principios-valores.jpg" width="194" height="260"></p>

<ul>
<li>Transparencia: no esconder nada, mostrar toda la información importante acerca
del avance del proyecto, que los problemas salgan a la luz, &#8230;</li>
<li>Confianza: esto da libertad a los integrantes del equipo para trabajar a su
manera y dar lo mejor de sí mismos.</li>
<li>Foco: trabajar con un objetivo común, y no desperciar esfuerzos.</li>
<li>Coraje: porque para cambiar las cosas y trabajar de forma auto-organizada,
sin un <em>jefismo</em> que te las imponga, se necesita mucho coraje.</li>
</ul>


<h2>Roles</h2>

<p>Los dos roles de Scrum que vimos en el curso son el <em>Product Owner</em> y el <em>Scrum
Master</em>. Existe una relación muy fuerte entre ellos, y de ellos depende en
gran medida el éxito del proyecto.</p>

<p>Estuvimos discutiendo qué características deberían tener estos roles:</p>

<p><img class="right" src="http://rchavarria.github.io/images/2013/curso-scrum-master/06-scrum-master.jpg" width="194" height="260"></p>

<p><img class="right" src="http://rchavarria.github.io/images/2013/curso-scrum-master/07-product-owner.jpg" width="194" height="260"></p>

<ul>
<li>Scrum Master

<ul>
<li>dialogante</li>
<li>tenaz</li>
<li>empático</li>
</ul>
</li>
<li>Product Owner

<ul>
<li>accesible</li>
<li>priorizador</li>
<li>estratega</li>
</ul>
</li>
</ul>


<h2>Retrospectiva</h2>

<p>Durante todo el curso aplicamos la siguiente máxima:</p>

<blockquote><p>Learn by doing</p></blockquote>

<p><img class="left" src="http://rchavarria.github.io/images/2013/curso-scrum-master/08-retro.jpg" width="194" height="260"></p>

<p>Es decir, <em>aprender haciendo</em>. De esta forma, aprendimos Scrum haciendo Scrum.
Y Scrum no existe sin una retrospectiva.</p>

<p>La retrospectiva es una parte fundamental de Scrum. Lo más importante, lo que
proporciona la retro, es que al terminar la reunión, se ha tenido que tomar una
decisión:</p>

<blockquote><p>Qué acciones vamos a tomar para solucionar alguno de los problemas que tenemos</p></blockquote>

<p>Y así, poco a poco, problema a problema, con un ritmo sostenible, sin agobios,
ir mejorando contínuamente. Nunca llegarás a la perfección, siempre aparecerán
nuevos problemas, pero ahí estará la retro para identificarlos, sacarlos a la
luz y darles solución.</p>

<h2>Referencias</h2>

<p>A lo largo del curso, hicimos referencia a multitud de autores, libros y recursos,
así que aquí iré dejando aquellas referencias que vayan surgiendo de conversaciones
futuras acerca de este curso:</p>

<ul>
<li><a href="http://scrummasters.com/">Scrum Masters Community</a></li>
<li><a href="https://www.scrum.org/">The home of Scrum</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Instant Markdown]]></title>
    <link href="http://rchavarria.github.io/blog/2013/10/07/instant-markdown/"/>
    <updated>2013-10-07T09:38:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/10/07/instant-markdown</id>
    <content type="html"><![CDATA[<h4>Instant Markdown</h4>

<h5>Arturo Herrero</h5>

<p><img class="right" src="http://www.packtpub.com/sites/default/files/9145OT_Instant%20Markdown_cov_0.jpg" width="195" height="300" title="Instant Markdown" ></p>

<h2>Por qué lo he leído</h2>

<p>El lenguaje Markdown me interesa, me parece una forma sencilla de formatear documentos
sin usar grandes pomposidades, y <a href="http://twitter.com/arturoherrero">Arturo</a>, a través de twitter, dió la posibilidad
de conseguir una copia (¡muchas gracias por cierto!). Había leído alguna <em>review</em>
del libro, como la de <a href="http://kinisoftware.com/2013/09/revisando-el-libro-instant-markdown">Kinisoftware</a>, por lo que no podía desperdiciar la oportunidad.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Ya conocía por encima la sintaxis de Markdown, la utilizo para escribir este post
y cada vez más para tomar notas rápidas. También, al haber leído ya un par de
revisiones, ya tenía más o menos una idea de lo que era el libro. Pero hasta que
no lo lees no sabes con certeza si has acertado o no, así que allá que fui.</p>

<h2>Qué encontre</h2>

<p>Es un libro conciso, directo al grano y facilísimo de leer. Está en ingles, vale,
pero de verdad que es sencillo de leer. Arturo expone el tema con claridad y sin
andarse con rodeos.</p>

<p>Aquí podrás encontrar una referencia rápida pero completa de la sintaxis oficial de
Markdown así como algunos añadidos que ofrecen páginas como <a href="http://github.com">Github</a>, por ejemplo.</p>

<p>También conocerás herramientas para trabajar con Markdown para tu día a día y para
tareas tan comunes como escribir emails (está genial poder escribir un email, con
formato, sin tener que levantar las manos del teclado).</p>

<h2>Conclusiones</h2>

<p><em>Instant Markdown</em> es un libro muy fácil de leer, y que te da unas cuantas ideas
para profundizar en el tema, así que no decepciona. <strong>¿Quieres tener una referencia
rápida del lenguaje?</strong> Aquí la encontrarás. <strong>¿Quieres conocer posibles usos diarios
de una sintaxis sencillísima para escribir documentos formateado?</strong> Alimenta tu
curiosidad con este libro.</p>

<p>Una vez que pruebes la sencillez y rapidez de Markdown, querrás utilizarlo para
todo, y este libro te indica unas cuantas herramientas para ello.</p>

<h2>Qué he aprendido con este libro</h2>

<ul>
<li>Se pueden dibujar líneas horizontales, simplemente escribiendo 3 o más de estos
carácteres en la misma línea: <code>-</code>, <code>*</code>, <code>_</code>. Así:</li>
</ul>


<hr />

<ul>
<li><p>Puedes escribir emails con la herramienta <a href="http://markdown-here.com">Markdown Here</a>.</p></li>
<li><p>Puedes escribir listas de cosas por hacer, muy útil. <a href="http://cheddarapp.com">Cheddar</a>.</p></li>
<li><p>Con la herramienta <a href="http://johnmacfarlane.net/pandoc">pandoc</a> podrás generar múltiples
formatos a partir de Markdown: HTML, docx, odt, ebook, latex y pdf.</p></li>
<li><p>Y si Markdown se queda corto en alǵun momento: <a href="http://fletcherpenney.net/multimarkdown">MultiMarkdown</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Entendiendo el ciclo de vida de entidades JPA]]></title>
    <link href="http://rchavarria.github.io/blog/2013/09/29/entendiendo-ciclo-vida-entidades-jpa/"/>
    <updated>2013-09-29T15:24:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/09/29/entendiendo-ciclo-vida-entidades-jpa</id>
    <content type="html"><![CDATA[<div style="margin:2%; padding:2%; background-color:#E0E0E0; ">
    Find an English version of this post directly in the <a href="https://github.com/rchavarria/javaee-6-demos/tree/master/jpa-entities">source code repository</a>.
</div>


<p>En esta demo aprenderemos en qué estados puede encontrarse una entidad JPA,
y qué métodos proporciona el estándar para transicionar una entidad de un
estado a otro.</p>

<p>Se puede ver el código fuente de la demostración en el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/jpa-entities"><code>jpa-entities</code></a>
del repositorio de las demos en github.</p>

<!-- more -->


<h2>Demo</h2>

<p>Esta demo pertenece a una serie de
<a href="http://rchavarria.github.io/blog/2013/09/03/demos-tecnologias-javaee">tutoriales de demostración de tecnologías J2EE</a> y
en esta en particular aprenderemos los estados del ciclo de vida de una entidad
JPA y cómo transicionar entre ellos.</p>

<p>Una frase leída en uno de los enlaces que aparecen al final del post dice (traducción
libre):</p>

<blockquote><p>Si, a la hora de modificar entidades, piensas en ellas como transiciones de estados en lugar
de ejecuciones de sentencias SQL, harás tu desarrollo mucho más sencillo.</p></blockquote>

<p>Y es que alguna ventaja tendría que tener lo que proporciona JPA, que es la abstracción
de la base de datos. Si no dejamos de pensar en SQL, nunca podremos abstraernos de la
base de datos. Parece muy buena idea lo de ver la vida de una entidad como una serie
de transiciones de un estado a otro.</p>

<h2>Antes de comenzar</h2>

<p>Antes de nada, existen unas entidades y unos tests sencillos, de ejercitación y puesta a
punto de JPA, Hibernate (implementación de JPA para esta demo) y Derby (el motor de
base de datos utilizada aquí).</p>

<p>Echa un vistazo primero a estas clases (<code>Person</code>, <code>ContactablePerson</code>, <code>Phone</code>) y a los
tests (<code>BasicPersistenceTest</code> y <code>AdvancedPersistenceTest</code>) para poder comprender mejor
el ciclo de vida que describiremos a continuación.</p>

<h2>Estados de una entidad JPA</h2>

<p>Una entidad se puede encontrar en alguno de estos estados:</p>

<ul>
<li>No existe todavía: no es un estado en sí, pero podría verse con el origen de todo.</li>
<li><strong>Nueva</strong>: la entidad se acaba de instaciar con el operador <code>new</code>, como una clase Java
de toda la vida. No está asociado a ningún contexto de persistencia.</li>
<li><strong>Gestionada</strong>: tiene una identidad persistente y está asociada a un contexto de
persistencia.</li>
<li><strong>Separada</strong>: tiene una identidad persistente pero no está asociada a un contexto de
persistencia.</li>
<li><strong>Eliminada</strong>: tiene una identidad persistente, está asociada a un contexto de persistencia,
pero está marcada para ser eliminada de la base de datos.</li>
</ul>


<h2>Ciclo de vida, transiciones</h2>

<p>En el siguiente diagrama, de la documentación de Oracle, se pueden ver las transiciones
posibles de una manera gráfica.</p>

<p><img class="center" src="http://docs.oracle.com/cd/E16439_01/doc.1013/e13981/img/lifeent30.gif" title="Transiciones de una entidad JPA" ></p>

<h3>Transición de nueva a gestionada</h3>

<p>Fácilmente, con el método <code>persist</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFromNewToManaged</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ContactablePerson</span> <span class="n">p</span> <span class="o">=</span> <span class="n">createContactablePerson</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="s">&quot;entity&#39;s state is &#39;managed&#39;&quot;</span><span class="o">,</span> <span class="n">em</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">p</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Transición de gestionada a separada</h3>

<p>Existen dos formas:</p>

<ol>
<li>Mediante el método <code>detach</code>.</li>
<li>Cerrando el gestor de entidades, <code>EntityManager.close()</code>.</li>
</ol>


<p>Usando el método <code>detach</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFromManagedToDetachedUsingDetachMethod</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ContactablePerson</span> <span class="n">p</span> <span class="o">=</span> <span class="n">createContactablePerson</span><span class="o">();</span>
</span><span class='line'>    <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">em</span><span class="o">.</span><span class="na">detach</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertFalse</span><span class="o">(</span><span class="s">&quot;entity is not in persistence context&quot;</span><span class="o">,</span> <span class="n">em</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">p</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Cerrando el gestor:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFromManagedToDetachedClosingEntityManager</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ContactablePerson</span> <span class="n">p</span> <span class="o">=</span> <span class="n">createContactablePerson</span><span class="o">();</span>
</span><span class='line'>    <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">tx</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</span><span class='line'>    <span class="n">em</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">em</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>        <span class="n">fail</span><span class="o">(</span><span class="s">&quot;em should be closed, and the entity shouldn&#39;t be managed by him&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalStateException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Transición de separada a gestionada</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFromDetachedToManaged</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ContactablePerson</span> <span class="n">p</span> <span class="o">=</span> <span class="n">createContactablePerson</span><span class="o">();</span>
</span><span class='line'>    <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="n">em</span><span class="o">.</span><span class="na">detach</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ContactablePerson</span> <span class="n">mergedPerson</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">merge</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertFalse</span><span class="o">(</span><span class="s">&quot;original entity is not managed...&quot;</span><span class="o">,</span> <span class="n">em</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">p</span><span class="o">));</span>
</span><span class='line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="s">&quot;... but merged one is&quot;</span><span class="o">,</span> <span class="n">em</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">mergedPerson</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Una entidad previamente gestionada pero que fue separada, es posible actualizarla
a un nuevo contexto de persistencia. Pero hay que tener cuidado, el objeto original
no es el que pasa a ser gestionado, si no que es el devuelto por el método <code>merge</code>.</p>

<h3>Transición de gestionada a eliminada</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFromManagedToRemoved</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ContactablePerson</span> <span class="n">p</span> <span class="o">=</span> <span class="n">createContactablePerson</span><span class="o">();</span>
</span><span class='line'>    <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">em</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertFalse</span><span class="o">(</span><span class="s">&quot;entity has been removed and it is not managed&quot;</span><span class="o">,</span> <span class="n">em</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">p</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Transición de eliminada a gestionada</h3>

<p>Aunqe esta transición no está documentada en el diagrama anterior de Oracle, es posible
transicionar una entidad a gestionada una vez ésta ya ha sido marcada como eliminada.
Dejo a elección del lector encontrarle utilidad y sentido a esta transición, ya que
aunque sea posible, dudo de su valor. Esta transición es posible si usamos el método
<code>persist</code> sobre la entidad eliminada.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">testFromRemovedToManaged</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">ContactablePerson</span> <span class="n">p</span> <span class="o">=</span> <span class="n">createContactablePerson</span><span class="o">();</span>
</span><span class='line'>    <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="n">em</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertFalse</span><span class="o">(</span><span class="s">&quot;entity has been removed&quot;</span><span class="o">,</span> <span class="n">em</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">p</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
</span><span class='line'>    <span class="n">assertTrue</span><span class="o">(</span><span class="s">&quot;entity is managed again&quot;</span><span class="o">,</span> <span class="n">em</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">p</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Notas finales</h2>

<p>Antes de terminar, me gustaría recalcar algo acerca de la creación del <code>EntityManagerFactory</code>
y <code>EntityManager</code>, ya que es una cuestión muy importante a la hora de desarrollar nuestras
aplicaciones.</p>

<p>La creación de un <code>EntityManagerFactory</code> es <strong>muy</strong> costoso, y sólo se debería crear
<strong>una</strong> vez en toda la vida de nuestra aplicación. Es por esta razón, que su creación
está en un método estático, que se ejecuta antes que cualquier test, y que sólo se
ejecuta una vez para todos los tests de la suite:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@BeforeClass</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">classSetUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">emf</span> <span class="o">=</span> <span class="n">Persistence</span><span class="o">.</span><span class="na">createEntityManagerFactory</span><span class="o">(</span><span class="s">&quot;test-jpa&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Por otro lado, la creación de una <code>EntityManager</code> es mucho más ligero, y la recomendación
dada por la documentación es la de crear una de ellas por cada transacción que vayamos
a realizar. Pero cuidado, esto no quiere decir que debamos crear una de ellas en
cada consulta a la base de datos, si no más bien, una por cada petición de la aplicación
cliente, es decir, que es una buena práctica agrupar varias consultas siempre y
cuando estas consultas tengan el objetivo de crear un único resultado al cliente.</p>

<p>Por esta razón de que es poco costoso crear un <code>EntityManager</code>, su creación se
realiza en el método <code>setUp</code> del test, de forma que tendremos un contexto de persistencia
limpio en la ejecución de cada uno de nuestros tests, pero reaprovecharemos las
conexiones a la base de datos, ya que éstas se mantienen en el <code>EntityManagerFactory</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Before</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">em</span> <span class="o">=</span> <span class="n">emf</span><span class="o">.</span><span class="na">createEntityManager</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">// ...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Ejecución</h2>

<p>Esta demo se puede ejecutar como un test de JUnit, y estaría integrado en la ejecución
de <code>maven</code>, así que simplemente ejecuta el comando <code>mvn test</code> para ver los resultados.</p>

<h2>Enlaces para ampliar información</h2>

<ul>
<li><a href="https://github.com/rchavarria/javaee-6-demos/tree/master/jpa-entities">Código de la demo en github</a></li>
<li><a href="http://rchavarria.github.io/blog/2011/05/19/uso-de-jpa-hibernate-y-derby">Usar JPA, Hibernate y Derby</a>:
un post en este mismo blog sobre cómo usar JPA, Hibernate como implementación del estándar
y Derby como base de datos.</li>
<li><a href="http://www.davidmarco.es/blog/entrada.php?id=144">An excellent JPA tutorial</a>:
uno de los mejores tutoriales sobre JPA que he encontrado en español.</li>
<li><a href="http://docs.jboss.org/hibernate/core/4.0/hem/en-US/html_single">Hibernate EntityManager</a>:
implementación de JPA dentro del framework Hibernate.</li>
<li><a href="http://docs.oracle.com/cd/E16439_01/doc.1013/e13981/undejbs003.htm">What is a JPA entity?</a>:
documentación de Oracle sobre entidades JPA.</li>
<li><a href="http://www.objectdb.com/java/jpa/persistence/managed">Working with JPA entities objects</a>:
más documentación sobre entidades JPA.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crear una applicación cliente para un servicio web]]></title>
    <link href="http://rchavarria.github.io/blog/2013/09/26/crear-cliente-servicio-web/"/>
    <updated>2013-09-26T07:41:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/09/26/crear-cliente-servicio-web</id>
    <content type="html"><![CDATA[<div style="margin:2%; padding:2%; background-color:#E0E0E0; ">
    Find a lightweight English version of this post directly in the <a href="https://github.com/rchavarria/javaee-6-demos/tree/master/ws-jaxws-client">source code repository</a>.
</div>


<p>En esta demo crearemos un cliente para el servicio web desarrollado en la demo
anterior. Para ello, utilizaremos una herramienta proporcionada por Java para
generar unas clases a partir del fichero WSDL de descripción del servicio web, y
usaremos dichas clases para invocar el servicio. Así de fácil.</p>

<p>Se puede ver el código fuente de la demostración en el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/ws-jaxws-client"><code>ws-jaxws-client</code></a>
del repositorio de las demos en github.</p>

<!-- more -->


<h2>Demo</h2>

<p>Esta demo pertenece a una serie de
<a href="http://rchavarria.github.io/blog/2013/09/03/demos-tecnologias-javaee">tutoriales de demostración de tecnologías J2EE</a> y
en esta en particular crearemos en cliente que invocará a los métodos expuestos por el servicio
web desarrollado en la demo anterior. Estos métodos son:</p>

<ol>
<li>Añadir usuario: añadiremos un nombre de usuario al servicio.</li>
<li>Obtener usuario: mediante un identificador, obtendremos un nombre de usuario.</li>
</ol>


<p>Con lo cual, añadiremos y consultaremos usuarios.</p>

<h2>Pasos a seguir</h2>

<h3>Arrancar el servicio web</h3>

<p>Lo primero que debemos hacer es arrancar nuestro servicio web. Es necesario para que
el fichero WSDL, que describe el servicio, esté disponible y actualizado. También
es posible usar un fichero ya existente, por ejemplo, en el caso de que queramos
desarrollar un cliente para un servicio web de terceros. En definitiva, el elemento
realmente importante en un servicio web, es el fichero WSDL, que es quien define
de manera inequívoca el servicio en sí.</p>

<p>Para esta demo, arrancaremos el servicio web desarrollado en la
<a href="http://rchavarria.github.io/blog/2013/09/19/crear-servicio-web-jaxws">demo anterior</a>. Básicamente, los comandos
para arrancarlo, partiendo del directorio raíz del código fuente de todas las demos:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd ws-jaxws-cxf
</span><span class='line'>mvn jetty:run</span></code></pre></td></tr></table></div></figure>


<p>De esta forma tendremos el fichero WSDL disponible en <code>http://localhost:8080/Users?wsdl</code>.</p>

<h3>Generar las clases necesarias con <code>wsimport</code></h3>

<p>Java proporciona una herramienta, <code>wsimport</code>, que genera las clases necesarias
para poder consumir fácilmente un servicio web a partir de un fichero WSDL.</p>

<p>La sintaxis del comando es:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wsimport [options] &lt;WSDL_URI&gt;</span></code></pre></td></tr></table></div></figure>


<p>Así, en nuestro caso, un ejemplo sería:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wsimport http://localhost:8080/Users?wsdl</span></code></pre></td></tr></table></div></figure>


<p>Este comando genera las clases, las compila y borra el código fuente. Esto no es
muy práctico a la hora de aprender, así que usaremos algunas opciones para
obtener el código fuente de las clases generadas.</p>

<ul>
<li><code>-d src/main/java</code>: indica el directorio donde queremos generar las clases.</li>
<li><code>-keep</code>: mantiene los ficheros <code>.java</code> generados.</li>
<li><code>-Xnocompile</code>: no compila los fuentes generados, ya se encargará nuestra
herramienta de ello, no os preocupéis.</li>
</ul>


<p>El comando completo quedaría:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wsimport -d src/main/java -keep -Xnocompile http://localhost:8080/Users?wsdl</span></code></pre></td></tr></table></div></figure>


<p>Las clases generadas que más nos importan, son:</p>

<ul>
<li><code>UsersManagementService</code>: esta clase representa el servicio web en sí.</li>
<li><code>UsersManagement</code>: esta clase contiene los mismos métodos que el servicio web
definido por el fichero WSDL, y actúa como un proxy a la hora de invocar a nuestro
servicio. A esta clase se le denomina <code>port</code> (puerto), y es quien nos permite llamar
a los <em>métodos</em> web.</li>
</ul>


<h3>Crear un test de JUnit para invocar el servicio web</h3>

<p><img class="left" src="http://rchavarria.github.io/images/2013/web-service-test.png" title="Ejecución de la demo como un test" ></p>

<p>Usaremos un sencillo test de JUnit para invocar a nuestro servicio. Se puede utilizar
una clase normal de Java, con un método <code>main</code>, pero haciéndolo con un test, podemos
integrar su ejecución en el ciclo de vida del proyecto gestionado por <code>maven</code> y
ejecutarlo muy fácilmente con <code>mvn test</code>.</p>

<p>Antes de nada, es necesario añadir la dependencia de JUnit a nuestro proyecto:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>4.8.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'><span class="nt">&lt;/dependency&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Crearemos el test en el paquete <code>es.rchavarria.ws.client</code>. En el método <code>setUp</code>
de nuestro test (el que se ejecutará antes que cualquier test) crearemos una
instancia del servicio, y a través de él, obtendremos una instancia de nuestra
clase <em>port</em>. Esta clase será quien nos permita invocar al servicio web.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JaxWsClientTest</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">UsersManagement</span> <span class="n">port</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Before</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">UsersManagementService</span> <span class="n">service</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UsersManagementService</span><span class="o">();</span>
</span><span class='line'>        <span class="n">port</span> <span class="o">=</span> <span class="n">service</span><span class="o">.</span><span class="na">getUsersManagementPort</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//...        </span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Invocando el servicio web</h3>

<p>Ahora ya disponemos de la clase <em>port</em>, así que ya somos capaces de invocar los
métodos expuestos por el servicio: <code>addUser</code> y <code>getUser</code>. A por ellos!!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Test</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">test</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">port</span><span class="o">.</span><span class="na">addUser</span><span class="o">(</span><span class="s">&quot;The boss&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">port</span><span class="o">.</span><span class="na">addUser</span><span class="o">(</span><span class="s">&quot;The king&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="n">port</span><span class="o">.</span><span class="na">addUser</span><span class="o">(</span><span class="s">&quot;The queen&quot;</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;The boss&quot;</span><span class="o">,</span> <span class="n">port</span><span class="o">.</span><span class="na">getUser</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;The queen&quot;</span><span class="o">,</span> <span class="n">port</span><span class="o">.</span><span class="na">getUser</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span>
</span><span class='line'>    <span class="n">assertEquals</span><span class="o">(</span><span class="s">&quot;The king&quot;</span><span class="o">,</span> <span class="n">port</span><span class="o">.</span><span class="na">getUser</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Ejecución</h2>

<p>Esta demo se puede ejecutar como un test de JUnit, y estaría integrado en la ejecución
de <code>maven</code>, así que simplemente ejecuta el comando <code>mvn test</code> para ver los resultados.</p>

<p>He añadido también un plugin, surefire report, por lo que ejecutnado el comando
<code>mvn site</code>, la herramienta generará (entre otras cosas), un informe con los resultados
de la ejecución de nuestros tests. Ejecuta el comando y abre el fichero HTML que
encontrarás en esta ruta dentro del directorio raiz del proyecto <code>target/site/index.html</code>.</p>

<h2>Enlaces para ampliar información</h2>

<ul>
<li><a href="http://docs.oracle.com/javaee/6/tutorial/doc/bnayl.html">Building web services with JAX-WS</a></li>
<li><a href="http://docs.oracle.com/javaee/6/tutorial/doc/giepu.html">Building RESTful Web Services with JAX-RS</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Crear un servicio web JAX-WS]]></title>
    <link href="http://rchavarria.github.io/blog/2013/09/19/crear-servicio-web-jaxws/"/>
    <updated>2013-09-19T08:49:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/09/19/crear-servicio-web-jaxws</id>
    <content type="html"><![CDATA[<div style="margin:2%; padding:2%; background-color:#E0E0E0; ">
    Find a lightweight English version of this post directly in the <a href="https://github.com/rchavarria/javaee-6-demos/tree/master/ws-jaxws-cxf">source code repository</a>.
</div>


<p>En esta demo crearemos un servicio web. Básicamente existen dos tipos de servicios
web: SOAP, basados en el intercambio de mensajes XML; y servicios web basados en
una interfaces REST, RESTful web services.</p>

<p>Aquí crearemos un servicio web SOAP, el cual establece que los mensajes XML pueden ser
transportados por diversos protocolos, aquí lo haremos sobre HTTP, ya que es lo más
común y sencillo. Ya que usaremos HTTP como protocolo de transporte, nuestro servicio web estará
gestionado por un servlet.</p>

<p>Se puede ver el código fuente de la demostración en el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/ws-jaxws-cxf"><code>ws-jaxws-cxf</code></a>
del repositorio de las demos en github.</p>

<!-- more -->


<h2>Demo</h2>

<p><img class="right" src="http://rchavarria.github.io/images/2013/web-services-by-psd.jpg" width="320" height="213" title="Foto por el usuario de flickr psd" ></p>

<p>En esta demo no veremos nada funcionando, ya que vamos a crear un servicio web
pero no vamos a crear un cliente que lo consuma (eso para la siguiente). La forma
de comprobar que hemos creado un servicio web correcto será la visualización del
fichero WSDL generado por el servicio, el cual es el contrato entre el proveedor
del servicio (lo creado en esta demo) y el consumidor del mismo (el cliente que
crearemos más adelante).</p>

<p>La funcionalidad que nos ofrecerá el servicio se apoyarán en dos métodos:</p>

<ol>
<li>Añadir usuario: añadiremos un nombre de usuario al servicio.</li>
<li>Obtener usuario: mediante un identificiador, obtendremos un nombre de usuario.</li>
</ol>


<p>Para ejecutar la demo, simplemente hay que descargase el código fuente y ejecutar
<code>mvn jetty:run</code> desde el directorio raiz de la demo. Visitar la página de login
<a href="http://localhost:8080/Users?wsdl">http://localhost:8080/Users?wsdl</a> y veremos
el fichero WSDL con la definición del servicio.</p>

<h2>Pasos a seguir</h2>

<h3>Elegir un framework que implemente JAX-WS</h3>

<p>Según la <a href="http://docs.oracle.com/javaee/6/tutorial/doc/bnayl.html">documentación de Oracle</a>,
crear un servicio web parece realmente
sencillo y para toda la familia. Lo que no explican es que están dependiendo
de la implementación de los servicios web incluída en <em>su</em> contenedor Java EE,
Glassfish. No tengo nada en contra, pero me gusta tener cierta independencia,
por lo que vamos a elegir otro framework que implemente la especificación
JAX-WS.</p>

<p>He elegido <a href="http://cxf.apache.org">Apache CXF</a>, aunque hay otras implementaciones
disponibles, como <a href="http://projects.spring.io/spring-ws/">Spring WS</a>
(quizá en un futuro, veamos su uso).</p>

<h3>Dependencias del proyecto maven</h3>

<p>Como todas las demos, utilizaremos <code>maven</code> como gestor del ciclo de vida del
proyecto, y las dependencias son una parte muy importante de la vida del proyecto.</p>

<p>La aplicación depende de:</p>

<ul>
<li><code>javax.servlet-api</code>: el API de Java EE para servlets, ya que será un servlet
quien gestione las peticiones HTTP. Nuestro servicio web se basará en este servlet.</li>
<li><code>cxf-rt-frontend-jaxws</code>: la implementación de CXF de la especificación JAX-WS.</li>
<li><code>cxf-rt-transports-http</code>: HTTP será el protocolo de transporte.</li>
<li><code>spring-web</code>: CXF usa Spring internamente para su funcionamiento.</li>
</ul>


<h3>Crear el interfaz del servicio</h3>

<p>Nuestro servicio web servirá para almacenar nombres de usuarios, y se podrán
recuperar estos nombres a través de un identificador que devolverá el servicio
al añadirlos.</p>

<p>Por lo tanto, vemos que necesitaremos dos métodos:</p>

<ul>
<li><code>addUser</code>: para añadir un usuario al sistema.</li>
<li><code>getUser</code>: para recuperar un nombre de usuario.</li>
</ul>


<p>Nuestro interfaz de servicio sería algo así:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">javax.jws.WebService</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.jws.WebParam</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@WebService</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UsersManagement</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUser</span><span class="o">(</span><span class="nd">@WebParam</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;userId&quot;</span><span class="o">)</span> <span class="kt">int</span> <span class="n">userId</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">addUser</span><span class="o">(</span><span class="nd">@WebParam</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="s">&quot;name&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">name</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Crear la implementación del servicio</h3>

<p>Ya tenemos la definición del servicio, ahora debemos implementarlo. Esta
implementación deberá estar anotada también con <code>@WebService</code>, y deberemos
proporcionar valores a algunos parámetros de la anotación. El más importante
es <code>endpointInterface</code>, que debe apuntar a la definición del servicio.</p>

<p>La implementación tendrá un aspecto similar a éste:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">javax.jws.WebService</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@WebService</span><span class="o">(</span><span class="n">endpointInterface</span> <span class="o">=</span> <span class="s">&quot;es.rchavarria.ws.UsersManagement&quot;</span><span class="o">,</span>
</span><span class='line'>            <span class="n">serviceName</span> <span class="o">=</span> <span class="s">&quot;Users&quot;</span><span class="o">)</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UsersManagementImpl</span> <span class="kd">implements</span> <span class="n">UsersManagement</span> <span class="o">{</span>
</span><span class='line'>     <span class="c1">// ... implementación de los métodos</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Invito a bucear en el código para ver la implementación de los métodos,
aunque no es muy interesante de ver, todo sea dicho.</p>

<h3>Establecer un servlet que gestione las peticiones HTTP</h3>

<p>El siguiente paso es establecer un servlet que gestione las peticiones HTTP.
Apache CXF nos proporciona dicho servlet, por lo que deberemos configurar
nuestro contenedor Java EE para que lo arranque. El servlet gestionará todas
las peticiones, con lo que estableceremos el patrón URL a <code>/*</code>.</p>

<p>Es muy importante que el patrón URL del servlet sea capaz de gestionar la URL
donde se despliegue el servicio web, en caso contrario, las peticiones no
llegarán al servicio web. Por ejemplo, si el patrón URL del servlet es
<code>/services/*</code> y nuestro servicio web se despliega en <code>/web-services/*</code>,
las peticiones a nuestro servicio no serán gestionadas por el servlet.</p>

<p>Para establecer el servlet, creamos un fichero descriptor de la aplicación web,
<code>web.xml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;servlet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-name&gt;</span>the-cxf-servlet<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-class&gt;</span>org.apache.cxf.transport.servlet.CXFServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span><span class='line'>    <span class="nt">&lt;load-on-startup&gt;</span>1<span class="nt">&lt;/load-on-startup&gt;</span>
</span><span class='line'><span class="nt">&lt;/servlet&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;servlet-mapping&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-name&gt;</span>the-cxf-servlet<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;url-pattern&gt;</span>/*<span class="nt">&lt;/url-pattern&gt;</span>
</span><span class='line'><span class="nt">&lt;/servlet-mapping&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Configurar el servlet de CXF</h3>

<p>El servlet de CXF arrancará con el servidor, pero no sabe qué servicios web puede
invocar. Debemos configurarlo. CXF proporciona un mecanismo para ello, a través
de un fichero XML.</p>

<p>Podríamos utilizar un fichero por defecto, y guardarlo en <code>WEB-INF/cxf-servlet</code>,
o podemos configurarlo manualmente. Lo haremos de forma manual, e indicaremos al
servlet donde está su fichero de configuración. Se lo indicaremos a través de un
parámetro de inicialización de servlet, por lo que modificaremos nuestro <code>web.xml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="c">&lt;!-- ... --&gt;</span>
</span><span class='line'><span class="nt">&lt;servlet&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-name&gt;</span>the-cxf-servlet<span class="nt">&lt;/servlet-name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;servlet-class&gt;</span>org.apache.cxf.transport.servlet.CXFServlet<span class="nt">&lt;/servlet-class&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;init-param&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-name&gt;</span>config-location<span class="nt">&lt;/param-name&gt;</span>
</span><span class='line'>        <span class="nt">&lt;param-value&gt;</span>/WEB-INF/services.xml<span class="nt">&lt;/param-value&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/init-param&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;load-on-startup&gt;</span>1<span class="nt">&lt;/load-on-startup&gt;</span>
</span><span class='line'><span class="nt">&lt;/servlet&gt;</span>
</span><span class='line'><span class="c">&lt;!-- ... --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>También debemos añadir el fichero de configuración del servlet CXF, el cual hemos
llamado <code>WEB-INF/services.xml</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">&quot;http://www.springframework.org/schema/beans&quot;</span>
</span><span class='line'>      <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>      <span class="na">xmlns:jaxws=</span><span class="s">&quot;http://cxf.apache.org/jaxws&quot;</span>
</span><span class='line'>      <span class="na">xmlns:soap=</span><span class="s">&quot;http://cxf.apache.org/bindings/soap&quot;</span>
</span><span class='line'>      <span class="na">xsi:schemaLocation=</span><span class="s">&quot;</span>
</span><span class='line'><span class="s">http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span>
</span><span class='line'><span class="s">http://cxf.apache.org/bindings/soap http://cxf.apache.org/schemas/configuration/soap.xsd</span>
</span><span class='line'><span class="s">http://cxf.apache.org/jaxws</span>
</span><span class='line'><span class="s">http://cxf.apache.org/schemas/jaxws.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;jaxws:server</span> <span class="na">id=</span><span class="s">&quot;aServer&quot;</span> <span class="na">serviceClass=</span><span class="s">&quot;es.rchavarria.ws.UsersManagement&quot;</span> <span class="na">address=</span><span class="s">&quot;/Users&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;jaxws:serviceBean&gt;</span>
</span><span class='line'>        <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">&quot;es.rchavarria.ws.UsersManagementImpl&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/jaxws:serviceBean&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/jaxws:server&gt;</span>
</span><span class='line'><span class="nt">&lt;/beans&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Esto es un fichero de configuración de Spring, y es que CXF usa Spring internamente. Se
añade un nuevo namespace, <code>jaxws</code>, proporcionado por CXF y que viene con etiquetas XML
para configurar un servidor que responda a las peticiones dirigidas a nuestro servicio web.</p>

<h3>Listos</h3>

<p>La demo ya está lista para ser ejecutada. Si la ejecutamos con el comando <code>mvn jetty:run</code>
podremos visitar <a href="http://localhost:8080/Users?wsdl">http://localhost:8080/Users?wsdl</a>
y veremos el fichero WSDL que define el servicio web.</p>

<p>En la próxima demo, crearemos un cliente a partir de este fichero WSDL, y comprobaremos
cómo funciona.</p>

<h2>Código fuente</h2>

<p>Para echar un ojo al código fuente, visitar el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/ws-jaxws-cxf"><code>ws-jaxws-cxf</code></a>.</p>

<h2>Enlaces para ampliar información</h2>

<ul>
<li><a href="http://docs.oracle.com/javaee/6/tutorial/doc/bnayl.html">Construir servicios web con JAX-WS</a></li>
<li><a href="http://docs.oracle.com/javaee/6/tutorial/doc/giepu.html">Construir servicios web REST con JAX-RS</a></li>
<li><a href="http://cxf.apache.org/docs/index.html">Guía de uso de Apache CXF</a></li>
</ul>


<p><em>Imagen obtenida de <a href="http://www.flickr.com/photos/psd">psd</a></em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Servlet redirecciona a una JSP]]></title>
    <link href="http://rchavarria.github.io/blog/2013/09/17/servlet-redirecciona-jsp/"/>
    <updated>2013-09-17T13:27:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/09/17/servlet-redirecciona-jsp</id>
    <content type="html"><![CDATA[<div style="margin:2%; padding:2%; background-color:#E0E0E0; ">
    Find a lightweight English version of this post directly in the <a href="https://github.com/rchavarria/javaee-6-demos/tree/master/request-parameters-jsp">source code repository</a>.
</div>


<p>Este post es una pequeña extensión del anterior, un servlet que leía los parámetros
de una petición HTTP. La demo anterior presentaba los parámetros leídos de una
forma muy tosca y básica. En esta demo, la información se va a presentar al usuario
de una forma más trabajada. Además, orientándonos hacia una arquitectura MVC,
separaremos las tareas de lectura de los parámetros y presentación de los datos.</p>

<p>Se puede ver el código fuente de la demostración en el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/request-parameters-jsp"><code>request-parameters-jsp</code></a>
del repositorio de las demos en github.</p>

<!-- more -->


<h2>Demo</h2>

<p>La demostración va a ser muy sencilla: crearemos en servlet, lo configuraremos
para que responda cuando un usuario envíe los campos de un formulario de login,
y haremos que redireccione a una página JSP, esta página se encargará de renderizar
los datos que viajarán como atributos de la petición.</p>

<p>Para ejecutar la demo, simplemente hay que descargase el código fuente y ejecutar
<code>mvn jetty:run</code> desde el directorio raiz de la demo. Visitar la página de login
<a href="http://localhost:8080/login.html">http://localhost:8080/login.html</a>, introducir
unos valores cualquiera y enviar los datos del formulario. Como resultado, veremos
el renderizado de la página JSP en el navegador.</p>

<p><img class="center" src="http://rchavarria.github.io/images/2013/request-parameters-jsp.png" title="Respuesta del servlet" ></p>

<h2>Dependencias</h2>

<p>Como viene siendo habitual, para la demostración usaremos
<a href="http://maven.apache.org/">Apache Maven</a> para la gestión de dependencias.
En nuestro fichero <code>pom.xml</code> incluiremos la única dependencia del proyecto,
<code>javax-servlet-api</code> y listo.</p>

<h2>El servlet</h2>

<p>Nuestro servlet se trata de un servlet HTTP, luego heredará de <code>javax.servlet.http.HttpServlet</code>.
Lo configuraremos mediante anotaciones, con <code>@WebServlet</code>. Primero leerá los parámetros
enviados en la petición HTTP, igual que vimos en la anterior demo, y lo almacenará como un
atributo del objeto <code>request</code>, para que pueda ser leído por nuestra página JSP.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="n">List</span><span class="o">&lt;</span><span class="n">Parameter</span><span class="o">&gt;</span> <span class="n">params</span> <span class="o">=</span> <span class="n">buildParamList</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span><span class='line'><span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">&quot;params&quot;</span><span class="o">,</span> <span class="n">params</span><span class="o">);</span>
</span><span class='line'><span class="c1">//...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Luego, redireccionará la petición a nuestra página JSP. Se ha decidido hacer un
<code>forward</code> de la petición en lugar de hacer una redirección completa,
ya que la redirección provocaría una nueva petición HTTP y perderíamos los parámetros
de la petición original, y esto es algo que no deseamos.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//...</span>
</span><span class='line'><span class="n">request</span><span class="o">.</span><span class="na">getRequestDispatcher</span><span class="o">(</span><span class="s">&quot;/params.jsp&quot;</span><span class="o">).</span><span class="na">forward</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'><span class="c1">//...</span>
</span></code></pre></td></tr></table></div></figure>


<h2>La página JSP</h2>

<p>Finalmente, la página JSP se encarga de presentar la información. De esta forma tenemos
construida nuestra demo siguiendo un patrón MVC (aunque es muy sencillo en este caso, ya
que solo contamos con un servlet y una página JSP), donde la página JSP juega el papel
de <em>vista</em>.</p>

<p>El código que nos interesa dentro del JSP es el que se encarga de iterar el
atributo que estableció el servlet, al que hemos llamado <code>params</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="err">&lt;</span>%@ taglib prefix=&quot;c&quot; uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;c:forEach</span> <span class="na">var=</span><span class="s">&quot;p&quot;</span> <span class="na">items=</span><span class="s">&quot;${params}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;li&gt;</span>${p.key}: ${p.value}<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/c:forEach&gt;</span>
</span><span class='line'><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h2>Código fuente</h2>

<p>Para echar un ojo al código fuente, visitar el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/request-parameters-jsp"><code>request-parameters-jsp</code></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leer parámetros desde un servlet]]></title>
    <link href="http://rchavarria.github.io/blog/2013/09/13/servlet-lee-parametros/"/>
    <updated>2013-09-13T12:39:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/09/13/servlet-lee-parametros</id>
    <content type="html"><![CDATA[<div style="margin:2%; padding:2%; background-color:#E0E0E0; ">
    Find a lightweight English version of this post directly in the <a href="https://github.com/rchavarria/javaee-6-demos/tree/master/request-parameters">source code repository</a>.
</div>


<p>En este post veremos cómo un servlet puede leer los parámetros que vienen
encapsulados en la petición HTTP que realiza un usuario a nuestra aplicación web.
La configuración de dicho servlet la haremos mediante anotaciones para tener un
proyecto más sencillo.</p>

<p>Se puede ver el código fuente de la demostración en el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/request-parameters"><code>request-parameters</code></a>
del repositorio de las demos en github.</p>

<!-- more -->


<h2>Demo</h2>

<p>La demostración va a ser muy sencilla: crearemos en servlet, lo configuraremos
para que responda cuando un usuario envíe los campos de un formulario de login,
y haremos que responda con una página HTML que incluye una lista con los valores
de los campos de dicho formulario.</p>

<p>Para ejecutar la demo, simplemente hay que descargase el código fuente y ejecutar
<code>mvn jetty:run</code> desde el directorio raiz de la demo. Visitar la página de login
<a href="http://localhost:8080/login.html">http://localhost:8080/login.html</a>, introducir
unos valores cualquiera y enviar los datos del formulario. Veremos el resultado
que devuelve el servlet al leer los parámetros de la petición HTTP que hemos
enviado al servidor.</p>

<p><img class="center" src="http://rchavarria.github.io/images/2013/request-parameters.png" title="Respuesta del servlet" ></p>

<h2>Dependencias</h2>

<p>Para esta demostración usaremos <a href="http://maven.apache.org/">Apache Maven</a> para
la gestión de dependencias. Esto nos facilitará enormemente nuestra labor de
programación. Si echamos un vistazo al fichero <code>pom.xml</code> de la demo, podremos
ver que solamente existe una dependencia externa, <code>javax-servlet-api</code>, que es
la que nos permitirá crear nuestro servlet.</p>

<h2>Página de login</h2>

<p><img class="right" src="http://rchavarria.github.io/images/2013/login-form.png" title="Respuesta del servlet" ></p>

<p>La entrada a nuestra demo será la página de login, la cual contiene un formulario
muy simple, con dos campos principales: email del usuario y contraseña.</p>

<p>En el código HTML de la página, se ha establecido la acción del formulario a
<code>RequestParametersServlet</code>. Ésta va a ser la URL a la que nuestro servlet deberá responder.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">action=</span><span class="s">&quot;RequestParametersServlet&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">name=</span><span class="s">&quot;email&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Email address&quot;</span> <span class="na">autofocus</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">name=</span><span class="s">&quot;password&quot;</span> <span class="na">placeholder=</span><span class="s">&quot;Password&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span><span class="nt">&gt;</span>Log me in<span class="nt">&lt;/button&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>El servlet</h2>

<p>Nuestro servlet se trata de un servlet HTTP, luego heredará de <code>javax.servlet.http.HttpServlet</code>.
Lo configuraremos mediante anotaciones, con <code>@WebServlet</code>. Y retornará un sencillo
código HTML que mostrará al usuario el valor de los parámetros enviados desde el
formulario de login.</p>

<p>La definión del servlet quedaría así:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">urlPatterns</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;/RequestParametersServlet&quot;</span><span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">RequestParametersServletDemo</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mientras que el código que lee los parámetros de la petición HTTP estaría agrupado en un
método con esta pinta:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">String</span> <span class="nf">outputParametersList</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Enumeration</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">names</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameterNames</span><span class="o">();</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(!</span><span class="n">names</span><span class="o">.</span><span class="na">hasMoreElements</span><span class="o">())</span> <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;&lt;ul&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">while</span><span class="o">(</span><span class="n">names</span><span class="o">.</span><span class="na">hasMoreElements</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">names</span><span class="o">.</span><span class="na">nextElement</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getParameter</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>      
</span><span class='line'>      <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;&lt;li&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>        <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;&lt;/li&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">&quot;&lt;/ul&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Para echar un ojo al código fuente, visitar el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/request-parameters"><code>request-parameters</code></a>.</p>

<h2>Enlaces relacionados</h2>

<ul>
<li><a href="http://theopentutorials.com/examples/java-ee/servlet/get-all-parameters-in-html-form-using-getparameternames">The open tutorials</a>: cómo leer todos los campos de un formulario en un servlet.</li>
<li><a href="https://baurdotnet.wordpress.com/2011/01/31/getting-a-request-parameter-in-a-servlet">Leer un parámetro en un servlet</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Un sencillo servlet HTTP]]></title>
    <link href="http://rchavarria.github.io/blog/2013/09/03/sencillo-servlet-http/"/>
    <updated>2013-09-03T13:41:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/09/03/sencillo-servlet-http</id>
    <content type="html"><![CDATA[<div style="margin:2%; padding:2%; background-color:#E0E0E0; ">
    Find a lightweight English version of this post directly in the <a href="https://github.com/rchavarria/javaee-6-demos/tree/master/simple-http-servlet">source code repository</a>.
</div>


<p>En este post veremos cómo crear un sencillo servlet HTTP. La configuración de dicho
servlet la haremos mediante anotaciones, y así veremos cómo Java EE 6 puede
ahorrarnos a los desarrolladores cierto trabajo con ficheros XML de configuración.</p>

<p>Se puede ver el código fuente de la demostración en el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/simple-http-servlet"><code>simple-http-servlet</code></a>
del repositorio de las demos en github.</p>

<!-- more -->


<h2>Demo</h2>

<p>La demostración va a ser muy sencilla: crearemos en servlet, lo configuraremos
para que responda cuando un usuario visite una página web en concreto, y haremos
que responda de una forma muy, pero que muy sencilla.</p>

<p>Para ejecutar la demo, simplemente hay que descargase el código fuente y ejecutar
<code>mvn jetty:run</code> desde el directorio raiz de la demo. Ya se puede ver el resultado
del servlet visitando
<a href="http://localhost:8080/SimpleHttpServlet">http://localhost:8080/SimpleHttpServlet</a>.</p>

<p><img class="center" src="http://rchavarria.github.io/images/2013/simple-http-servlet.png" title="Respuesta del servlet" ></p>

<h2>Dependencias</h2>

<p>Para esta demostración usaremos <a href="http://maven.apache.org/">Apache Maven</a> para
la gestión de dependencias. Esto nos facilitará enormemente nuestra labor de
programación. Si echamos un vistazo al fichero <code>pom.xml</code> de la demo, podremos
ver que solamente existe una dependencia externa, <code>javax-servlet-api</code>, que es
la que nos permitirá crear nuestro servlet.</p>

<h2>El servlet</h2>

<p>Como ya he comentado antes, se trata de un servlet HTTP, luego nuestro servlet
heredará de <code>javax.servlet.http.HttpServlet</code>.</p>

<p>Java EE 6 nos permite configurar los servlets sin hacer uso del fichero descriptor
de la aplicación web, <code>web.xml</code>. Esto es posible mediante la anotación <code>@WebServlet</code>.
Suponiendo que queremos que el servlet responda cuando el usuario visite la dirección
<code>/SimpleHttpServlet</code>, la signatura de la clase de nuestro servlet quedaría:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@WebServlet</span><span class="o">(</span><span class="n">urlPatterns</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;/SimpleHttpServlet&quot;</span><span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HttpServletDemo</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//...</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Respuesta del servlet</h3>

<p>El objetivo de la demo es ver cómo configurar un servlet HTTP mediante anotaciones,
por lo que la respuesta proporcionada por él es lo más sencilla posible: obtiene
un <code>writer</code> de la respuesta HTTP y escribe un sencillo mensaje en texto plano.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">PrintWriter</span> <span class="n">out</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
</span><span class='line'><span class="k">try</span><span class="o">{</span>
</span><span class='line'>    <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&lt;h2&gt;&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;This servlet has been configured simply by: &quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;@WebServlet(urlPatterns = {\&quot;/SimpleHttpServlet\&quot;})&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;&lt;/h2&gt;&quot;</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">out</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Para echar un ojo al código fuente, visitar el directorio
<a href="https://github.com/rchavarria/javaee-6-demos/tree/master/simple-http-servlet"><code>simple-http-servlet</code></a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Demos de tecnologías Java EE]]></title>
    <link href="http://rchavarria.github.io/blog/2013/09/03/demos-tecnologias-javaee/"/>
    <updated>2013-09-03T12:55:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/09/03/demos-tecnologias-javaee</id>
    <content type="html"><![CDATA[<p>Este post va a servir de índice o tabla de contenidos para una serie de post que
me gustaría ir escribiendo poco a poco, sin prisa pero sin pausa, que el blog ya
lleva mucho tiempo si actualizarse y hay que darle vida.</p>

<p>Estos posts van a tratar sobre tecnologías Java EE, de cómo usar estas tecnologías
en nuestros proyectos software y de cómo estas tecnologías nos permiten crear
aplicaciones. Intentaré que estas aplicaciones estén más orientadas a las aplicaciones
web.</p>

<p>Comenzaré con temas y aplicaciones muy sencillas, que prácticamente no tienen sentido
en el Mundo Real™, pero que me permitirán ir adentrándome en todo el mundo Java EE.</p>

<!-- more -->


<p>Lista de posts:</p>

<ul>
<li><a href="http://rchavarria.github.io/blog/2013/09/03/sencillo-servlet-http">Un sencillo servlet HTTP</a>: En este post veremos
que crear un servlet en Java EE 6 es sincillísimo, y que incluso no es necesario
contar con un archivo descriptor de la aplicación web.</li>
<li><a href="http://rchavarria.github.io/blog/2013/09/13/servlet-lee-parametros">Acceder a los datos de un formulario desde un servlet</a>:
Es posible acceder a datos enviados por el usuario en la petición HTTP desde un servlet.
En este post veremos cómo.</li>
<li><a href="http://rchavarria.github.io/blog/2013/09/17/servlet-redirecciona-jsp">Cómo redireccionar de un servlet a un JSP</a>:
En esta ocasión vamos un paso más allá en los servlets, y avanzamos hacia
una arquitectura MVC, separando la lógica de la aplicación (leer parámetros) de la
presentación, que en este caso la hará una página JSP.</li>
<li><a href="http://rchavarria.github.io/blog/2013/09/19/crear-servicio-web-jaxws">Cómo crear un servicio web</a>:
En esta demo veremos cómo crear un servicio web, y de cómo usar el framework Apache CXF
para su creación, configuración y despliegue en un contenedor web. Crearemos un servicio
web basado en la especificación JAX-WS, que intercambiará mensajes SOAP sobre HTTP.</li>
<li><a href="http://rchavarria.github.io/blog/2013/09/26/crear-cliente-servicio-web">Cómo crear un cliente de servicio web</a>:
Aquí veremos cómo crear un sencillo cliente que consuma el servicio web creado en la demo
anterior. Lo haremos mediante un test de JUnit, y así crearemos nuestro primer test
de integración.</li>
<li><a href="http://rchavarria.github.io/blog/2013/09/29/entendiendo-ciclo-vida-entidades-jpa">Entendiendo el ciclo de vida de entidades JPA</a>:
Aquí aprenderemos qué estados son posibles para una entidad JPA, qué significan
y cómo transicionar de unos a otros.</li>
<li><a href="http://rchavarria.github.io/blog/2013/10/28/myfaces-implementacion-javaserver-faces">Apache MyFaces como implementacion de JavaServer Faces</a>:
En esta demo crearemos desde cero una applicación web con el framework MVC MyFaces,
la implementación de Apache de JavaServer Faces.</li>
<li><a href="http://rchavarria.github.io/blog/2014/01/22/restful-spring-mvc">Aplicación web RESTful con Spring MVC</a>: En esta ocasión
crearemos una aplicación web, con apariencia de aplicación REST, y para ello usaremos la
tecnología Spring MVC.</li>
<li>Servlet listeners: Veremos el uso que le podemos dar a los distintos listeners asociados
a los servlets y su ciclo de vida: ServletContextListener,
ServletContextAttributeListener, ServletRequestListener y HttpSessionListener.</li>
<li>Crear una EJB sin estado: Aquí crearemos una EJB local sin estado y accederemos a
ella a través de un servlet, que será quien responda al usuario de nuestra aplicación.</li>
<li>Crear una EJB remota: En esta ocasión crearemos una EJB sin estado y remota, de forma
que se pueda acceder a ella desde una aplicación cliente, que también la desarrollaremos.</li>
</ul>


<p>Más adelante ya iré viendo por dónde seguirían las demos: páginas JSPs,
filtros para los servlets, logging, datos en la sesión, redirección&#8230;</p>

<!-- 
    Por donde seguir?

    http://www3.ntu.edu.sg/home/ehchua/programming/java/JavaServlets.html
    http://www.journaldev.com/1877/java-servlet-tutorial-with-examples-for-beginners
    http://www.journaldev.com/1997/servlet-example-in-java-with-database-connection-and-log4j-integration
    http://www.journaldev.com/1933/java-servlet-filter-example-tutorial

-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aprendiendo a colaborar en github]]></title>
    <link href="http://rchavarria.github.io/blog/2013/05/30/aprendiendo-a-colaborar-en-github/"/>
    <updated>2013-05-30T08:45:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/05/30/aprendiendo-a-colaborar-en-github</id>
    <content type="html"><![CDATA[<p>Recientemente, hablando con mi amigo <a href="http://twitter.com/dagarfol">David</a> sobre un
proyectillo que llevamos a medias (estamos empezando, espero que podamos tener algo
publicable pronto), salió el tema de cómo empezar a colaborar con
amigos/compañeros/quien-sea con <a href="http://git-scm.com/">git</a> en <a href="http://github.com">github</a>.</p>

<p>Yo le comenté que era bastante sencillo comenzar, pero de boquilla se pueden decir
muchas cosas (la mayoría mentira), así que para que no se quede en agua de borrajas,
en este post encontrarás 5 comandos y acciones básicas para comenzar a
trabajar en equipo con git y github.</p>

<!-- more -->


<h2>¿Qué necesito?</h2>

<p>Lo primero que se necesita es tener una cuenta en github. Si no tienes una, uno puede
<a href="https://github.com/users">registrarse</a> fácilmente. Es como crearse una cuenta de correo.</p>

<p><img class="center" src="http://rchavarria.github.io/images/2013/github-overview.jpg"></p>

<p>Después, es necesario que <a href="http://git-scm.com/downloads">descargues e instales git</a>
en el ordenador donde vayas a trabajar. En windows es tan sencillo como instalar cualquier
otro programa, así que no hay excusa para parar aquí.</p>

<p>Para configurar git y poder usarlo con github, debemos configurarlo. Para ayudarnos, los
chicos de github se han currado una aplicación,
<a href="https://help.github.com/articles/set-up-git">Github for Windows</a>. También se puede
<a href="https://help.github.com/articles/set-up-git#platform-linux">configurar github en linux</a>.</p>

<h2>Obtener el código fuente</h2>

<p>Para comenzar a colaborar, necesitas un repositorio donde esté almacenado el código fuente
sobre el cual vais a trabajar. Dos formas muy comunes de crear un repositorio en tu
cuenta de github son:</p>

<ol>
<li><a href="https://help.github.com/articles/create-a-repo">Crear un repositorio desde cero</a>.</li>
<li><a href="https://help.github.com/articles/fork-a-repo">Copiar el repositorio de otra persona (fork)</a>.</li>
</ol>


<p>Con tu repositorio en github, ya puedes <em>descargarlo</em> a tu máquina de trabajo. En realidad
lo que vas a hacer es una copia entera y completamente funcional del repositorio en github.</p>

<figure class='code'><figcaption><span>Clonando un repositorio </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone https://github.com/username/Spoon-Knife.git</span></code></pre></td></tr></table></div></figure>


<p>Esto creará un directorio llamado <code>Spoon-Knife</code> donde se encuentra el repositorio completo.</p>

<h2>Modificar ficheros y subir los cambios</h2>

<p>Ya podemos realizar los cambios que queramos al código fuente.</p>

<p>Para subir estos cambios al repositorio de github, debemos seguir varios pasos:</p>

<ol>
<li>Añadir los fichero nuevos al área temporal de git llamada <code>stage</code> para poder hacer <code>commit</code>
al repositorio (existen más opciones para este comando, pero el más básico es éste):</li>
</ol>


<figure class='code'><figcaption><span>Añadiendo ficheros al área de stage </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Hacer <code>commit</code> de esos cambios. De esta forma, nuestro repositorio ya contendrá los cambios,
sólo hará falta incorporarlos al repositorio de github (repositorio remoto):</li>
</ol>


<figure class='code'><figcaption><span>Commiteando ficheros al repositorio local </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git commit -m "Mensaje del commit"</span></code></pre></td></tr></table></div></figure>


<ol>
<li>Subir los cambios del repositorio local al repositorio remoto (github). El comando más básico
para ello es el siguiente:</li>
</ol>


<figure class='code'><figcaption><span>Sincronizando con el repositorio remoto </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git push</span></code></pre></td></tr></table></div></figure>


<p>Si vamos a nuestro repositorio en github veremos cómo aparecen los commits que hicimos en nuestro
repositorio local. BIEN!</p>

<h2>Descargar cambios del repositorio de github</h2>

<p>Con el siguiente comando (esta es su sintaxis más sencilla) podrás incorporar los cambios que haya
en el repositorio remoto de github a tu repositorio local:</p>

<figure class='code'><figcaption><span>Sincronizando el repositorio local con cambios del remoto </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git pull</span></code></pre></td></tr></table></div></figure>


<p>Esta es su sintaxis más sencilla. Para avanzar en este aspecto, tendría que hablar de
<a href="http://gitref.org/remotes/">remotes</a>, pero es un concepto bastante extenso y quedaría un
post muy largo.</p>

<h2>Compartir nuestros cambios con los compañeros</h2>

<p>De acuerdo, ya tenemos nuestros cambios en nuestro repositorio local y los hemos subido a nuestro
repositorio remoto en github. Existe una forma muy sencilla en github de informar a nuestros compañeros
de que hemos hecho cambios, los llamados
<a href="https://help.github.com/articles/using-pull-requests">Pull Request</a>.</p>

<p><img class="right" src="http://rchavarria.github.io/images/2013/github-pull-request.jpg"></p>

<p>Mediante un Pull Request estás indicando a un compañero que le quieres pasar unos cambios que
tú has hecho. Ahora tu compañero deberá decidir si acepta los cambios y él incorporará esos
cambios a su repositorio remoto</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Save InformaticOS, mi primer open space]]></title>
    <link href="http://rchavarria.github.io/blog/2013/04/30/save-informaticos/"/>
    <updated>2013-04-30T12:23:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/04/30/save-informaticos</id>
    <content type="html"><![CDATA[<p>Wow! Menudo chute! No puedo decir más! El sábado 27 de abril estuve en mi primer
<a href="en.wikipedia.org/wiki/Open_space">Open Space</a>,
<a href="http://saveinformaticos.reeelab.com/2013/03/07/un-open-space-para-debatir-sobre-nuestra-profesion/">Save InformaticOS</a>,
y fue un día muy intenso y agotador, pero también revitalizante y enriquecedor.
Me alegro muchísimo de haber podido ir. He tenido la oportunidad de conocer a mucha gente
interesante, y espero poder seguir encontrándome con ellos en el futuro.</p>

<p>Escribo esto justo el sábado por la noche, para no perder el subidón (aunque lo haya publicado
unos días después). Ya he acostado a mi hijo, y tengo un ratito de reflexión, así que ahí va:</p>

<!-- more -->


<p><img class="center" src="http://rchavarria.github.io/images/2013/panoramica-saveinfos.jpg" width="1250" height="228" title="La rotonda en SaveInfos" ></p>

<p>Lo primero de todo, mil gracias a <a href="https://twitter.com/MaicaTrinidad">Maica</a>,
<a href="https://twitter.com/jmbeas">Jose Manuel</a> y
<a href="https://twitter.com/dgomezg">David</a> por haberlo hecho posible. Han hecho un esfuerzo enorme
de organización y promoción. Gracias.</p>

<p>Creo que la profesión de <strong>Desarrollador</strong> tiene muchos problemas, y tengo la impresión de que sufro
bastantes de ellos en mis propias carnes. No quiero echar la culpa a nadie, el máximo responsable
soy yo, en mis manos está cambiar esta situación. Y por eso he asistido a este evento: porque
quiero conocer de mis compañeros de profesión soluciones a estos problemas. Está claro que en un
sólo día no se van a solucionar todos ellos, pero al menos, esperaba llevarme unas cuantas
soluciones, o más que soluciones, una serie de acciones que poder poner en práctica para ir
mejorando poco a poco.</p>

<p>Todo el día fue <strong>muy</strong> intenso. El formato de Open Space no deja espacio para el relax. Está pensado
para que haya un flujo contínuo de conversaciones. Algunos se quejaron de que nos saltamos algunas
reglas de este formato, pero había tanta pasión en las conversaciones que veía difícil mantener
un único rumbo, veía difícil acotar las discusiones a una sola hora. Quizá intentamos poner límites
donde deberíamos haber dejado que los círculos siguieran su curso. Yo, al menos, me llevo muchas
conversaciones muy agradables, con gente que no conocía anteriormente, y eso hace que valore esta
experiencia muy positivamente.</p>

<p>Durante la última sesión, la de retrospectiva, hicimos un resumen de lo hablado durante todo el día.
Algunos se quejaron de que no habíamos sido capaces de encontrar soluciones concretas a los problemas
de esta nuestra profesión, pero en mi opinión, aparecieron unas cuantas acciones/soluciones para
mejorar la situación. Las que aparecen aquí no son todas, en la página de SaveInformaticOS hay un
<a href="http://saveinformaticos.reeelab.com/resumenes/">resumen de cada una de las conversaciones</a>,
pero son las que más influyeron en mí:</p>

<ul>
<li>empatizar con tus superiores, negociar con ellos para conseguir solucionar problemas,
fusionar las capas (desde desarrollo hasta alta dirección)</li>
<li>acciones de guerrilla, haz algo a pequeña escala y demuetra que es algo que funciona</li>
<li>generar envidia (sana), por ejemplo, hablar de lo que mola el libro aquel que leíste</li>
<li>organizar coding dojo&#8217;s o charlas en la universidad</li>
<li>aprende marketing, técnicas de negociación, véndete y vende lo que haces, haz
comprender el trabajo, tiempo, esfuerzo y dinero que vale
(como dice Bonilla en una de sus bonilistas:
<a href="http://us2.campaign-archive2.com/?u=374c664073e1a1fa3deca53b4&amp;id=92e3e39bcd&amp;e=72f3cbeaf8">haz de evangelista técnico</a>).</li>
<li>llevar a alguien nuevo a eventos de este tipo u otros</li>
</ul>


<p>¿Y ahora qué? Por mi parte, me gustaría madurar algunas ideas, hacer un plan de acción, definir
algunas acciones que podría llevar a cabo en mi situación, y finalmente, atreverme a ponerlas
en acción. Por parte de la organización del open space, seguro que habrá más,
<a href="http://twitter.com/saveinfos">stay tuned!</a>.</p>

<p>Y como bola extra: en una de las conversaciones tratamos de hacer un ejercicio que me
encantó. Aunque el resultado no fue exactamente como se planteó el ejercicio. Pondría una
imagen aquí, pero Jose Manuel Beas lo ha hecho perfectamente en
<a href="http://saveinformaticos.reeelab.com/2013/04/28/back-to-the-future">Back to the Future</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notas sobre un video de marketing online]]></title>
    <link href="http://rchavarria.github.io/blog/2013/04/17/notas-sobre-un-video-de-marketing-online/"/>
    <updated>2013-04-17T06:15:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/04/17/notas-sobre-un-video-de-marketing-online</id>
    <content type="html"><![CDATA[<p>En este post incluyo las notas que fui tomando mientras visualizé el siguiente vídeo:
<a href="http://youtu.be/33vKaNuJh4o">Marca personal, mktIO</a> de la serie #mktIO que regularmente
se publica en el canal de youtube de
<a href="http://www.youtube.com/user/desarrollowebcom">Desarrollo Web</a>. No solo publican estos vídeos,
si no que son hangouts que realizan semanalmente, y sobre muy diversos temas:
desarrollo software, php, desarrollo web, SEO, &#8230;</p>

<p>Me gustó tanto este vídeo y otros relacionados con él que he creado una lista en
youtube donde tenerlos a mano:
<a href="http://www.youtube.com/watch?v=rnXD3-5Sipk&amp;list=PLUGn62zSm3gp_xv0y7Lv3fjNhvEGLEFbC">Lista de #mktIO en youtube</a>.</p>

<!-- more -->


<p>Estas notas son muy personales, y no pretendo que sean una guía para nadie ni son
un resumen escrito del mismo. Son notas que quiero conservar, que quiero recordar.
El vídeo está ahí, por lo que si quieres conocer más sobre el tema te recomiendo
que lo veas, es sumamente interesante. Pero antes, dejo el vídeo por si lo quieres
ver antes.</p>

<iframe width="560" height="315" src="http://www.youtube.com/embed/33vKaNuJh4o" frameborder="0" allowfullscreen></iframe>


<h1>Notas que tomé sobre LinkedIn</h1>

<ul>
<li><p>Piensa en inglés, es un producto anglosajón, así que piensa en inglés, sobretodo
cuando añadas <em>Aptitudes y conocimientos</em> (Skills &amp; expertise).</p></li>
<li><p>Las recomendaciones están perdiendo su valor debido al abuso que suelen hacer los
usuarios de ellas.</p></li>
<li><p>Defínete a tí mismo con las Aptitudes y conocimientos.</p></li>
<li><p>Haciendo click en una aptitud, puedo ver otras aptitudes relacionadas y conocer
nuevos profesionales de fuera de mi red.</p></li>
<li><p>¿Cómo elegir qué aptitudes añadir? No importa cuáles elijas, pero debes conseguir
una buena valoración en ellas. LinkedIn las valora a través de palabras clave en
experiencias, cursos, actividad, grupos, &#8230;</p></li>
<li><p>En el extracto deberías indicar hacia dónde quieres ir.</p></li>
<li><p>¿Cómo conseguir que te valoren? Invitando a tus contactos a que lo hagan,
(fácil, ¿no?).</p></li>
<li><p>Se pueden mover elementos de tu perfil (aptitudes, experiencia, extracto, &#8230;), para
poder destacar aptitudes sobre experiencia, o publicaciones sobre educación, por ejemplo.</p></li>
<li><p>Es posible añadir elementos visuales (imágenes y vídeos) a cada una de las experiencias
que hayamos añadido. De esta forma puedes mostrar tu trabajo, no solo contarlo.</p></li>
<li><p>Para que seas visible debes participar en los grupos, ayudar a resolver problemas
a tus contactos, aportar tu experiencia en discusiones, pero de forma altruista, sin
ánimo de lucro.</p></li>
<li><p>Buscar grupos y contactos con los que poder relacionarte, pero no para buscar
trabajo, si no para darte a conocer, aprender, participar, enriquecerte, &#8230;</p></li>
</ul>


<h1>Otras notas</h1>

<p>En el vídeo se habla de otras herramientas y otras redes sociales, pero me quedé
bastante impresionado con estos consejos sobre LinkedIn y son las notas que quiero
conservar.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[La meta]]></title>
    <link href="http://rchavarria.github.io/blog/2013/04/10/la-meta/"/>
    <updated>2013-04-10T10:06:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2013/04/10/la-meta</id>
    <content type="html"><![CDATA[<h4>La meta</h4>

<h5>Eliyahu Goldratt</h5>

<p><img class="right" src="http://ecx.images-amazon.com/images/I/51E50P52AXL._SY300_.jpg" width="195" height="300" title="La meta" ></p>

<h2>Por qué lo he leído</h2>

<p>Nunca había oído hablar de este libro, pero cuando asistí a la CAS2012, el año pasado en Cáceres,
varias personas que allí conocí (<a href="https://twitter.com/rferlei">Roberto</a> y
<a href="https://twitter.com/anuskiaranda">Ana</a>) me hablaron maravillas de él, así que decidí
ponerlo en la lista de libros a leer.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Bueno, en realidad ya me habían contado de qué iba el libro, así que ya llevaba una buena idea
de lo que se iba a tratar. Y tenía bastantes buenas espectativas.</p>

<h2>Qué encontre</h2>

<p>Encontré un magnífico libro. La verdad es que es muy ameno y divertido. También es intrigante
ir leyendo cómo el autor va relatando a través del protagonista un proceso de descubrimiento de
soluciones a todos sus problemas.</p>

<p>La verdad es que se hace muy fácil de leer y comprender los principios Lean y la teoría de las
restricciones a través de la historia contada a través del protagonista.</p>

<h2>Conclusiones</h2>

<p>El libro me ha encantado, aunque me hubiera gustado mucho más haberlo leído un tiempo atrás, ya
que trabajé en una fábrica como Ingeniero de Desarrollo (para desarrollar nuevos productos). Por
lo menos ha sido divertido revivir experiencias de aquel trabajo, ya que muchos de los principios
(y problemas también) expuestos en el libro ya los viví en mis propias carnes.</p>

<p>Así pues, este es un libro recomendado sobre todo a todos aquellos interesados en mejorar procesos
de producción. No parece un tema muy de desarrollo de software, que es a lo que me dedico, pero
estos principios son la base de las metodologías Lean, y por ende, Agile. Además, es un libro
que se lee relativamente rápido, y, de verdad, es muy divertido, así que tampoco cuesta tanto.</p>

<h2>Pasajes que quiero recordar de este libro</h2>

<blockquote><p>Comprar a precios económicos no es la meta.</p>

<p>La meta no es vender, hay veces que se vende perdiendo dinero o con márgenes ínfimos.</p>

<p>Qué es lo que la gente piensa que son las metas: compras baratas, contratación de gente adecuada,
tecnología punta, fabricacón de bienes de calidad, venta de bienes de calidad,
conquista tasa de mercado, comunciaciones o cumplimiento de los deseos del cliente.
Pero esos son medios para alcanzar la meta.</p>

<p>La calidad sola, es importante, pero no es la meta.</p>

<p>Tecnologia, es importatne, pero no es la meta.</p>

<p>Trabajar no es sinónimo de ganar dinero.</p>

<p>Ésta es la meta: ganar dinero aumentando los beneficios netos y al mismo tiempo el rendimiento
de la inversión (ROI) y la liquidez.</p>

<p>Parámetros que expresan la meta y que permiten establecer procedimientos operativos para
dirigir la fábrica: ingresos, inventarios y gastos de operación.</p>

<p>Una fabrica, en la que todo el mundo produce ininterrumpidamente, es muy poco productiva.</p>

<p>Una regla que expresa la relación entre cuellos de botella y los demas recursos: equilibrar
el flujo, no la capacidad.</p>

<p>El grado de utilización de un recuros &#8216;no-cuello&#8217; de botella no vendrá dado por su propia
capacidad sino por alguna otra restricción del sistema.</p>

<p>Se pueden distinguir 4 tipos de tiempos desde que el material entra en la fábrica hasta
que sale de ella: de preparación, de proceso, en cola y de espera.</p>

<p>Tres consejos sobre cómo dirigir: Saber convencer a otras personas, desprender las capas
de la práctica común y vencer la resistencia al cambio.</p>

<p>Nunca des las respuestas, solo plantea las preguntas.</p>

<p>¿Qué cabmiar? ¿Hacia qué cambiar? ¿Cómo provocar el cambio? Basicamente estamos pidiendo
las habiliades fundamentales que uno debería esperar de un directivo.</p></blockquote>

<h2>Conceptos</h2>

<ul>
<li><p>Productividad: significa hacer las cosas de tal manera que, en el caso de la empresa, ésta
se aproxime lo más posible a su meta. Todo aquello que lleve a una compañía más cerca de su meta
es productivo, todo aquello que no la lleve es imprductivo.</p></li>
<li><p>Ingresos: tasa de generacion de dinero a traves de las ventas.</p></li>
<li><p>Inventario: todo el dinero que el sistema ha invertido en adquierrir cosas que pretende vender.</p></li>
<li><p>Gastos de operación: todo el dienro que el sistema gasta para convertir el inventario en ingresos netos.</p></li>
</ul>


<h2>Otras lecturas y enlaces relacionadas</h2>

<ul>
<li><a href="http://rchavarria.github.io/blog/2012/10/10/lean-software-development/">Lean software development</a>, de Mary y Tom Poppendiek.</li>
<li><a href="https://plus.google.com/105077077543737057709">Roberto Hens</a> también lo ha leído, y esto es lo que le parece:</li>
<li><a href="http://robertohens.blogspot.com.es/2013/04/Kanban-el-Origen-The-Goal.html">Kanban, el origen</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[microtip] eclipse: Detail Formatters]]></title>
    <link href="http://rchavarria.github.io/blog/2013/02/19/microtip-eclipse/"/>
    <updated>2013-02-19T17:19:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2013/02/19/microtip-eclipse</id>
    <content type="html"><![CDATA[<p>A través del post de <a href="http://twitter.com/kinisoftware">Kinisoftware</a>:
<a href="http://kinisoftware.com/2013/02/a-la-caza-del-bug-en-eclipse/">A la caza del bug en eclipse</a>
me encontré con un link muy recomendable, si trabajas con Eclipse como IDE:
<a href="http://eclipsesource.com/blogs/2013/01/08/effective-java-debugging-with-eclipse/">Effective Java debugging with Eclipse</a>.</p>

<p>En ese link aparecen multitud de consejos sobre cómo hacer debug en eclipse de una manera
mucho más productiva. Entre estos consejos están los <em>Detail Formatters</em>, para formatear
de una forma mucho más avanzada que con un simple <code>toString()</code> aquellas clases que desees.</p>

<!-- more -->


<p>En un primer momento, me parecieron muy útiles, pero no profundicé en ellos. Pensé que
cada vez que iniciara la depuración de una aplicación, debía crearme los Detail
Formatters que deseaba, y me pareció muy laborioso.</p>

<p>Pero no es así, estos formatters se guardan en tus preferencias, y los puedes
editar siempre que quieras. Los encontrarás en el menú <code>Window</code> > <code>Preferences</code>.
Y dentro de preferencias, en <code>Java</code> > <code>Debug</code> > <code>Detail Formatters</code>.</p>

<h2>Buscando una excusa</h2>

<p>Una vez que me convencí de su utilidad, había que crear alguno, ¿no?. Actualmente
me encuentro con que trabajo bastante con el tipo de Java <code>java.awt.geom.Rectangle2D</code>,
y la verdad es que no me gusta nada cómo Eclipse me muestra este tipo de datos
en una sesión de debugging.</p>

<p><img class="center" src="http://rchavarria.github.io/images/2013/rectangle2d-without-detail-formatter.png" width="804" height="151" title="Rectangle2D sin detail formatter" ></p>

<h2>Crear un detail formatter</h2>

<p>Manos a la obra. Primero, establecemos un punto de ruptura donde podamos ver en la vista
<em>Variables</em> una variable de la clase deseada, en este caso de <code>java.awt.geom.Rectangle2D</code>.</p>

<p>Pinchamos con el botón derecho del ratón y seleccionamos la opción <em>New Detail Formatter&#8230;</em>.</p>

<p>Ahora tenemos a nuestra disposición una ventana donde podemos introducir código Java de forma
que retorne una <code>String</code> con la representación que nosotros queramos. Yo he usado el siguiente
código:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">text</span><span class="o">.</span><span class="na">NumberFormat</span> <span class="n">nf</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">java</span><span class="o">.</span><span class="na">text</span><span class="o">.</span><span class="na">NumberFormat</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Locale</span><span class="o">.</span><span class="na">ENGLISH</span><span class="o">);</span>
</span><span class='line'><span class="n">nf</span><span class="o">.</span><span class="na">setMaximumFractionDigits</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
</span><span class='line'><span class="n">nf</span><span class="o">.</span><span class="na">setGroupingUsed</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span>
</span><span class='line'>    <span class="s">&quot;x: &quot;</span> <span class="o">+</span> <span class="n">nf</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">getX</span><span class="o">())</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span> <span class="o">+</span>
</span><span class='line'>    <span class="s">&quot;y: &quot;</span> <span class="o">+</span> <span class="n">nf</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">getY</span><span class="o">())</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span> <span class="o">+</span>
</span><span class='line'>    <span class="s">&quot;w: &quot;</span> <span class="o">+</span> <span class="n">nf</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">getWidth</span><span class="o">())</span> <span class="o">+</span> <span class="s">&quot;\n&quot;</span> <span class="o">+</span>
</span><span class='line'>    <span class="s">&quot;h: &quot;</span> <span class="o">+</span> <span class="n">nf</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="n">getHeight</span><span class="o">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Y éste es el resultado, para mi gusto, mucho más compacto y directo:</p>

<p><img class="center" src="http://rchavarria.github.io/images/2013/rectangle2d-using-detail-formatter.png" width="548" height="116" title="Rectangle2D usando detail formatter" ></p>

<h2>Conclusión</h2>

<p>En cualquier proyecto nos podemos encontrar con clases que no podremos modificar (frameworks,
librerías, código legacy, &#8230;). Pero no nos tenemos que conformar con sus tristes y aburridos
métodos <code>toString()</code>. Podemos escribir nuestro propio código para formatear estos tipos de datos.
Y lo mejor de todo, podemos reutilizarlo, ya que nuestros formatters se guardan como preferencias
de nuestro IDE favorito.</p>
]]></content>
  </entry>
  
</feed>
