<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2015-11-01T23:28:12+01:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Screencast de programación: Robot name en exercism.io]]></title>
    <link href="http://rchavarria.github.io/blog/2015/11/01/screencast-robot-name-exercism/"/>
    <updated>2015-11-01T09:16:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/11/01/screencast-robot-name-exercism</id>
    <content type="html"><![CDATA[<p>En el <a href="http://rchavarria.github.io/blog/2015/10/25/youve-got-commit/">post anterior</a> contaba que me gusta aprender, y que una de las mejoras
formas era practicando. Y que actualmente estaba usando la plataforma
<a href="http://exercism.io/">exercism.io</a> para ello, concretamente el <a href="http://exercism.io/languages/ecmascript">track de ECMAScript</a> para practicar
escribiendo código en ES2015. Es muy fácil decir que te gusta aprender, y que
te gusta practicar. En esta ocasión lo demuestro.</p>

<p>He grabado un breve screencast, de menos de 10 minutos, donde muestro cómo de
fácil es usar exercism.io. En el screencast resuelvo un ejercicio llamado
<em>Robot name</em>, donde se trata de generar nombres aleatorios para cada uno de los
robots que crea el cliente de la clase <code>Robot</code>.</p>

<!-- more -->


<h2>Screencast</h2>

<iframe src="https://player.vimeo.com/video/144259723"
        width="500"
        height="281"
        frameborder="0"
        webkitallowfullscreen
        mozallowfullscreen
        allowfullscreen></iframe>


<p>El proceso a seguir es muy sencillo. El primer paso es descargar el problema
mediante el comando:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>exercism fetch ecmascript robot-name
</span></code></pre></td></tr></table></div></figure>


<p>el cual indica a exercism.io obtener un ejercicio del track de ECMAScript
llamado robot-name.</p>

<p>Una vez descargado, podemos leer el fichero <code>README</code> para saber de qué trata el
problema. Lo siguiente que deberíamos leer son los tests, obtenidos
directamente de la plataforma. Los tests nos indicaran qué fichero debemos
crear, y nos darán pistas sobre el código que deberemos escribir. Al final, de
lo que se trata, es de resolver los problemas uno a uno, hasta completarlos
todos.</p>

<p>En ese punto el problema estaría resuelto. Podemos subir nuestra solución a la
plataforma con el comando:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>exercism submit robot-name.js
</span></code></pre></td></tr></table></div></figure>


<p>donde <code>robot-name.js</code> es el nombre del fichero donde está implementada nuestra
solución.</p>

<p>Por fin, el último paso, es usar exercism.io para comentar soluciones de otros
usuarios, aprender de las soluciones de otros, e ir iterando sobre nuestra
propia solución para ir perfeccionándola. O al menos para aprender nuevas
técnicas de nuestro lenguaje de programación resolviendo de distintas formas el
mismo problema, a modo de kata.</p>

<h2>Otros screencasts</h2>

<ul>
<li><a href="http://rchavarria.github.io/blog/2014/10/23/screencast-programacion-juego-disparejo/">El juego del disparejo</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[You've got commit!]]></title>
    <link href="http://rchavarria.github.io/blog/2015/10/25/youve-got-commit/"/>
    <updated>2015-10-25T15:18:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/10/25/youve-got-commit</id>
    <content type="html"><![CDATA[<p>Una de las mejores formas de aprender es haciendo cosas (<em>learning by doing</em>,
que está muy de moda ahora). Y otra forma muy buena es manteniendo
conversaciones con profesionales de tu sector. Por todo lo aprendido hay que
estar agradecido, y qué mejor forma de agradecer que contribuir a la comunidad,
a tu profesión, realizando algún trabajo del que se puedan beneficiar otros. La
siguiente historia cuenta un camino que estoy recorriendo, de cómo empezé algo
por el simple hecho de aprender y terminé participando en un proyecto open
source como es <a href="http://exercism.io/">exercism.io</a>.</p>

<p><img class="center" style="width: 225px" src="http://rchavarria.github.io/images/2015/exercism-logo.svg"/></p>

<!-- more -->


<h2>El origen</h2>

<p>Llevaba un tiempo utilizando <a href="http://www.solveet.com/">solveet.com</a> para practicar con pequeños
ejercicios de programación. De hecho, utilicé la plataforma con distintos
lenguajes que estaba interesado en aprender. Pero poco a poco fui perdiendo la
motivación para usarla. No recibía feedback de mis soluciones, de lo cual se
pueden deducir dos cosas: que mis soluciones eran penosas o que la mayoría de
los usuarios no estaban por la labor de compartir.</p>

<p>En realidad, creo que la causa principal era que yo aportaba mi solución tiempo
después de la última aportada, así que los usuarios probablemente ya habrían
perdido interés en ese problema en concreto. No le puedo echar la culpa a
Solveet, es una plataforma estupenda. Si estás buscando algo para practicar, y
en español, te lo recomiendo. Disfrutarás de lo lindo.</p>

<h2>Expandiendo horizontes</h2>

<p>Con esa falta de motivación, llevaba rondando por la cabeza probar otras
plataformas similares, y me decidí por <a href="https://projecteuler.net/">Project Euler</a>. Hablaban muy bien de
ella, lleva mucho tiempo en funcionamiento y goza de fama, así que tenía que
ser buena. Pero no duré mucho. Una de las <em>normas</em> de la casa pide que no hagas
público tu código con el que resuelves los problemas. Pero ese es uno de los
objetivos que busco, que la gente critique mi código y poco a poco vaya
aprendiendo.</p>

<p>Por casualidad, vi esta <a href="http://passionatevoices.org/2015/06/27/episode-3-katrina-owen/">entrevista a Katrina Owen</a>, creadora de exercism.io y
me pareció que sería buena idea probar la plataforma. Uno de los requisitos es
instalar un programa, para poder bajarte problemas a tu ordenador, resolverlos
y poder subirlos a la plataforma, lo cual no me llamaba mucho la atención. Pero
<a href="http://garajeando.blogspot.com.es/">Manuel Rivero, en Garajeando</a>, un blog que sigo, tiene varios post de sus
soluciones en exercism.io, así que malo no podía ser.</p>

<h2>Los baches del camino</h2>

<p>Yo quería practicar resolviendo problemas con ECMAScript 2015. Ahí me llevé el
primer chasco. Existía un track para JavaScript, pero no para ES2015. No se por
qué, pero miré el código fuente en GitHub de exercism.io. Vi que había un
repositorio para ECMAScript, pero en la página no existían esos ejercicios.
Descubrí que era porque todavía no tenía el número de problemas necesarios para
ser público. Hice un fork del proyecto, y me puse a juguetear.</p>

<p>Me encontré con unos cuantos problemas para ser capaz de montar el entorno de
desarrollo y ejecutar los tests: dependencias desactualizadas, comandos que no
se ejecutaban bien en Windows (parecía que solo funcionaba en Mac). Después de
pelearme un poco con el código y la configuración, con unas pequeñas
modificaciones solucioné los problemas que tenía. Subí el código a
<a href="https://github.com/rchavarria">mi cuenta de GitHub</a> e hize un <em>Pull Request</em> al proyecto.</p>

<h2>Sorpresa</h2>

<p>¡Y contestaron!  Después de pulir un par de detalles (es bastante común para
primerizos y también la razón por la que muchos se echan para atrás a la hora
de contribuir al open source) aceptaron mi solución. ¡Había contribuido a un
proyecto open source!</p>

<p>Pero todavía había cosas que me molestaban. Detalles. <em>El diablo está en los
detalles</em>, dicen. La verdad es que no recuerdo exactamente qué era, pero tenía
<em>trabajo</em> por hacer. Pregunté un par de cosas a Katrina, arreglé un par de
detalles más, algún Pull Request más, y sin esperarlo:</p>

<blockquote><p>You&#8217;ve got commit!</p></blockquote>

<p>¿Qué es eso? ¿Qué significa? Tuve que leer el correo varias veces. No entendía.
bla bla bla, <em>te han añadido a un par de grupos en GitHub</em>, bla bla bla,
<em>permisos de escritura</em>, bla bla bla, &#8230; ¡Me estaban dando permisos de
escritura en el proyecto! Sienta bastante bien saber que estás contribuyendo a
un proyecto open source, y que lo están utilizando muchos usuarios.</p>

<h2>¿El final?</h2>

<p>¿Y ahora qué? Tenía que seguir. No podía dejarlo ahí. Asi que me puse como
objetivo que exercism.io tendría su <a href="http://exercism.io/languages/ecmascript">track de ECMAScript 2015</a>.</p>

<p>Un punto para lograrlo era incorporar al menos 10 ejercicios al track. Fácil.
Un poco de trabajo&#8230; y conseguido. Pero otro punto requería de varias
personas. La idea es que haya varias personas encargadas de gestionar el track,
dando feedback a los primeros usuarios, para que no se sientan desamparados, e
ir manteniendo el código con nuevos cambios provenientes del proyecto global.
Pequeñas tareas comunes a todos los lenguages.</p>

<p>¡Me quedé flipado! Cuando contacté por email con varios usuarios de
exercism.io, sin conocerlos de nada,&#8230; ¡Me respondieron todos! ¡Todos! Algunos
de ellos no podían embarcarse en el proyecto, pero respondieron. Flipando. Con
su ayuda, el track se hizo público y el trabajo duro acaba de comenzar. Ahora
toca dar feedback a los usuarios y seguir incorporando ejercicios, para que los
usuarios vean que el track está vivo y se animen a seguir practicando sus
habilidades como programadores.</p>

<h2>¿Te animas?</h2>

<p>Así que, ya hay <a href="http://exercism.io/languages/ecmascript">track de ECMAScript 2015</a> en exercism.io. Os animo a probar la
plataforma, a practicar, a mejorar y a comentar las soluciones de los demás.
Espero veros por allí. Si decidis probarlo, veréis mi careto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla técnica: Effective learning for programmers]]></title>
    <link href="http://rchavarria.github.io/blog/2015/10/18/charla-tecnica-effective-learning-for-programmers/"/>
    <updated>2015-10-18T18:46:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/10/18/charla-tecnica-effective-learning-for-programmers</id>
    <content type="html"><![CDATA[<p>Me gustaría compartir una charla de <a href="http://akaptur.com/">Allison Kaptur</a>, en un grupo de usuarios
de Python de Nueva Zelanda, titulada <a href="https://www.youtube.com/embed/Mcc6JEhDSpo">Effective learning for programmers</a>,
donde habla acerca de encontrar ciertas estrategias para el aprendizaje.</p>

<iframe width="420"
        height="315"
        src="https://www.youtube.com/embed/Mcc6JEhDSpo"
        frameborder="0"
        allowfullscreen></iframe>




<!-- more -->


<h2>Notas tomadas</h2>

<p>La charla consta de dos partes: mentalidad (<em>mindset</em>) y estrategias</p>

<h3>Mentalidad</h3>

<p>Allison habla de dos tipos:</p>

<ol>
<li><strong>Mentalidad de crecimiento</strong>: la inteligencia es algo que se puede trabajar y
desarrollar con <strong>esfuerzo</strong></li>
<li><strong>Mentalidad fija</strong>: la inteligencia es la que es y no puede ir a más, la
inteligencia es fija, y cada uno tiene una cierta cantidad de ella</li>
</ol>


<p>La diferencia fundamental radica en que quien posee una mentalidad de
crecimiento, piensa que si algo no es fácil, puede trabajar duro para
aprenderlo. Mientras que quien posee una mentalidad fija, piensa que si algo es
fácil, se trata de una cualidad con la que ha nacido, que es de lo suyo.</p>

<p>Alabanzas contraproducentes: ante alabanzas de un trabajo realizado, los de
mentalidad fija se contentan, mientras que los de mentalidad de crecimiento se
sienten animados para superarse a sí mismos.</p>

<p>Respuesta a la confusión: los de mentalidad fija se quedan bloqueados, y los de
mentalidad de crecimiento se esfuerzan en entender la parte complicada, hasta
que superan el obstáculo.</p>

<p><strong>Está claro que los desarrolladores necesitamos una mentalidad de
crecimiento</strong>. Pero, ¿se puede cambiar una mentalidad fija?</p>

<ol>
<li>Reformula las alabanzas: cuando alaben tu trabajo: &#8220;eres un máquina&#8221;,&#8230; te
dices a tí internamente: &#8220;no soy un máquina, he trabajado duro para llegar
hasta aquí&#8221;</li>
<li>Reformula los fallos</li>
<li>Celebra los desafíos: cuando te toca arreglar un bug, decirte a tí mismo:
&#8220;genial! que se prepare ese bug, porque le voy a patear el culo&#8221;</li>
<li>Pregunta sobre el proceso seguido: pregunta siempre, &#8220;¿cómo has hecho eso?&#8221;,
&#8220;¿cómo funciona eso?&#8221;, muestra curiosidad por cómo se hacen las cosas,
aprende de los que más saben</li>
</ol>


<h3>Estrategias</h3>

<p>El aprendizaje es una habilidad adquirida, por lo que se puede mejorar
practicando:</p>

<ol>
<li>Recuperación con esfuerzo (<em>effortful retrieval</em>): aprender mediante
preguntas que te obligan a encontrar una respuesta. Es maś efectivo que una
relectura, incluso mejor que una relectura de las notas que has tomado en una
clase. La relectura te da la ilusión de que ya te sabes la lección.</li>
<li>Práctica espaciada (<em>spaced practice</em>): es mejor que una práctica masiva. La
práctica debe ser espaciada en el tiempo, variada y que mezcle conceptos de
todo el proceso de aprendizaje. Es mejor un curso de 1h durante 5 días que uno
de 5 horas en un día.</li>
<li>Dificultad y errores: cierta dificultad suele ser lo deseable. Cometer
errores suele ser también recomendable durante el aprendizaje.</li>
</ol>


<h4>Implementando <em>recuperación con esfuerzo</em></h4>

<ul>
<li>Las tarjetas de conceptos (<em>flashcards</em>) es un ejemplo de esto, pero quizá no
es la mejor forma de implementarlo</li>
<li>Cuando no sabes a ciencia cierta algo, intenta adivinarlo. Por ejemplo, los
argumentos de un comando, o intentar deducir algún aspecto de la lección que
estas estudiando</li>
<li>Intentar adivinar cual es la causa de un bug antes siquiera de empezar a
solucionarlo</li>
<li>Cuando te preguntan por algún concepto que te suena, pero no lo conoces en
profundidad, puedes intentar deducir de qué trata y así confirmar tus
suposiciones</li>
</ul>


<h4>Implementando <em>práctica espaciada</em></h4>

<ul>
<li>Trabajar en tus proyectos personales los fines de semana. Así cuando vayas a
comenzar el sábado, debes recordar lo que trabajaste hace un tiempo. Eso
ayuda al aprendizaje.</li>
</ul>


<h4>Implementando <em>dificultad y errores</em></h4>

<ul>
<li>La dificultad vienen implícita en muchos de nuestros aprendizajes, así que no
hace falta que hagamos algo extra para ello</li>
<li>Para descubrir errores: intentar buscar un feedback rápido, revisiones de
código, post-mortems,&#8230;</li>
<li>Generar un entorno donde los pequeños errores no tienen consecuencias, o que
cuando tú sepas algo que tus compañeros no saben, no te burles de ellos</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla técnica: All the little things]]></title>
    <link href="http://rchavarria.github.io/blog/2015/10/18/charla-tecnica-all-the-little-things/"/>
    <updated>2015-10-18T18:40:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/10/18/charla-tecnica-all-the-little-things</id>
    <content type="html"><![CDATA[<p>A través del blog <a href="http://garajeando.blogspot.com.es/2015/08/interesting-talk-all-little-things.html">Garajeando</a> llegué a esta charla de <a href="http://www.sandimetz.com">Sandi Metz</a> que se
titula <a href="https://www.youtube.com/watch?v=8bZh5LMaSmE">All the little things</a>. Sandi Metz es autora del libro
<a href="http://www.sandimetz.com/products">Practical Object Oriented Design in Ruby</a> y ya he visto algunas de sus charlas, por lo
que la calidad estaba asegurada. Sandi es muy defensora de la OOP y es una
profesional excelente.</p>

<p>La charla trata de una refactorización siguiendo la kata <a href="https://github.com/emilybache/GildedRose-Refactoring-Kata">The Gilded Rose</a>. La
refactorización parte de un método gigante lleno de <code>if</code>s y lleva el código
hacia clases pequeñas, métodos pequeños.</p>

<!-- more -->




<iframe width="560"
        height="315"
        src="https://www.youtube.com/embed/8bZh5LMaSmE"
        frameborder="0"
        allowfullscreen></iframe>


<h2>Notas tomadas de la charla</h2>

<blockquote><p>Es preferible algo de duplicación a una mala abstracción</p></blockquote>

<p>La duplicación es fácil de detectar y de eliminar llegado el caso. Una mala
abstracción al arrastraremos toda la vida del proyecto.</p>

<p>Unos días después, Sandi publicó un <a href="http://us3.campaign-archive2.com/?u=1090565ccff48ac602d0a84b4&amp;id=92902a19e4&amp;e=072f6853e8">artículo en forma de newsletter</a>
explicando algo más esta frase, porque parece que creó confusión o al menos,
causó reacciones que hicieron pensar a Sandi que la gente no entendió realmente
lo que ella quería transmitir.</p>

<p>La idea principal de ese artículo es que una vez identificada una mala
abstracción en el código (le pasan parámetros y hay <code>if</code>s y más <code>if</code>s), es
recomendable recrear la duplicación en el código y dejar que él mismo nos
indique nuevas abstracciones.</p>

<blockquote><p>Que tu objetivo sea llegar a Open/Closed</p></blockquote>

<p>Uno de los principios de la Programación Orientada a Objectos, es el
Open/Closed Principle. Que para añadir nueva funcionalidad, no tengas que
modificar código existente (abierto a extensión, cerrado a modificación). Lo
ideal es que toda la aplicación siguiera este principio, no vas a llegar nunca,
pero cuanto más lo sigas, más fácil será añadir nueva funcionalidad sin romper
la existente.</p>

<blockquote><p>Crea cosas pequeñas</p></blockquote>

<p>Clases pequeñas, métodos pequeños,&#8230;</p>

<blockquote><p>Refactoriza basándote en la complejidad, mediante la complejidad</p></blockquote>

<p>Uno de los objetivos de las refactorizaciones es hacer el código más sencillo.
Puedes utilizar métricas de complejidad para hacer un seguimiento de la
refactorización. En pasos intermedios, ésta puede crecer, pero debes tener
confianza en que la refactorización dará sus frutos y conseguirás un código más
sencillo y limpio.</p>

<blockquote><p>Refactoriza hacia la simplicidad</p>

<p>La herencia no siempre es mala</p></blockquote>

<p>Se habla mucho de composición en lugar de herencia, pero para Sandi hay una
ocasión, donde si se dan las siguientes circunstancias, la herencia es la mejor
solución:</p>

<ol>
<li>La jerarquía no es profunda ni ancha, es poco profunda y estrecha (no
involucra muchas clases hijas)</li>
<li>Las subclases son hojas dentro de tu árbol de clases, las subclases están en
los extremos de tu árbol de clases, no entre medias</li>
<li>Las subclases usan todo el código de la clase padre</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deuda técnica]]></title>
    <link href="http://rchavarria.github.io/blog/2015/10/12/deuda-tecnica/"/>
    <updated>2015-10-12T18:58:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/10/12/deuda-tecnica</id>
    <content type="html"><![CDATA[<p>Cuando hay que implementar una funcionalidad nueva en una aplicación software
existen básicamente dos maneras de hacerlo: la rápida (el <em>hack</em>, la <em>ñapa</em>) y
la correcta. Esta última más costosa y generalmente más compleja de llevar a
cabo.</p>

<p>La <strong>deuda técnica</strong> es una metáfora en el mundo del software que nos permite
discutir sobre este problema. Mediante la cual, se establece que <strong>implementar
una funcionalidad eligiendo el camino rápido en lugar del correcto, es como
pedir un préstamo</strong>, el cual genera unos intereses que habría que pagar en el
futuro en forma de un trabajo extra para mejorar o arreglar los atajos tomados
al no haber hecho la funcionalidad de una forma más correcta.</p>

<!-- more -->


<p>La metáfora fue propuesta por Ward Cunningham en un informe para la
<a href="http://c2.com/doc/oopsla92.html">OOPSLA 1992</a>. Se suele utilizar para explicar a la gente <em>no técnica</em> la necesidad de
refactorizar. Ya ha llovido desde entonces, y se ha discutido mucho sobre el
tema. Así que también hay gente que no está de acuerdo con la metáfora. Yo creo
que como todas las metáforas, flaquea si uno empieza a profundizar en el tema.
Martin Fowler responde a los contrarios a la metáfora documentando que hay más
de una forma de deuda técnica en su famoso <a href="http://martinfowler.com/bliki/TechnicalDebtQuadrant.html">cuadrante de la deuda técnica</a>.</p>

<p>Mucho antes que Cunningham, Meir Manny Lehman, en el 1980 ya comentaba
conceptos relacionados:</p>

<blockquote><p>Un programa en evolución está en contínuo cambio, por lo tanto, su
complejidad (reflejada en una estructura que se deteriora) se incrementa a no
ser que se haga un trabajo para mantenerla o reducirla</p></blockquote>

<p><img class="center" src="http://rchavarria.github.io/images/2015/technical-debt.jpg"></p>

<p><em>Imagen tomada del tweet de <a href="https://twitter.com/khellang/status/626716128379830273">Kristian Hellang</a></em></p>

<h2>Causas</h2>

<p>La principal culpable en la generación de deuda técnica, y así coinciden muchos
autores, es en la presión en plazos y planes de entrega que el departamento de
desarrollo se <em>deja</em> imponer por parte de negocio (marketing, ventas,&#8230;).
Estas presiones ocasionan que se publiquen versiones del software sin que se
implementen correctamente las funcionalidades.</p>

<p>Casi todas las demás causas se pueden derivar de esta primera, por ejemplo: recortes
en procesos de pruebas, incluso eliminación de pruebas automáticas, lo cual
hace muy difícil y extremadamente caro la detección y corrección de errores.
Los procesos de aseguramiento de la calidad también se ven recortados, así como
la documentación.</p>

<p>Las prisas también ocasionan que se pospongan trabajos necesarios o que se
retrasen refactorizaciones en el tiempo, ya que para adaptarse a los cambios, a
veces hay que refactorizar. Cuanto más se retrasa esta refactorización, más
cambios habrá que hacer y más caro será el cambio. Evitar refactorizaciones
puede llevar a que ciertas partes del código sean confusas.</p>

<p>También existe quien le echa la culpa a la cultura de la empresa: procesos
pobres, falta de entendimiento, falta de educación, de cuidado y de
colaboración con otros departamentos. Mientras existen otras causas maś
atribuibles a individuos: incompetencia y falta de profesionalidad.</p>

<p>Hablando de profesionalidad, hay una cita Robert C. Martin que me encanta:</p>

<blockquote><p>The only way to go fast is to go well</p>

<p>La única forma de ir rápido, es hacer las cosas bien</p></blockquote>

<h2>Consecuencias</h2>

<p>Estoy de acuerdo con que la principal causa por la que se genera deuda técnica
es por <em>atajos</em> que se toman para poder entregar más de lo que se debería en
plazos cortos de tiempo. Pues <strong>aunque parezca contradictorio, la mayor
consecuencia de la deuda técnica es precisamente que los proyectos no se
entreguen a tiempo</strong>.</p>

<p>La deuda incurrida puede hacer que un desarrollo previsiblemente corto pueda
llevar mucho más tiempo de lo previsto en implementarse, ya que el mayor coste
de la deuda técnica es el hecho de que ralentiza el desarrollo de futuras
funcionalidades. Comprometiendo la viabilidad del proyecto a largo plazo.
Justamente como una deuda financiera, que produce un beneficio a corto plazo
pero puede tener resultados desastrosos a largo plazo si la deuda contraída no
se va pagando.</p>

<p>Otras consecuencias no tan mortales para el proyecto incluirían errores no
subsanados o desconocidos, que harían que el producto fuera inestable. Lo cual
tiene sentido, recortando o eliminando tests automáticos y calidad no se puede
esperar obtener mejores resultados.</p>

<p>La documentación entregada también se resiente, ya que se suele encontrar
desactualizada, escasa o inservible.</p>

<h2>Soluciones</h2>

<p>La única forma de pagar la deuda contraída es completando el trabajo que no se
hizo correctamente. Y esto se hace refactorizando para mejorar el trabajo que
se dejó pendiente. El mejor momento para refactorizar es justo antes de
comenzar una nueva funcionalidad, adaptando el código a los nuevos
requerimientos.</p>

<p>Existen herramientas que permiten atacar ciertos puntos de la deuda técnica,
las herramientas de análisis estático del código. Pero por sí solas no son
suficientes, ya que la mayoría de las veces, la deuda técnia no se refleja
directamente en el código, sino también en la arquitectura, en componentes
desactualizados o en ciertas estructuras que estas herramientas no son capaces
de analizar.</p>

<p>Desde el punto de vista del equipo de desarrollo, hacer la deuda visible puede
ayudar. Podría ser intersante mantener una lista explícita sobre tareas
necesarias para reducir la deuda. Y a un nivel más alto, hacer entender a
marketing y otros departamentos de negocio que si no se planifica cierto tiempo
para reducir la deuda técnica se corre el riesgo de que no sea posible entregar
todas las funcionalidades que ellos quieren.</p>

<h2>Referencias:</h2>

<ul>
<li><a href="https://es.wikipedia.org/wiki/Deuda_t%C3%A9cnica">Wikipedia en español sobre la deuda técnica</a></li>
<li><a href="http://www.javiergarzas.com/2012/11/deuda-tecnica-2.html">Javier Garzás sobre la deuda técnica</a></li>
<li><a href="http://c2.com/doc/oopsla92.html">OOPSLA 1992</a></li>
<li><a href="https://en.wikipedia.org/wiki/Technical_debt">Technical debt, wikipedia en inglés</a></li>
<li><a href="http://martinfowler.com/bliki/TechnicalDebt.html">Martin Fowler sobre la deuda técnica</a></li>
<li><a href="http://www.c2.com/cgi/wiki?TechnicalDebt">Deuda técnica en Cunningham &amp; Cunningham wiki</a></li>
<li><a href="http://docs.sonarqube.org/display/SONARQUBE44/Technical+Debt+Calculation">Cálculo de la deuda técnica basado en fórmulas</a></li>
<li><a href="http://www.computer.org/csdl/mags/so/2012/06/mso2012060018.html">Technical Debt: From Metaphor to Theory and Practice</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla técnica: Follow my leader]]></title>
    <link href="http://rchavarria.github.io/blog/2015/10/04/charla-tecnica-follow-my-leader/"/>
    <updated>2015-10-04T15:21:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/10/04/charla-tecnica-follow-my-leader</id>
    <content type="html"><![CDATA[<p>Estas notas podrían encajar perfectamente en el post que voy actualizando
regularmente <a href="http://rchavarria.github.io/blog/2014/10/11/aprendiendo-vim/">Aprendiendo Vim</a>, pero creo que esta la charla de Drew Neail se
desmarca ya un poco del proceso de aprendizaje. En esta charla no se busca
enseñar nuevos comandos de Vim, si no que se trata más de un tema cultural
acerca del editor. Drew trata de animar a la gente a que busque nuevas
combinaciones de teclas que se conviertan en nuevos comandos y de esta forma
hacer Vim más potente todavía.</p>

<!-- more -->


<h2>Notas tomadas de la charla <a href="https://vimeo.com/85343734">Follow my leader</a></h2>

<iframe src="https://player.vimeo.com/video/85343734"
        width="500"
        height="281"
        frameborder="0"
        webkitallowfullscreen mozallowfullscreen allowfullscreen>
</iframe>


<p><em><a href="https://vimeo.com/85343734">Follow my leader</a>, por <a href="http://drewneil.com/">Drew Neil</a>, en un encuentro del grupo local
<a href="https://vimeo.com/vimlondon">Vim London</a></em></p>

<ul>
<li><code>let mapleader = ","</code> para mapear <code>,</code> como tecla <code>&lt;leader&gt;</code> en Vim. Otra
tecla muy común para utilizarla como <code>&lt;leader&gt;</code> es la barra espaciadora.</li>
<li><code>nnoremap &lt;leader&gt;&lt;space&gt; :noh&lt;cr&gt;</code> : remapea la secuencia de teclas
<code>&lt;leader&gt;&lt;space&gt;</code> para que se ejecute el comando <code>:nohlsearch</code>, que desactiva
el resaltado de términos de búsqueda.</li>
<li>La tecla <code>&lt;leader&gt;</code> te permite crear mapeos personalizados, es donde los
usuarios pueden crear sus mapeos sin interferir con Vim</li>
<li>En lugar de usar <code>leader</code>, algunos plugins, como los que escribe <a href="http://tpo.pe/">Tim Pope</a>
siguen otro patrón. hay teclas que son <em>operadores</em>, por ejemplo la <strong>d</strong>
para borrar, o la <strong>y</strong> para copiar. a estos operadores le puede seguir el
mismo operador o una movimiento. Teclas que producen un movimiento son <strong>j</strong>
para ir hacia abajo, <strong>$</strong> para ir al final de la línea, &#8230; Pero, qué pasa si
despues de un operador pulsamos una tecla de <em>no movimiento</em>? No pasa nada. Y
ahí están las combinaciones de teclas dsiponibles para tus plugins.</li>
<li>En la imagen de la <a href="http://www.viemu.com/vi-vim-cheat-sheet.gif">chuleta de Vim</a>, los naranjas son operadores, los
verdes movimientos y los amarillos son comandos.</li>
</ul>


<p><img class="center" src="http://rchavarria.github.io/images/2015/tiny-vi-vim-cheat-sheet.gif"></p>

<ul>
<li>El plugin <a href="https://github.com/tpope/vim-unimpaired">unimpaired.vim</a> añade mapeos como <code>con</code> para habilitar/deshabilitar los
nuḿeros de línea, o <code>cos</code> para habilitar/deshabilitar el chequeo ortográfico.
Son <code>c</code> + <code>o</code> + otras teclas</li>
<li>También hay disponibles combinaciones como operador + operador : <code>d</code> + <code>c</code></li>
<li>Los <em>text objects</em> (<code>i</code> y <code>a</code>) también tienen vacantes.</li>
<li>Los <em>namespaced mappings</em> también tienen vacantes. Por ejemplo, <code>g</code> es como
un prefijo para muchos mapeos. <code>z</code> es otro, y <code>[</code> y <code>]</code> son más.</li>
<li><code>:help g</code> te muestra todos los mapeos que siguen a <code>g</code>. Te puede servir para
ver huecos donde poner tus mapeos</li>
<li>Comando inútiles, hay algunos comandos que no usa nadie. Sobreescríbelos. Por
ejemplo, <code>g</code> + <code>s</code>.</li>
<li>Sobreescribir, sobrecargar comandos que ya existen, vamos, ampliar los
existentes.</li>
</ul>


<h2>Conclusiones</h2>

<p>Como puedes ver, el editor Vim es todo un mundo de posibilidades. Hay veces que
abruma, pero hay tanta gente apasionada por él que está claro que algo debe de
tener. Esta charla es una muestra de las posibilidades de personalización que
esta herramienta ofrece. Drew nos abre las puertas a un mundo nuevo de posibles
comandos.</p>

<p>Si te gusta Vim, y no conoces el plugin <a href="https://github.com/tpope/vim-unimpaired">unimpaired.vim</a>, échale un vistazo. Sin
duda es uno de los imprescindibles, como tantos otros de Tim Pope.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Los eventos que vienen]]></title>
    <link href="http://rchavarria.github.io/blog/2015/09/27/eventos-que-vienen/"/>
    <updated>2015-09-27T23:11:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/09/27/eventos-que-vienen</id>
    <content type="html"><![CDATA[<p>Cuando leí el post de <a href="https://twitter.com/voylinux">Pablo Bernardo</a>, <a href="http://voylinux.com/yo-voy-al-gnu-social-camp-2015/">Yo voy al GNU Social Camp 2015</a>, me
sentí inspirado para escribir algo parecido. La recta final del año viene
cargadito de eventos, y les tengo ganas, muchas ganas. Y que mejor manera de ir
calentando motores que hacer como Pablo y escribir sobre dichos eventos.</p>

<p>¿De qué eventos estoy hablando?</p>

<ol>
<li><a href="http://globalday.coderetreat.org/">Global Day of Coderetreat</a>, que se celebrará el 14 de noviembre de 2015, a
nivel mundial.</li>
<li><a href="http://2015.codemotion.es/">Codemotion 2015</a>, allá por el 27 y 28 de noviembre de 2015.</li>
<li><a href="http://cas2015.agile-spain.org/">Conferencia Agile Spain 2015</a>, los días 3 y 4 de diciembre de 2015.</li>
</ol>


<p>La agenda está apretada, ¿eh?</p>

<!-- more -->


<h2>Global Day of Coderetreat</h2>

<blockquote><p>A day to celebrate passion and software craftsmanship</p></blockquote>

<p>El año pasado fue <a href="http://rchavarria.github.io/blog/2014/11/18/mi-primer-code-retreat/">mi primer Code Retreat</a>, y me encantó la experiencia. Este
año está más difícil, y a estas alturas todavía no tengo claro si podré ir. Si
tú puedes, te lo recomiendo. Lo pasarás bien.</p>

<p>Es un evento a nivel global, estiman que este año lo celebren de 100 a 150
ciudades. ¡Increíble!</p>

<h2>Codemotion</h2>

<blockquote><p>Codemotion gets all the IT communities in Spain together for two days. We
take an entire university building to present the best of each technology and
get you far away from your comfort zone.</p></blockquote>

<p>Este año el Codemotion vuelve a repetirse en la Universidad San Pablo CEU, en
el campus de Boadilla del Monte (Madrid). Ésta es la madre de las conferencias.
El año pasado hubo casi 2000 asistentes. <strong>¡2000!</strong>. Una locura, es
prácticamente imposible no encontrarse con alguien conocido en ella.
<a href="http://rchavarria.github.io/blog/2014/11/29/notas-codemotion-2014/">El año pasado pude asistir</a>, y este año también espero poder hacerlo.</p>

<p>Es una conferencia donde se involucran muchísimas comunidades locales, donde
acuden ponentes internacionales de muy alto nivel. No solo hay charlas, también
hay talleres, los patrocinadores montan pequeñas fiestas y muchos de ellos
organizan concursos para disfrute de los asistentes.</p>

<p>Si crees que por dos días de conocer a gente interesantísima te va a salir por
un ojo de la cara te equivocas. El Codemotion debe ser uno de los eventos más
accesibles (en cuanto a coste de entrada) de toda España. Por menos de 50€
tienes derecho a poder absorber cuanta información y contactos puedas durante
dos días. A tí no se, pero a mí me parece alucinante.</p>

<h2>Conferencia Agile Spain</h2>

<blockquote><p>Es un evento anual que generan las personas que viven el desarrollo de
productos de software de una manera diferente</p></blockquote>

<p>En el 2012 acudí a esta misma conferencia, cuando se celebró en Cáceres
(<a href="http://rchavarria.github.io/blog/2012/11/08/mi-experiencia-en-la-cas2012/">la CAS2012 fue toda un experiencia para mí</a>). Quedé tan prendado del ambiente, de
las charlas, de todo en general, que desde entonces he querido asistir a todas
las que se ha celebrado. Otros años me he quedado con las ganas de ir porque se
celebraba lejos de casa y la pereza de organizarme el viaje pudo con las ganas
de asistir. Este año se celebra en Madrid, en el <a href="http://www.circulobellasartes.com/">Círculo de Bellas Artes</a>, así
que este año no hay excusa.</p>

<p>Como muestra de lo genial de la conferencia, existe un
<a href="https://trello.com/chairscas2015">proceso de votación de charlas</a>. Asi que tú mismo participas en el proceso de
creación del evento. Existen distintos tracks, distintas temáticas de las
charlas, para que ningún tema <em>Agile</em> se quede sin representación.</p>

<p>Si participas en el proceso te darás cuenta del nivel de los ponentes. Si echas
un vistazo, seguro que te convence y te apetecerá asistir. Si no, no sé qué más
te puedo contar para que te pases por allí: se celebra en un lugar emblemático,
con ponentes astronómicos, con charlas de temáticas muy variadas y con unos
asistentes inmejorables. ¿A qué esperas?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The passionate programmer]]></title>
    <link href="http://rchavarria.github.io/blog/2015/09/20/passionate-programmer/"/>
    <updated>2015-09-20T19:07:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/09/20/passionate-programmer</id>
    <content type="html"><![CDATA[<h5>de Chad Fowler</h5>

<p><img class="left" src="http://chadfowler.com/images/books/passionate-programmer.jpg" width="200" height="300" title="The passionate programmer" ></p>

<h2>Por qué lo he leído</h2>

<p>Suelo elegir los libros por el título, por lo que me sugiera. Y el título de
este libro me sugiere todo: pasión y programación. ¿Qué más se puede pedir?.
Uno de mis libros favoritos es <a href="https://pragprog.com/book/tpp/the-pragmatic-programmer">The pragmatic programmer</a>, que más adelante
dió lugar a una editorial de libros técnicos. <em>The passionate programmer</em> tenía
la misma pinta, así que seguro que lo tenía que leer, tarde o temprano.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Me esperaba un libro con una estructura parecida a <em>The pragmatic programmer</em>,
con capítulos cortos, y cada capítulo finalizando con una serie de posibles
acciones para mejorar en tu carrera profesional. Bueno, esta vez, en lugar de
mejorar, esperaba que estuviera relacionado con sentir la pasión por la
programación.</p>

<h2>Qué encontre</h2>

<p>El libro está organizado en 5 grandes secciones:</p>

<ol>
<li>Elige tu mercado</li>
<li>Invierte en tu producto</li>
<li>Ejecución</li>
<li>El marketing&#8230; no es sólo para los trajeados</li>
<li>Manteniéndote al día</li>
</ol>


<p>Cada uno de ellos está dividido en capítulos más pequeños (lo que me
imaginaba), y cada uno de ellos termina en uno o varios consejos para que
aprendas el concepto que desarrolla el capítulo. Idéntica estructura a <em>The
pragmatic programmer</em> que tanto me gustó y tanto me ayudó.</p>

<p>Cada una de las secciones anteriores explorar un aspecto de la carrera de un
profesional del desarrollo software, aunque no cubre todos. Guía al lector
sobre cómo y por qué debe elegir un mercado, una industria, ya que el software
se encuentra en todas partes hoy en día. Hay consejos sobre cómo deberías
trabajar, qué actitud deberías tener, tanto si trabajas por cuenta ajena como
por tu propia cuenta y también cómo poder <em>venderte</em> dentro y fuera de tu
empresa.</p>

<h2>Conclusiones</h2>

<p>Me parece un libro muy recomendable. Está enfocado al desarrollo del software,
pero podría ser aplicable (más o menos) a otras profesiones. De lo que trata es
de buscar la pasión por lo que haces.</p>

<p>Cada capítulo termina con una o varias acciones a tomar, algunas son sencillas,
otras te llevarán cierto tiempo, otras son arriesgadas y no todo el mundo se
sentiría cómodo llevándolas a cabo. No creo que tenga tiempo ni energía para
llevarlas todas a cabo, pero sí que me gustaría poner en práctica algunas de
ellas: comunicarme más con gente de negocio, ponerme en situaciones donde yo
sea el <em>peor</em>, invertir en mi conocimiento, encontrar un mentor, seguir alguno
de los consejos para contribuir a algún proyecto de software libre,&#8230;</p>

<p>Creo que este es un libro para tener al lado de <em>The pragmatic programmer</em> y
releerlos de vez en cuando.</p>

<h2>Qué he aprendido</h2>

<blockquote><p>No puedes competir en precio, pero puedes competir en habilidad.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Tienes que ser apasionado sobre tu trabajo si quieres ser excelente
en tu trabajo.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Un aprendiz no se encuentra saliendo por ahí y declarándote un <em>gurú</em>, si no
acumulando conocimiento y teniendo la voluntad y paciencia para compartirlo.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Es mucho más fácil encontrar alguien que haga que el software funciona que
encontrar a alguien que haga que funcione el <em>hacer software</em> (It’s much
easier to find someone who can make software work than it is to find someone
who can make the making of software work).</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Crea movimiento. Se de los que empujan hacia adelante. No te acomodes.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>La mayor barrera entre nosotros, los mortales, y aquellos a los que admiramos
son nuestros propios miedos.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>El proceso aquí descrito es un bucle que se repite hasta que te jubilas:
investiga, invierte, ejecuta, anúncialo, repite.</p></blockquote>

<h2>Frases que me gustaría recordar</h2>

<blockquote><p>At least when starting out, greatness is binary in the music world. A
musician wants to either be great (and famous for it!) or not do it at all.
I’m often asked why it is that there are so many good musicians who are also
good software developers. That’s the reason.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Think of your career as if it is the life cycle of a product that you are
creating. That product is made up of you and your skills.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>If you want to stay relevant, you’re going to have to dive into the domain of
the business you’re in.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Legendary jazz guitarist Pat Metheny: “Always be the worst guy in every band
you’re in.”</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Fear-driven advice is geared toward not losing. Thinking about not losing is
not the way to win!</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Teaching is one of the best ways to learn.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Cuando estudias soluciones de código abierto, en lugar de propietarias, en
profundidad empiezas a reconocer patrones que te sirven más allá de la
tecnología.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>The most obvious place to start your lifelong learning is in learning the
tools of your trade.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Without a role model, there’s no incentive to get better.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>You have to make time for practice. It’s your responsibility.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Studying the work of masters is an essential part of becoming a master.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>I learned that no matter how cool the technology seemed to be, it was
valuable only if it solved a real problem that was urgent and provided
quantifiable benefits. Over time, this helped me change my way of thinking
from being technology-centric to being solution-centric.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Attempting to be irreplaceable is a defensive maneuver that creates a hostile
relationship with your employer.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>We judge each other on how we deal with those inevitable mistakes.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>If you don’t have a deadline, you don’t have any pressure or much incentive
to finish something.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>There is no way to objectively measure the quality of a knowledge worker, and
there is no way to objectively measure the quality of their work. That means
you are always going to be measured based on someone else’s perception of
you.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>You need to make it personal. Try to actually learn about the people you work
with.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Set big goals, but make constant corrections along the way. Learn from the
experience, and change the goals as you go.</p></blockquote>

<!-- para separar quotes -->


<blockquote><p>Software development is both challenging and rewarding. It’s creative like an
art-form, but (unlike art) it provides concrete, measurable value.</p></blockquote>

<h2>Recursos relacionados</h2>

<ul>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/passionate-programmer-by-chad-fowler.markdown">Notas tomadas sobre el libro</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla técnica: Workflows of refactoring]]></title>
    <link href="http://rchavarria.github.io/blog/2015/09/13/charla-tecnica-workflows-refactoring/"/>
    <updated>2015-09-13T10:08:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/09/13/charla-tecnica-workflows-refactoring</id>
    <content type="html"><![CDATA[<p>Esta semana el post trata sobre las notas que he tomado de una charla técnica
titulada <a href="https://www.youtube.com/watch?v=vqEg37e4Mkw">Workflows of refactoring</a>. El autor de la charla, hablando de
<em>refactoring</em>, no podría ser otro que <a href="http://www.martinfowler.com/">Martin Fowler</a>. En la charla, Martin
comienza hablando de distintos modos de trabajar, dependiendo de la situación,
por ejemplo, nos encontraremos añadiendo funcionalidad o limpiando el código.
Después, Martin describe distintos tipos de refactorizaciones, más allá del
típico paso en TDD o de la refactorización cambiando unos cuantos nombres a las
variables.</p>

<!-- more -->




<iframe width="560"
        height="315"
        src="https://www.youtube.com/embed/vqEg37e4Mkw"
        frameborder="0"
        allowfullscreen></iframe>


<h2>Notas tomadas</h2>

<blockquote><p>La primera vez que la gente escucha hablar de <em>refactoring</em> es cuando oye hablar
del ciclo de TDD: red > green > refactor.</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p>¿Por qué separar los dos pasos que incluyen el código en TDD? ¿Uno para
escribir el código y otro para refactorizar? Puede que esté hecho para los
programadores menos experimentados y para los impacientes, para aquellos que
antes de nada quieren tener algo funcionando. Kent Beck hablaba de dos modos
de trabajar, dos sombreros: añadiendo funcionalidad y modo mantenimiento
(refactorizando). Se puede cambiar entre ellos, pero no se puede andar
mezclándolos.</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p>Otros modos, otros sombreros: mejoras de rendimiento, donde el rendimiento
prima sobre la legibilidad; experimentos (donde el resultado va a ser descartado).</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p><strong>TDD refactoring</strong>: el refactoring que pasa cuando estás haciendo TDD, o tienes
una batería de tests en la que apoyarte</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p><strong>Litter-pickup refactoring</strong>: similar a la regla del Boy Scout. Se trata de que
tienes que trabajar con una base de código que no está escrita como a tí te gustaría
(aunque lo más probable es que hayas sido tú quien la haya escrito). Vas navegando
por el código, y de repente ves algún detalle que no te encaja. Paras todo, y lo
arreglas. En definitiva, como el Boy Scout, dejas el campo un poquito mejor de lo
que te lo encontraste. No quieres pasar mucho tiempo limpiándolo, pero sí dejarlo
un poquito mejor.</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p>Cuando encuentras alguna pieza de código en la que tienes que invertir cierto
tiempo entendiendo qué es lo que hace. Cuando terminas entendiéndolo, ¿qué
haces? ¿Lo dejas como está? ¿Y si la próxima vez vuelves a perder tanto tiempo?
Tendrás que refactorizarlo. <strong>Comprehension refactoring</strong>.</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p>Hay situaciones en las que después de un tiempo, vuelves a ver código y piensas:
&#8220;hey! Ahora conozco una nueva y mejor forma de hacer esto&#8221;. Esto tiene mucho que
ver con el <em>diseño evolutivo</em>. Por ejemplo, refactorizar un poquito antes de
añadir una nueva funcionalidad. Normalmente, el refactoring es beneficioso en el
largo y medio plazo. Este en concreto, es beneficioso para la tarea en la que
estás trabajando en este mismo momento.</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p><strong>Planned refactoring</strong>. Un buen equipo necesitaría poco de este tipo de
refactoring. Para el resto de mortales, un poco de refactorizaciones planificadas
no hace daño.</p></blockquote>

<!-- comment to separate ideas -->


<blockquote><p><strong>Long-term refactoring</strong>. Por ejemplo, cuando tienes un montón de módulos que
tienen dependencias caóticas. En lugar de parar el desarrollo y dedicar 2 o 3
semanas refactorizando todo esto, ¿qué tal si vas refactorizando poco a poco,
sin romper nada, gradualmente,&#8230; hasta que lo consigas? Quizá no tengas del
todo claro cómo llegar al final, pero si vas poco a poco, lo más seguro es que
tarde o temprano encuentres el camino.</p></blockquote>

<h2>Conclusión</h2>

<p>Me parece una charla interesantísima, recomendada 100%. Y no sólo echarle un
vistazo por encima, sino profundizar en los conceptos que Martin Fowler expone.
La charla es la keynote de una conferencia sobre Programación Orientada a
Objectos bastante conocida, así que tiene todas las papeletas de ser un
recurso muy útil.</p>

<p>No estoy seguro, pero tiene pinta de que todos estos conceptos y nombres que
Martin da a los distintos tipos de refactorizaciones los vamos a ir viendo y
desarrollando en años venideros.</p>

<p>Así que ya sabes, haz un hueco en la agenda, y ¡a visualizar la charla!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Martian]]></title>
    <link href="http://rchavarria.github.io/blog/2015/09/06/the-martian/"/>
    <updated>2015-09-06T16:05:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/09/06/the-martian</id>
    <content type="html"><![CDATA[<h5>de Andy Weir</h5>

<p><img class="right" src="http://www.ew.com/sites/default/files/i/2014/02/04/The-Martian.jpg" width="201" height="306"></p>

<h2>Por qué lo he leído</h2>

<p>Hace un tiempo que escucho semanalmente los podcasts de Scott Hanselman:
<a href="http://www.hanselminutes.com/">Hanselminutes</a>. Son unos podcasts muy variados que tratan temas relacionados
con el mundo del software y la tecnología en general: lenguajes de programación,
iniciativas,&#8230;</p>

<p>En varios de sus podcasts, y probablemente en varios de sus posts, Scott dice
que uno de los libros que más recomienda es <a href="http://www.amazon.es/gp/product/B00OXYQR38/">El marciano</a>, que es un libro
que le encanta. No creo que se lleve ninguna comisión por hacer publicidad,
pero si alguien como Scott recomienda una y otra vez un libro, será por algo.
Además, es un libro no técnico, por lo que me serviría para desconectar un poco
en vacaciones.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Al estar tan recomendado, esperaba una novela muy bien escrita. Según Scott, es
una novela de ciencia ficción, pero que es mucho más de ciencia que de ficción,
de hecho, con el estado actual de la tecnología, se podría dar la situación
perfectamente. Lo único que quizá no se ha invertido el tiempo y el dinero en
hacerlo realidad, pero podría serlo.</p>

<h2>Qué encontre</h2>

<p>Evidentemente, encontré todo lo que esperaba. Una novela de ciencia ficción, con
más ciencia que ficción, describiendo una situación que podría ser totalmente
cierta actualmente. Una novela magníficamente escrita, con muchos tecnicismos,
llena de vocabulario aeroespacial, describiendo personalidades muy distintas,
pero que el autor usa inteligentemente.</p>

<h2>Conclusiones</h2>

<p>Sin duda, una novela a recomendar. Si te gusta el espacio, si te gusta la ciencia,
y si te gusta la ficción; ésta es una novela para tí. O película, porque mientras
estaba a mitad del libro, me entero de que van a <em>sacar</em> la película y que ya hay
disponible algún <a href="https://www.youtube.com/watch?v=ej3ioOneTy8">trailer</a>. Así que eso me animó a terminarme antes aún el
libro, a devorarlo en vacaciones.</p>

<p>Aunque la situación podría darse hoy en día, también hay que hacer un acto de fe
para creerse todo lo que cuenta. En muchas ocasiones, el protagonista describe
procesos químicos, o físicos, que pueden funcionar por casualidad, pero que al
final, por <em>necesidades del guión</em>, terminan funcionando. No son situaciones
increíbles, pero sí que uno tiene que relajarse un poco y creer en la fortuna
del protagonista.</p>

<h2>Qué he aprendido</h2>

<p>No es que pueda sacar lecciones aprendidas, como si fuera un libro técnico
describiendo un proceso o una tecnología, pero sí que he aprendido un montón
de cosas sobre Marte: lugares, condiciones en la superficie, cómo viajar al
planeta, cómo funcionan las comunicaciones, un poco sobre viajes
interplanetarios, cómo funciona la NASA por dentro. Aunque sé que es una novela,
no me lo tengo que tomar todo al pie de la letra.</p>

<h2>Recursos relacionados</h2>

<ul>
<li><a href="http://www.hanselminutes.com/">Hanselminutes podcast</a></li>
<li><a href="http://www.amazon.es/gp/product/B00OXYQR38/">El marciano</a>, de Andy Weir, o en versión original: <a href="http://www.amazon.com/The-Martian-Novel-Andy-Weir-ebook/dp/B00EMXBDMA">The Martian</a></li>
<li><a href="https://www.youtube.com/watch?v=ej3ioOneTy8">Trailer de The Martian</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla no técnica: How to learn anything... fast]]></title>
    <link href="http://rchavarria.github.io/blog/2015/08/30/how-learn-anything-fast/"/>
    <updated>2015-08-30T19:09:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/08/30/how-learn-anything-fast</id>
    <content type="html"><![CDATA[<p>En los trabajos creativos, como en el desarrollo de software, la capacidad para
aprender es un elemento diferenciador. A mí me encanta aprender. Cualquier
cosa. Aunque normalmente siempre elijo temas relacionados con la ciencia,
matemáticas, juegos de ingenio o, cómo no, el desarrollo de software. Cuando vi
el título de la charla (<a href="https://www.youtube.com/watch?v=EtJy69cEOtQ">How to learn anything&#8230; fast</a>) me interesó
bastante. ¿Aprender cualquier cosa rápidamente?. ¡Ya me ha cazado!.</p>

<p>En esta charla, <a href="http://joshkaufman.net/">Josh Kaufman</a> indica 5 pasos para aprender cualquier cosa en 20
horas. Típicamente se acepta que para dominar una habilidad, para ser maestro
en algún arte, hacen falta <strong>10.000 horas de práctica deliberada</strong> en esa habilidad
o arte. Josh dice que no tenemos que ir tan lejos, que con <strong>20 horas podemos ser
suficientemente competentes</strong> en cualquier cosa que nos propongamos.</p>

<!-- more -->




<iframe width="560"
        height="315"
        src="https://www.youtube.com/embed/EtJy69cEOtQ"
        frameborder="0"
        allowfullscreen></iframe>


<h2>Pasos</h2>

<ol>
<li>Decidir <strong>qué</strong> aprender.</li>
<li><strong>Dividir</strong> aquello que queremos aprender en habilidades más pequeñas y que
puedan ser practicadas de forma independiente, e identificar aquellas
habilidades más importantes, aquellas habilidades esenciales que te van a
permitir aprender lo que quieres.</li>
<li><strong>Investigar</strong> esas habilidades esenciales. Investiga lo justo y necesario para
saber las mejores formas de realizar las habilidades. Elige de 3 a 5
recursos y pasa rápido por ellos, no profundices (en esta fase) en ellos, ya lo
harás cuando practiques. No uses esta fase para procrastinar, para retrasar el
aprendizaje.</li>
<li>Hacer fácil la práctica. <strong>Elimina distraciones</strong> (TV, móvil, internet,
familiares,&#8230;), elimina fricciones, reduce el esfuerzo de comenzar a
practicar, que sea fácil ponerte a ello.</li>
<li>Antes de comenzar, <strong>comprometerse</strong> a realizar al menos 20 horas de práctica
deliberada y enfocada, sin distracciones. Con este compromiso se trata de
eliminar la frustración de todo comienzo, donde somos patéticos con la nueva
habilidad, pero que después de unas prácticas deliberadas, podremos comprobar
nuestro avance.</li>
</ol>


<h2>Conclusión</h2>

<p>Bueno, no creo que 20 horas sean suficientes para aprender <em>cualquier</em> cosa.
Creo que hay materias, habilidades, que necesitan más que eso. Yo no me tomo al
pie de la letra lo que afirma Josh, pero creo que parte de razón sí que tiene.
Puede que 20 horas no sean suficientes para dominar una materia, pero los
consejos que encontramos en esta charla sí me parecen fundamentales para
aprender cualquier cosa, específicamente dividir en partes esenciales aquello
que queremos aprender, eliminar distracciones y fricción y comprometernos con
nosotros mismos a realizar un mínimo de horas de práctica deliberada y
enfocada.</p>

<p>En todo el proceso, echo de menos la recogida de feedback y la medida del
progreso. Quizá el autor lo ha diseñado así para mantener el proceso lo más
simple y más corto posible. Pero aún así, yo añadiría alguna forma de saber si
al final de todo el proceso he llegado donde quería.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Notes to a software team leader]]></title>
    <link href="http://rchavarria.github.io/blog/2015/08/23/notes-software-team-leader/"/>
    <updated>2015-08-23T18:16:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/08/23/notes-software-team-leader</id>
    <content type="html"><![CDATA[<h5>de Roy Osherove</h5>

<p><img class="left" src="https://s3.amazonaws.com/titlepages.leanpub.com/teamleader/large?1438389048" width="200" height="260" title="Notes to a software team leader" ></p>

<h2>Por qué lo he leído</h2>

<p>Ya tengo unos años de experiencia en esto de desarrollar software. No me veo
capaz todavía de liderar un gran equipo de desarrollo, pero me siento más
inclinado hacia un liderazgo técnico que un liderazgo <em>de gestión</em>. Así que,
¿por qué no aprender un poco sobre un rol que tengo ganas de hacer?</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>El nombre del autor me sonaba de algo, no sé exactamente de qué, pero no recuerdo
haber leído algún otro libro suyo. Pero me sonaba que era un autor muy práctico,
con muchísima experiencia en la industria del software, por lo que esperaba un
libro de lleno de vivencias y experiencias. Quizá una historia que guiara al lector
por el camino de crear un equipo autoorganizado (que está tan de moda ahora con
las metodologías ágiles).</p>

<h2>Qué encontré</h2>

<p>Encontré una descripción de las fases en las que se puede encontrar un equipo de
desarrollo, bueno, la visión del autor, pero algo es algo. El libro también está
lleno de ejemplos y consejos sobre cómo mejorar el equipo, cómo hacer que
miembros de un equipo mejoren en su carrera profesional.</p>

<p>También, una sección del libro está dedicada a <em>testimonios</em> de absolutos expertos
en la materia. Estos últimos capítulos están llenos de experiencias reales y de
consejos de gente brillante y con una ingente cantidad de experiencia en el
desarrollo de software.</p>

<h2>Conclusiones</h2>

<p>El libro consta de varias partes. Comienza describiendo las fases en las que se
puede encontrar un equipo de desarrollo, y cómo avanzar de una a otra, hasta
conseguir el equipo perfecto.</p>

<p>Es un libro muy <em>buen-rollista</em>, tanto que a veces da la impresión de ser un
libro de autoayuda. Pero el libro está lleno de consejos super útiles. Quizá
se echa de menos la parte contraria, por ningún lado se encuentra cómo arreglar
problemas dentro del equipo. Supongo que no era el objetivo del libro.</p>

<p>La última sección del libro, la dedicada a los testimonios, tiene muchísimo
valor. Los mejores de los mejores ponen su granito de arena en el libro y
dedican unos consejos al lector que de otra forma sería imposible recopilar.</p>

<p>Si lo que te interesa es el aspecto técnico del desarrollo, éste puede ser un
libro para ti. Puedes leer mis notas en
<a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/notes-software-team-leader-by-roy-osherove.markdown">Notas sobre Notes to a software team leader</a>.</p>

<h2>Qué he aprendido</h2>

<ul>
<li>Usar la autoridad debe ser el último recurso. Ayudar a cada uno a encontrar
su camino ayuda a que ambas partes ganen.</li>
<li>Comunicación y traducción de información son habilidades críticas de un líder.</li>
<li>Necesitas discutir, influenciar, negociar y no decirle a la gente lo que debe
hacer.</li>
<li>Dar feedback es una técnica muy efectiva, pero debe ser de confianza, concreto,
constructivo, e incluir contexto.</li>
<li>Un líder técnico debería programar, aunque no mucho, pero sobre todo debería
practicar pair programming, design y code reviews y también debería buscar que
no se genere demasiada deuda técnica.</li>
</ul>


<h2>Frases que me gustaría recordar</h2>

<ul>
<li>El autor identifica tres formas de liderar un equipo: comando y control, coach
y facilitador. Simétricamente, identifica tres fases en las que se puede
encontrar un equipo: supervivencia, aprendizaje, auto-organización.</li>
<li>Para salir de la fase de supervivencia, hay que preocuparse de una cosa: crear
tiempo libre (<em>slack time</em>) como un estándar en tu flujo de trabajo.</li>
<li>Esto es por lo que te pagan: para hacer las cosas mejor y de la forma más
profesional, clara y transparente posible. Te pagan por llevar al equipo a un
nivel donde hacen las cosas profesionalmente, para llevar al equipo al próximo
nivel de rendimiento y profesionalismo. Para ello, quizá tengas que tomar
algunos riesgos.</li>
<li>Para salir del modo de supervivencia, debes pasar al menos el 50% del tiempo
con ellos. Lo primero que hay que hacer es una inversión de tiempo, y el que
debe comenzar eres tú (no reuniones, quizá horas extra,&#8230;)</li>
<li>El aprendizaje más rico y verdadero es cuando damos un salto en el conocimiento,
no estando seguros en la parte plana del gráfico (hace referencia a un gráfico
de aprendizaje de planicies seguidos de saltos, como escalones).</li>
<li>Sumergirse en una nueva cultura de formas de trabajar es dar un salto
cualitativo de conocimiento. Jugar a lo seguro no lo es.</li>
<li>Crear un <em>lenguaje de compromiso</em> es un paso esencial para que los miembros
del equipo mantengan sus promesas con los demás.</li>
<li>Cuando la gente se te acerque con un problema, rétale a que lo resulva por
sí mismo, pero que sepa que te tiene a tí como mentor, pero déjale claro que
tú no vas a solucionar el problema.</li>
<li>Miembros del equipo se pueden llevar deberes a casa, pero tiene que ser
voluntario, no lo deben tomar como trabajo.</li>
<li>Los problemas más difíciles de resolver nunca son técnicos, suelen involucrar
a las personas.</li>
<li>Un buen líder técnico mantiene siempre un ojo puesto en la calidad. Cuando el
equipo crece, las personas de más confianza cumplen parte de esta misión.</li>
<li>Una buena táctica para tener un equipo feliz es animar al equipo a usar un
período de tiempo semanal para aprender nuevas habilidades o tecnologías.</li>
<li>Las ideas de cambio deberían venir tanto de tí como de miembros del equipo.</li>
</ul>


<h2>Referencias y enlaces relacionados</h2>

<ul>
<li><a href="https://leanpub.com/teamleader">Notes to a software team leader</a> en Lean Pub</li>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/notes-software-team-leader-by-roy-osherove.markdown">Notas que he tomado sobre el libro</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla técnica: A short history of Software Engineering]]></title>
    <link href="http://rchavarria.github.io/blog/2015/08/16/history-software-engineering/"/>
    <updated>2015-08-16T21:42:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/08/16/history-software-engineering</id>
    <content type="html"><![CDATA[<p>Estas son las notas de una charla técnica titulada
<a href="https://www.youtube.com/watch?v=9IPn5Gk_OiM">A short history of software engineering</a>, por <a href="https://twitter.com/nusco">Paolo Perrota</a>. La charla,
creo que la encontré por un tweet de <a href="https://twitter.com/jbrains">J.B.Rainsberger</a> recomendándola.</p>

<p>La charla trata sobre la historia de la Ingeniería del Software. Un poco lo
de siempre, que la Ingeniería de Software quizá no debiera llamarse
<em>Ingeniería</em>, similitudes y diferencias con otras ingenierías,&#8230; Pero Paolo
hace una presentación muy amena y divertida, sin duda merece la pena ver la
charla para saber un poco más sobre nuestra pasión: el desarrollo de
software.</p>

<!-- more -->




<iframe width="560"
        height="315"
        src="https://www.youtube.com/embed/9IPn5Gk_OiM"
        frameborder="0"
        allowfullscreen></iframe>


<h2>Notas</h2>

<p><strong>1968</strong> fue la primera vez que alguien (la OTAN) dijo que el software se
entregaba tarde, fuera de presupuesto, con baja calidad y que no hacía
exactamente lo que tenía que hacer (es decir, que contenía bugs).</p>

<p>La solucion propuesta fue una nueva disciplina, que llamaron <strong>Ingeniería
del Software</strong>, para tratar de salir de esa crisis de proyectos fallidos. Despues
de más de 20 años, decidieron que ya no era una crisis, que era el estado del
arte, que una crisis no dura 20 años.</p>

<p>La Ingeniería del Software trata de solucionar 3 problemas:</p>

<ol>
<li><strong>Eliminar complejidad interna</strong>: si no hay código fuente, no hay complejidad
interna, no hay problema. De ahí que hayan intentado crear <em>lenguajes</em> con los
que no se necesitarían progrmadores. Empezaron diciéndolo en los años 50, con
Cobol. Lo vendían como que era un lenguaje que hasta los managers podrían
entender. El problema es que el desarrollo de software no es solamente
<strong>complejidad accidental</strong> (no toda la complejidad es introducida por los
programadores), sino también <strong>complejidad esencial</strong>, existe en el problema
mismo.</li>
<li><strong>Eliminar errores humanos</strong>: intentaron utilizar las matemáticas, para probar
que el software era correcto. Y vinieron los <em>formal methods</em>, pero es muy caro.
Aparentemente, un monton de matemáticas no pueden reemplazar los tests. Las
matemáticas no pueden solucionar todos los problemas humanos.</li>
<li><strong>Eliminar variabilidad en el proyecto</strong>: otras ingenierías lo hacen: Ingeniería
Civil, Ingeniería mecánica,&#8230; En Ingeniería Civil dicen que hay dos tipos de
proyectos: los repetibles y los únicos. Adivinas qué tipo de proyectos no van
tan bien, adivinas qué tipo se pasan de presupuesto. Si vas a hacer algo único,
va a llover dentro (anécdota de aquella casa única que hicieron, con tantas
goteras).</li>
</ol>


<p>En Ingeniería Civil hay dos fases: proyecto y construcción. Similarmente, en
Ingeniería del Software podríamos traducirlas a: diseño e implementación. ¡Pues
no! Las fases, en realidad, son: desarrollo y compilación.</p>

<p>Las economías de ambas ingenierías son muy distintas. En la charla hace
referencia a otra charla, creo que es ésta:
<a href="https://www.youtube.com/watch?v=zDEpeWQHtFU">Real Software Engineering, de Glenn Vaderburg</a>, donde habla precisamente de
éstas diferencias económicas. Mientras que en Ingeniería Civil el mayor coste
es el de construcción, en Ingeniería del Software, el mayor coste es el
desarrollo, el diseño.</p>

<p>Si en un proyecto software tienes 100 programadores, por analogías anticuadas,
quizá creas que tienes 100 albañiles, pero en realidad es como si tuvieras 100
arquitectos para diseñar el mismo edificio. ¿A que eso ya parece algo más
complejo de gestionar?</p>

<p>A continuación, pasa a hablar de metodologías (RUP, DSDM, Prince2, CMMI,&#8230;).
Al final, no pudieron eliminar ninguna de las 3 cosas. Pero, y si en lugar de
eliminarlas, ¿las aceptamos?</p>

<p>Las metodologías Agile se basan en 3 puntos:</p>

<ol>
<li>Observa, mira alrededor</li>
<li>Haz una hipótesis</li>
<li>Haz un experimento</li>
</ol>


<p>Estos 3 puntos no son más que el <strong>método científico</strong>. Por lo que el desarrollo
de software es empírico, no es <em>Ingeniería</em>.</p>

<h2>Conclusiones</h2>

<p>Esta es una de esas charlas en la que se discute la idea sobre si la Ingeniería
del Software debería llamarse Ingeniería o no. La idea propuesta aquí es que
no, pero justo el argumento que da el ponente para ello es uno de los argumentos
que veo yo de por qué la Ingeniería del Software sí es una Ingeniería. Paolo
dice que las bases de Agile son las mismas reglas que el método científico, por
lo que el desarrollo de software es empírico, y que por eso no es Ingeniería.
Pero yo no concibo un ingeniero sin un lado científico. ¿Qué es la Ingeniería si
no identificar problemas (observar), idear una solución (hipótesis) y construirla
(experimento)?.</p>

<h2>Referencias</h2>

<ul>
<li><a href="https://www.youtube.com/watch?v=9IPn5Gk_OiM">A short history of software engineering</a></li>
<li><a href="https://www.youtube.com/watch?v=zDEpeWQHtFU">Real Software Engineering</a>, de Glenn Vanderburg</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Navegando el código fuente con Vim]]></title>
    <link href="http://rchavarria.github.io/blog/2015/08/09/navegando-codigo-fuente-vim/"/>
    <updated>2015-08-09T22:16:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/08/09/navegando-codigo-fuente-vim</id>
    <content type="html"><![CDATA[<p>Últimamente se están popularizando muchos editores de código (Atom, Brakets,
Sublime Text,&#8230;). Pero mucho antes que ellos existieron al menos otros dos:
Emacs y <a href="http://www.vim.org">Vim</a>. No se muy bien la razón, quizá fue simplemente por el placer
de aprender, pero me decidí a <a href="http://rchavarria.github.io/blog/2014/10/11/aprendiendo-vim">aprender a utilizar Vim</a>. Ya llevo un tiempo
con ello, aunque el aprendizaje va despacio.</p>

<p>Hay muchas cosas que me encantan de Vim, pero echo de menos algunas cosas que
me dan ciertos IDEs: refactorizaciones sencillas, búsqueda en múltiples
ficheros, integración con otras herramientas,&#8230; En este post voy a contar
cómo se puede <strong>solucionar el problema de la navegación de código</strong>.</p>

<!-- more -->


<p>Vim lo soluciona con un fichero de <em>tags</em>. Dentro de un lenguaje de programación,
un tag es simplemente el nombre de una función, método, clase,&#8230; Cada tag va
acompañado de una referencia para localizar dónde aparece: básicamente fichero y
número de línea. Con la herramienta <a href="http://ctags.sourceforge.net">ctags</a> es posible generar un fichero que
sirve a Vim a conocer todas las tags de nuestro proyecto, y mediante comandos de
Vim, podemos movernos entre ellas de un fichero a otro.</p>

<h2>Uso de la herramienta <code>ctags</code></h2>

<p>Lo primero es instalar la herramienta. Para Linux es tan sencillo como ejecutar
un simple comando. Para otros sistemas operativos es también bastante sencillo,
pero se recomienda visitar la página del proyecto <a href="http://ctags.sourceforge.net">Exuberant Ctags</a> para
conocer más detalles.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install exuberant-ctags
</span></code></pre></td></tr></table></div></figure>


<p>El siguiente paso es generar el fichero de tags de nuestro proyecto:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /home/rchavarria/my-super-interesting-project
</span><span class='line'><span class="nv">$ </span>ctags -R .
</span></code></pre></td></tr></table></div></figure>


<p>Y por último, indicar a Vim dónde está el fichero de tags que queremos usar.
Para ello, una vez el editor está abierto, introducir el comando:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>:set <span class="nv">tags</span><span class="o">=</span>/path/to/tags/file
</span></code></pre></td></tr></table></div></figure>


<p>Para facilitar las cosas y no tener que recordar cómo cargar el fichero de tags
manualmente, es recomendable poner el comando anterior en el fichero <code>.vimrc</code>,
de forma que al abrir Vim cargue siempre el fichero de tags.</p>

<h2>Navegar</h2>

<p>Ahora, veamos cómo podemos movernos entre tags. Estos movimientos permiten
movernos dentro del mismo fichero, entre ficheros abiertos, o incluso ficheros
que no estén abiertos (pero están referenciados en el fichero de tags claro).</p>

<ul>
<li><code>CTRL + ]</code>: en modo normal, nos lleva a la definición del tag donde está el
cursor. Con el teclado español, para mostrar el carácter <code>]</code> es necesario pulsar
<code>AlgGr</code> + <code>]</code>, pero para ejecutar este comando de Vim no se debe pulsar <code>AltGr</code>,
es suficiente con pulsar la tecla que contiene los carácteres <code>+</code>, <code>*</code> y <code>]</code>.</li>
<li><code>CTRL + t</code>: en modo normal, te lleva de vuelta al punto antes de navegar al tag.</li>
<li><code>CTRL + w</code> + <code>CTRL + ]</code>: en modo normal, divide la pantalla horizontalmente y
abre el fichero donde se encuentra la definición del tag.</li>
<li><code>:tag &lt;tag name&gt;</code> para ir directamente a la definición de una tag cualquiera</li>
<li><code>:tnext</code> y <code>:tprevious</code> (<code>:tn</code> y <code>:tp</code>) te llevan a la tag siguiente o anterior.
hay quien recomienda mapear estos comandos a otra secuencia de carácteres, como
por ejemplo: <code>]t</code> y <code>[t</code>.</li>
<li><code>:ltag</code> carga las tags en la ventana de lista de localizaciones (como <code>:ls</code>
cuando lista los búfferes abiertos)</li>
<li><code>:lopen</code> abre dicha ventana</li>
</ul>


<h2>Referencias y enlaces relacionados</h2>

<ul>
<li><a href="http://andrewradev.com/2011/06/08/vim-and-ctags">Vim and Ctags</a>, fenomenal artículo que cubre casi todo lo relacionado con
Vim y ctags.</li>
<li><a href="http://rchavarria.github.io/blog/2014/10/11/aprendiendo-vim">Aprendiendo Vim</a>, en este mismo blog</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Estándares de código en tu equipo]]></title>
    <link href="http://rchavarria.github.io/blog/2015/08/02/estandares-codigo-equipo/"/>
    <updated>2015-08-02T21:58:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/08/02/estandares-codigo-equipo</id>
    <content type="html"><![CDATA[<p>¿Has conducido alguna vez en el extranjero? Si has ido de acompañanate, ¿has
prestado atención a la carretera?. Es todo tan distinto, pero a la vez es
prácticamente igual a conducir en tu propio país (quitando alguna excepción
como Inglaterra o Japón, que lo hacen por la izquierda). Seguro que encuentras
los mismos elementos: semáforos, cruces, rotondas, carreteras de doble sentido,
autovías,&#8230; y <strong>normas</strong>. Las normas de circulación no son las mismas en todos
los lugares, pero podríamos encontrar algunas normas básicas que sí lo son.
Esas normas básicas son las que nos permiten conducir en otros países con una
cierta confianza.</p>

<p>Cuando escribimos código dentro de un equipo de desarrollo ocurre algo similar.
Cada uno tenemos nuestro estilo a la hora de escribir código: nombrado de
variables, espaciado, paréntesis, indentación,&#8230; Si tuviéramos total libertad
para desarrollar como nos apeteciera, el trabajo en equipo sería mucho más
duro, ya que tendríamos que <em>entender</em> el estilo de cada uno de nuestros
compañeros. Por curiosidad, ¿no te ha pasado nunca que has leído una clase e
inmediatamente sabes quién la ha escrito? Para evitar esta sobrecarga conviene
tener ciertas normas, unas <strong>reglas</strong> básicas de cómo escribir código, para
que todos los miembros del equipo escriban código acorde a un cierto <em>estándar</em>.</p>

<p>Aquí es donde aparece <a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP_CodeSniffer</a>, una herramienta de análisis estático
de código PHP (JavaScript y CSS) que genera informes sobre qué partes del
código de nuestro equipo violan las reglas del estándar que previamente definió
el equipo.</p>

<!-- more -->


<p><img class="center" src="http://rchavarria.github.io/images/2015/ruler.png"></p>

<h2>Reglas</h2>

<p>Cada una de esas reglas puede hacer referencia a aspectos muy distintos de
nuestro código: indentación con espacios o tabuladores, apertura de llaves (<code>{</code>)
en la misma línea o en la siguiente, sintaxis a la hora de manipular arrays
(<code>array()</code> o <code>[]</code>),&#8230; Las reglas a utilizar deben ser consensuadas en el equipo
y suelen estar definidas en un fichero llamado <code>ruleset.xml</code> que se pasará como
parámetro a la herramienta <code>phpcs</code>. Aquí nos estamos centrando en código PHP,
pero también se puede hacer análisis de código JavaScript y CSS.</p>

<p>A la hora de poder definir un conjunto de reglas a utilizar dentro del equipo,
sería conveniente tener una lista de todas ellas y una breve descripción de cada
una para facilitar la discusión y la toma de decisiones. Lamentablemente, la
documentation de la herramienta no proporciona esa lista, pero existe algunas
posibilidades que nos pueden facilitar el trabajo.</p>

<h3>Opción <code>-s</code></h3>

<p>El comando <code>phpcs</code> se puede ejecutar con la opción <code>-s</code>, con la cual la
herramienta indica qué regla (o <em>sniff</em>, como lo llama PHP_CodeSniffer) estamos
incumpliendo en cada violación que aparece en el informe de la herramienta.
El siguiente comando ejecuta <code>phpcs</code> mostrando el progreso (<code>-p</code>), analizando
solo archivos con la extensión <code>.php</code> y por supuesto que nos muestre las
reglas que no se cumplen (<code>-s</code>), como por ejemplo
<code>Generic.Commenting.Todo.TaskFound</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>phpcs -p -s --extensions<span class="o">=</span>php &lt;directory or file&gt;
</span><span class='line'>
</span><span class='line'>...E...E....W.....W..E.............W........................  60 / 723 <span class="o">(</span>8%<span class="o">)</span>
</span><span class='line'>.......................W.................................... 120 / 723 <span class="o">(</span>17%<span class="o">)</span>
</span><span class='line'>.............................W..W....E..................E..E 180 / 723 <span class="o">(</span>25%<span class="o">)</span>
</span><span class='line'>
</span><span class='line'>----------------------------------------------------------------------
</span><span class='line'> 44 | ERROR   | Function<span class="err">&#39;</span>s cyclomatic complexity <span class="o">(</span>21<span class="o">)</span> exceeds allowed
</span><span class='line'>    |         | maximum of 20
</span><span class='line'>    |         | <span class="o">(</span>Generic.Metrics.CyclomaticComplexity.MaxExceeded<span class="o">)</span>
</span><span class='line'>----------------------------------------------------------------------
</span><span class='line'> 60 | ERROR | <span class="o">[</span>x<span class="o">]</span> Line indented incorrectly; expected at least 2 spaces,
</span><span class='line'>    |       |     found 0 <span class="o">(</span>Generic.WhiteSpace.ScopeIndent.Incorrect<span class="o">)</span>
</span><span class='line'>----------------------------------------------------------------------
</span><span class='line'> 59 | WARNING | The method parameter <span class="nv">$userId</span> is never used
</span><span class='line'>    |         | <span class="o">(</span>Generic.CodeAnalysis.UnusedFunctionParameter.Found<span class="o">)</span>
</span><span class='line'>----------------------------------------------------------------------
</span><span class='line'> 61 | WARNING | Comment refers to a TODO task <span class="s2">&quot;Improve readability&quot;</span>
</span><span class='line'>    |         | <span class="o">(</span>Generic.Commenting.Todo.TaskFound<span class="o">)</span>
</span><span class='line'>----------------------------------------------------------------------
</span><span class='line'>
</span><span class='line'>... output has been truncated
</span><span class='line'>Time: 2 mins, 9.46 secs; Memory: 25.5Mb
</span></code></pre></td></tr></table></div></figure>


<h3>Código fuente</h3>

<p>Al final, la documentación más fiable, más actualizada, más detallada y más de
todo es el código fuente. Puede asustar un poco tener que mirar el código fuente,
pero <a href="https://github.com/squizlabs/PHP_CodeSniffer">el código de PHP_CodeSniffer</a> es código abierto y se puede navegar en
Github de forma sencilla. Además, no tendrás que consultarlo de arriba a abajo,
aquí encontrarás unas pistas de donde encontrar las reglas.</p>

<p>El código está organizado en varios directorios, en <code>CodeSniffer/Standards</code>
encontraremos el código fuente que nos interesa. Cada subdirectorio
contiene las reglas definidas por cada estándar: Generic, PEAR, PSR1, PSR2,&#8230;
Dentro de cada uno de estos directorios, encontramos un fichero llamado
<code>ruleset.xml</code>, donde podemos encontrar las reglas importadas de aquellos
estándares que las definen. Por ejemplo, en el fichero <code>PSR2/ruleset.xml</code>
podemos encontrar:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;ruleset</span> <span class="na">name=</span><span class="s">&quot;PSR2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'> <span class="nt">&lt;description&gt;</span>The PSR-2 coding standard.<span class="nt">&lt;/description&gt;</span>
</span><span class='line'> <span class="nt">&lt;arg</span> <span class="na">name=</span><span class="s">&quot;tab-width&quot;</span> <span class="na">value=</span><span class="s">&quot;4&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'> <span class="c">&lt;!-- Include the whole PSR-1 standard --&gt;</span>
</span><span class='line'> <span class="nt">&lt;rule</span> <span class="na">ref=</span><span class="s">&quot;PSR1&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'> <span class="c">&lt;!-- The soft limit on line length MUST be 120 characters;</span>
</span><span class='line'><span class="c">      automated style checkers MUST warn but MUST NOT error at the soft limit. --&gt;</span>
</span><span class='line'> <span class="nt">&lt;rule</span> <span class="na">ref=</span><span class="s">&quot;Generic.Files.LineLength&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;properties&gt;</span>
</span><span class='line'>   <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;lineLimit&quot;</span> <span class="na">value=</span><span class="s">&quot;120&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">&quot;absoluteLineLimit&quot;</span> <span class="na">value=</span><span class="s">&quot;0&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/properties&gt;</span>
</span><span class='line'> <span class="nt">&lt;/rule&gt;</span>
</span><span class='line'>
</span><span class='line'> <span class="c">&lt;!-- ... --&gt;</span>
</span><span class='line'>
</span><span class='line'> <span class="c">&lt;!-- Visibility MUST be declared on all methods. --&gt;</span>
</span><span class='line'> <span class="nt">&lt;rule</span> <span class="na">ref=</span><span class="s">&quot;Squiz.Scope.MethodScope&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'> <span class="c">&lt;!-- Method arguments with default values MUST go at the end of the argument list. --&gt;</span>
</span><span class='line'> <span class="nt">&lt;rule</span> <span class="na">ref=</span><span class="s">&quot;PEAR.Functions.ValidDefaultValue&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'> <span class="c">&lt;!-- ... --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/ruleset&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>En este fichero podemos ver que se importan todas las reglas definidas en el
estándar <em>PSR1</em> con <code>&lt;rule ref="PSR1"&gt;</code>. Y que se importan reglas individuales
de otros estándares, por ejemplo <code>&lt;rule ref="Squiz.Scope.MethodScope"/&gt;</code>. O que
incluso se pueden pasar parámetros a algunas reglas, como se hace con
<code>Generic.Files.LineLengh</code>.</p>

<h3>Guía definitiva</h3>

<p>Si con todo esto todavía no has dado con las reglas que quieres, o si necesitas
conocer alguna regla más en profundidad, podemos echar un vistazo a cómo se
generan las referencias de las reglas para poder incluirlas, excluirlas o
parametrizarlas en nuestro <code>ruleset.xml</code>.</p>

<p>Tomemos como ejemplo las reglas <em>Generic</em>, ya que son las más utilizadas, más
concretamente la regla <code>Generic.Files.LineLength</code>. Las reglas del estándar
<em>Generic</em> están definidas en el directorio: <code>CodeSniffer/Standards/Generic</code>,
y dentro de él, en el directorio <code>Sniffs</code>. El siguiente token, <code>Files</code>, indica
un nuevo subdirectorio dentro de <code>Sniffs</code> con el mismo nombre. Y por último,
<code>LineLength</code>, indica una clase PHP con ese mismo nombre más el sufijo <code>Sniff</code>.</p>

<p>Así pues, para la regla <code>Generic.Files.LineLength</code>, encontraremos una clase PHP en
<code>CodeSniffer/Standards/<strong>Generic</strong>/Sniffs/<strong>Files</strong>/<strong>LineLength</strong>Sniff.php</code></p>

<p>Otros ejemplos podrían ser:</p>

<ul>
<li><code>PEAR.Commenting.InlineComment</code>: clase <code>CodeSniffer/Standards/<strong>PEAR</strong>/Sniffs/<strong>Commenting</strong>/<strong>InlineComment</strong>Sniff.php</code></li>
<li><code>PSR1.Classes.ClassDeclaration</code>: clase <code>CodeSniffer/Standards/<strong>PSR1</strong>/Sniffs/<strong>Classes</strong>/<strong>ClassDeclaration</strong>Sniff.php</code></li>
<li><code>Zend.Debug.CodeAnalyzer</code>: clase <code>CodeSniffer/Standards/<strong>Zend</strong>/Sniffs/<strong>Debug</strong>/<strong>CodeAnalyzer</strong>Sniff.php</code></li>
</ul>


<p>Pero aún hay más. En el <code>ruleset.xml</code> de ejemplo, veíamos cómo se pasaban
parámetros a la regla <code>Generic.Files.LineLength</code>. Ahora ya conocemos la clase
PHP que contiene el código que ejecuta esa regla:
<code>CodeSniffer/Standards/Generic/Sniffs/Files/LineLengthSniff.php</code>. Dicha clase
tiene dos variables públicas: <code>lineLimit</code> y <code>absoluteLineLimit</code>. Que precisamente
son los parámetros que se pueden configurar. Así pues, variables públicas en
las clases <code>*Sniff</code> no son más que posibles parámetros a usar en el
<code>ruleset.xml</code> de nuestro proyecto.</p>

<h3>Referencias y enlaces relacionados</h3>

<ul>
<li>Página de <a href="https://github.com/squizlabs/PHP_CodeSniffer">PHP_CodeSniffer</a></li>
<li><a href="http://rchavarria.github.io/blog/2014/05/05/mejora-continua-y-analisis-estatico-de-codigo">Mejora contínua y análisis estático de código</a> en este mismo blog</li>
<li><a href="http://stackoverflow.com/questions/16427207/php-codesniffer-rules-documentation">Documentación de las reglas de PHP_CodeSniffer</a> en Stack Overflow</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Análisis de consumo de memoria en tests de AngularJS]]></title>
    <link href="http://rchavarria.github.io/blog/2015/07/26/consumo-memoria-tests-angularjs/"/>
    <updated>2015-07-26T22:10:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/07/26/consumo-memoria-tests-angularjs</id>
    <content type="html"><![CDATA[<p>Hoy en día no concibo desarrollar una aplicación sin una batería de tests
automáticos (unitarios, de integración, end-to-end, del tipo que sean).
Da igual el tamaño del proyecto. Pero además, si se trata de una aplicación
JavaScript, tener tests es una obligación.</p>

<p><a href="http://angularjs.org">AngularJS</a> es un framework que pone las cosas fáciles para comenzar a escribir
tests. Incluso la propia aplicación de ejemplo ya viene preparada para
escribir tests con <a href="https://jasmine.github.io">Jasmine</a> y ejecutarlos con <a href="https://karma-runner.github.io">KarmaJS</a> en tu navegador.</p>

<p>Si el proyecto es muy grande, llegará un punto en el que haya cientos de tests
automáticos, quizá miles, por lo que ejecutar todos los tests en el navegador
se puede considerar como la ejecución de una gran aplicación. Por lo tanto
habrá que tener en cuenta aspectos de rendimiento, consumo de memoria (y
liberación de la misma), posibles <em>memory leaks</em>,&#8230;</p>

<!-- more -->


<p>Eso justo es lo que está pasando en mi equipo. Nuestro proyecto está en un
estado avanzado de desarrollo, y comenzamos a tener un número considerable de
tests automáticos en la parte cliente. Para ejecutar los tests en el servidor
de integración contínua utilizamos <a href="http://phantomjs.org">PhantomJS</a>. Pero parece ser que PhantomJS
tiene algunos problemillascon la gestión de memoria, y hemos sobrepasado su
límite. PhantomJS no puede ejecutar toda nuestra batería de tests de una sola
vez. Así que nos estamos planteando si quizá son nuestros tests quienes tienen
algún problema con la memoria, quizá podríamos hacer algo para no consumir
tantos recursos.</p>

<h2>Hipótesis</h2>

<p>Una idea para solucionarlo pasa por reducir la cantidad de código JavaScript a
cargar y ejecutar en cada test. ¿Qué tal si en lugar de cargar el módulo
principal de AngularJS completo (donde está contenida toda nuestra aplicación),
cargamos solamente aquel módulo que contenga la funcionalidad a probar en el
test?</p>

<p>Pero esto es sólo una hipótesis, no vamos a modularizar toda la aplición en
módulos minúsculos sin tener ningún dato sobre el que apoyarnos. Por lo tanto,
vamos a realizar la siguiente prueba: añadiremos un nuevo módulo, minúsculo. En
este módulo crearemos una factoría, con un método al que llamaremos tantas veces
sea necesario para hacer que los tests consuman una cantidad apreciable de
memoria y CPU. Ejecutaremos dos baterías de tests, con los mismos tests: una
cargando el módulo que contiene toda la aplicación, otra cargando solamente el
módulo pequeño.</p>

<h2>Aplicación completa</h2>

<p><img class="center" src="http://rchavarria.github.io/images/2015/memory-benchmark-big.thumbnail.png"></p>

<p><a href="http://rchavarria.github.io/images/2015/memory-benchmark-big.png">Ver la imagen en grande</a></p>

<p>Podemos apreciar como la ejecución de la batería de tests dura aproximadamente
unos 8 segundos (desde 4.5s hasta 12.25s). En cuanto a consumo de memoria, el
rango va de un mínimo de 10Mb a un máximo de 108Mb.</p>

<p>Se puede apreciar cómo el consumo de memoria va dibujando unos dientes de sierra.
Éste dibujo es muy típico en los análisis de memoria (hay momentos en los que
se reserva memoria y el consumo aumenta, pasado un pequeño espacio de tiempo,
objetos en memoria se dejan de usar y ésta es liberada, que es cuando la gráfica
baja de golpe). Pero la mala noticia es que el consumo va cada vez a más, no se
libera la misma cantidad que se reserva, lo que indica que hay muchas referencias
a objectos que no se eliminan correctamente. Incluso después de haber terminado
la ejecución de los tests, el navegador no considera que deba liberar memoria.</p>

<h2>Módulo pequeño</h2>

<p><img class="center" src="http://rchavarria.github.io/images/2015/memory-benchmark-small.thumbnail.png"></p>

<p><a href="http://rchavarria.github.io/images/2015/memory-benchmark-small.png">Ver la imagen en grande</a></p>

<p>El tiempo de ejecución de esta batería de tests es de 1s, de 3.25s a 4.25s,
(esta gráfica muestra intervalos de 500ms). El consumo de memoria sube
rápidamente, con un mínimo de 11Mb y un máximo de 42.5Mb.</p>

<p>Esta vez, casi no se aprecian los dientes de sierra, quizá porque la ejecución
es mucho más rápida y el navegador no considera que haya que liberar memoria de
forma agresiva durante el tiempo que dura la ejecución. Aquí se puede observar
claramente cómo después de que los tests hayan terminado, pasado un tiempo, el
navegador es capaz de liberar prácticamente toda la memoria consumida por los
tests. Esto es muy buena señal.</p>

<h2>Conclusiones</h2>

<p>Con este pequeño análisis queda bastante claro que tener módulos pequeños hace
que nuestros tests se ejecuten mucho más rápido (el tiempo de ejecución baja de
8s a 1s) y consuman mucha menos memoria (el máximo baja de 108Mb a 42.5Mb).
También se puede deducir que en módulos pequeños hay un riesgo más bajo de sufrir <em>memory leaks</em>.</p>

<p>En este caso, al usar un módulo muy pequeño y no observar <em>memory leaks</em>, se
deduce que los <em>leaks</em> que se observan en la aplicación en su conjunto deben de
estar en otro módulo. Esto nos ayuda a aislar partes de nuestra aplicación y
poder reducir la cantidad de código a analizar para encontrar el problema.</p>

<p>Estábamos en lo cierto con nuestra hipótesis, módulos pequeños hacen que los
tests sean más rápidos y más eficientes en el consumo de memoria. Por lo tanto,
parece buena idea <strong>modularizar una aplicación</strong> con un tamaño considerable, y al
ejecutar los tests <strong>cargar sólo los módulos necesarios</strong> para que se ejecute esa
suite de tests, no cargar módulos redundantes.</p>

<h2>Referencias</h2>

<p>En el artículo <a href="http://shyp.github.io/2015/07/13/speed-up-your-javascript-tests.html">Speed up JavaScript test time 1000x</a> podemos encontrar unos
cuantos consejos acerca de cómo hacer que nuestros tests JavaScript se ejecuten
mucho más rápido, ya sea una aplicación Angular o no.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript patterns]]></title>
    <link href="http://rchavarria.github.io/blog/2015/07/19/javascript-patterns/"/>
    <updated>2015-07-19T21:10:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/07/19/javascript-patterns</id>
    <content type="html"><![CDATA[<h5>de Stoyan Stefanov</h5>

<p><img class="left" src="http://akamaicovers.oreilly.com/images/9780596806767/lrg.jpg" width="250" height="328" title="JavaScript patterns" ></p>

<h2>Por qué lo he leído</h2>

<p>Cuando leí <a href="http://rchavarria.github.io/blog/2015/05/29/learning-javascript-design-patterns/">Learning JavaScript design patterns</a>, de Addy Osmany, me quedé con
ganas de más, me equivoqué de libro. El que realmente quería leerme para
aprender sobre patrones en JavaScript era éste. Pero me dejé llevar por la
<em>fama</em> de Addy.</p>

<p>El objetivo de leer estos dos libros era el de profundizar en el uso de patrones
en JavaScript, poder trasladar conocimientos adquiridos en Java, a JavaScript.</p>

<!-- more -->


<h2>Qué esperaba</h2>

<p>Esperaba que fuera un libro muy parecido al mítico <a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented-ebook/dp/B000SEIBB8">Design patterns</a>, como si
fuera un catálogo de patrones disponibles, con sus descripciones, situaciones
donde es recomendable usarlos y también, por qué no, ejemplos de proyectos
reales.</p>

<h2>Qué encontré</h2>

<p>Por supuesto, encontré muchos patrones, pero eso no es lo más llamativo.</p>

<p>El autor comenta varios aspectos del lenguaje que son cuanto menos, curiosos. No
sé si llegan al nivel de <a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript, the good parts</a>, pero deben de andar
cerca.</p>

<p>Además, alguno de los patrones difieren de la idea que yo tenía, son muy
distintos a patrones con el mismo nombre, pero en otros lenguajes de
programación.</p>

<h2>Conclusiones</h2>

<p>Junto con <a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript, the good parts</a>, considero que éste es un libro imprescindible
para cualquier desarrollador que quiera dominar el lenguaje.</p>

<p>Explica en profundidad algunos de los patrones más usados en todo tipo de
proyectos. Quizá, con el nuevo estándard recién aprobado, algunos de ellos
(como la <em>herencia por prototipos</em>) queden algo obsoletos, creo que es
un libro imprescindible para entender el lenguaje.</p>

<h2>Qué he aprendido</h2>

<p>Puedes consultar mis <a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/javascript-patterns-by-stoyan-stefanov.markdown">notas sobre el libro</a> si quieres ver todo lo que me
ha llamado la atención de el mismo. Pero destacaría lo siguiente:</p>

<ul>
<li>Una regla que se repite en muchos patrones: <strong>los miembros a compartir deben
ir en el prototipo, nunca en el <code>this</code></strong></li>
<li>Los constructors implícitamente devuelven <code>this</code>, incluso si no hay un
<code>return</code>, pero tu puedes devolver lo que quieras, incluso puedes redefinir el
constructor. Esto se hace, por ejemplo, en el patrón Singleton</li>
<li>En la declaración de una función, su definición también sufre <em>hoisting</em>, no
solo la declaración</li>
<li>Métodos clásicos de herencia y herencia de prototipos, aunque esto vaya a
cambiar con nuevas versiones del lenguaje, con la aparición de clases</li>
<li>Unas cuantas sugerencias para desplegar grandes aplicaciones: combinar scripts,
minificarlos, utilizar compresión de archivos, uso de cabeceras HTML, uso de
CDNs, dónde situar las etiquetas <code>&lt;script&gt;</code>, enviar en trozos grandes ficheros
HTML.</li>
</ul>


<h2>Recursos relacionados</h2>

<ul>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/javascript-patterns-by-stoyan-stefanov.markdown">notas sobre el libro</a></li>
<li><a href="http://rchavarria.github.io/blog/2015/05/29/learning-javascript-design-patterns/">Learning JavaScript design patterns</a>, libro de Addy Osmany</li>
<li><a href="http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented-ebook/dp/B000SEIBB8">Design patterns</a>, libro de The Gang of Four</li>
<li><a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript, the good parts</a>, libro de Douglas Crockford</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Charla técnica: Therapeutic refactoring]]></title>
    <link href="http://rchavarria.github.io/blog/2015/07/12/charla-tecnica-therapeutic-refactoring/"/>
    <updated>2015-07-12T19:09:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/07/12/charla-tecnica-therapeutic-refactoring</id>
    <content type="html"><![CDATA[<p>Acabo de visualizar la charla <a href="https://www.youtube.com/watch?v=J4dlF0kcThQ">Therapeutical Refactoring</a>, de <a href="https://twitter.com/kytrinyx">Katrina Owen</a>,
creadora de <a href="http://exercism.io">exercism.io</a>, y me ha encantado.</p>

<p>Es una charla donde nos cuenta la historia de una refactorización. Me ha
gustado especialmente cómo cuenta la refactorización. Ocultando las partes
del código que no interesan en el paso actual y resaltando aquellas que
sí.</p>

<p>Me ha recordado mucho a cómo vemos los desarrolladores el código,
focalizándonos en pequeños detalles, entremezclados en líneas y líneas de
código.</p>

<!-- more -->




<iframe width="560"
        height="315"
        src="https://www.youtube.com/embed/J4dlF0kcThQ"
        frameborder="0"
        allowfullscreen></iframe>


<p>En el repositorio <a href="https://github.com/kytrinyx/therapeutic-refactoring">therapeutic-refactoring</a> se pueden ver todos los pasos
que Katrina ha dado en la refactorización.</p>

<h2>Notas</h2>

<p>Alrededor del minuto 19 nos habla del término <em>codejunk</em>. Codejunk trata
sobre ruido, ruido que nos molesta para entender el código, pequeños detalles
que hacen que gastemos más energía de la necesaria para entender qué hace
el código. Algunos no son errores en sí, pero son como pequeños picores
que no te dejan disfrutar.</p>

<p>Describe 10 (de menos a más molestos):</p>

<ol>
<li>Comentarios penosos</li>
<li>Espacios en blanco al final de las líneas</li>
<li>Código comentado</li>
<li>Paréntesis innecesarios</li>
<li>Parámetros explícitos por defecto</li>
<li><code>import</code>s o <code>require</code>s (dependiendo del lenguaje) innecesarios</li>
<li><code>string</code>s hechas de <code>string</code>s</li>
<li>Demasiado trabajo <em>manual</em> (deja que el pc haga el trabajo, no lo hagas tú)</li>
<li>Tests duplicados, hay que poner el mismo mimo en el código de tests
que en el de producción</li>
<li>Una combinación de todos los anteriores</li>
</ol>


<h2>Moral de la historia</h2>

<p>Refactorizar te da como un cerebro externo (exobrain).
Cada uno de nosotros podemos retener una cantidad finita de detalles en la
memoria (me recuerda al post de J.B.Rainsberger
<a href="http://blog.thecodewhisperer.com/2015/03/28/your-tests-are-dragging-you-down">Your tests are dragging you down</a>). Programar es sobretodo, mantener en
mente todos esos detalles. Nuestra memoria trabaja peor bajo condiciones
de miedo o estrés. Refactorizar pone a salvo muchos de estos detalles,
permitiéndonos trabajar más relajadamente y más confiados en que estamos
haciendo un buen trabajo.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Escribir y ejecutar tests de Mocha en ECMAScript 6]]></title>
    <link href="http://rchavarria.github.io/blog/2015/07/05/escribir-tests-mocha-es6/"/>
    <updated>2015-07-05T21:59:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/07/05/escribir-tests-mocha-es6</id>
    <content type="html"><![CDATA[<p>Me gusta resolver puzzles, pero no puzzles de miles de piezas, si no más bien el
tipo de puzzle en el que hay unas piezas de madera encajadas y hay que desencajarlas,
o en el que hay una cuerdecita con una bola y tienes que sacar la bola y volverla
a meter. Ese tipo de puzzles.</p>

<p>Creo que de ahí me viene también el gusto de resolver pequeños problemas de
programación. Me gusta programar. Me gusta aprender. Y qué mejor para aprender
que practicar. En el mundo de la programación existe un concepto llamado
<a href="https://en.wikipedia.org/wiki/Kata_%28programming%29">kata</a> (el concepto ha sido copiado de las artes marciales), el cual significa
la realización de pequeños ejercicios focalizados en la solución a un pequeño
problema muy concreto. Así que me gusta realizar katas de vez en cuando en algún
lenguaje de programación, para practicar.</p>

<!-- more -->


<p>Hace un tiempo publiqué un tutorial sobre <a href="http://rchavarria.github.io/blog/2014/09/24/plantilla-para-modulos-nodejs">cómo crear un módulo NodeJS</a>, el cual
me servía de base para realizar algunas de estas katas. En este artículo me
gustaría llevarlo un poco más allá. A ese proyecto, a esa plantilla, voy a
añadirle lo siguiente:</p>

<ul>
<li><a href="http://babeljs.io">Babel</a>: voy a añadir un paso en la construcción del proyecto y ejecución de los
tests, voy a transpilar código JavaScript ECMAScript 6 a ECMAScript 5. Esto me
permite practicar con la nueva versión de JavaScript.</li>
<li><a href="http://eslint.org">ESLint</a>: estoy convencido de que este tipo de herramientas ayudan en el día a
día en el desarrollo con JavaScript. Me ayudan a detectar errores tontos a la
hora de escribir mi código.</li>
<li><a href="https://travis-ci.org">Travis CI</a>: todos los tests serán ejecutados en un servidor de integración
contínua, para eliminar para siempre la excusa de <em>En mi ordenador funciona</em></li>
</ul>


<p>Si quieres dejarte de tonterías y ver todo montado ya y empezar a usar todo ello,
puedes echar un vistazo a el repositorio <a href="https://github.com/rchavarria/solveet-exercises-js">solveet-exercises-js</a> y jugar con
él.</p>

<h2>Babel</h2>

<p><a href="http://babeljs.io">Babel</a> es una herramienta para transformar código escrito en ECMAScript 6 en
código ECMAScript 5, es decir, para transformar código JavaScript de una versión
que todavía no está soportada completamente por los navegadores a una versión
que sí lo está.</p>

<p>Instalarlo es sencillísimo mediante <code>npm</code>:</p>

<pre><code>npm install --save-dev babel gulp-babel
</code></pre>

<p>Con este comando instalaremos la herramienta en sí, y un plugin para <code>gulp</code> que
nos permitirá usar Babel desde nuestro script Gulp. Modificaremos este script
para que transforme nuestro código justo antes de ejecutar nuestros tests:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;test&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">gulp</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">src</span><span class="p">([</span> <span class="s1">&#39;test/bootstrap.js&#39;</span><span class="p">,</span> <span class="s1">&#39;test/scripts/**/*.js&#39;</span> <span class="p">])</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">mocha</span><span class="p">({</span>
</span><span class='line'>            <span class="nx">reporter</span><span class="o">:</span> <span class="s1">&#39;spec&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="nx">compilers</span><span class="o">:</span> <span class="s1">&#39;js:babel/register&#39;</span>  <span class="c1">// tell mocha to compile with babel</span>
</span><span class='line'>        <span class="p">}));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>La parte diferente de otras configuraciones para lanzar los tests con mocha es
la parte donde configuramos mocha para que use Babel como compilador de código
JavaScript.</p>

<h2>ESLint</h2>

<p><a href="http://eslint.org">ESLint</a> es una herramienta que analiza nuestro código JavaScript y nos avisa de
violaciones de reglas que tengamos configuradas. Estas reglas nos permiten
definir patrones para detectar posibles fallos en nuestro código así como forzar
a que todos los integrantes de nuestro equipo sigan el mismo estilo de programación.</p>

<p>También utilizaremos <code>npm</code> para instalarlo, esta vez instalaremos solamente el
plugin de <code>gulp</code>, que como depende de ESLint directamente, éste se instalará
automáticamente:</p>

<pre><code>npm install --save-dev gulp-eslint
</code></pre>

<p>Y podemos crear una nueva tarea en gulp para analizar nuestro código:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;eslint&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">gulp</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">src</span><span class="p">([</span> <span class="s1">&#39;gulpfile.js&#39;</span><span class="p">,</span> <span class="s1">&#39;src/scripts/**/*.js&#39;</span><span class="p">,</span> <span class="s1">&#39;test/scripts/**/*.js&#39;</span> <span class="p">])</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">eslint</span><span class="p">())</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">eslint</span><span class="p">.</span><span class="nx">format</span><span class="p">())</span>
</span><span class='line'>        <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">eslint</span><span class="p">.</span><span class="nx">failOnError</span><span class="p">());</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ahora, si queremos analizar todo nuestro código antes de lanzar nuestros tests,
podemos hacer que la tarea <code>test</code> dependa de la nueva tarea <code>eslint</code>:</p>

<pre><code>gulp.task('test', [ 'eslint' ], function () {
    // ...
}
</code></pre>

<p>El siguiente paso es configurar ESLint. Hay infinidad de reglas, incluso podemos
definir las nuestras propias. Para comenzar, puedes echar un vistazo a un
fichero <a href="https://raw.githubusercontent.com/rchavarria/solveet-exercises-js/master/.eslintrc"><code>.eslintrc</code> de ejemplo</a>.</p>

<h2>Travis CI</h2>

<p><a href="https://travis-ci.org">Travis CI</a> es una herramienta de integración contínua. La herramienta recupera
nuestro código del repositorio de GitHub que le digamos y ejecuta todos los
tests.</p>

<p>Para ello debemos darnos de alta en la página. Podemos hacerlo con nuestra
cuenta de GitHub. Luego, podemos ir a nuestro perfil e indicar a Travis CI
qué repositorios debe <em>vigilar</em> para ejecutar los tests cada vez que hagamos
un push al repositorio.</p>

<p>Debemos indicar a Travis CI qué lenguaje y plataforma queremos testear, en
nuestro caso se trata de NodeJS. Como configuración, añadimos simplemente un
fichero llamado <code>.travis.yml</code> en el directorio raiz del proyecto con este
contenido:</p>

<pre><code>language: node_js
node_js:
    - "0.12"
</code></pre>

<p>De esta forma, cuando hagamos un push a nuestro repositorio en GitHub, Travis CI
recuperará el código, instalará paquetes Node con <code>npm</code> y ejecutará el comando
<code>npm test</code>.</p>

<p>Para que Travis CI lanze nuestros tests, debemos configurar la respuesta al
comando <code>npm test</code>. Para ello, modificaremos el fichero <code>package.json</code>:</p>

<pre><code>//...
"scripts": {
    "test": "gulp test"
},
//...
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dando un empujón al blog]]></title>
    <link href="http://rchavarria.github.io/blog/2015/06/28/dando-empujon-blog/"/>
    <updated>2015-06-28T23:48:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2015/06/28/dando-empujon-blog</id>
    <content type="html"><![CDATA[<p>No recuerdo con exactitud cuánto, pero ya llevo unos años escribiendo en este
blog (aunque lo he movido de plataforma). No lo hago por nada en especial, no lo
hago por complacer a nadie, ni por conseguir X visitas mensuales. Es más, a veces
me sirve más para dejar notas a mi yo futuro que para servir a mi(s) lector(es).
Tampoco es que tenga miles de lectores diarios, ni sea eso un objetivo que me haya
marcado, pero&#8230;</p>

<p>¿Por qué no? ¿Por qué no intentar tener un blog con un número decente de visitantes?</p>

<!-- more -->


<p>No recuerdo cómo, supongo que <em>navegando por ahí</em>, terminé encontrando el blog
<a href="http://simpleprogrammer.com">The simple programmer</a>, de <a href="http://simpleprogrammer.com/about-me">John Sonmez</a>, autor del libro <a href="http://www.amazon.com/gp/product/1617292397">Soft skills</a>. John tiene
un <a href="http://devcareerboost.com/blog-course">curso gratuito sobre cómo crear un blog</a> y llevarlo un poco más allá (bueno, se
supone que el objetivo del curso es impulsar tu carrera profesional, pero no tengo
tan altas las espectativas para un curso gratuito), y me apunté. Me apunté más que
nada por una lección que habla sobre cómo dar tu blog a conocer.</p>

<p>En cada lección, John habla del los pasos a seguir para crear un blog: comenzando por
darle un nombre, conseguir un hosting, hacer una lista de los primeros posts,&#8230; En
general he encontrado muy buenas historias y muy buenos consejos. Seguro que todo el
mundo aprende algo de este curso.</p>

<p>Particularmente, alguna lección se me ha atragantado en el tiempo, me ha dado pereza
hacerme con ella, pero sigo con el curso y estoy decidido a terminarlo. No voy a conseguir
ningún diploma ni nada, pero espero poder seguir los consejos de John durant mucho
tiempo y conseguir tener un blog útil para los lectores y que me permita conocer gente
interesante.</p>
]]></content>
  </entry>
  
</feed>
