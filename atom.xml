<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[R. Chavarria's Blog]]></title>
  <link href="http://rchavarria.github.io/atom.xml" rel="self"/>
  <link href="http://rchavarria.github.io/"/>
  <updated>2016-12-04T18:28:20+01:00</updated>
  <id>http://rchavarria.github.io/</id>
  <author>
    <name><![CDATA[Rub&eacute;n Chavarr&iacute;a]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The 4 hour body]]></title>
    <link href="http://rchavarria.github.io/blog/2016/12/04/the-4-hour-body/"/>
    <updated>2016-12-04T18:14:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2016/12/04/the-4-hour-body</id>
    <content type="html"><![CDATA[<h6>de Tim Ferriss</h6>

<p><img class="left" src="https://raw.githubusercontent.com/rchavarria/blog-post-incubator/master/published-book-notes/img/4-hour-body-cover.jpeg" width="200" height="250"></p>

<h3>Por qué lo he leído</h3>

<p>Soy un oyente del podcast de <a href="http://fourhourworkweek.com/about/">Tim Ferriss</a>, <a href="http://fourhourworkweek.com/podcast/">the 4 hour workweek podcast</a>, y me parece una persona bastante peculiar, con unas ideas bastante rompedoras, y muy preocupado por el aprender y dominar muy distintas disciplinas rápidamente. No estoy de acuerdo con todo lo que Tim <em>predica</em>, pero la verdad es que muchas de sus ideas me parecen muy buenas y les han dado resultados a muchos de sus seguidores. Entiendo que eso no quiere decir que funcionen en todos los casos, pero al menos las ideas locas de Tim han sido probadas más de una vez.</p>

<p><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/4-hour-body-by-tim-ferriss.markdown">The 4 hour body</a>, o <em>El cuerpo perfecto en 4 horas</em> que es su título en español, trata de dos cosas básicamente: cómo perder peso, y cómo ganar músculo. Y yo estoy interesado en perder peso, asi que ¿por qué no conocer algunas ideas de una persona seguida por millones?</p>

<!-- more -->


<h3>De qué trata el libro</h3>

<p>El libro trata de enseñarte cómo conseguir un cuerpo perfecto en 4 horas. Bueno, el título creo que está más escogido para cuadrar con otros libros del autor como <em>La semana laboral de 4 horas</em> y otros con títulos similares.</p>

<p>Trata temas relacionados con la pérdida de peso, otros temas sobre cómo ganar músculos de forma brutal o de cómo tener sexo increíble. En el libro propone seguir una dieta que llama <em>de bajos hidratos de carbono</em> y sugiere seguir una serie de ejercicios para ganar músculo basado en el concepto de <em>mínima dosis efectiva</em>.</p>

<p>Al tratar temas muy diversos y con objetivos casi contradictorios (no puede ser que quieras perder peso y que quieras tener cuerpo de culturista a la vez), el autor explica que no es necesario leer el libro de principio a fin, basta con concentrarte en los aspectos que a uno más le interesen.</p>

<h3>Conclusiones y valoración</h3>

<p>Como ya he dicho, el tema que me interesaba (y me interesa) es el de la pérdida de peso. Por eso no puedo valorar el libro al completo, pero la parte de la pérdida de peso es algo controvertida.</p>

<p>A lo largo de su vida, el autor ha experimentado con varios alimentos y técnicas para conseguir reducir la grasa corporal y con ejercicios para ganar músculo. Son métodos fuera de lo común y no parecen estar basados en datos muy científicos. En realidad, creo que el autor se queda con los estudios científicos que apoyan sus creencias.</p>

<p>Aún así, con todo lo inusual de sus consejos, algunos me parece que tienen su lógica, y cogiéndolos con cuidado, creo que se pueden aprovechar algunas ideas. Aunque hay otras, como por ejemplo el consejo de no comer nada de fruta si se quiere perder grasa corporal (porque se supone que la fructosa es un azúcar que se absorve rápidamente y luego se convertirá en grasa) no me gusta mucho. Una cosa es estar interesado en perder peso y otra cosa es dejar de comer alimentos saludables por conseguirlo más rápido. Además, parece ser que la carencia de vitaminas debido a dejar de comer fruta, la aconseja suplir tomando complementos vitamínicos. Y eso no me mola, no tengo ganas de tomar pastillas para suplir un alimento que tengo al alcance de la mano.</p>

<h3>Qué he aprendido</h3>

<p>Dieta para perder peso, ejercicio para ganar musculo</p>

<p>Concepto de <strong>Mínima Dosis Efectiva</strong>: la mínima dosis que produce el resultado esperado. Cualquiercosa por encima de MED es desperdicio. Por ejemplo, para hervir agua necesitas hasta 100ºC. Todo lo que sobrepases esa temperatura no va a hacer que hierba más. O si necesitas 15 minutos de sol para activar la melanina, 4 horas friéndote en la playa no te van a poner mucho más moreno.</p>

<p>Dieta básica baja en carbohidratos: evita carbohidratos blancos, come las mismas pequeñas comidas una y otra vez, no hagas menús complicados, no bebas calorías, no comas fruta, tómate un día de descanso a la semana</p>

<h3>Frases que me gustaría recordar</h3>

<blockquote><p>Cualquier dieta popular se puede resumir en estos 4 puntos: comer más verdura, comer menos grasa saturada, hacer más ejercicio y quemar más calorías, comer más ácidos grasos omega-3</p></blockquote>

<!-- more -->


<blockquote><p>Es <strong>tu responsabilidad</strong>, no la de tu médico o dietista, aprender a qué es lo que mejor responde tu cuerpo (<em>algo así como: experimenta con tu cuerpo</em>)</p></blockquote>

<!-- more -->


<blockquote><p>En el contexto del libro, hay dos dosis mínimas a tener en cuenta: para eliminar grasa acumulada: hacer lo mínimo necesario para disparar una cascada de hormonas específicas de pérdida de grasa, y que para añadir músculo: hacer lo mínimo necesario para disparar mecanismos de crecimiento específicos (músculos) y sistémicos (hormonales)</p></blockquote>

<!-- more -->


<blockquote><p>Tu peso viene y va, como un yo-yo. Acéptalo, búscalo, eso es mejor buscar un balance fijo.</p></blockquote>

<!-- more -->


<blockquote><p>Diferentes fuentes de calorías producen diferentes resultados. Influyen 3 variables: digestión, la proporción hidratos-proteína-grasa y el tiempo.</p></blockquote>

<!-- more -->


<blockquote><p>4 principios de comportamientos anti-fallos: hazlo consciente (diario de ingestas, foto de comida que vas a comer), hazlo como un juego (medidas, motivacion,&#8230;), hazlo competitivo (acepta la presión de otros como tú), hazlo pequeño y temporal (en lugar de correr 1h todos los días, corre 5min los primeros días)</p></blockquote>

<!-- more -->


<blockquote><p>Dieta básica baja en carbohidratos: evita carbohidratos blancos, come las mismas pequeñas comidas una y otra vez, no hagas menús complicados, no bebas calorías, no comas fruta, tómate un día de descanso a la semana</p></blockquote>

<!-- more -->


<blockquote><p>Alimentos que bajan el nivel de glucosa en sangre (aunque no quiere decir que adelgacen por sí mismos): alimentos con alto contenido graso, fructosa, zumo de limòn y canela</p></blockquote>

<!-- more -->


<blockquote><p>Más que la cantidad, es el tamaño y la velocidad de las comidas que determina el nivel de glucosa. Lo mejor que puedes hacer es comer despacio.</p></blockquote>

<h3>Recursos relacionados</h3>

<ul>
<li>Todas las <a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/4-hour-body-by-tim-ferriss.markdown">notas sobre el libro</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mi Codemotion 2016]]></title>
    <link href="http://rchavarria.github.io/blog/2016/11/28/mi-codemotion-2016/"/>
    <updated>2016-11-28T22:00:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2016/11/28/mi-codemotion-2016</id>
    <content type="html"><![CDATA[<p>Y otro año más, me lo he pasado genial en el <a href="https://2016.codemotion.es/">Codemotion</a>. No creo que necesite
presentación. Es el evento técnico más grande en España: dos días completos,
más de 2000 asistentes, 150 charlas y talleres. Una auténtica monstruosidad. Y
llena de monstruos de la industria.</p>

<div style="background-image: url('/images/2016/codemotion-2016.jpg');
            width: 100%;
            height: 14em;
            background-position: center 0;
            background-size: cover;"></div>




<div style="text-align: center">
  <span style="font-size: 60%">
Foto: <a href="https://flic.kr/p/NjN8Hv">_MG_1926</a> de <a href="https://www.flickr.com/photos/78483623@N07/">Codemotion Madrid</a>, &copy; Todos los derechos reservados, reproducida con <a href="https://twitter.com/codemotion_es/status/803259905213952000">permiso explícito</a>
  </span>
</div>




<!-- more -->


<h2>Mis impresiones</h2>

<p>La organización tomó nota de una de las quejas más escuchadas el año pasado: la
masificación de alguna sala. Este año se pidió a los asistentes que votaran a
qué charlas tenían intención de acudir, y repartieron las salas en
consecuencia. Por supuesto, es imposible hacerlo perfecto, aún hubo algún caso
en el que la sala se quedó pequeña. Pero nada comparable a otros años.
Impresionante organización.</p>

<p>La comida me pareció exactamente igual al año anterior. En mi opinión se queda
corta, pero hay una ligera variedad de sabores y también vi que había
sandwiches espciales para celíacos. Muy buen detalle. Es una lata tener que
desplazarse a un pabellón exterior, pero es comprensible por la cantidad de
asistentes. Es una delicia ver que hay gente repartida por todo el recinto a la
hora de la comida y el café.</p>

<p>Hay gente que se queja de la mala gestión por parte de la organización para
favorecer que haya más presencia femenina. No estoy seguro, pero mi impresión
es que este año ha habido más mujeres que en años anteriores. No tengo datos,
simplemente me guio por mis sensaciones.</p>

<p>Así como me pareció que había más mujeres, también tuve la impresión de que
hubo menos ponentes extranjeros. Quizá fui yo que no encontré una charla
interesante ofrecida por alguno de ellos. Este tema me recuerda mucho a un post
reciente de Carlos Blé hablando sobre <a href="http://www.carlosble.com/2016/11/el-ingles-la-diversidad-y-la-comida-en-las-conferencias/?lang=es">el idioma en los eventos técnicos</a>.</p>

<h2>Charlas a las que asistí</h2>

<h3><a href="https://2016.codemotion.es/agenda.html#5732408326356992/90194003">Los androides no sueñan con ovejas eléctricas, sueñan con conciliar</a> de Susana Morcuende, Yamila Moreno y Jorge Arévalo</h3>

<p>Charla sobre conciliación. Como bien explicó Susana, todavía seguimos asociando
el término <em>conciliación</em> solamente con la familia (cuidar de hijos, abuelos,
enfermos,&#8230;). Los ingleses tienen un término mejor para esto: <em>work-life
balance</em>. Es decir, un término medio entre la vida en general (ocio, familia,
amigos,&#8230;) y el trabajo.</p>

<p>Susana habló de buscar la conciliación desde el minuto cero, desde el proceso
de selección. Y presentó la iniciativa <a href="http://yosoytumadre.es">Yo soy tu madre</a>, donde empresas muy a
favor de la conciliación tienen una especial cabida.</p>

<p>Después, Yamila y Jorge expusieron sus casos particulares. Yamila en Kaleidos,
y Jorge en Pronoide. Ambos contaron multitud de acciones llevadas a cabo en sus
empresas que les permiten conciliar.</p>

<blockquote><p>Si otras empresas lo están haciendo, es porque la conciliación es posible,
plantéalo en tu empresa</p></blockquote>

<h3><a href="https://2016.codemotion.es/agenda.html#5732408326356992/88334002">Teletrabajo en el mundo real</a> de Pablo Alba</h3>

<p>Pablo nos habló sobre teletrabajo y sus diferencias con el trabajo en remoto.
Contó que existen varios retos a superar: comunicación, coordinación,
felicidad, productividad y sentimiento de equipo.</p>

<p>Luego pasó a describir multitud de herramientas para hacer frente a esos retos.
Herramientas de videoconferencia, de conferencia de audio, chats, gestión del
código fuente, hardware,&#8230;</p>

<p>Un comentario que me sorprendió mucho fue el de tener el audio conectado
siempre, para que quien esté solo en casa pueda escuchar el ruido de la
oficina. No es que vaya a ser partícipe de todas las conversaciones, pero un
poco de compañía sí le hará.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5732408326356992/85544001">8 formas de mejorar tu vida gracias a los logs</a> de Joaquín Diez y Fran Rodríguez</h3>

<p>Joaquín nos habló de cómo deberían ser los logs mientras que Fran nos habló más
del lado de operaciones.</p>

<p>Los logs los deberíamos escribir para que los entendieran las máquinas, no los
humanos. Deberíamos definir claramente el formato de los mismos, y las
estructuras de datos que queremos loguear. También, que los logs deben estar
disponibles para todo el mundo. Todos deberían ser capaces de verlos, leerlos,
buscar en ellos,&#8230; Para ello es posible que tengamos que desarrollar
aplicaciones o usar algunas de terceros.</p>

<p>Los logs nos sirven para monitorizar, monitorizar el estado y la actividad de
nuestros sistemas. Estos logs deben estar centralizados. Cada vez más creamos y
destruimos máquinas con más facilidad, y los logs deben sobrevivir a las
máquinas.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5732408326356992/84654003">Intraemprendimiento para frikis</a> de Roberto Canales</h3>

<p>Aquí, Roberto nos contó en qué se ha equivocado Autentia en sus múltiples
intentos de pasar de ser una empresa de servicios a ser una empresa de
producto. No es que les vaya mal vendiendo servicios, pero lo que realmente
quieren hacer es hacer productos. Una empresa de servicios no escala, lo que
vendes es <em>horas hombre</em>, y Autentia no ha querido entrar en el juego del body
shopping.</p>

<p>Así pues, buena parte de los beneficios que tenían los han ido invirtiendo en
productos.</p>

<p>Primero, dedicando tiempos muertos de los empleados a desarrollar una
aplicación para uso interno. Pero el producto lo tocaban demasiadas manos, sin
un objetivo global concreto, y el producto se resiente.</p>

<p>En otras ocasiones, han invertido en otras empresas, para aprender de cómo lo
hacen otros. También han <em>dado</em> dinero a otras personas para que hagan realidad
sus ideas.</p>

<p>Si algo han aprendido es que te debes centrar en que tu producto lo use la
gente <strong>pronto</strong>.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5732408326356992/86444010">Aprender a distinguir el problema de la solución</a> de Carlos Blé</h3>

<p>Carlos comenzó fuerte:</p>

<blockquote><p>La forma de ir más rápido no es correr más, es evitar más desperdicio</p></blockquote>

<p>Cuando nos decantamos por una solución, estamos descartando otras.
Probablemente más sencillas, más baratas, más apropiadas. O peores, porqué no.</p>

<p>Antes de ponernos a implementar la solución, hay que comprender las necesidades
del cliente, hay que identificar correctamente el problema. Los clientes
normalmente vienen con soluciones, pero no <em>saben</em> lo que quieren. Entendiendo
bien su problema, podemos mostrarles varias soluciones donde ellos podrán
elegir la que mejor les convenga. Para conocer el problema, podemos ayudarnos
de todas estas técnicas de análisis:</p>

<!-- traspa sobre las diferentes técnicas de análisis -->


<blockquote><p>Para saber el valor de un producto, compáralo con una hoja de cálculo ~
<em>Carlos Blé</em></p></blockquote>

<p>Ésta fue una charla no técnica, de las <em>filosóficas</em>. Este tipo de charlas te
hacen pensar. Te hacen pensar en tu situación, en cómo trabajas, en si
realmente te gusta lo que haces y si estás haciendo lo correcto. Muy, muy
relacionada con los conceptos de Lean: posponer decisiones, evitar desperdicio,
conocer contexto del cliente,&#8230;</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5732408326356992/83544002">99 líneas que lo simplifican todo</a> de Daniel Molina</h3>

<p>Daniel estuvo contando las múltiples tecnologías que usan en su empresa. Un
testimonio bastante bueno. Nos introdujo en las mismas poco a poco, comenzando
por un modelo sencillo, y ampliándolo y complicándolo poco a poco.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5716304078045184/84664007">Lo que deberías saber sobre testing para irte de cañas con @pedro_g_s y no empezar con resaca</a> de Sergio Arroyo</h3>

<p>Charla muy técnica. Tocó innumerables conceptos relacionados con los tests.</p>

<p>En cuanto a tests unitarios, hay dos conceptos básicos: inyección de
dependencias y dobles de tests. También, además de las características
<a href="https://pragprog.com/magazines/2012-01/unit-tests-are-first">F.I.R.S.T.</a> de los mismos, añadió: <strong>I</strong>mmutable (no deben de dejar rastros) y
<strong>T</strong>rusted (los falsos positivos minan la confianza de los programadores en
los tests).</p>

<p>Me gustó mucho la parte donde comentó qué es lo que hace que un código NO sea
testeable:</p>

<p><img class="center" src="http://rchavarria.github.io/images/2016/non-testable-design-smells.png"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Slide #66 de <a href="http://www.slideshare.net/delr3ves/lo-que-deberas-saber-sobre-testing-para-irte-de-caas-con-pedrogs-y-no-empezar-con-resaca">#codemotion2016: Everything you should know about testing to go with @pedro_g_s, @flipper83 & @kinisoftware avoiding the hangover</a> de <a href="http://www.slideshare.net/delr3ves">Sergio Arroyo</a>, <a href="https://creativecommons.org/licenses/by/4.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by/4.0/">CC BY 4.0</a>
  </span>
</div>


<p>Y para terminar: ¿quién vigila al vigilante? ¿quién prueba que los tests son
correctos? Nadie. Y precisamente por esa razón debemos mantener los tests lo
más sencillos posible. Nada de <code>if</code>s, nada de bucles. Sencillos.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5716304078045184/84664009">Clean code</a> de Álvaro García</h3>

<p>El título de la charla no da para muchas sorpresas. Álvaro habló sobre el libro
de Robert C. Martin, Clean Code.</p>

<p>Durante toda la charla aparecieron multitud de conceptos. La charla fue un buen
recordatorio del contenido del libro. Habló de Craftsmanship, de la Regla del
Boy Scout, de la Teoría de las Ventans Rotas, de la importancia de nombrar
correctamente las clases, métodos y variables, de la longitud de los métodos,
de los comentarios (o la falta de ellos) en el código,&#8230;</p>

<p>Súper, súper interesante. Bueno, hubo un tema que me escamó un poco: se
recomienda no utilizar códigos de error para informar de que ha habido un fallo
en nuestro código, se recomienda usar excepciones. Últimamente me he inclinado
más hacia no usar excepciones para eso, no usarlas para controlar el flujo de
mis programas. Un tema bastante polémico éste de tratar las excepciones.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5716304078045184/84664008">Time to grow up</a> de Jorge Barroso</h3>

<p>En mi opinión la mejor charla del Codemotion. Jorge habló de cómo ve él el
mundo del desarrollo. Y tiene mucho que decir. Jorge es bastante conocido en el
mundo del software y su opinión es bastante respetable.</p>

<p>Habló de que debemos aprender oratoria, los speakers del tipo de conferencias
como el Codemotion tienen mucho <em>poder</em>, tienen mucha responsabilidad. Pero
también la tenemos quienes estamos escuchando. Debemos hacerlo de forma
crítica, y no creernos todo lo que nos cuentan los que están en el <em>púlpito</em>.</p>

<p>Debemos hacer las empresas más humanas, evitar que <em>hagan el mal</em>. Y no nos
debemos vender por un futbolín, o por la posibilidad de pasar más horas en la
oficina. Debemos conseguir que la empresa nos valore como personas.</p>

<p>Construimos software como en la edad media se construían catedrales:</p>

<blockquote><p>Ponían mucha gente a hacer una cúpula. Se caía. Conclusión que sacaban: &#8220;pues
así no era&#8221;</p></blockquote>

<p>No podremos resolver los retos del futuro como lo hacemos ahora, lanzando más y
más gente a los proyectos.</p>

<p>Jorge habló de que no está totalmente de acuerdo con el movimento Software
Craftsmanship (no hay que ser dogmático, si no pragmático, hay que conocer las
normas para saber cuándo hay que romperlas), tampoco lo está con el término
<em>Computer Science</em> (no usamos el método científico, no somos ingenieros). Se
identifica más con el mundo de la cocina, donde conocen la química, las
bases, los ingredientes. Pero ser cocinero es más que eso. Es comunidad. Es
comunicación con tus iguales.</p>

<p>Comentó la necesidad de tener un lenguaje común entre los desarrolladores. Nada
de diferenciarnos entre back y front, entre web y escritorio o móvil. ¿Qué
hacen tus compañeros? Pregunta. Y sobre todo, no te comportes como un idiota:
escucha, mejora a tus compañeros, aprende, enseña, no impongas tus opiniones,
pide feedback.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5716304078045184/88324007">Cómo gestionar el estado de tu UI: El camino hacia el Virtual DOM y RxJS</a> de Ricardo Borillo</h3>

<p>Ricardo comentó cómo podemos mejorar la gestión del estado de la interfaz
gráfica. En un principio, toda esa información estaba incrustada en la interfaz
gráfica, estaba almacenada en el DOM (si hablamos de aplicaciones web). Pero el
DOM es muy lento. Algunas librería aliviaban este acoplamiento, pero el Virtual
DOM ha venido para desacoplar todavía más del DOM real.</p>

<p>Prosiguió la charla comentando cómo tecnologías como React, Redux y RxJS
encajan perfectamente en la nueva visión acerca de cómo hay que gestionar el
estado de nuestra aplicación del lado cliente. Hay sólo una fuente de verdad,
por lo que hay un estado global. Y nos explicó cómo éste estado global es
gestionado, almacenado, modificado y notificado por contenedores, middlewares,
dispatchers,&#8230; en la arquitectura planteada por React y compañía.</p>

<p>Sinceramente, están pegando fuerte estas tecnologías y el mundo funcional
parece que está calando en el lado cliente. El de Ricardo es, como siempre, un
testimonio de cómo se pueden hacer las cosas mucho mejor en el mundo web.</p>

<h3><a href="https://2016.codemotion.es/agenda.html#5716304078045184/85554005">¿Con 40+ y programando? Sácale provecho a tu experiencia</a> de Daniel López</h3>

<p>Daniel nos cuenta su propia historia, ¿por qué sigue programando pasados los
40? Pues porque le gusta, se le da bien, y puede seguir aportando valor. Aporta
valor por que soluciona problemas, no los crea, y porque no se queda
simplemente con teclear. Debes aportar algo más, si no quieres ser
reemplazable.</p>

<p>Entre los múltiples consejos: encuentra un nicho (o varios) muy específico, un
tema donde no haya muchos expertos; no puedes escalar, así que no apuntes a
cantidad, si no a calidad; entiende y hazte entender; adaptabilidad, búscate
las habichelas; capacidad de análisis crítico.</p>

<blockquote><p>El buen programador no nace, se va haciendo con el tiempo, con el trabajo
duro y con el aprendizaje</p></blockquote>

<p>Y como muestra de sabiduría, unos consejos o mantras:</p>

<ul>
<li>Fuerza: para cambiar lo que se pueda cambiar</li>
<li>Paciencia: para aguantar lo que no se pueda</li>
<li>Sabiduría: para saber distiguir entre ellas</li>
</ul>


<h3><a href="https://2016.codemotion.es/agenda.html#5716304078045184/83544008">Data! Data! Data!</a> de David Bonilla</h3>

<p>La idea principal de la charla rondó las bases de datos. David nos hizo ver que
las bases de datos están en todas y cada una de nuestras aplicaciones. Unas son
más avanzadas que otras, y existen multitud de tipos de ellas. Cada una de
ellas con sus ventajas y sus inconvenientes, así que no debemos pensar que hay
una base de datos que nos pueda resolver todos nuestros problemas.</p>

<p>Aún así, aunque todos lidiamos con ellas todos los días, son unas grandes
desconocidas para nosotros. David nos animó a que aprendiéramos más sobre
ellas, que nos interesáramos más en ellas. Al fin y al cabo, es una de las
pocas tecnologías que están en prácticamente todas las aplicaciones.</p>

<h2>Conclusión</h2>

<p>En general, las charlas a las que asistí fueron de un gran nivel, y me
sorprendió que en casi todas ellas comenzaran exponiendo el tema principal de
la charla. Muy bien hecho. Es como si la organización se lo hubiera
recomendado.</p>

<p>Otro detalle, muchos de los ponentes publicaron las presentaciones antes o
durante la charla, lo que permitía a la gente seguir las trasparencias en el
móvil o portátil con conexión a internet, y de esta forma no dejarse los ojos
intentando ver la imagen del proyector. Una idea brillante.</p>

<p>En definitiva, es un evento que siempre me ha merecido la pena asistir. Es
barato, hay multitud de charlas donde elegir (quizá demasiadas), acude lo mejor
de la industria. Sólo podría pedir que se celebrara más de una vez al año y más
cerca de mi casa. Por pedir, que no quede.</p>

<p>Aún así, los dos días se me quedaron cortos para charlar con la gente. No puedo
con todo. O atiendo a charlas interesantes, o me quedo por los pasillos. Pero
no siempre que me quedo por los pasillos coincido con alguien conocido. Asi que
es un tema que me lleva de cabeza.</p>

<p><strong>Muchísimas gracias a los organizadores: Nacho, Abraham y Laura. Y gracias
también a los patrocinadores y voluntarios. Todos ellos hacen que Codemotion
sea posible.</strong></p>

<h2>Recursos</h2>

<p>Aparte de todas las presentaciones a las que asistí, he escaneado <a href="https://github.com/rchavarria/rchavarria.github.com/tree/master/images/2016/codemotion">las notas que tomé</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Global Day of Code Retreat 2016]]></title>
    <link href="http://rchavarria.github.io/blog/2016/10/27/global-day-of-code-retreat-2016/"/>
    <updated>2016-10-27T21:46:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/10/27/global-day-of-code-retreat-2016</id>
    <content type="html"><![CDATA[<p>Siento que el título esté inglés, no he encontrado una traducción que suene bien
en español: ¿<em>Día global del retiro del código</em>? Uff, no lo veo.</p>

<p>A lo que vamos, el pasado día (<em>day</em>) sábado 22 se celebró a nivel mundial (<em>global</em>)
un evento en el que programadores se reúnen (<em>retreat</em>) para&#8230; programar (<em>code</em>).</p>

<p>Sí, como lo oyes. Hay gente a la que le chirría que unas personas que se dedican
profesionalmente a programar se reúnan con compañeros de profesión para seguir
programando un día no laborable. Pero es que este evento no tiene nada que ver con
lo laboral, aunque sí con la profesión. Una definición tirando a formal sería:</p>

<blockquote><p>Un «code retreat» es un evento de un día, de intensa práctica, enfocado en los
fundamentos del diseño y desarrollo de software. El formato ha demostrado ser
un medio efectivo de mejora de habilidades dado que proporciona a los
desarrolladores la oportunidad de tomar parte en prácticas focalizadas,
dejando de lado las presiones de tener un que terminar un trabajo.</p></blockquote>

<p><em>(traducción libre de la definición sacada de <a href="http://coderetreat.org/about">Code retreat</a>)</em></p>

<p><img class="center" src="http://rchavarria.github.io/images/2016/gdcr16.jpg"></p>

<div style="text-align: center; margin: -20px 0 0 0">
  <span style="font-size: 60%">
  Foto: «Global Day of Code Retreat 2016», por <a href="https://twitter.com/eferro">Eduardo Ferro</a>
  </span>
</div>




<!-- more -->


<p>Más concretamente, en el Global Day of Code Retreat, se trata de resolver el
problema del <a href="https://es.wikipedia.org/wiki/Juego_de_la_vida">Juego de la vida de Conway</a>. La definición habla de práctica
intensa y focalizada, de fundamentos de diseño y desarrollo. Para potenciar
esta práctica, el día está dividido en <em>iteraciones</em> de duración relativamente
corta. Y en cada iteración, el facilitador propone una serie de restricciones.
Así fué nuestro <a href="https://github.com/SoftwareCraftsmanshipMadrid/global-day-of-coderetreat-2016/blob/master/presentation/theday.md">día</a>.</p>

<h1>Restricciones</h1>

<p>Nuestro día consistió de seis iteraciones, y cada una de ellas contó con las
siguientes restricciones:</p>

<ol>
<li><p><strong>Ping-pong</strong>: en estos eventos siempre se programa en parejas y haciendo TDD.
Programar en modo ping-pong significa que una persona escribe el primer test
y la otra escribe la mínima implementación para pasar el test y vuelve a
escribir el siguiente test. La primera persona hace pasar el test y vuelve a
escribir uno nuevo. Ping. Pong.</p></li>
<li><p><strong>Nada de primitivas</strong>: esta comienza a ser divertida, está prohibido el uso de
primitivas. ¿Que necesitas pasar un entero para indicar una posición en un
array? No, no. ¿Que quieres usar <code>true</code> como flag para controlar el flujo?
Nanai. Esta restricción te obliga a crear abstracciones, a nombrar todas esas
primitivas que pueden significar cualquier cosa. Esta restricción es una de mis
favoritas.</p></li>
<li><p><strong>No se puede usar el ratón</strong>, y se limitan las <em>discusiones</em> a 3 minutos: menos
mal que esta la realizé con herramientas que uso en mi día a día (porque
esto no te lo explica nadie, quizá te toque de pareja a alguien que no programa
en tu amado lenguaje, o ni siquiera en tu mismo entorno, divertido ¿verdad?) y
me gusta usar atajos de teclado. Si no, lo hubiera pasado mal. Como curiosidad,
existe el plugin <a href="https://github.com/athiele/key-promoter-fork">Key promoter</a> para los IDEs de JetBrains que te interrumpe
cada vez que usas el ratón.</p></li>
<li><p><strong>Prohibidos las sentencias condicionales</strong>: esta restricción siempre me marca
mucho. Está prohibido utilizar <code>if</code>s, <code>switch</code>es, operadores ternarios,&#8230;
«Muy fácil, utiliza polimorfismo» diría uno. «Eso lo solucionas con un mapa»,
pero no es tan fácil, lo siento. La primera vez me parecía imposible de
conseguir. Desde entonces, continuamente veo oportunidades para aplicar lo que
aprendo cada vez que juego con esta restricción.</p></li>
<li><p><strong>No se puede hablar</strong>: una de las más complicadas, sobre todo si tienes de
pareja a alguien a quien has conocido este día, lo cual suele ser bastante
habitual. El objetivo de esta restricción es hacer nuestro código lo más
expresivo posible, de forma que no tengamos que explicar nuestras intenciones.
También consigue que te pongas a escribir código desde el minuto cero y te
dejes de discusiones.</p></li>
<li><p><strong>Intercambio de código</strong>: se trata de intercambiar, no sólo el código, si no el
ordenador al completo con otra pareja. Por lo cual puedes encontrarte
cualquier cosa: un fichero en blanco, ningún test, la solución muy bien
encaminada, un código sobredimensionado,&#8230; Me pareció muy divertida, y una
forma muy dinámica de hacer la última iteración, donde las fuerzas ya flaquean.
Me pareció muy interesante, porque nada más cambiar de código (entorno,
ordenador, lenguaje,&#8230;) te encuentras como perdido. Pero luego empiezas a
darte cuenta de que los tests son muy parecidos a los que llevas en la cabeza.
Empiezas a hacer conexiones, a reconocer objetos, relaciones. Y ¡BUM! En cinco
minutos ya estás en marcha otra vez. Cuando cambié de código me encontré con
que debía programar en C++, que no veía desde la universidad (qué miedo,
incluir ficheros <code>.h</code> y manejar punteros), con un IDE que no conocía para nada,
y encima ¿escribir test automáticos?. Pues sí, lo conseguimos mis compañeros de
iteración y yo. Muy, muy revelador.</p></li>
</ol>


<h1>Personas y agradecimientos</h1>

<p>Y porque el software no es sólo unos y ceros, si no también personas&#8230; No sólo
es el qué, si no a quién me he <em>llevado</em> de allí:</p>

<ul>
<li><a href="https://twitter.com/juandvegarguez">Juan D. Vega</a>, facilitador del evento. Muchas gracias por guiarnos, por las
restricciones y por conectarnos con otros grupos que también celebraban el
code retreat.</li>
<li><a href="https://twitter.com/luisrovirosa">Luis Rovirosa</a>, co-facilitador, co-organizador. Generando intensas y sanas
discusiones con sus incisivas preguntas.</li>
<li><a href="https://twitter.com/eferro">Eduardo Ferro</a>, me alegró poder conocerle en persona, soy seguidor de su
<a href="http://www.eferro.net/">blog</a> desde hace un tiempecillo.</li>
<li><a href="https://twitter.com/dmj200">Álvaro Fidalgo</a>, no sabía nada de él, pero me pareció un gran profesional.</li>
<li><a href="https://twitter.com/helderdoliveira">Helder de Oliveira</a>, otra persona a la que quería conocer en persona, y no
me equivocaba.</li>
<li><a href="https://twitter.com/ludobermejo">Ludo Bermejo</a>, estuvo muy interesante la discusión que partío de él sobre
optimizaciones en el código, y nos recordó que no en todos los contextos la
memoria y la CPU son <em>gratis</em>.</li>
<li><a href="https://twitter.com/gelsanz">Ángel Sanz</a>, no pude programar con él, pero hablamos un rato en las
cervezas, y me cayó muy muy bien.</li>
<li><a href="https://es.linkedin.com/in/garciajavier">Javier García</a>, con quien tampoco pude programar, pero charlamos durante las
cervezas.</li>
</ul>


<p>Y por supuesto, agradecer a <a href="http://idealista.com">idealista.com</a> por el espacio y la comida.</p>

<h1>Recursos</h1>

<ul>
<li><a href="https://github.com/athiele/key-promoter-fork">Key promoter</a>. El enlace es un fork de un plugin que parece descontinuado:
<a href="https://plugins.jetbrains.com/plugin/4455">Key promoter plugin</a>.</li>
<li>Github de <a href="https://github.com/SoftwareCraftsmanshipMadrid/global-day-of-coderetreat-2016">Software Craftmanship Madrid</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zen y el arte en el mantenimiento de motocicletas]]></title>
    <link href="http://rchavarria.github.io/blog/2016/09/18/zen-arte-mantenimiento-motocicletas/"/>
    <updated>2016-09-18T16:56:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/09/18/zen-arte-mantenimiento-motocicletas</id>
    <content type="html"><![CDATA[<h6>de Robert M. Pirsig</h6>

<p><img class="left" src="https://raw.githubusercontent.com/rchavarria/blog-post-incubator/master/published-book-notes/img/zen.jpg"></p>

<h3>Por qué lo he leído</h3>

<p>El título no es que sea muy llamativo, parece más un libro sobre filosofía (con
un subtítulo un poco extraño eso sí). Pero estaba recomendado por Mattias
(<a href="https://twitter.com/mpjme">@mpjme</a>) en el capítulo 18 de
<a href="https://www.youtube.com/watch?v=lrf6xuFq1Ms&amp;t=90">FunFunFunction</a>, su <em>canal</em>
de YouTube, y no era la primera vez que oía hablar de
<a href="https://www.amazon.es/Arte-Mantenimiento-Motocicleta-Narrativa-Sexto/dp/8415601956/">Zen y el arte en el mantenimiento de motocicletas</a>.</p>

<p>Así que&#8230; si recibes varias referencias de un libro por distintas personas y
en distintas ocasiones, es que puede ser un libro interesante.</p>

<!-- more -->


<h3>De qué trata el libro</h3>

<p>Me esperaba una historia, una novela, que sirviera de hilo conductor para que
el autor fuera exponiendo una serie de consejos sobre la vida en general y
sobre cómo mantener las cosas materiales en esta vida, ya fueran motocicletas,
ordenadores,&#8230; cualquier cosa. De echo, las personas que hablaban del libro
decían que varias ideas eran bastante trasladables al área del desarrollo del
software.</p>

<p>Y sí, en parte el libro va de eso. Cuenta una historia, un viaje de un padre y
su hijo, en busca de algo, o alguien. Y durante el viaje, el autor cuenta
multitud de historias de <em>abuelo cebolleta</em>.</p>

<h3>Conclusiones y valoración</h3>

<p>El libro está lleno de historias interesantes, e incluso divertidas. Hay
multitud de consejos sobre la vida, y en general estoy muy de acuerdo con
ellos. Me gusta cuidar las cosas, me gusta disfrutar de ellas. Cojo cariño a
mis máquinas, me acostumbro a ellas, tiendo a aceptarlas como son, con sus
deficiencias. Me siento muy identificado con muchos aspectos de los que habla
el protagonista.</p>

<p>Pero el libro no ha calado en mi. ¿El inglés? ¿Muchas historias? ¿La filosofía
detrás de ellas? No sé, pero no he podido terminarlo.</p>

<p>Podría recomendar el libro a gente joven, que tiene toda una vida por delante,
para que aprendiera a disfrutar de las cosas sencillas de la vida. Podría
recomendárselo a gente no tan joven, para que aprendiera lo mismo (nunca es
tarde). Pero tendría que advertirles que tiene un componente muy filosófico, y
que al menos a mí, creo que es lo que me ha hechado hacia atrás a la hora de
terminarlo. No diría que el libro es malo, simplemente que no ha suscitado el
interés suficiente en mí.</p>

<h3>Frases que me gustaría recordar</h3>

<blockquote><p>Diferencias entre <em>pensamiento clásico</em> (o científico, basado en hechos, con el
que me siento más identificado) y el <em>pensamiento romático</em> (más idílico, más
centrado en la belleza, más artístico)</p></blockquote>

<!-- -->


<blockquote><p>Cada motocicleta (o máquina) tiene su personalidad propia y única. Según vas
manteniendo las cosas, vas cogiéndoles cariño, las vas haciendo tuyas según va
pasando el tiempo, las vas conociendo.</p></blockquote>

<p>Varios pasos a la hora de hacer un análisis lógico:</p>

<ol>
<li>Describir el problema</li>
<li>Describir diferentes hipótesis que describan el problema</li>
<li>Crear experimentos para testear cada una de las hipótesis</li>
<li>Predecir los resultados de los experimentos</li>
<li>Anotar los resultados obtenidos de los experimentos</li>
<li>Realizar conclusiones a partir de los resultados de los experimentos</li>
</ol>


<h3>Recursos relacionados</h3>

<ul>
<li>Mis <a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/zen-and-the-art-of-motorcycle-maintenance-by-robert-m-pirsig.markdown">notas sobre Zen y el arte en el mantenimiento de motocicletas</a></li>
<li>El libro <a href="https://www.amazon.es/Arte-Mantenimiento-Motocicleta-Narrativa-Sexto/dp/8415601956/">Zen y el arte en el mantenimiento de motocicletas</a> en Amazon</li>
<li><a href="https://twitter.com/mpjme">Mattias P. Johansson</a> en twitter</li>
<li><a href="https://www.youtube.com/channel/UCO1cgjhGzsSYb1rsB4bFe4Q">Canal de YouTube FunFunFunction</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: séptimo asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2016/09/18/elixir-septimo-asalto/"/>
    <updated>2016-09-18T16:20:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/09/18/elixir-septimo-asalto</id>
    <content type="html"><![CDATA[<p>El aprendizaje va avanzando, ya vamos por el séptimo asalto. Éste trata sobre
cómo <a href="http://elixir-lang.org/">Elixir</a> maneja múltiples procesos, por lo que trataremos algún tema de
concurrencia. También veremos algunas cosas básicas sobre cómo monitorizar los
procesos de los que consta nuestra aplicación.</p>

<p>Sin olvidar del método de aprendizaje con el que <a href="http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir/">comenzé</a>:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="right" src="http://rchavarria.github.io/images/2016/you-gotta-fight-for-your-right-to-eat.jpg"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/4rvPED">You gotta fight for your right to&#8230; eat</a> de <a href="https://www.flickr.com/photos/r2wk/">ldjpg</a>, <a href="https://creativecommons.org/licenses/by-nc-nd/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by-nc-nd/2.0/">CC BY NC ND 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<p><strong>Trabajando con múltiples procesos</strong></p>

<p>Elixir usa el <a href="https://en.wikipedia.org/wiki/Actor_model">modelo de actores</a> para gestionar la concurrencia.</p>

<p>Elixir se apoya en Erlang para gestionar los procesos, que no son los procesos
del sistema operativo.</p>

<p>Para crear un proceso, se hace con la llamada <code>spawn</code>. <code>spawn</code> puede crear un
proceso y ejecutar en él código que tengas en un módulo cualquiera. El proceso
puede empezar en cualquier momento (asíncrono total) y se utilizan mensajes
entre procesos para sincronizarlos.</p>

<p>Los mensajes no tienen por qué ser <code>Strings</code>, pueden ser de cualquier tipo
(generalmente tuplas o atoms). Los mensajes se mandan con <code>send</code>, y debes usar
un <code>PID</code> (devuelto por <code>spawn</code>).</p>

<p>El receptor, espera mensajes con <code>receive</code>. <code>receive</code> funciona como <code>case</code>: se
pueden poner varios casos, y el primero que coincida, se ejecuta.</p>

<p><code>receive</code> maneja sólo un mensaje. Si queremos recibir varios, debemos volver a
llamar al método que contiene el <code>receive</code>, de forma recursiva (y Elixir es muy
bueno con la recursividad). <code>receive</code> también acepta un parámetro, <code>after</code>,
para definir un timeout.</p>

<p>El autor dice que los procesos en Elixir son como los objetos en lenguajes
orientados a objectos, pero con mejor sentido del humor. El hecho es que son
muy livianos, y pueden mantener estado, así que podemos pensar en ellos como en
objetos de la programación orientada a objetos.</p>

<p><strong>Enlazar procesos</strong></p>

<p>Normalmente, un proceso no sabe cuando muere un proceso hijo. Debemos hacer
algo manualmente para que se notifique. Podemos crear procesos <em>enlazados</em>
(linked) con <code>spawn_link</code>. Por defecto, si un proceso hijo muere, mata al
proceso padre. Para controlar esto y poder escuchar el mensaje que lanza el
proceso hijo al morir, debemos <em>atrapar la salida</em> mediante
<code>Process.flag(:trap_exit, true)</code> justo antes de hacer <code>spawn_link</code>.</p>

<p>Dos procesos enlazados pueden comunicarse bidireccionalmente.</p>

<p>Elixir usa el framework OTP para construir árboles de procesos. OTP lleva mucho
tiempo en funcionamiento, y debemos confiar en que lo hace mucho mejor que
nosotros, por lo que lo usaremos prácticamente siempre. OTP incluye el concepto
de <em>Supervisor de procesos</em>. Más adelante estudiaremos temas relacionados con
OTP.</p>

<p><strong>Monitorizando procesos</strong></p>

<p>Si <code>spawn_link</code> permite comunicación bidireccional, <code>spawn_monitor</code> solo la
permite unidireccional. El proceso hijo puede notificar al padre, pero no al
revés.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># monitor devuelve el pid del proceso hijo y una referencia de la monitorización
</span><span class='line'>res = spawn_monitor(&lt;module&gt;, &lt;function&gt;, &lt;params&gt;)
</span><span class='line'>IO.inspect res
</span><span class='line'># =&gt; { #PID{3.3.3.3}, #Reference{1.2.3.4} }</span></code></pre></td></tr></table></div></figure>


<p>También se puede monitorizar un proceso existente con <code>Process.monitor</code>.</p>

<p>¿Cuándo utilizar cada uno? Depende de la utilidad. Si la muerte de un hijo
debería matar al padre, usa procesos enlazados. Si la muerte/fallo de un hijo
solamente debería notificar al padre, usa monitorización.</p>

<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-07/exercise-01-round-07.exs">exercise-01-round-07.exs</a>: ejecutar el programa que pasa mensajes en cadena
de un proceso a otro hasta llegar al millón de procesos.</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-07/exercise-02-round-07.exs">exercise-02-round-07.exs</a>: escribir un código que cree dos procesos, y que a
cada uno le mande un token (p.e.: &#8220;pepito&#8221; y &#8220;fulanito&#8221;), y que los procesos
lo devuelvan. En teoría, ¿es determinista el orden en el que se reciben las
respuestas? ¿Y en la práctica? En caso de que no, ¿cómo podría hacerse que
fuera determinista?.</li>
</ul>


<p><strong>Resultados</strong></p>

<p>Parece que sí es determinista (al menos con dos procesos). Depende del orden en
el que se creen los procesos, incluso si invertimos el orden en el que se
envían los tokens, el primer proceso creado es el primero en responder.</p>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-07/exercise-03-round-07.exs">exercise-03-round-07.exs</a>: usa <code>spawn_link</code> para crear un proceso, el cual
envía un mensaje al padre y finaliza inmediatamente. Mientras, en el padre,
después de crear el proceso, espera 500ms y luego comienza a recibir todos los
mensajes que están esperando. Tracea todo lo que recibas. ¿Importa que no
estuvieras recibiendo notificaciones cuando el hijo terminó?</li>
</ul>


<p><strong>Resultados</strong></p>

<p>No recibe ningún mensaje, el hijo termina, terminando al padre durante la
espera.</p>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-07/exercise-04-round-07.exs">exercise-04-round-07.exs</a>: repite el ejercicio anterior, pero en lugar de
terminar con <code>exit</code>, que el hijo lance una excepción. ¿qué diferencia notas?</li>
</ul>


<p><strong>Resultados</strong></p>

<p>No hay mucha difrencia. El padre sigue terminando, sin escuchar ningún mensaje.
Al menos, la excepción aparece por consola, mostrándose un error diciendo que
el proceso hijo (con su PID) ha lanzado una excepción. En el ejercicio
anterior, solamente aparecía que el proceso padre terminaba, nada más.</p>

<p>Usando <code>Process.flag(:trap_exit, true)</code>, el proceso padre recibe mensajes:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ elixir -r exercise-03-round-07.exs -e "Exercise3.run"
</span><span class='line'>Parent's PID #PID&lt;0.48.0&gt;
</span><span class='line'>PID's child #PID&lt;0.53.0&gt;
</span><span class='line'>Received: "Hello!"
</span><span class='line'>Received: {:EXIT, #PID&lt;0.53.0&gt;, :boom}
</span><span class='line'>
</span><span class='line'>$ elixir -r exercise-04-round-07.exs -e "Exercise4.run"
</span><span class='line'>Parent's PID #PID&lt;0.48.0&gt;
</span><span class='line'>Child's PID #PID&lt;0.53.0&gt;
</span><span class='line'>
</span><span class='line'>22:46:14.313 [error] Process #PID&lt;0.53.0&gt; raised an exception
</span><span class='line'>** (RuntimeError) Child finished
</span><span class='line'>    exercise-04-round-07.exs:19: Exercise4.child/1
</span><span class='line'>Received: "Hello!"
</span><span class='line'>Received: {:EXIT, #PID&lt;0.53.0&gt;, %{RuntimeError{message: "Child finished"},
</span><span class='line'>[{Exercise4, :child, 1, [file: 'exercise-04-round-07.exs', line: 19]}]}}</span></code></pre></td></tr></table></div></figure>


<p>Las diferencias están en lo recibido en el mensaje de terminación del hijo. En
caso de <code>exit</code> se recibe <code>:EXIT</code>, un PID, y la causa de la salida. En el caso
de la excepción: <code>:EXIT</code>, un PID y la excepción, parece, porque tiene pinta de
pila de llamadas, con su módulo, función, parámetros,&#8230;</p>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-07/exercise-05-round-07.exs">exercise-05-round-07.exs</a>: repetir el ejercicio pero con <code>spawn_monitor</code>.</li>
</ul>


<p><strong>Resultados</strong></p>

<p>No creo que lo esté haciendo bien. Se supone que monitorizando la comunicación
no es bidireccional, pero el padre recibe el mensaje que envía el hijo, así
como el mensaje que se envía al terminar o lanzar la excepción. La única
diferencia visible es que en lugar de recibir solamente un PID, se recibe un
PID y la referencia de monitorización.</p>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-07/exercise-06-round-07.exs">exercise-06-round-07.exs</a>: escribir una función implementando <em>pararell
map</em>, que es como una función <code>map</code> pero cada elemento es procesado por un
proceso distinto. Preguntas: ¿por qué es necesario guardar en la variable <code>me</code>
el PID del proceso padre? Se debe utilizar <code>^pid</code> para recibir los resultados
en orden, pero&#8230; ¿qué pasa si se utiliza <code>_pid</code>? ¿cómo hacer para que falle:
esperas, aumentar número elementos, que la función que procesa cada elemento
sea más complicada,&#8230;?</li>
</ul>


<p><strong>Resultados</strong></p>

<p>Aumentando el número de elementos afecta al orden en el que se reciben los
mensajes. También he conseguido recibir mensajes en orden distinto con el
siguiente código:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Parallel.pmap 1..10, fn (i) -&gt;
</span><span class='line'>  # la espera es más corta según el elemento `i` se va a haciendo mayor
</span><span class='line'>  wait_up_to = round(10 / i)
</span><span class='line'>  :timer.sleep(wait_up_to)
</span><span class='line'>  i
</span><span class='line'>end
</span><span class='line'>  #=&gt; [ 7, 8, 9, 10, 5, 6, 3, 4, 2, 1 ]</span></code></pre></td></tr></table></div></figure>


<p>Volviendo a poner <code>^pid</code> el orden vuelve a ser correcto.</p>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-07/exercise-07-round-07.exs">exercise-07-round-07.exs</a>: toma como referencia un planificador (servidor de
Fibonacci) de un ejercicio del libro y crea otro similar. Esta vez, se deben
contar las apariciones de la palabra <code>cat</code> en cada fichero que se encuentre en
un directorio dado. Cada fichero será procesado por un proceso distinto.
¿Podrías escribir el planificador de una forma más genérica?</li>
</ul>


<h2>Enseñar lo aprendido, y repetir desde el paso 7</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta
el siguiente asalto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: sexto asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2016/09/14/elixir-sexto-asalto/"/>
    <updated>2016-09-14T21:32:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/09/14/elixir-sexto-asalto</id>
    <content type="html"><![CDATA[<p>Sexto asalto. En esta ocasión no veremos nada del lenguaje, si no del
ecosistema de <a href="http://elixir-lang.org/">Elixir</a>. Elixir viene acompañado de unas magníficas herramientas
que complementan en lenguaje de programación en sí: <code>mix</code>, la herramienta de
construcción de aplicaciones y herramientas de testing como <code>ExUnit</code> y
<code>DocTests</code>. Además de estas herramientas, exploraremos también los sitios web
donde los desarrolladores alojan la mayoría de las librerías y proyectos Elixir
disponibles.</p>

<p>Sigo con la metodología de aprendizaje explicada en el <a href="http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir/">primer post sobre Elixir</a>:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="right" src="http://rchavarria.github.io/images/2016/more-gladiators.png"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/6xvcMz">More gladiators</a> de <a href="https://www.flickr.com/photos/archeon/">Hans Splinter</a>, <a href="https://creativecommons.org/licenses/by-nd/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by/2.0/">CC BY 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<p>Elixir viene con la herramienta <code>mix</code>, la herramienta oficial de construcción
de proyectos (creación, testeo, construcción, gestión de dependencias,&#8230;). En
este asalto crearemos una aplicación que nos permitirá listar los últimos <code>n</code>
<em>issues</em> de cualquier proyecto de <a href="https://github.com">GitHub</a>.</p>

<p><code>mix help</code> lista los comandos disponibles. Los más interesantes podrían ser:
<code>mix run</code> para ejecutar el proyecto, <code>mix test</code> para ejecutar los tests o <code>mix
new</code> para crear uno nuevo.</p>

<p>Crearemos un nuevo proyecto, llamado <code>rct_issues</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mix new rct_issues</span></code></pre></td></tr></table></div></figure>


<p>Listando los ficheros y directorios que ha creado el comando, encontramos los
siguientes:</p>

<ul>
<li><code>/README.md</code>: aquí podemos poner la descripción del proyecto.</li>
<li><code>/config/</code>: donde vivirá la configuración del proyecto</li>
<li><code>/lib/</code>: aquí irá el código fuente de nuestro proyecto</li>
<li><code>/test/</code>: aquí irá el código de tests</li>
<li><code>mix.exs</code>: opciones de configuración del proyecto en sí</li>
</ul>


<p><strong>Transformación: parsear la línea de comandos</strong></p>

<p>La aplicación de ejemplo tomará los parámetros de la línea de comandos. Las
aplicaciones Elixir consisten en una serie de transformaciones, y la primera de
ellas será la de parsear la línea de comandos.</p>

<p>En Elixir existen una serie de convenciones:</p>

<ul>
<li>El código que gestiona la línea de comandos va en un módulo llamado
<code>&lt;proyecto&gt;.CLI</code>, así que nuestro código iría en un módulo llamado
<code>RctIssues.CLI</code></li>
<li>Cada módulo va en un fichero distinto</li>
<li>Cada módulo va dentro del espacio de nombres del proyecto, por lo que todos
los módulos colgarán de <code>RctIssues</code></li>
<li>Los <em>espacios de nombres</em> corresponden con directorios en el árbol del
proyecto. Así, el módulo <code>RctIssues.CLI</code> se escribiría en el directorio
<code>/lib/rct_issues/cli.ex</code>. Ver fichero de código fuente <a href="https://github.com/rchavarria/learning-elixir/blob/master/projects/rct_issues/lib/rct_issues/cli.ex">cli.ex</a></li>
</ul>


<p><strong>Los primeros tests</strong></p>

<p>Elixir viene con un pequeño framework de testing llamado <code>ExUnit</code>.</p>

<p>En el fichero <code>/test/cli_test.exs</code> escribiremos los tests para el módulo que
acabamos de escribir (echar un vistazo al fichero <a href="https://github.com/rchavarria/learning-elixir/blob/master/projects/rct_issues/test/cli_test.exs">cli_test.exs</a>)</p>

<p><strong>Transformación: obtener datos de GitHub</strong></p>

<p>La siguiente transformación sería obtener datos de GitHub. Para ello
necesitaremos alguna librería externa. Hay varios lugares donde buscar:</p>

<ol>
<li>Librerías propias de Eixir, en <a href="http://elixir-lang.org/docs">http://elixir-lang.org/docs</a></li>
<li>Librerías propias de Erlang (también distribuidas con Elixir), en
<a href="http://erlang.org/docs">http://erlang.org/docs</a></li>
<li>Si todo esto falla, podemos buscar en el repositorio de <a href="http://hex.pm">Hex</a>,
el gestor de dependencias de Elixir</li>
<li>Si aún así, todo falla, siempre nos quedará Google y GitHub</li>
</ol>


<p>El autor recomienda usar <code>HTTPoison</code> como librería. Esta librería se encuentra
en <code>Hex</code>, con lo que es muy fácil incluirla en nuestro proyecto. Simplemente
hay que modificar el método <code>deps</code> dentro del fichero <code>/mix.exs</code>, indicando el
nombre y la versión de la librería que queremos usar:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defp deps do
</span><span class='line'>  [
</span><span class='line'>    { :httpoison, "~&gt; 0.4" }
</span><span class='line'>  }
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Con el comando <code>mix deps</code> podremos saber el estado de las dependencias del
proyecto. Con <code>mix deps.get</code> podremos descargar las dependencias que no estén
instaladas localmente. En caso de estar instaladas, lo estarán en el directorio
<code>/deps</code>, como proyectos Elixir, con lo que podremos navegar a través de ellas.</p>

<p>Ahora ya podemos usarla. Lo haremos en un nuevo módulo, escrito en
<a href="https://github.com/rchavarria/learning-elixir/blob/master/projects/rct_issues/lib/rct_issues/github_issues.ex"><code>/lib/rct_issues/github_issues.ex</code></a>. También modificaremos el método
<code>applications</code> de <code>mix.exs</code> para indicar que la dependencia <code>HTTPoison</code> va a
ser ejecutada como una <em>subaplicación</em> dentro de nuestro proyecto (hablará más
adelante sobre ello en el libro).</p>

<p><strong>Transformación: parsear la respuesta JSON</strong></p>

<p>Para la siguiente transformación incluiremos una dependencia que proviene del
mundo Erlang. <code>mix</code> es capaz de incluir dependencias de muy diversas fuentes,
Erlan entre ellas. Se añade la librería <code>jsx</code>, como dependencia del proyecto.
Añadir la línea <code>{ :jsx, "~&gt; 2.0" }</code> al fichero <code>mix.exs</code> y ejecutar el comando
<code>mix deps.get</code> para instalarla localmente.</p>

<p>Modificaremos nuestro módulo que debe parsear la respuesta,
<code>lib/rct_issues/github_issues.ex</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def handle_response(%{status_code: 200, body: body}) do
</span><span class='line'>  { :ok, :jsx.decode(body) }
</span><span class='line'>end          
</span><span class='line'>
</span><span class='line'>def handle_response(%{status_code:   _, body: body}) do
</span><span class='line'>  { :error, :jsx.decode(body) }
</span><span class='line'>end          </span></code></pre></td></tr></table></div></figure>


<p><strong>Configuración de la aplicación</strong></p>

<p>Cuando creamos el proyecto con <code>mix</code>, éste crea un directorio de configuración,
<code>config/</code>, con el fichero <code>config.exs</code>, donde podremos escribir ciertas
configuraciones de nuestro proyecto.
Cada línea de configuración suele ser un registro de clave valor, por ejemplo, para nuestro proyecto añadiríamos:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>use Mix.Config
</span><span class='line'>config :rct_issues, github_url: "https://api.github.com"</span></code></pre></td></tr></table></div></figure>


<p>Más adelante, podremos usar este valor configurado gracias al módulo
<code>Application</code>, así</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># crea una variable de clase llamada github_url
</span><span class='line'>@github_url Application.get_env(:rct_issues, :github_url)</span></code></pre></td></tr></table></div></figure>


<p><strong>Construir un ejecutable</strong></p>

<p>Para ello es necesario modificar el fichero <code>mix.exs</code>, para configurar la
herramienta <code>escript</code> y poder indicarle el módulo principal de la aplicación
que se va a construir, el cual debe de tener un método llamado <code>main</code>.</p>

<p>Para construir, simplemente ejecutar el comando:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mix escript.build</span></code></pre></td></tr></table></div></figure>


<p>Y tendremos un ejecutable que podremos ejecutar como cualquier otra aplicación
de consola de Unix/Linux</p>

<p><strong>Ejecutando los comentarios</strong></p>

<p>¿Cómo? ¿Ejecutar los comentarios? No te preocupes, Elixir puede ejecutar
ciertos comentarios como si fueran tests. En realidad, ejecuta comentarios
escritos en cierta forma como si fueran sesiones de la herramienta <code>iex</code>. Esto
sí que es documentación ejecutable. Simplemente, espectacular.</p>

<p>Un comentario del tipo:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@doc """   
</span><span class='line'>Given a list of rows, where each row contains a keyed list
</span><span class='line'>of columns, return a list containing lists of the data in
</span><span class='line'>each column. The `headers` parameter contains the
</span><span class='line'>list of columns to extract
</span><span class='line'>
</span><span class='line'>## Example 
</span><span class='line'>
</span><span class='line'>    iex&gt; list = [Enum.into([{"a", "1"},{"b", "2"},{"c", "3"}], HashDict.new),
</span><span class='line'>    ...&gt;         Enum.into([{"a", "4"},{"b", "5"},{"c", "6"}], HashDict.new)]
</span><span class='line'>
</span><span class='line'>    iex&gt; Issues.TableFormatter.split_into_columns(list, [ "a", "b", "c" ])
</span><span class='line'>    [ ["1", "4"], ["2", "5"], ["3", "6"] ]
</span><span class='line'>"""        
</span><span class='line'>def split_into_columns(rows, headers) do
</span><span class='line'># ...</span></code></pre></td></tr></table></div></figure>


<p>Creamos un nuevo fichero de tests en <code>test/doc_test.exs</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defmodule DocTest do
</span><span class='line'>  use ExUnit.Case
</span><span class='line'>  doctest Issues.TableFormatter
</span><span class='line'>end  </span></code></pre></td></tr></table></div></figure>


<p>Donde <code>Issues.TableFormatter</code> es el módulo donde hemos incluido el comentario
<em>ejecutable</em>. Podemos lanzar los comentarios testeables con los comandos <code>mix
test test/doc_test.exs</code> o simplemente <code>mix test</code>.</p>

<p>Para crear la documentación del proyecto, está la herramienta ExDoc, similar a
JavaDoc. Para ello hay que añadirlo como dependencia del proyecto en el fichero
<code>mix.exs</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defp deps do
</span><span class='line'>[
</span><span class='line'># ...
</span><span class='line'>  { :ex_doc, github: "elixir-lang/ex_doc" },
</span><span class='line'># ...
</span><span class='line'>]
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Para generarlos, instalar la dependencia con <code>mix deps.get</code>, y generar la
documentación con <code>mix docs</code>.</p>

<h2>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</h2>

<ul>
<li>Necesitarás consular documentación sobre <code>OptionParser</code> para ser capaz de
hacer el primer ejercicio&#8230; No solamente eso, si no que he escrito unos
tests para aprender cómo funciona <a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-05/exercise-01-round-06.exs">tests de exercise-01-round-06</a></li>
<li>¿Como se hace para formatear una cadena siempre con la misma anchura?
(¿<code>String.pad</code> o algo así?). Parece que <a href="http://elixir-lang.org/docs/stable/elixir/String.html#ljust/3"><code>String.ljust/3</code></a> hace el trabajo.</li>
</ul>


<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-06/exercise-01-round-06.exs">exercise-01-round-06</a>: repetir (honestamente) el proceso de crear un nuevo
proyecto y crear un módulo que parsee opciones de la línea de comandos y un
test para ello</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-06/exercise-02-round-06.exs">exercise-02-round-06</a>: seguir implementando el ejemplo del libro lo más
honestamente que se pueda. Se implementarán las siguientes transformaciones:
obtener los datos de GitHub con HTTPoison, parsear el JSON resultante con JSX,
extraer sólo la información que nos interesa, ordenarla y recuperar sólo la
cantidad que quiere el usuario.</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-06/exercise-03-round-06.exs">exercise-03-round-06</a>: implementar el resto de la funcionalidad de la
aplicación</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-06/exercise-04-round-06.exs">exercise-04-round-06</a>: escribir una aplicación que pida datos a un organismo
de EEUU sobre el tiempo, parsee los datos XML y los muestre de forma
agradable</li>
</ul>


<h2>Enseñar lo aprendido, y repetir desde el paso 7</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta
el siguiente asalto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: quinto asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2016/09/11/elixir-quinto-asalto/"/>
    <updated>2016-09-11T11:43:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/09/11/elixir-quinto-asalto</id>
    <content type="html"><![CDATA[<p>Y ya vamos por el quinto asalto, el quinto de la serie sobre el aprendizaje del
lenguaje <a href="http://elixir-lang.org/">Elixir</a>. En este asalto aprenderemos estructuras de control de flujo,
esenciales en cualquier lenguaje de programación. No sé en otros lenguajes
funcionales, pero en Elixir, estas estructuras no son muy bien acogidas. De
todas formas, son parte del lenguaje, son sencillas y nos servirán para
establecer conexiones con lenguajes que ya conozcamos.</p>

<p>Para seguir con el aprendizaje, sigo con el método seguido en otros asaltos
partiendo del post <a href="http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir/">aprendiendo Elixir</a>:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="right" src="http://rchavarria.github.io/images/2016/fight-II-harc-II.jpg"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/6bQhPq">Fight II / Harc II</a> de <a href="https://www.flickr.com/photos/silangel/">silangel</a>, <a href="https://creativecommons.org/licenses/by-nc/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by/2.0/">CC BY 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<p>En Elixir no se usan mucho, se suelen escribir métodos pequeños, que junto con
claúsulas de guarda y <em>pattern matching</em> nos alejan bastante de lo que aquí
estudiaremos. Normalmente, se suelen favorecer esos mecanismos frente a
estructuras de control. Al principio cuesta acostumbrarse, pero luego uno se va
dando cuenta de que los cuerpos de los métodos quedan más pequeños y más
enfocados a hacer una sola cosa, aunque despista un poco que una misma función
tenga varios cuerpos.</p>

<p><strong><code>if</code> y <code>unless</code></strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Ambos toman dos parámetros, una condición y una *keyword list*, cuyas claves posibles son `do:` y `else:`.
</span><span class='line'>if 1 == 2, do: "truthy", else: "falsy"
</span><span class='line'>unless 2 == 1, do: "do not execute", else: "execute this"
</span><span class='line'>
</span><span class='line'># igual que las funciones, se puede acortar un poco
</span><span class='line'>if 1 == 2 do
</span><span class='line'>  "truthy"
</span><span class='line'>else
</span><span class='line'>  "falsy"
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><strong><code>cond</code></strong></p>

<p>En realidad es una macro, como muchas otras construciones del lenguaje, y
acepta una serie de condiciones. Se ejecutará el código de la primera condición
que se evalúe a <code>true</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># Resolver la kata FizzBuzz
</span><span class='line'>cond do
</span><span class='line'>  rem(current, 3) == 0 and rem(current, 5) == 0 -&gt; "FizzBuzz"
</span><span class='line'>  rem(current, 5) == 0 -&gt; "Buzz"
</span><span class='line'>  rem(current, 3) == 0 -&gt; "Fizz"
</span><span class='line'>  true -&gt; current
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>En muchos casos, una mejor alternativa puede ser utilizar múltiples funciones,
pattern matching y claúsulas de guarda en lugar del bloque <code>cond</code>.</p>

<p><strong><code>case</code></strong></p>

<p><code>case</code> permite evaluar una serie de patrones, y ejecuta el código asociado a
dicho patrón. También se pueden usar claúsulas de guarda.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># para controlar errores al abrir un fichero
</span><span class='line'>case File.open("some file.txt") do
</span><span class='line'>  { :ok, file } -&gt; IO.puts "First line: #{IO.read(file, :line)}"
</span><span class='line'>  { :error, reason } -&gt; IO.puts "Failed to open file: #{reason}"
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'># con claúsulas de guarda
</span><span class='line'>dave = %{name: "Dave", age: 27}
</span><span class='line'>case dave do
</span><span class='line'>  person = %{age: age} when is_number(age) and age &gt;= 21 -&gt; IO.puts "You are allowed #{person.name}"
</span><span class='line'>  _ -&gt; IO.puts "You are not allowed"
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><strong>Excepciones</strong></p>

<p>Las excepciones en Elixir se usan para casos excepcionales. Por ejemplo, si hay
un fallo al leer un fichero de configuración, con un nombre fijo. Pero no si
hay un error al leer un fichero que el usuario ha introducido el nombre,
podemos controlar eso, y no sería un error excepcional.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># lanzando una RuntimeError
</span><span class='line'>raise "Giving up"
</span><span class='line'>
</span><span class='line'># o con algunos argumentos
</span><span class='line'>raise RuntimeError, message: "Stack overflow"
</span><span class='line'>
</span><span class='line'># por convención, se suele escribir `!` al final de una llamada que puede
</span><span class='line'># devolver una excepción bien conocida, por ejemplo
</span><span class='line'>{ ok: file } = File.open!("foo.bar")</span></code></pre></td></tr></table></div></figure>


<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li>[exercise-01-round-05.exs]: reescribe la kata FizzBuzz con <code>case</code></li>
<li>[exercise-02-round-05.exs]: muchas funciones tienen una segunda
implementación, que termina con <code>!</code>, la cual, si el resultado no coincide con
<code>{ :ok, data }</code> lanza una excepción. Implementa una función <code>ok!</code> que haga
exactamente esto</li>
</ul>


<h2>Enseñar lo aprendido, y repetir desde el paso 7</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta
el siguiente asalto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: cuarto asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2016/08/10/elixir-cuarto-asalto/"/>
    <updated>2016-08-10T17:20:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/08/10/elixir-cuarto-asalto</id>
    <content type="html"><![CDATA[<p>Éste es el cuarto asalto en mi aventura aprendiendo <a href="http://elixir-lang.org/">Elixir</a>. En esta ocasión
trato con tipos de datos binarios, cadenas y <strong>sigils</strong>. No es mucho, pero las cadenas son
una parte esencial de cualquier lenguaje de programación. Y dominarlas
significa dominar una gran parte del lenguaje.</p>

<p>Por supuesto, sigo aprendiendo con el método descrito en el post sobre <a href="http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir/">aprender Elixir</a>:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="right" src="http://rchavarria.github.io/images/2016/fourth-fight.jpg"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/5yHK4Y">Muñeco de Gohan y Bu peleando</a> de <a href="https://www.flickr.com/photos/alotor/">Alonso Javier Torres</a>, <a href="https://creativecommons.org/licenses/by-nc/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by/2.0/">CC BY 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<p>Para definir una cadena se pueden usar comillas simples o comillas dobles.
También se puede usar comillas triples, para escribir lo que llaman <code>heredocs</code>,
y se suelen usar para escribir comentarios para documentar métodos y módulos.</p>

<p>En Elixir, existe lo que llaman <em>sigils</em> (que se podría traducir como código,
señal o símbolo mágico). Comienzan con <code>~</code>, seguido de una letra que determina
el tipo de símbolo:</p>

<ul>
<li><code>c</code> para una lista de carácteres</li>
<li><code>r</code> para expresión regular</li>
<li><code>w</code> para una lista de palabras separado por espacios</li>
<li>y hay más</li>
</ul>


<p>y cuyo valor se puede enmarcar en distintos delimitadores: <code>&lt;..&gt;</code>, <code>{...}</code>,
<code>[...]</code>,&#8230;</p>

<p>Un uso muy típico es para escribir expresiones regulares:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>~r{[0-9]+[A-Z]*}</span></code></pre></td></tr></table></div></figure>


<p>Los <em>sigils</em> pueden incluso personalizarse, y crear los tuyos propios.</p>

<p>Las cadenas definidas mediante comillas dobles, son lo que se conoce en otros
lenguajes como <em>strings</em>. Las cadenas con comillas simples, se llaman
<em>character lists</em> (o <em>char list</em>), listas de carácteres, y son listas, arrays.</p>

<p><strong>Cadenas con comillas simples</strong></p>

<p>Son una lista de códigos que representan los carácteres. Y como son una lista,
podemos usar métodos de <code>List</code>: <code>++</code>, <code>--</code>, <code>List.zip</code>, <code>[ head | tail ]</code>,&#8230;</p>

<p>Para saber el número entero que representa un carácter, se puede usar la
notación <code>?&lt;chr&gt;</code>, por ejemplo, <code>?a</code> o <code>?4</code>, para saber los valores numéricos
de los carácteres <code>a</code> y <code>4</code> respectivamente.</p>

<p><strong>Binarios</strong></p>

<p>Qué mejor que un poco de código para ver cómo se usa este tipo de datos</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># el tipo *binario* representa una secuencia de bits
</span><span class='line'>iex&gt; b = &lt;&lt; 1, 2, 3 &gt;&gt;
</span><span class='line'>&lt;&lt;1, 2, 3&gt;&gt;
</span><span class='line'>iex&gt; byte_size b
</span><span class='line'>3
</span><span class='line'>iex&gt; bit_size b
</span><span class='line'>24
</span><span class='line'>
</span><span class='line'># se puede especificar también la cantidad de bits que queremos que ocupen
</span><span class='line'>iex&gt; b = &lt;&lt; 1::size(2), 1::size(3) &gt;&gt;
</span><span class='line'>&lt;&lt;9::size(5)&gt;&gt;
</span><span class='line'>iex&gt; byte_size b
</span><span class='line'>1
</span><span class='line'>iex&gt; bit_size b
</span><span class='line'>5
</span><span class='line'>
</span><span class='line'># también se pueden almacenar enteros, floats y otros binarios
</span><span class='line'>iex&gt; an_int = &lt;&lt; 1 &gt;&gt;
</span><span class='line'>&lt;&lt;1&gt;&gt;
</span><span class='line'>iex&gt; a_float = &lt;&lt; 2.5 :: float &gt;&gt;
</span><span class='line'>&lt;&lt;64, 4, 0, 0, 0, 0, 0, 0&gt;&gt;
</span><span class='line'>iex&gt; mix = &lt;&lt; an_int :: binary, a_float :: binary &gt;&gt;
</span><span class='line'>&lt;&lt;1, 64, 4, 0,......&gt;&gt;
</span><span class='line'>
</span><span class='line'># extraer valores (echa un vistazo a cómo se codifican los floats según
</span><span class='line'># el estándar IEEE 754)
</span><span class='line'>iex&gt; &lt;&lt; sign::size(1), exp::size(11), mantissa::size(52) &gt;&gt; = &lt;&lt; 3.14159::float &gt;&gt;
</span><span class='line'>iex&gt; (1 + mantissa / :math.pow(2, 52)) * :math.pow(2, exp-1023)
</span><span class='line'>3.14159
</span><span class='line'>
</span><span class='line'># las cadenas con comillas dobles "" (dqs: double quoted string) son de
</span><span class='line'># tipo binario, y están codificadas en UTF-8 lo que significa que la
</span><span class='line'># longitud de la cadena no tiene por qué coincidir con el tamaño en bytes
</span><span class='line'>iex&gt; dqs = "∂x/∂y"
</span><span class='line'>"∂x/∂y"
</span><span class='line'>iex&gt; String.length dqs
</span><span class='line'>5
</span><span class='line'>iex&gt; byte_size dqs
</span><span class='line'>9</span></code></pre></td></tr></table></div></figure>


<p><strong>Procesando cadenas</strong></p>

<p>Igual que podemos dividir una lista en <code>head</code> y <code>tail</code>, podemos extraer el
primer carácter (se refiere a él como <em>grapheme</em>, grafema/grafo/&#8230;) de una
cadena binaria o <em>dqs</em> especificando que <code>head</code> es de tipo <code>utf8</code> y que <code>tail</code>
sigue siendo de tipo binario:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defp each(&lt;&lt; head::utf8, tail::binary &gt;&gt;), do [ head | each(tail) ]
</span><span class='line'>defp each(&lt;&lt;&gt;&gt;), do []</span></code></pre></td></tr></table></div></figure>


<h2>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</h2>

<p>Está claro que hay que ver la documentación del módulo <a href="http://elixir-lang.org/docs/stable/elixir/String.html"><code>String</code></a>, que contiene
métodos para manipular cadenas encerradas en comillas dobles (recuerda, son de
tipo binario).</p>

<p>Las expresiones regulares son bastante comunes, y en Elixir se suelen usar
mediante <a href="http://elixir-lang.org/getting-started/sigils.html"><em>sigils</em></a>. Son un aspecto bastante curioso del lenguaje y pueden ser
personalizados.</p>

<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-04/exercise-01-round-04.exs">exercise-01-round-04.exs</a>: escribe una función que devuelva <code>true</code> si el
parámetro (una lista de carácteres) contiene sólo carácteres imprimibles (del
espacio a la tilde)</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-04/exercise-02-round-04.exs">exercise-02-round-04.exs</a>: escribe una función que devuelva <code>true</code> en el
caso de que dos palabras sean anagramas. <code>anagram?(word1, word2)</code></li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-04/exercise-03-round-04.exs">exercise-03-round-04.exs</a>: escribe una funcion que calcule suma, resta,&#8230;
de una cadena pasada como parámetro: <code>calculate('123 + 27') # =&gt; 150</code>. Este
es especialmente difícil (al menos para mi nivel): devolver tuplas, parsear
números (utilizando recursión de una forma muy imaginativa), utilizando pattern
matching para construir funciones dependiendo del operador,&#8230;</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-04/exercise-04-round-04.exs">exercise-04-round-04.exs</a>: escribe una función que pasándole una lista de
dqs (double quoted strings) las imprima centradas en un ancho de la palabra
más larga, cada una en una línea distinta.</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-04/exercise-05-round-04.exs">exercise-05-round-04.exs</a>: escribe una función que pase a mayúsculas la
primera letra de cada frase en una cadena</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-04/exercise-06-round-04.exs">exercise-06-round-04.exs</a>: escribe una función que parsee un fichero CSV
(que tendrá los campos id, estado y cantidad neta), y que se lo pase a la
función desarrollada en el tercer asalto, al ejercicio
<code>exercise-02-round-03.exs</code>.</li>
</ul>


<h2>Enseñar lo aprendido, y repetir desde el paso 7</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta el siguiente asalto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Practical Vim]]></title>
    <link href="http://rchavarria.github.io/blog/2016/07/17/practical-vim/"/>
    <updated>2016-07-17T23:15:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/07/17/practical-vim</id>
    <content type="html"><![CDATA[<h6>de Drew Neil</h6>

<h3>Por qué lo he leído</h3>

<p><img class="left" src="https://raw.githubusercontent.com/rchavarria/blog-post-incubator/master/published-book-notes/img/practical-vim.jpg"></p>

<p>Hace un tiempo decidí que quería <a href="http://rchavarria.github.io/blog/2014/10/11/aprendiendo-vim/">aprender a utilizar Vim</a>. Entre los muchos
recursos para aprender se encontraba este libro, pero encontré más prácticos
una serie de videos. Pero más adelante, escuchando el podcast <a href="http://giantrobots.fm/">Giant Robots</a>,
hablaron de este libro, y cuando recibes varias señales, quiere decir algo.</p>

<!-- more -->


<h3>De qué trata el libro</h3>

<p>El libro no es un manual desde cero. Tampoco es un manual avanzado. Es un
conjunto de trucos, de sugerencias, que trata de explicar y convencer al lector
de la filosofía y bondades del editor. Entre estos trucos encontrarás muchos
que te sean de utilidad, y otros tantos tan extraños que ni te molestarás en
entenderlos. Pero lo más importante es que describe una <em>forma de pensar en
Vim</em>. A la hora de editar ficheros de texto no hay una única forma de hacer las
cosas, ni tampoco una forma superior a otras alternativas, pero en Vim sí que
hay una filosofía, una idea de atacar cada edición. Este libro te sumerge en
ella.</p>

<h3>Conclusiones y valoración</h3>

<p>El libro es una maravilla. Está lleno de trucos. Muchos de ellos los conocía, y
otros ni siquiera sabía que existían. En cambio, otros, después de llevar un
tiempo usando Vim, tenía una ligera sospecha de que se podrían hacer, pero no
había invertido el tiempo en averiguar cómo.</p>

<p>Si tienes ganas de incarle el diente a un editor que sobrevive al paso del
tiempo, échale un vistazo al libro.</p>

<p>Debería echar un vistazo al proyecto de Mozilla <a href="https://github.com/mozilla/doctorjs">Doctor JS</a>, que contiene la
herramienta <code>jsctags</code>, para generar ficheros ctags de proyectos JavaScript.</p>

<h3>Frases que me gustaría recordar</h3>

<blockquote><p>La fórmula del punto: una pulsación de tecla para mover, una pulsación de
tecla para ejecutar la edición</p></blockquote>

<!-- -->


<blockquote><p>La estrategia óptima de edición es hacer que tanto el cambio como el
movimiento sean repetibles</p></blockquote>

<!-- -->


<blockquote><p>Podemos hacer que el comando deshacer opere en palabras, frases o párrafos
enteros solamente haciendo un uso corrrecto de la tecla <code>Esc</code></p></blockquote>

<!-- -->


<blockquote><p>La combinación de operadores con movimientos forman una especie de gramática.
Aprender nuevos movimientos y operadores is como aprender el vocabulario de
Vim. Si seguimos las reglas sencillas de la gramática, podremos expresar más
y mejores ideas según vaya creciendo nuestro vocabulario</p></blockquote>

<!-- -->


<blockquote><p>Una buena forma de trabajar con macros sería: normalizar la posición del
cursor, llegar hasta el objetivo con un movimiento repetible, hacer que la
macro aborte cuando el movimiento falle y no encuentre el objetivo</p></blockquote>

<!-- -->


<blockquote><p>La sintaxis para definir un rango en los Ex commands es muy flexible. Se
pueden mezclar números de línea, marcas y patrones de búsqueda. Y se puede
aplicar un offset a cada uno de ellos</p></blockquote>

<!-- -->


<blockquote><p>Intenta crear el hábito de crear una marca global (<code>m{capital letter}</code>) antes
de usar cualquier comando que interacciones con la lista de arreglos rápidos,
lista de buffers o lista de argumentos</p></blockquote>

<!-- -->


<blockquote><p>Para editar una macro grabada en el registro <code>q</code>, simplemente podemos pegar
el contenido de dicho registro con <code>"qy</code>, editar la línea y modificar el
registro <code>q</code> con <code>"qy$</code></p></blockquote>

<h3>Qué he aprendido</h3>

<p>Hay toda una serie de nuevos comandos, combinaciones de ellos y herramientas
que todavía no conocía o que he encontrado muy útiles:</p>

<ul>
<li><code>~</code>: intercambia el carácter actual de mayúsculas a minúsculas y viceversa</li>
<li><code>g~</code>, <code>gu</code>, <code>gU</code>: intercambia mayúsculas/minúsculas en la selección, pasa a minúsculas, pasa a mayúsculas, respectivamente.</li>
<li><code>&lt;C-h&gt;</code>, <code>&lt;C-w&gt;</code>, <code>&lt;C-u&gt;</code>: en modo inserción o modo comando, borra hacia atrás un carácter, una palabra o la línea completa, respectivamente.</li>
<li><code>&lt;C-r&gt;{register}</code>: en modo inserción, inserta el texto desde el registro <code>register</code></li>
<li><code>&lt;C-r&gt;&lt;C-p&gt;{register}</code>: idem, pero más inteligentemente, ya que arregla cualquier error de indentación por descuido</li>
<li><code>&lt;C-v&gt;{code}</code>: en modo inserción, inserta un carácter especial por su código <code>code</code></li>
<li><code>R</code>: nos lleva del modo normal al <em>modo de reemplazo</em>, donde cada carácter insertado reemplaza a un carácter existente</li>
<li><code>v</code>, <code>V</code>, <code>&lt;C-v&gt;</code>: entra en los distintos modos visuales: de carácter, de línea o de bloque.</li>
<li><code>o</code>: dentro del modo visual, la selección tiene dos extremos, con este comando intercambiamos entre ellos, de forma que podemos expandir la selección hacia adelante o hacia atrás</li>
<li><code>.</code>, <code>%</code>: en el modo comando tienen significado especial cuando se especifica un rango. Significan la línea actual y todas las líneas, respectivamente.</li>
<li><code>:t</code>: comando para duplicar líneas. <code>:3t 5</code> copia la línea 3 y la pega en la 5. <code>:.+2t .</code> copia dos líneas más abajo y la pega en la línea actual</li>
<li><code>:m</code>: comando para mover líneas</li>
<li><code>@:</code>: repite el último Ex Command, lo cual es muy útil cuando estamos haciendo cambios en múltiples ficheros, o vamos recorriendo la lista de búferes</li>
<li>en modo comando, se pueden ejecutar comandos del modo normal, con el Ex Command <code>normal</code>. Por ejemplo, <code>:%normal A;</code> hace lo siguiente: <code>:</code> entramos en modo comando, <code>%</code> indica que afectará a todas las líneas del fichero, <code>normal</code> indica que introduciremos un comando del modo normal, <code>A;</code> es un comando del modo normal, y lo que hace es añadir al final de la línea el carácter <code>;</code>.</li>
<li><code>&lt;C-o&gt;</code>: vuelve atrás en la lista de saltos (cambios de buffer, grandes saltos de líneas, búsquedas,&#8230;)</li>
<li><code>&lt;Tab&gt;</code>, <code>&lt;C-n&gt;</code>, <code>&lt;Left&gt;</code> y <code>&lt;S-Tab&gt;</code>, <code>&lt;C-p&gt;</code>, <code>&lt;Right&gt;</code>: para movernos adelante y atrás durante el autocompletado</li>
<li><code>&lt;C-r&gt;&lt;C-w&gt;</code>: en modo comando, copia la palabra debajo del cursor y la pega en la línea de comandos</li>
<li><code>&lt;C-p&gt;</code>, <code>&lt;C-n&gt;</code>: después de entrar en el modo comando con <code>:</code> o <code>/</code>, podemos pulsarlos para ir hacia adelante o atrás en el historial de comandos o búsquedas</li>
<li><code>q/</code>: abre la ventana <em>línea de comandos</em> con el historial de búsquedas</li>
<li><code>q:</code>: abre la ventana <em>línea de comandos</em> con el historial de comandos</li>
<li><code>&lt;C-f&gt;</code>: en modo comando, cambia a la ventana de línea de comandos</li>
<li><code>:read !{shell command}</code>: pone el resultado del comando shell en el buffer actual</li>
<li><code>:write !{shell command}</code>: usa el contenido del buffer actual como entrada para el comando shell</li>
<li><code>:bnext</code>, <code>:bprevious</code>, <code>:bfirst</code>, <code>:blast</code>: para moverse por los buffers</li>
<li><code>:edit {path to a dir}</code>: abre el contenido del directorio en un buffer, de forma que podemos navegar el sistema de ficheros sin necesidad de ningún plugin. <code>.</code> significa el actual directorio de trabajo. <code>:explore</code> o <code>:E</code> hace lo mismo. <code>:Sexplore</code> divide los buffers horizontalmente, <code>:Vexplore</code> divide los buffers verticalmente</li>
<li>igual que existen <code>w</code>, <code>b</code>, <code>e</code> y <code>ge</code> (mueve al final de la palabra anterior), existen <code>W</code>, <code>B</code>, <code>E</code> y <code>gE</code> para hacerlo con PALABRAS, no con palabras</li>
<li><code>is</code>, <code>as</code>, <code>ip</code>, <code>ap</code>: son movimientos (que se pueden usar con los comandos <code>d</code>, <code>c</code>, <code>y</code>,&#8230;) que engloban la actual frase (sentencia) o párrafo</li>
<li><code>&lt;C-o&gt;</code>, <code>&lt;C-i&gt;</code>: para movernos adelante y atrás en los saltos que vamos dando</li>
<li><code>:changes</code>: muestra el historial de cambios</li>
<li><code>g;</code>, <code>g,</code>: para movernos adelante y atrás por el historial de cambios</li>
<li><code>gi</code>: vuelve al último punto donde abandonamos el modo de inserción, entrando en dicho modo</li>
<li><code>"_d{motion}</code>: borra lo indicado pero no copia el contenido en ningún sitio (bueno, sí, en el registro <code>_</code>, pero éste no guarda el contenido). Si no se indica nada, los comandos <code>x</code>, <code>s</code>, <code>d</code> y <code>c</code> modifican el registro sin nombre, con lo que pueden eliminar el contenido que hayamos copiado con <code>y</code>.</li>
<li>el registro de copiado es el <code>0</code>, y éste no es modificado nunca por los comandos <code>x</code>, <code>s</code>, <code>d</code> y <code>c</code>.</li>
<li>si al copiar o borrar nombramos un registro con mayúsculas, el contenido se añadirá a lo que contenga el registro</li>
<li><code>\v</code>: activa la magia en los patrones de búsqueda. Hace que todos los carácteres excepto los alfanuméricos y <code>_</code> tengan un significado especial</li>
<li><code>:%s///gn</code>: cuenta las ocurrencias del patrón actual de búsqueda</li>
<li>flags del comando de sustitución: <code>g</code> reemplaza todas las ocurrencias en una línea, no solo la primera; <code>c</code> pide confirmación, <code>n</code> cuenta las ocurrencias, <code>&amp;</code> reusa los últimos flags</li>
<li><code>:%s//\=@0/g</code>: sustituye todas las ocurrencias (flag <code>g</code>) de todas las filas (rango <code>%</code>) del último patrón buscado (<code>//</code>) con el contenido del registro <code>0</code> (<code>\=</code> evalúa una expresión, <code>@0</code> accede al registro <code>0</code>)</li>
<li><code>&amp;</code>: repite los cambios hechos por el último comando de sustitución <code>:s/pattern/.../</code></li>
<li><code>g&amp;</code>: repite el último comando de sustitución en todo el fichero</li>
<li><code>:vimgrep {pattern} {file pattern}</code>: busca el patrón en la lista de ficheros y rellena la lista <em>quickfix</em>. Luego podemos pasar el resultado a la lista de argumentos con el plugin <em>qargs</em></li>
<li><code>:global/{pattern}/{command}</code> o <code>:g</code>: permite ejecutar un comando en cada línea que cumpla con el patrón</li>
<li><code>&lt;C-]&gt;</code>: mover hasta la definición de la palabra clave (tag) donde se encuentra el cursor</li>
<li><code>&lt;C-t&gt;</code>: vuelve atrás en la última tag visitada</li>
<li><code>:copen</code>, <code>:cclose</code>: abre/cierra la ventana de lista <em>quickfix</em></li>
<li><code>:cnext</code>, <code>:cprevious</code>, <code>:cfirst</code>, <code>:clast</code>: para moverse por los marcadores de la lista quickfix</li>
<li><code>:colder</code>, <code>:cnewer</code>: para pasar de listas quickfix más nuevas a las más viejas y viceversa</li>
</ul>


<h3>Recursos relacionados</h3>

<ul>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/practical-vim-by-drew-neil.markdown">Notas tomadas sobre Practical Vim</a>, y en <a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/practical-vim-by-drew-neil.en.markdown">inglés</a> también</li>
<li>Debería echar un vistazo al proyecto de Mozilla <a href="https://github.com/mozilla/doctorjs">Doctor JS</a>, que contiene la
herramienta <code>jsctags</code>, para generar ficheros ctags de proyectos JavaScript.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: tercer asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2016/05/01/elixir-tercer-round/"/>
    <updated>2016-05-01T17:46:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/05/01/elixir-tercer-round</id>
    <content type="html"><![CDATA[<p>Éste es el tercer asalto para aprender <a href="http://elixir-lang.org/">Elixir</a>, y las cosas se van poniendo
interesantes, aunque todavía siento que estoy muy verde y me falta todavía
mucho para ser capaz de hacer las cosas más sencillas.</p>

<p>En este asalto, aprendo nuevas cosas proporcionadas por los módulos <code>Enum</code>,
<code>Stream</code> y otras coleciones, así como las <em>comprehensions</em>, que me recuerdan
mucho a los clásicos bucles <code>for</code>.</p>

<p>Sigo aprendiendo siguiendo el método descrito en el post sobre <a href="http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir/">aprender Elixir</a>:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="right" src="http://rchavarria.github.io/images/2016/third-fight.png"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/c9bWJA">3rd fight</a> de <a href="https://www.flickr.com/photos/takfoto/">Tomasz Krawczak</a>, <a href="https://creativecommons.org/licenses/by-nc/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by-nc/2.0/legalcode">CC BY-NC 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<p><strong>Procesando colleciones con <code>Enum</code></strong></p>

<p>Elixir tiene muchos tipos de datos que actúan como colleciones: listas, mapas,
diccionarios, rangos, ficheros e incluso funciones. Las colecciones se pueden
iterar (sobretodo con funciones del módulo <code>Enum</code>), y algunas permiten añadir
elementos.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># convierte cualquier colección a List
</span><span class='line'>list = Enum.to_list 1..5
</span><span class='line'>  #=&gt; [1, 2, 3, 4, 5]
</span><span class='line'>
</span><span class='line'># concatena
</span><span class='line'>Enum.concat([1, 2, 3], [4, 5, 6])
</span><span class='line'>  #=&gt; [1, 2, 3, 4, 5]
</span><span class='line'>
</span><span class='line'># crea nuevas colleciones
</span><span class='line'>Enum.map(list, &(&1 * 10))
</span><span class='line'>  #=&gt; [10, 20, 30, 40, 50]
</span><span class='line'>
</span><span class='line'># selecciona elementos por posición
</span><span class='line'>Enum.at(10..20, 3) #=&gt; 13
</span><span class='line'>Enum.at(10..20, 20) #=&gt; nil
</span><span class='line'>Enum.filter(list, &(&1 &gt; 2)) #=&gt; [3, 4, 5]
</span><span class='line'>Enum.reject(list, &Integer.is_even/1) #=&gt; [1, 3, 5]
</span><span class='line'>
</span><span class='line'># ordena y compara elementos
</span><span class='line'>Enum.sort([ "there", "was", "a", "crooked", "man" ], 
</span><span class='line'>  &(String.length(&1) &lt;= String.length(&2))
</span><span class='line'>Enum.max([ "there", "was", "a", "crooked", "man" ]) #=&gt; "was"
</span><span class='line'>
</span><span class='line'># divide una colleción
</span><span class='line'>Enum.take(list, 3)    #=&gt; [1, 2, 3]
</span><span class='line'>Enum.take_every(list, 2)  #=&gt; [1, 3, 5]
</span><span class='line'>Enum.take_while(list, &(&1 &lt; 4))
</span><span class='line'>Enum.split(list, 3)
</span><span class='line'>  #=&gt; { [1, 2, 3], [4, 5] }
</span><span class='line'>Enum.split_while(list, &(&1 &lt; 4))
</span><span class='line'>  #=&gt; { [1, 2, 3], [4, 5] }
</span><span class='line'>
</span><span class='line'># une los elementos de una colección
</span><span class='line'>Enum.join(list)
</span><span class='line'>Enum.join(list, ", ")   #=&gt; "1, 2, 3, 4, 5"
</span><span class='line'>
</span><span class='line'># hace preguntas sobre operaciones
</span><span class='line'>Enum.all?(list, &(&1 &lt; 4))
</span><span class='line'>Enum.any?(list, &(&1 &lt; 4))
</span><span class='line'>Enum.member?(list, 4)
</span><span class='line'>Enum.empty?(list)
</span><span class='line'>
</span><span class='line'># mezcla colecciones
</span><span class='line'>Enum.zip(list, [:a, :b, :c])
</span><span class='line'>  #=&gt; [ {1, :a}, {2, :b}, {3, :c} ]
</span><span class='line'>
</span><span class='line'># otros
</span><span class='line'>Enum.reduce(&lt;collection&gt;, &lt;function&gt;)</span></code></pre></td></tr></table></div></figure>


<p><strong><code>Stream</code>s, enumerables diferidos o perezosos</strong></p>

<p>El módulo <code>Stream</code> permite enumerar collecciones de forma diferida (<em>lazy</em> es
la palabra utilizada, que traduzco libremente como <em>diferida</em>).</p>

<p>Las funciones del módulo <code>Enum</code> procesan todos los elementos de la colección de
una vez, consumiendo memoria. Las del módulo <code>Stream</code> consumen los elementos de
uno en uno, según se van necesitando. Los <em>streams</em> se pueden componer, es
decir, los streams son collecciones, por lo que se pueden usar las funciones de
<code>Stream</code> con los propios streams (sería como crear streams de streams).</p>

<p>Finalmente, para obtener los resultados, se puede convertir un <code>Stream</code> a una
lista:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[1, 2, 3, 4, 5]
</span><span class='line'>  |&gt; Stream.map(&(&1 * &1)
</span><span class='line'>  |&gt; Stream.map(&(&1 + 1)
</span><span class='line'>  |&gt; Stream.filter(fn x -&gt; rem(x, 2) == 1 end)
</span><span class='line'>  |&gt; Enum.to_list</span></code></pre></td></tr></table></div></figure>


<p>Con <code>Enum</code> debemos esperar a tener todos los elementos de la colección para
empezar a procesarlos. Con <code>Stream</code> podemos comenzar a procesarlos
inmediatamente. Imagina que leemos de un servidor remoto, o de un sensor, ambos
mandan datos infinitamente, por lo que <code>Enum</code> no sería una opción válida en
este caso.</p>

<p>Normalmente, serán las librerías y los frameworks quienes nos proporcionen los
streams con los que vamos a trabajar, pero también podemos crearlos nosotros
con métodos proporcionados por Elixir: <code>cycle</code>, <code>repeatedly</code>, <code>iterate</code>,
<code>unfold</code> y <code>resource</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># cycle toma una coleción y va devolviendo de uno en uno indefinidamente
</span><span class='line'>#cuando la colección se acaba, vuelve a empezar desde el principio
</span><span class='line'>Stream.cycle([1, 2, 3])
</span><span class='line'>  |&gt; Enum.take(10)
</span><span class='line'>#=&gt; [1, 2, 3, 1, 2, 3, 1, 2, 3, 1]
</span><span class='line'>
</span><span class='line'># repeatedly toma una función y la ejecuta cada vez que se le pide un elemento
</span><span class='line'>Stream.repeatedly(fn -&gt; true end) |&gt; Enum.take(3)
</span><span class='line'>  #=&gt; [ true, true, true ]
</span><span class='line'>Stream.repeatedly(&:random.uniform/0) |&gt; Enum.take(3)
</span><span class='line'>  #=&gt; [ 0.723, 0.941, 0.1234 ]
</span><span class='line'>
</span><span class='line'># iterate toma un valor inicial y una función. el primer elemento es el valor inicial,
</span><span class='line'>#el siguiente es el valor devuelto por la función pasándole el valor inicial, el siguiente
</span><span class='line'>#es el valor devuelto por la función pasándole el valor anterior, así indefinidamente
</span><span class='line'>Stream.iterate(0, &(&1 + 1)) |&gt; Enum.take(5)
</span><span class='line'>  #=&gt; [0, 1, 2, 3, 4]
</span><span class='line'>
</span><span class='line'># unfold es similar a iterate, pero con tuplas. el primer valor de la tupla
</span><span class='line'>#significa el valor de la iteración actual, el segundo valor significa el valor
</span><span class='line'>#a procesar en la siguiente iteración
</span><span class='line'>Stream.unfold( {0, 1}, fn {f1, f2} -&gt; {f1, {f2, f1+f2}} end ) |&gt; Enum.take(15)
</span><span class='line'>  #=&gt; [0, 1, 1, 2, 3, 5, 8, 13, ... fibonacci]
</span><span class='line'>
</span><span class='line'># resource es similar a unfold. toma tres funciones como argumentos. la primera
</span><span class='line'>#crea el recurso, la segunda va dando valores de las iteraciones (como unfold)
</span><span class='line'>#y la tercera cierra el recurso (fichero, bbdd, ...)</span></code></pre></td></tr></table></div></figure>


<p><strong>El protocolo <code>Collectable</code></strong></p>

<p>No son lo mismo, y todavía no soy capaz de describir exactamente lo que es un
<em>protocolo</em>, pero el concepto que tengo de ellos hoy mismo es que son
<em>equivalentes</em> a las interfaces en los lenguajes orientados a objetos.</p>

<p><code>Enumerable</code> es un protocolo que permite iterar una colección. <code>Collectable</code>
permite añadir elementos a una colección. Se puede utilizar <code>Enum.into</code> para
hacerlo y convertir un tipo de colección en otro.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enum.into 1..5, [1000, 10001]
</span><span class='line'>  #=&gt; [1000, 1001, 1, 2, 3, 4, 5]</span></code></pre></td></tr></table></div></figure>


<p><strong>Comprehensions</strong></p>

<p>Se le pueden pasar una o más colecciones, entonces extrae todas las
combinaciones posibles de los elementos de dichas colecciones, opcionalmente
puede filtrar valores, y genera una nueva colección con los valores que pasan
el filtro. La sintaxis es <code>result = for &lt;generator&gt; or &lt;filter&gt;, do:
&lt;expression&gt;</code>. Donde <code>&lt;generator&gt;</code> tiene la forma <code>pattern &lt;- collection</code> y el
filtro es simplemente una condición, por ejemplo <code>x &lt; 4</code>.</p>

<p>Las variables declaradas en una comprehension tienen la misma como ámbito, no
escapan de él.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>for x &lt;- [1, 2, 3, 4, 5], x &lt; 4, do: x * x
</span><span class='line'>  # =&gt; [1, 4, 9]
</span><span class='line'>
</span><span class='line'>for x &lt;- [1, 2], y &lt;- [5, 6], do: x * y
</span><span class='line'>  # =&gt; las posibles combinaciones serían [1, 5], [1, 6], [2, 5], [2, 6]
</span><span class='line'>  # =&gt; y esas combinaciones serían las iteraciones de la comprehension
</span><span class='line'>
</span><span class='line'># se pueden usar variables de generadores en siguientes generadores
</span><span class='line'>min_maxes = [ {1, 4}, {2, 3}, {10, 15} ]
</span><span class='line'>for { min, max } &lt;- min_maxes, n &lt;- min..max, do: n
</span><span class='line'>  # =&gt; [ 1, 2, 3, 4, 2, 3, 10, 11, 12, 13, 14, 15 ]
</span><span class='line'>
</span><span class='line'># por defecto, las comprehensions devuelven una lista. Se puede cambiar
</span><span class='line'># con el parámetro `into:`
</span><span class='line'>for x &lt;- ~w{ cat dog }, into: Map.new, do: { x, String.upcase(x) }
</span><span class='line'>  # =&gt; %{ "cat" =&gt; "CAT", "dog" =&gt; "DOG" }</span></code></pre></td></tr></table></div></figure>


<h2>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</h2>

<p>Podría investigar sobre qué son los protocolos, pero creo que están descritos
en el libro del cual está surgiendo esta serie de posts, por lo que esperaré a
llegar ahí.</p>

<p>Tener siempre muy presente las funciones del módulo <code>Enum</code>, ya que casi seguro
que se van a utilizar siempre que haya colecciones de por medio.</p>

<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-03/exercise-01-round-03.exs">exercise-01-round-03.exs</a>: con ayuda de la función <code>span</code> escrita anteriormente, escribir una función que devuelva la lista de números primos de <code>2</code> hasta <code>n</code></li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-03/exercise-02-round-03.exs">exercise-02-round-03.exs</a>: a partir de dos listas, una de tasas de impuestos, y otra de compras, calcular el importe total de cada una de las compras</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-03/lists-and-recursion-5.exs">lists-and-recursion-5.exs</a>: implementar funciones presentes en <code>Enum</code>: <code>all?</code>, <code>each</code>, <code>filter</code>, <code>take</code> y <code>split</code>.</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-03/lists-and-recursion-6.exs">lists-and-recursion-6.exs</a>: implementar <code>flatten</code></li>
</ul>


<h2>Enseñar lo aprendido, y repetir desde el paso 7</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta el siguiente asalto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Code: the hidden language of computer hardware and software]]></title>
    <link href="http://rchavarria.github.io/blog/2016/04/10/code/"/>
    <updated>2016-04-10T10:24:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/04/10/code</id>
    <content type="html"><![CDATA[<h5>de Charles Petzold</h5>

<h3>Por qué lo he leído</h3>

<p>Porque era una <em>recomendación</em>. <a href="http://www.hanselman.com/">Scott Hanselman</a> era el invitado en el podcast
<a href="http://developeronfire.com/episode-083-scott-hanselman-learn-balance">Developer on fire #83</a>, y lo recomendó como un libro que cualquiera relacionado
con el software debería leer. El año pasado ya leí <a href="http://rchavarria.github.io/blog/2015/09/06/the-martian/">The martian</a>, recomendado
públicamente también por Scott. ¿Iba a dejar de pasar la oportunidad? Ni
hablar.</p>

<p><img class="center" src="http://rchavarria.github.io/images/2016/code-charles-petzold.png"></p>

<!-- more -->


<h3>Qué esperaba</h3>

<p>Espera encontrar una novela, de ciencia ficción. Scott contaba que el libro
narraba la historia de dos amigos y vecinos que empiezan comunicándose por la
noche a través de la ventana de su habitación con una linterna. Luego la cosa
se complica porque uno de ellos se muda de ciudad. Y así comienza la historia
en el libro.</p>

<h3>Qué encontré</h3>

<p>Pero nada de eso. No es una novela en sí. Se parece más a un libro de historia.
Sí, la historia comienza con los dos amigos, pero eso es sólo una excusa para
comenzar a guiarnos por un viaje que comienza por el código morse, código
Braille, y muchos más hasta llegar a explicar cómo funciona todas y cada una de
las computadoras de hoy en día.</p>

<h3>Conclusiones</h3>

<p>Estoy absolutamente de acuerdo con Scott, es un libro que debería leer todo
aquel que se dedique al software. Es un repaso increíble de la historia de la
informática. Comienza describiendo el código morse, otra serie de códigos que
terminaron en el código (o alfabeto) Braille, para enlazarlo con el código
binario. Para terminar explicando nuestro sistema decimal.</p>

<p>Después sigue con métodos de transmisión, telégrafo y relés. Y cómo ellos se
relacionan con los códigos binarios. De esta relación aparece los <em>switches</em> y
las puertas lógicas. Termina construyendo una máquina capaz de sumar hecha de
relés.</p>

<p>Sigue hacia adelante, agrupando bits en bytes, y construyendo otros circuitos
digitales, como los <em>latches</em>, contadores y hasta llega a construir una memoria
RAM.</p>

<p>Sigue relacionando los códigos y el hardware para acabar describiendo el código
máquina de un microprocesador comercial. A partir de ahí, la tecnología avanza
muy deprisa y no se puede explicar en un solo libro (al menos si quieres ser
capaz de levantarlo con la mano), pero explica el código ASCII y otras
codificaciones para representar texto.</p>

<p>Y finalmente, los lenguajes de programación.</p>

<p>Por último sólo puedo decir que me hubiera gustado que nos hubieran enseñado la
historia del software y el hardware de esta forma en la universidad. Todas las
piezas encajan. De hecho, estuvieron ahí mucho tiempo (los relés y los códigos
binarios), pero se tardó 20 o 30 años en unirlos para crear máquinas capaces de
realizar cálculos automáticamente.</p>

<h3>Qué he aprendido</h3>

<p>A parte de conocer el origen de toda una industria y que, por cierto, parece
que todos los avances se hicieron entre los años 1950 y 1970, después de esos
años parece que sólo se haya aumentado el número y reducido el tamaño de los
componentes que utilizamos, hay unas cuantas curiosidades que me gustaría
recordar:</p>

<ul>
<li>Para algunos parece bastante claro que nuestro sistema numérico se basa en 10
porque es el número de dedos que tenemos en las manos, y es el número más
grande que podemos contar con ellos. Me parece discutible, pero no se puede
negar que lógica tiene, y mucha.</li>
<li>¿Por qué un byte tiene 8 bits y no otro número, diez por ejemplo? Parece ser
que fue el número de bits que usaba IBM porque era muy fácil almacenar
números en la <a href="https://es.wikipedia.org/wiki/Decimal_codificado_en_binario">codificación BCD</a>. Después, simplemmente por coincidencia, un
byte es ideal para almacenar texto, ya que una gran mayoría de lenguajes
escritos alrededor del mundo necesitan 256 símbolos o menos. También, por
conicidencia, un byte es ideal para almacenar escalas de grises en imágenes, ya
que el ojo humano es capaz de diferenciar unas 256.</li>
<li>Un <em>nibble</em> son 4 bits, o medio byte.</li>
</ul>


<p>Finalmente, el autor aporta un par de ideas sobre un tema que me intersa mucho:
¿la programación es un arte o una ciencia?</p>

<p>Al principio, quienes programaban eran científicos e ingenieros, que eran
capaces de expresar ideas en forma de algoritmos matemáticos.</p>

<p>Pero a lo largo de la historia, mucha gente ha tratado de crear abstracciones,
lenguajes de programación de más alto nivel, para acercar la programación al
mayor número de personas. Es gracias a ello donde tienen cabida personas más
artistas, más creativas.</p>

<p>Me parece una metáfora (o razonamiento incluso) muy bueno y que permite ver dos
caras del desarrollo software que no tienen por qué estar enfrentadas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: segundo asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2016/03/27/elixir-segundo-asalto/"/>
    <updated>2016-03-27T17:42:00+02:00</updated>
    <id>http://rchavarria.github.io/blog/2016/03/27/elixir-segundo-asalto</id>
    <content type="html"><![CDATA[<p>Sigo aprendiendo <a href="http://elixir-lang.org/">Elixir</a>, despacio, pero sigo con ello. Éste es el segundo
asalto del aprendizaje. En este asalto, lucho con estructuras de datos un poco
más complejas, como listas, diccionarios, <em>structs</em> o <em>sets</em>. Estas estructuras
ya existen en otros lenguajes de programación, pero en Elixir son tratadas de
una forma un poco diferente.</p>

<p>Por supuesto, en este asalto también sigo el método de aprendizaje descrito
desde el post sobre <a href="http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir/">aprender Elixir</a>:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="center" src="http://rchavarria.github.io/images/2016/rms-won.jpg"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/2PDNng">RMS won</a> de <a href="https://www.flickr.com/photos/kmerenkov/">Konstantin Merenkov</a>, <a href="https://creativecommons.org/licenses/by-nc/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by-nc/2.0/legalcode">CC BY-NC 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<p><strong>Listas</strong></p>

<p>Una lista es recursiva. Está formada por una cabecera (<em>head</em>) y una cola
(<em>tail</em>). La cabecera es unicamente el primer elemento. La cola, es una lista
con el resto de elementos. De esta forma, la lista <code>[1, 2, 3]</code>, en realidad es
<code>[1 | [2 | [3 | [] ] ] ]</code> (al final se concatena una lista vacía).</p>

<p>Como las listas son recursivas, muchas funciones que manipulan listas lo son.
Elixir hace super sencilla la recursividad. Mezclando recursividad y pattern
matching, se pueden hacer virgerías. Super fácil implementar el cifrado César
(ver <a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-02/exercise-04-round-02.exs">exercise-04-round-02.exs</a>).</p>

<p><strong>Diccionarios</strong></p>

<p>Existen varios tipos de diccionarios: <code>Maps</code>, <code>HashDicts</code>, <code>Keywords</code>, <code>Sets</code> y
<code>Structs</code>.</p>

<p>Para acceder a una clave del diccionario: <code>dict[:key]</code>, las claves son Atoms.</p>

<p><code>Enum.into</code> convierte entre tipos enumerados, por ejemplo, entre tipos de
diccionarios.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#Distintas operaciones que podemos hacer sobre diccionarios
</span><span class='line'>dict = %{ key1: "Clave 1", key2: "Clave 2" }%
</span><span class='line'>ticd = %{ key9: "Clave 9", key8: "Clave 8" }%
</span><span class='line'>
</span><span class='line'># eliminar claves de un diccionario
</span><span class='line'>Dict.drop(dict, [:key2])
</span><span class='line'>
</span><span class='line'># añadir claves
</span><span class='line'>Dict.put(dict, :key3, "Clave 3")
</span><span class='line'>
</span><span class='line'># unir diccionarios
</span><span class='line'>Dict.merge(dict, tcid)
</span><span class='line'>
</span><span class='line'># obtener valores, similar a dict[:key1]
</span><span class='line'>Dict.get(dict, :key1)
</span><span class='line'>
</span><span class='line'># obtener todos los valores
</span><span class='line'>Dict.values(dict)
</span><span class='line'>
</span><span class='line'># el pattern matching en diccionarios es muy útil
</span><span class='line'>person = %{ name: "Dave", height: 1.88 }
</span><span class='line'>
</span><span class='line'># establecer a_name = "Dave"
</span><span class='line'>%{ name: a_name } = person
</span><span class='line'>
</span><span class='line'># pattern matching que no falla
</span><span class='line'>%{ name: _, height: _ } = person
</span><span class='line'>
</span><span class='line'># pattern matching que no falla
</span><span class='line'>%{ name: "Dave" } = person
</span><span class='line'>
</span><span class='line'># falla
</span><span class='line'>%{ name: _, weight: _ } = person
</span><span class='line'>** (Match error) no ...
</span><span class='line'>
</span><span class='line'># pattern matching no puede enlazar claves de diccionarios
</span><span class='line'>%{ 2 =&gt; state } = %{ 1 =&gt; ok:, 2 =&gt; error: }
</span><span class='line'>=&gt; state = :error
</span><span class='line'>
</span><span class='line'>%{ state =&gt; ok: } = %{...}
</span><span class='line'>=&gt; Error ...
</span><span class='line'>
</span><span class='line'># para actualizar un mapa, se usa la siguiente estructura, muy parecida a `List`
</span><span class='line'># Puede actualizar pero no añadir
</span><span class='line'>new_map = %{ old_map | key =&gt; value, ... }</span></code></pre></td></tr></table></div></figure>


<p><strong>Mapas tipados (typed maps)</strong></p>

<p>Son como un mapa que tiene un conjunto de campos fijos y valores por defecto
para ellos. Se puede utilizar <em>pattern matching</em> por tipo y por contenido.</p>

<p>Estos mapas son los llamados <code>Struct</code>. Los <code>Struct</code>s son mapas limitados: las
claves deben ser <em>Atoms</em>. Se crean con <code>defstruct</code>, y el nombre del módulo pasa
a ser el nombre del struct:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defmodule Subscribrer do
</span><span class='line'>  defstruct name: "", paid: false, over_18: true
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>s1 = %Subscribrer{}
</span><span class='line'>=&gt; %Subscribrer{ name: "", paid: false, over_18: true }
</span><span class='line'>
</span><span class='line'>s2 = %Subscribrer{ name: "Dave" }
</span><span class='line'>
</span><span class='line'># a las claves se accede mediante un punto &lt;struct&gt;.&lt;key&gt;
</span><span class='line'>s2.name
</span><span class='line'>=&gt; "Dave"
</span><span class='line'>
</span><span class='line'>%Subscribrer{ name: name } = s2
</span><span class='line'>name
</span><span class='line'>=&gt; "Dave"
</span><span class='line'>
</span><span class='line'># así se actualizan los datos
</span><span class='line'>s3 = %Subscribrer{ s2 | name: "Marie" }
</span><span class='line'>
</span><span class='line'># la idea de que el nombre del módulo sea el nombre del Struct
</span><span class='line'># es que se puedan añadir métodos al módulo que modifiquen la
</span><span class='line'># estructura del Struct (esto me suena mucho a las clases de la
</span><span class='line'># Programación Orientada a Objetos).
</span><span class='line'>defmodule Attendee do
</span><span class='line'>  defstruct name: "", paid: false, over_18: true
</span><span class='line'>
</span><span class='line'>  def may_attend_after_party(attendee = %Attendee{}) do
</span><span class='line'>    attendee.paid && attendee.over_18
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  ...
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>El autor reconoce que los <code>Struct</code>s se parecen mucho a los objectos de la
Programación Orientada a Objetos. Y también nos advierte que tengamos cuidado,
que no caigamos en la tentación, que nos mantengamos puros, que no mezclemos
paradigmas.</p>

<p><strong>Estructuras de diccionario anidadas</strong></p>

<p>Las <code>Structs</code> se pueden anidar. Se consigue haciendo que el valor de una de las
claves sea otro <code>Struct</code>.</p>

<p>Imagina que tenemos dos <code>Struct</code>s anidadas así:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>report = %BugReport{
</span><span class='line'>  owner: %Customer{
</span><span class='line'>    name: "Dave",
</span><span class='line'>    company: "Pragmatic"
</span><span class='line'>  },
</span><span class='line'>  details: "broken"
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'># se puede acceder a company
</span><span class='line'>company = report.owner.company
</span><span class='line'>
</span><span class='line'># podemos modificarla con la macro put_in
</span><span class='line'>put_in(report.owner.company, "PragProg")</span></code></pre></td></tr></table></div></figure>


<p>Con <code>update_in</code> podemos modificar el valor actual (accesible a través de un
parámetro de la macro). También existen las macros <code>get_in</code> y
<code>get_and_update_in</code></p>

<p>Esas macros también funcionan con mapas y keyword lists. Si en lugar de una
clave o lista de claves, se pasa una función, las macros se convierten en
funciones dinámicas y llamarán a esta función con tres parámetros.</p>

<p><strong>Sets</strong></p>

<p>Actualmente solo hay una implementación de ellos, <code>HashSet</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>one_to_five = Enum.into 1..5, HashSet.new
</span><span class='line'>
</span><span class='line'># comprueba si un valor existe o no
</span><span class='line'>Set.member(one_to_five, 5)
</span><span class='line'>=&gt; true
</span><span class='line'>
</span><span class='line'># concatena varios Set's
</span><span class='line'>three_to_eight = Enum.into 3..8, HashSet.new
</span><span class='line'>Set.union(one_to_five, three_to_eight)
</span><span class='line'>=&gt; #Hashset[ 1, 2, 3, 4, 5, 6, 7, 8]
</span><span class='line'>
</span><span class='line'># qué elementos estań en el primero que no están en el segundo
</span><span class='line'>Set.difference(one_to_five, three_to_eight)
</span><span class='line'>=&gt; #Hashset[ 1, 2 ]
</span><span class='line'>Set.difference(three_to_eight, one_to_five)
</span><span class='line'>=&gt; #Hashset[ 6, 7, 8 ]
</span><span class='line'>
</span><span class='line'># qué valores están en ambos
</span><span class='line'>Set.intersection(one_to_five, three_to_eight)
</span><span class='line'>=&gt; #Hashset[ 3, 4, 5 ]</span></code></pre></td></tr></table></div></figure>


<h2>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</h2>

<p>Algunos métodos intersantes del módulo <code>List</code>: operadores para concatenar <code>++</code>,
diferencia <code>--</code>, pertenencia <code>in</code> y métodos tales como <code>flatten</code>, <code>foldl</code>,
<code>foldr</code>, <code>zip</code>, <code>unzip</code>, <code>keyfind</code>, <code>keydelete</code>, <code>keyreplace</code>,&#8230;</p>

<p>Además de los métodos que hemos visto de <code>Dict</code>, podemos encontrar: <code>values</code>,
<code>drop</code>, <code>put</code>, <code>merge</code>, <code>get</code>, <code>HashDict.new</code>,&#8230;</p>

<p>El módulo <code>Keyword</code> tiene métodos para manipular listas de tuplas, o keyword
lists: <code>delete</code>, <code>drop</code>, <code>equal?</code>, <code>get_and_update</code>, <code>merge</code>, <code>pop</code>, <code>put</code>,&#8230;</p>

<p>Existen unas macros, que sirven para manipular los valores almacenados en
diccionarios: <code>get_in</code>, <code>update_in</code>, <code>get_and_update_in</code>,&#8230; Si a estas macros
se les pasa una función en lugar de unas claves, se usará esa función para
obtener los valores del diccionario. Debería ser sencillo saber usarlas, pero
todavía no llego a entender exactamente cómo funciona y para qué se podría
utilizar.</p>

<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-02/exercise-01-round-02.exs">exercise-01-round-02.exs</a>: antes se ha implementado (en el libro) la
funcción <code>sum</code>, que suma los elementos de una lista. Se ha utilizado un
acumulador. Implementar lo mismo sin el acumulador</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-02/exercise-02-round-02.exs">exercise-02-round-02.exs</a>: escribir una función <code>mapsum</code> que acepte una
lista y una función, de forma que aplique la función a cada elemento y sume
los resultados</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-02/exercise-03-round-02.exs">exercise-03-round-02.exs</a>: escribir una función <code>max(list)</code> que devuelva el
máximo valor de la lista</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-02/exercise-04-round-02.exs">exercise-04-round-02.exs</a>: implementar el cifrado César, <code>caesar(list, n)</code>,
donde <code>list</code> es una lista de carácteres (es decir, una cadena con comillas
simples <code>'cadena'</code>) y que sea circular, cuando sobrepase <code>z</code>, que vuelva a la
<code>a</code>.</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-02/exercise-05-round-02.exs">exercise-05-round-02.exs</a>: escribir una función <code>span(from, to)</code> que
devuelva una lista de números desde <code>from</code> hasta <code>to</code>.</li>
</ul>


<h2>Enseñar lo aprendido</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta el siguiente asalto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Software Craftsman]]></title>
    <link href="http://rchavarria.github.io/blog/2016/03/15/the-software-craftsman/"/>
    <updated>2016-03-15T22:08:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2016/03/15/the-software-craftsman</id>
    <content type="html"><![CDATA[<h6>de Sandro Mancuso</h6>

<p><img class="left" src="http://www.informit.com/ShowCover.aspx?isbn=0134052501" width="230" height="295" title="The Software Craftsman" ></p>

<h3>Por qué lo he leído</h3>

<p>Me encanta programar, me encanta escribir software, escribir código. Me encanta
resolver problemas, puzles. Me encanta la tecnología. Y me encanta hacer las
cosas bien, poner cariño en lo que hago. La ideología de Software Craftsmanship
va de todo esto. Y me gusta la metáfora. Mi padre es carpintero, artesano, y me
gustaría poner el mismo cuidado en mi trabajo que él pone en el suyo. La
excelencia técnica es lo que más me gusta del desarrollo software.</p>

<!-- more -->


<h3>Qué esperaba</h3>

<p>Me esperaba un libro donde se hablara de buenas prácticas, de ningún lenguaje
de programación en particular, si no de todos en general. De qué significa ser
un artesano, de dedicar tu vida a una profesión, de hacer lo que te gusta, de
pasión, de profesionalidad.</p>

<p>Esperaba consejos sobre qué hacer, qué no hacer, a quién considerar un modelo.
¿Una guía paso a paso de cómo ser considerado un craftsman? Nooo, pero sí
muchas acciones que me acercaría a ello.</p>

<h3>Qué encontré</h3>

<p>Todo eso y más. Aparte de todo lo esperado, Sandro tiene muchísimas
<em>batallitas</em> que contar. No solamente encontré conceptos ampliamente aceptados,
también encontré multitud de experiencias personales de una persona que ha
trabajado y trabaja muy duro para hacer de la profesión una profesión mucho
mejor.</p>

<p>Un capítulo interesantísimo es el que trata sobre la historia del Software
Craftsmanship.</p>

<h3>Conclusiones</h3>

<p>Sandro ha escrito un libro espectacular y soberbio. El libro cubre el concepto
de Craftsmanship de arriba a abajo y está ejemplificado con experiencias
personales. El libro está recomendado por muchísimo profesionales muy valorados
en la industria del software, y con razón. Es un placer leerlo.</p>

<p>De acuerdo, el tema me interesa, y me apasiona, así que yo encuentro normal que
el libro me haya encantado. Lo recomendaría a todos aquellos que estén
preocupados por escribir software de calidad, para aquellos que les preocupe
los aspectos técnicos del desarrollo del software.</p>

<h3>Qué he aprendido</h3>

<p>Escribir temas técnicos en tu blog ayudarán a quien venga después de ti. Porque
encontrarán los conceptos descritos con los mismos ojos que tienen ellos ahora.
Incluso si programadores más experimentados han escrito sobre el tema
anteriormente, siempre merece la pena escribir sobre lo que estamos aprendiendo
en este momento.</p>

<p>Es muy fácil decir que un software está muy mal escrito. Es más fácil quejarse,
o incluso reírse del autor. Pero la pregunta es: eres lo suficientemente bueno
como para hacerlo mejor?</p>

<p>¿Qué motiva al trabajor del conocimiento? <strong>Autonomía</strong>, <strong>maestría</strong> y
<strong>propósito</strong>.</p>

<h3>Frases que me gustaría recordar</h3>

<blockquote><p>Sin excelencia técnica, cualquier proyecto software será una experiencia
dolorosa, frustrantte y cara.</p></blockquote>

<!-- -->


<blockquote><p>Las metodologías ágiles ayudan a las empresas a hacer lo correcto, mientras
que Software Craftsmanship ayuda a los programadores y empresas a hacer las
cosas de la forma correcta.</p></blockquote>

<!-- -->


<blockquote><p>Software Craftsmanship es poner toda la responsabilidad, profesionalidad,
pragmatismo y orgullo de vuelta al desarrollo de software.</p></blockquote>

<!-- -->


<blockquote><p>Descubrimiento deliberado: hay que intentar expandir el conocimiento que
tenemos en lo que estemos trabajando, aunque creamos que lo conocemos siempre
habrá algún asunto que podemos explorar. Debemos exponernos constantemente a
situaciones donde podamos aprender algo nuevo acerca del contexto en el que
estamos.</p></blockquote>

<!-- -->


<blockquote><p>Incluso teniendo tiempo, algunos programadores deciden no automatizar sus
tests. <strong>Esto es ser egocéntrico</strong>. Sólo piensa en sus tareas, no en el resto
de la gente involucrada en el proyecto y todo el tiempo que les consumirá no
tener tests.</p></blockquote>

<!-- -->


<blockquote><p>Un código limpio y mantenible permite a los programadores ir rápido y reducir
las probabilidades de introducir bugs.</p></blockquote>

<!-- -->


<blockquote><p>¿Qué motiva al trabajor del conocimiento? Autonomía, maestría y propósito.</p></blockquote>

<!-- -->


<blockquote><p>En lugar de decir a los demás qué hacer, los software craftsmen se sientan y
trabajan con otros desarrolladores, compartiendo su conocimiento, experiencia
y pasión. Los software craftsman están deseando compartir las cosas que hacen
para mejorar ellos mismos.</p></blockquote>

<!-- -->


<blockquote><p>Ser buenos en lo que hacemos, ser capaces de comunicarlo claramente, y lo más
importante, ser capaces de generar confianza, son habilidades esenciales para
cualquier desarrollador que esté dispuesto a liderar cambios.</p></blockquote>

<!-- -->


<blockquote><p>Lo que distingue a grandes programadores de los mediocres es cómo hacen que
el software funcione, no si el software funciona o no, si no el cómo.</p></blockquote>

<!-- -->


<blockquote><p>Sobre craftsmanship y pragmatismo: TDD no hace que los programadores vayan
más lentos. Escribir el código no es el cuello de botella. Lo que sí que lo
es es aprender y dominar una nueva habilidad, práctica o tecnología.</p></blockquote>

<!-- -->


<blockquote><p>No tengas miedo de ser <em>viejo</em> y seguir programando. No tengas miedo de hacer
lo que te gusta.</p></blockquote>

<!-- -->


<blockquote><p>Para muchos programadores, buscar un trabajo es solo una forma de vender sus
habilidades al mejor postor. Para profesionales que están interesados en una
carrera larga y próspera, un trabajo es algo más que eso. Es una inversión
constante en sus carreras. Aparte de las cosas por las que se nos paga,
deberíamos invertir toda nuestra dedicación, pasión, compromiso y
conocimiento que adquirimos fuera del trabajo en hacer nuestro actual entorno
de trabajo un lugar mejor.</p></blockquote>

<!-- -->


<h3>Recursos relacionados</h3>

<ul>
<li><a href="https://github.com/rchavarria/blog-post-incubator/blob/master/published-book-notes/the-software-craftsman-by-sandro-mancuso.markdown">Notas tomadas sobre The Software Craftsman</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Elixir: primer asalto]]></title>
    <link href="http://rchavarria.github.io/blog/2016/02/09/elixir-primer-asalto/"/>
    <updated>2016-02-09T21:57:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2016/02/09/elixir-primer-asalto</id>
    <content type="html"><![CDATA[<p>Éste es el primer asalto de mi aprendizaje de <a href="http://elixir-lang.org/">Elixir</a>. En él, no espero
resolver problemas súper complicados, es un primer contacto con el lenguaje. Me
conformaré con ser capaz de escribir un programa algo más complicado que un
simple hola mundo. En este primer asalto, lucho con tipos de datos, funciones
(anónimas y con nombre), pattern matching, claúsulas de guarda y módulos.</p>

<p>En estos asaltos, intentaré seguir los siguientes pasos:</p>

<ul>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido</li>
</ul>


<p><img class="center" src="http://rchavarria.github.io/images/2016/touch-gloves-derived-small.png"></p>

<div style="text-align: center">
  <span style="font-size: 60%">
Imagen basada en <a href="https://flic.kr/p/awy1vc">Touch Gloves</a> de <a href="https://www.flickr.com/photos/kaiban/">Jack Zallum</a>, <a href="https://creativecommons.org/licenses/by-nc/2.0/">algunos derechos reservados</a>, licencia: <a href="https://creativecommons.org/licenses/by-nc/2.0/legalcode">CC BY-NC 2.0</a>
  </span>
</div>




<!-- more -->


<h2>Aprender lo suficiente para comenzar</h2>

<p><strong>Instalación</strong></p>

<p>Instalar la máquina virtual de Erlang y el entorno de Elixir es extremadamente
sencillo. Aquí están los comandos para hacerlo en una máquina con Ubuntu como
sistema operativo. En la <a href="http://elixir-lang.org/install.html">documentación de Elixir</a> hay instrucciones para otros
sistemas operativos.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ wget https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb
</span><span class='line'>$ sudo dpkg -i erlang-solutions_1.0_all.deb
</span><span class='line'>$ sudo apt-get update
</span><span class='line'>$ sudo apt-get install esl-erlang
</span><span class='line'>$ sudo apt-get install elixir</span></code></pre></td></tr></table></div></figure>


<p><strong>Editores</strong></p>

<p>La comunidad de Elixir ha creado plugins para los editores de código más
famosos, entre ellos <a href="http://www.vim.org/">Vim</a>, que utilizo para mis <a href="http://rchavarria.github.io/pet-projects/">proyectos personales</a>.</p>

<p>Instalar el plugin <a href="https://github.com/elixir-lang/vim-elixir">vim-elixir</a> en Vim es facilísimo si instalas plugins con
pathogen:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git clone https://github.com/elixir-lang/vim-elixir.git ~/.vim/bundle/vim-elixir</span></code></pre></td></tr></table></div></figure>


<p><strong>Herramientas</strong></p>

<p><code>iex</code> es una herramienta de tipo REPL (read, evaluate, print, loop), que nos
permite ejecutar código Elixir de forma rápida. El comando <code>iex &lt;fichero.exs&gt;</code>
compila un script de Elixir y lo carga en la herramienta. Si ya estamos dentro
de ella, el comando para compilar el código Elixir de un fichero sería <code>c
"&lt;fichero exs&gt;"</code>.</p>

<p><strong>Pattern matching</strong></p>

<p>El operador <code>=</code> es muy diferente a lo que esperamos de él los que estamos
acostumbrados a la programación orientada a objetos. Tiene una apariencia
similar, pero no se comporta de la misma forma. Con este operador, Elixir trata
de hacer coincidir los valores de la izquierda con los valores de la derecha.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = 2
</span><span class='line'>[a, b, a] = [1, 2, 1]
</span><span class='line'>[^a, b] = [2, 3]
</span><span class='line'>[a, b, c] = [1, 2, [3, 4, 5]]   # c vale [3, 4, 5]</span></code></pre></td></tr></table></div></figure>


<p><strong>Inmutabilidad</strong></p>

<p>¿Es eficiente devolver una copia de los datos? En los lenguajes funcionales, no
se modifican los datos, se devuelve una copia de ellos transformados. Parece
ineficiente, pero es todo lo contrario. Al no modificarse los originales, éstos
pueden compartirse por muchas variables, y pueden estar tranquilos, ya que no
se va a modificar. En los lenguajes no funcionales, se devuelve una copia (no
eficiente), en los funcionales, en realidad no se devuelve una copia, se
comparte todo lo que se puede. Por lo que es más eficiente.</p>

<p>¿Qué pasa con el recolector de basura? ¿Consume muchos recursos para deshacerse
de todos esos datos transformados que ya no se utilizan? No consume mucho, en
Elixir (en Erlang en realidad), hay muchos procesos, cada uno con un <em>heap</em>
distinto, por lo que el heap es más pequeño que en otros lenguajes, y el
recolector de basura se ejecuta bastante más rápido.</p>

<p><strong>Tipos de datos</strong></p>

<p>Y por fin algo de código:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># enteros
</span><span class='line'>this_is_an_int = 1234
</span><span class='line'>this_is_an_int = 0xcafe    # admite hexadecimal
</span><span class='line'>this_is_an_int = 0o765     # octal
</span><span class='line'>this_is_an_int = 0b01010   # binario
</span><span class='line'>this_is_an_int = 1_000_000
</span><span class='line'>
</span><span class='line'># en coma flotante
</span><span class='line'>this_is_a_float = 1.0
</span><span class='line'>this_is_a_float = 0.245
</span><span class='line'>this_is_a_float = .342        # error
</span><span class='line'>this_is_a_float = 314159.0e-5
</span><span class='line'>
</span><span class='line'># rangos
</span><span class='line'>this_is_a_range = 1..100
</span><span class='line'>
</span><span class='line'># expresiones regulares
</span><span class='line'>this_is_a_regexp = ~r{regexp}options
</span><span class='line'>
</span><span class='line'># tuplas
</span><span class='line'>this_is_a_tuple = { :ok, 42, "next" }
</span><span class='line'>
</span><span class='line'># listas: se parecen a los arrays de otros lenguajes, pero no
</span><span class='line'>#lo son. Son estructuras enlazadas. Una lista o está vacía, o
</span><span class='line'>#contiene un head y un tail, donde tail es otra lista
</span><span class='line'>this_is_a_list = [ 1, 2, 3 ]
</span><span class='line'>
</span><span class='line'># mapas: lista de parejas clave/valor 
</span><span class='line'>this_is_a_map = %{ key =&gt; value, key =&gt; value }
</span><span class='line'># si las claves son Atoms, se puede escribir
</span><span class='line'>this_is_a_map = %{ red: 0xFF0000, green: 0x00FF00, blue: 0x0000FF }
</span><span class='line'>
</span><span class='line'># binarios: para acceder a datos como una secuencia de bits y bytes (para muy bajo nivel)</span></code></pre></td></tr></table></div></figure>


<p>Hay otros tipos de datos, como los PIDs (referencias a procesos locales o
remotos) o los puertos (referencias a recursos sobre los cuales leeremos o
escribiremos).</p>

<p>Un tipo de datos muy interesante (y que yo personalmente no conocía) son los
<em>Atoms</em>: constantes representando el nombre de algo. Su nombre es su valor. Dos
Atoms son igules si tienen el mismo nombre, vengan de donde vengan (incluso de
máquinas diferentes)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># atoms
</span><span class='line'>this_is_an_atom = :fred
</span><span class='line'>this_is_an_atom = :is_binary?
</span><span class='line'>this_is_an_atom = :var@32
</span><span class='line'>this_is_an_atom = :&lt;&gt;
</span><span class='line'>this_is_an_atom = :"lo john silver"</span></code></pre></td></tr></table></div></figure>


<p>Hay dos estructuras muy similares, la lista de palabras clave: <code>[red: 0xFF000,
green: 0x00FF00]</code>, que se transforma en <code>[{:red, 0xFF0000}, {:green,
0x00FF00}]</code> y un mapa <code>%{red: 0xFF000, green: 0x00FF00}</code>. Se recomienda usar la
lista de palabras clave para pasar parámetros y usar los mapas cuando se
necesite un array asociativo.</p>

<p>No hemos dicho nada de las cadenas. Pertenecen al tipo <em>Binario</em>. Existe
interpolación de cadenas, con <code>#{...}</code> se evalúa el código de dentro y se
formatea la cadena con el valor obtenido.</p>

<p><strong>Funciones anónimas</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sum = fn (a, b) -&gt; a + b end
</span><span class='line'>sum.(2, 3)   # devuelve 5</span></code></pre></td></tr></table></div></figure>


<p>Las funciones pueden devolver otras funciones. Las funciones recuerdan su
entorno original. Forman lo que se conoce como <em>closures</em>. Me recuerda mucho a
las funciones de JavaScript en este aspecto.</p>

<p>Existe una forma de crear funciones anónimas de una forma muy concisa, con el
operador <code>&amp;...</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sum = fn (a, b) -&gt; a + b end
</span><span class='line'>sum2 = &(&1 + &2)   # idéntica a la función anterior
</span><span class='line'>
</span><span class='line'># devuelve lista con dos elementos: doble del primer parámetro, y cuadrado del mismo
</span><span class='line'>returns_a_list = &[2 * &1, &1 * &1]
</span><span class='line'>
</span><span class='line'># esta notación viene muy bien para pasar funciones por parámetro
</span><span class='line'>Enum.map [1, 2, 3] &(&1 * &1)   # devuelve [1, 4, 9]</span></code></pre></td></tr></table></div></figure>


<p>Es normal ver la definición de una función como <code>&amp;map/2</code>, donde <code>map</code> es el
nombre de la función y <code>2</code> es el <em>arity</em>, el número de parámetros de la misma.</p>

<p><strong>Módulos, funciones con nombre y funciones privadas</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defmodule Times do
</span><span class='line'>  ## define una función en una única línea
</span><span class='line'>  def double(n), do: n * 2
</span><span class='line'>
</span><span class='line'>  ## define una función en varias líneas
</span><span class='line'>  def triple(n) do
</span><span class='line'>    n * 3
</span><span class='line'>  end
</span><span class='line'>
</span><span class='line'>  ## define una función privada
</span><span class='line'>  defp quadruple(n) do: n * 4
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p>Las funciones con nombre pueden tener varios cuerpos. Eso ayuda a utilizar
<em>pattern matching</em> a la hora de implementar una solución.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defmodule Factorial do
</span><span class='line'>  # el factorial de 0, siempre es 1, esta definición es quien para la recursividad
</span><span class='line'>  def of(0), do: 1
</span><span class='line'>
</span><span class='line'>  # el factorial de cualquier otro número, es recursivo
</span><span class='line'>  def of(n), do: n * factorial(n - 1)
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Factor.of(5)
</span><span class='line'>  # =&gt; 120</span></code></pre></td></tr></table></div></figure>


<p>También, las definiciones pueden tener claúsulas de guarda, mediante <code>when
&lt;condition&gt;</code>, lo que ayuda a tener un pattern matching más específico.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defmodule Guard do
</span><span class='line'>  def what_is(x) when is_number(x) do
</span><span class='line'>    IO.puts "#{x} is a number"
</span><span class='line'>  end
</span><span class='line'>  def what_is(x) when is_list(x) do
</span><span class='line'>    IO.puts "#{x} is a list"
</span><span class='line'>  end
</span><span class='line'>  def what_is(x) when is_atom(x) do
</span><span class='line'>    IO.puts "#{x} is an atom"
</span><span class='line'>  end
</span><span class='line'>end</span></code></pre></td></tr></table></div></figure>


<p><strong>El operador tubería (pipe)</strong></p>

<p>El operador <code>|&gt;</code> toma el resultado de una función y lo pasa como primer
parámetro de la segunda función. <code>String.reverse "foobar" |&gt; String.capitalize</code></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>filing = DB.find_customers
</span><span class='line'>           |&gt; Orders.for_customers
</span><span class='line'>           |&gt; sales_tax(2016)
</span><span class='line'>           |&gt; prepare_filing
</span><span class='line'>      
</span><span class='line'>list
</span><span class='line'>  |&gt; sales_taxes(2016)
</span><span class='line'>  |&gt; prepare_filing
</span><span class='line'>
</span><span class='line'># es lo mismo que llamar
</span><span class='line'>prepare_filing( sales_taxes(list, 2016) )</span></code></pre></td></tr></table></div></figure>


<p><strong>Parámetros por defecto</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>defmodule DefaultParams do
</span><span class='line'>  def func(p1, p2 \\ 2) do
</span><span class='line'>    IO.inspect [p1, p2]
</span><span class='line'>  end
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>Example.func("a", "b")
</span><span class='line'>  # =&gt; ["a", "b"]
</span><span class='line'>
</span><span class='line'>Example.func("a")
</span><span class='line'>  # =&gt; ["a", 2]</span></code></pre></td></tr></table></div></figure>


<p><strong>Librerías</strong></p>

<p>Se pueden buscar módulos y librerías ya implementados para realizar ciertas
tareas que necesitemos, para ello, está la documentación de <a href="http://elixir-lang.org/docs.html">librerías de Elixir</a>.
Si no encontramos ahí lo que buscamos, lo podemos buscar en <a href="http://erlang.org/doc/">librerías de Erlang</a>.</p>

<h2>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</h2>

<p><strong>¿Qué hace <code>^</code> en el pattern matching?</strong></p>

<p>El operador <code>^</code> obliga a que el valor actual de una variable coincida con el
valor en la expresión de <em>pattern matching</em>. En caso de no coincidir, se
producirá un error.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a = 2
</span><span class='line'>[^a, b] = [2, 3]  ## no hay error, `a` valía `2` y aquí coinciden
</span><span class='line'>[^a, b] = [1, 3]  ## error</span></code></pre></td></tr></table></div></figure>


<p><strong>Tuplas, <em>keyword list</em> y mapas</strong></p>

<p>Las <em>keyword list</em> son una lista usadas muy a menudo, tienen la forma:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>keyword_list = [ red: 0xFF0000, green: 0x00FF00, blue: 0x0000FF ]</span></code></pre></td></tr></table></div></figure>


<p>Pero no es más que una forma simplificada de escribir una lista de tuplas,
donde el primer valor de cada una de ellas es un Atom:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tuple_list = [ {:red, 0xFF000}, {:green, 0x00FF00}, {:blue, 0x0000FF} ]</span></code></pre></td></tr></table></div></figure>


<p>Una estructura muy parecida a estas son los mapas, que no son más que un
conjunto de parejas clave-valor:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>a_map = %{ :red =&gt; 0xFF000, :green =&gt; 0x00FF00, :blue =&gt; 0x0000FF }</span></code></pre></td></tr></table></div></figure>


<h2>Aprender lo suficiente para hacer algo de utilidad</h2>

<ul>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-01/round-01-exercise-01.exs">round-01-exercise-01.exs</a>: utilizar varios cuerpos de una función y
recursividad para implementar una función que calcule la suma de <code>1</code> hasta
<code>n</code></li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-01/round-01-exercise-02.exs">round-01-exercise-02.exs</a>: implementar la función <code>gcd(x, y)</code> que calcule el
máximo común divisor. Matemáticamente: <code>gcd(x, y)</code> es <code>x</code> si <code>y</code> es cero y es
<code>gcd(y, rem(x, y))</code> en caso contrario</li>
<li><a href="https://github.com/rchavarria/learning-elixir/blob/master/code/round-01/round-01-exercise-03.exs">round-01-exercise-03.exs</a>: crear el juego <em>Estoy pensando en un número entre
el 1 y el 100</em>: rangos, div(a, b), claúsulas de guarda, pattern matching en
rangos: <code>a..b = 4..8</code>, funciones privadas</li>
</ul>


<h2>Enseñar lo aprendido</h2>

<p>Aquí está, este post, mis notas, mis pensamientos, mis dudas y mi código. Hasta el siguiente asalto.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[El código fuente no es suficientemente grande para los dos]]></title>
    <link href="http://rchavarria.github.io/blog/2016/01/31/codigo-no-suficientemente-grande-para-dos/"/>
    <updated>2016-01-31T20:29:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2016/01/31/codigo-no-suficientemente-grande-para-dos</id>
    <content type="html"><![CDATA[<p>En biología, el concepto de repetirse a uno mismo es fundamental. Ninguno de
nosotros existiríamos si los primeros organismos unicelulares no hubieran sido
capaces de desarrollar el mecanismo de mitosis, la capacidad de multiplicarse,
de crear réplicas de sí mismos. Para los niños, la repetición también es
importante. Aprenden por imitación, repitiendo lo que observan en el
comportamiento de los demás.</p>

<p><img class="right" src="http://rchavarria.github.io/images/2016/mitosis.png"></p>

<p>A la hora de desarrollar software, la repetición no está vista con tan buenos
ojos. Por ejemplo, se ha dado un nombre despectivo a los programas que crean
copias de sí mismos, como los <em>virus</em>. Por otro lado, la duplicidad de código
de una aplicación produce muchos quebraderos de cabeza a aquellos de nosotros
que nos dedicamos al software. Para recordárnoslo, contamos con el <strong>principio
<em>D.R.Y., don&#8217;t repeat yourself</em>, o dicho de otro modo, no te repitas a tí mismo</strong>.</p>

<!-- more -->


<blockquote><p>Cada pieza de conocimiento debe tener una representación dentro de un sistema
  única, inequívoca y acreditada ~ <em>C2 Wiki</em> (traducción libre)</p></blockquote>

<p>Normalmente este concepto se cumple cuando hay dos segmentos de código con el
mismo texto, pero no se limita a ello. Puede que existan dos clases que hace
exactamente lo mismo, pero los métodos o las variables tienen distinto nombre.
También puede haber duplicidades en ficheros de configuración, o en la
documentación. Por lo tanto, hay que tener en cuenta que <strong>D.R.Y. no es
duplicidad de texto, si no de conceptos</strong>.</p>

<p>Debemos prestar atención a duplicidades en los tests, por ejemplo a la hora de
realizar las verificaciones. En muchas herramientas de testing existen los
<em>custom matchers</em>, que nos ayudan precisamente a reducir estas duplicidades.</p>

<p>J.B.Rainsberger ha escrito mucho sobre el tema, muy relacionado con el libro
<em><a href="https://leanpub.com/4rulesofsimpledesign">4 rules of simple design</a></em>, de Corey Haines, quien al final las reduce a dos
reglas básicas: dar nombre a las abstracciones y eliminar duplicidades creando
nuevas abstracciones. Pero también existen otras técnicas para reducir
conceptos duplicados, como las refactorizaciones <strong>extraer método</strong> y <strong>extraer
clase</strong>, sin olvidar la más usada, la <strong>herencia</strong>, aunque no está muy bien
considerada.</p>

<p>Menos duplicaciones puede significar <strong>mayores niveles de indirección</strong>, lo que
puede hacer que el código sea algo más difícil de leer y seguir la pista,
porque para no duplicar, los detalles están dispersos en distintos lugares. La
<strong>metaprogramación</strong> puede ser también una técnica para eliminar duplicados,
pero hace el código mucho más difícil de leer. Más incluso que la indirección.</p>

<p>En contraposición al principio D.R.Y., está el principio W.E.T. Pensaba que
significaba <strong>W</strong>rite <strong>E</strong>verything <strong>T</strong>wice (escríbelo todo dos veces), pero
también he leído que las siglas pueden significar: <strong>W</strong>e <strong>E</strong>dit
<strong>T</strong>erribly, o <strong>W</strong>e <strong>E</strong>njoy <strong>T</strong>yping (mucho más divertidos, ¿verdad?).</p>

<p>Por último, algo que me ha parecido fabuloso, una frase que describe la
programación orientada a objetos, donde recuerda los conceptos de encapsulación
(<em>shy</em>), eliminar duplicados (<em>dry</em>) y paso de mensajes entre objetos (<em>tell, don&#8217;t
ask</em>):</p>

<blockquote><p>Keep it shy, dry, and tell the other guy</p></blockquote>

<h2>Recursos</h2>

<ul>
<li>Charla <a href="https://www.youtube.com/watch?v=Is8ThG6Fetg">Mantaining balance while reducing duplication</a>, de David Chelimsky</li>
<li>Dave Thomas en CodeNewbie podcast: en la <a href="http://www.codenewbie.org/podcast/the-pragmatic-programmer-i">parte 1</a> cuenta la historia de cómo
nació el libro <em>The pragmatic programmer</em>, sobre cómo decidieron hacer todo
ellos mismos y cómo de ahí nació su editorial. En la <a href="http://www.codenewbie.org/podcast/the-pragmatic-programmer-part-ii">parte 2</a> me ha llamado la
atención su opinión sobre las Katas. Comenta que lo importante de la kata no es
el ejercicio en sí, sino la repetición, hacer el ejercicio sin pensar en la
solución. De esta forma hacemos que nuestro cerebro reconozca patrones y
aprendamos sin darnos cuenta.</li>
<li><a href="http://www.c2.com/cgi/wiki?DontRepeatYourself">DontRepeatYourself</a> en la C2 Wiki</li>
<li>Artículo sobre <a href="http://blog.thecodewhisperer.com/2013/12/07/putting-an-age-old-battle-to-rest/">los 4 elementos del diseño simple</a>, de J.B.Rainsberger</li>
<li>Charla de la CAS2015: <a href="http://www.slideshare.net/programania/software-economics-tradeoffs-of-decoupled-softwre">Economía del software y dependencias</a>, de Luis Artola
y Guillermo Gutiérrez</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Aprendiendo Elixir]]></title>
    <link href="http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir/"/>
    <updated>2016-01-17T16:39:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2016/01/17/aprendiendo-elixir</id>
    <content type="html"><![CDATA[<p><img class="left" src="http://rchavarria.github.io/images/2016/elixir.png" width="200" height="266"></p>

<p>No es una propósito de año nuevo ni nada, pero me apetece aprender un lenguaje
puramente funcional por el simple hecho de aprender. He estado dudando entre
Clojure y Elixir. Al final me he decidido por Elixir porque lo <em>venden</em> como
divertido y porque sigo a varias personas en Twitter que están haciendo lo
mismo (durante la redacción de este post me he enterado que hay un meetup nuevo
del lenguaje en Madrid, <a href="http://www.meetup.com/Madrid-Elixir/">Madrid |> Elixir</a>), por lo que podré compartir lo
aprendido. Dicen de Elixir que se parece mucho a Ruby, y que es un lenguaje
moderno que se ejecuta la máquina virtual de Erlang. Con esos <em>hermanos
mayores</em> promete mucho, la verdad.</p>

<!-- more -->


<p>Para ir aprendiendo el lenguaje, voy a poner en práctica el proceso de
aprendizaje que descubrí leyendo el libro <a href="http://rchavarria.github.io/blog/2015/11/08/soft-skills/">Soft Skills</a>, de John Sonmetz:</p>

<ol>
<li>Entender la habilidad que se quiere aprender</li>
<li>Delimitar el ámbito</li>
<li>Definir qué se va a considerar como éxito</li>
<li>Encontrar recursos</li>
<li>Crear un plan de aprendizaje</li>
<li>Filtrar los recursos</li>
<li>Aprender lo suficiente para comenzar</li>
<li>Experimentar, jugar, buscar puntos desconocidos, hacerse preguntas</li>
<li>Aprender lo suficiente para hacer algo de utilidad</li>
<li>Enseñar lo aprendido, y repetir desde el paso 7</li>
</ol>


<p>Antes de llegar a los puntos 7-10, que son como un bucle, ahí van los primeros.</p>

<h2>¿Qué habilidad quiero aprender?</h2>

<p><strong>Quiero aprender a programar en Elixir</strong>. La frase es sencilla, pero ¿qué
significa? ¿Significa que solamente quiero aprender la sintaxis? No, eso no es
aprender un lenguaje de programación. ¿Significa que debo aprender todas las
herramientas, frameworks, librerías, sistemas,&#8230;? Tampoco. Eso es imposible.
He programado durante años en Java o JavaScript y lo que desconozco de ellos es
mucho más de lo que conozco.</p>

<p>Así pues, delimitaré el aprendizaje a conocer lo suficientemente el lenguaje y
su ecosistema para ser capaz de escribir la parte servidora de una aplicación
web.</p>

<h2>¿Qué voy a considerar como éxito?</h2>

<p>Tengo que poner algún límite. Creo que algo realmente interesante sería
considerar un éxito poder <strong>desarrollar la parte servidora de una aplicación web</strong>,
una API REST o algo así, que gestionara algún tipo de recurso (usuarios,
tareas,&#8230; todavía no lo se). Si además soy capaz de desplegar la aplicación en
alguna plataforma como Heroku o similar, el éxito sería rotundo.</p>

<p>No me planteo nada de conectarlo a una base de datos, porque por ahora no he
leído nada acerca de ello. Supongo que habrá alguna posibilidad, pero por ahora
lo voy a dejar fuera.</p>

<h2>Recursos</h2>

<p>Esta es una lista inicial de recursos que voy a ir consumiendo:</p>

<ul>
<li>Web <a href="http://elixir-lang.org/">elixir-lang.org</a>. Web oficial. Creo que me puede servir para tener
documentación rápida de forma online.</li>
<li>Libro <a href="https://pragprog.com/book/elixir/programming-elixir">Programming Elixir, de Dave Thomas</a>. Parece ser el libro de
referencia, así que es un recurso indispensable.
<a href="https://forums.pragprog.com/forums/322">Foros de discusión del libro</a>.</li>
<li>Libro <a href="https://pragprog.com/book/phoenix/programming-phoenix">Programming Phoenix</a>, también de la editorial The Pragmatic
Programmer. Phoenix es un framework para desarrollar aplicaciones web con
Elixir (<a href="https://twitter.com/_rubenfa/status/689356164082049024">recomendado por Rubén Fernández</a>, gracias).</li>
<li><a href="https://github.com/elixir-lang/elixir">Código elixir en GitHub</a>. Código, código, código.</li>
<li>Screencasts <a href="http://elixirsips.com/">elixir sips</a>. Videos sobre Elixir, muchos de ellos bajo
suscripción.</li>
<li><a href="https://www.learnelixir.tv/episodes">LearnElixitTV</a>. Más videos sobre Elixir, en este caso son de pago pero no de
suscripción.</li>
<li><a href="http://elixirdose.com/">Elixir Dose</a>. Un blog sobre este lenguaje de programación.</li>
<li>Blog de <a href="http://benjamintan.io/blog/">Benjamin Tan</a>. Un blog sobre Ruby y Elixir del autor de un libro
sobre Elixir. Parece venir del mundo Ruby. Tiene una charla en una
conferencia de Ruby que hay que ver.</li>
<li>Track de Elixir de <a href="http://exercism.io/languages/elixir">exercism.io</a>, una plataforma social donde resolver
problemas y comentar las soluciones del resto de usuarios.</li>
<li><a href="https://github.com/niftyn8/elixir_style_guide">Guía de estilo</a> para programar en Elixir. De obligado conocimiento para que
tu código sea más legible por la comunidad.</li>
<li><a href="https://www.youtube.com/watch?v=fklep3sUSWo">The climb experiencing the rise of Elixir from the inside</a>: una charla
impresionante de Dave Thomas y Bruce Tate sobre Elixir, comparando el
desarrollo de un lenguaje con subir al Everest. Todos somos Sherpas y debemos
compartir la carga (de José Valim y su equipo) para hacer de Elixr, Phoenix y
Elm un gran lenguaje y una gran plataforma. También hablan de QWAN (quality
without a name) en Elixir. <em>QWAN is two way</em>, nos sentimos inspirados por la
calidad</li>
</ul>


<p>Comparativa entre subir al Everest y desarrollar un lenguaje, Sherpas, todos somos Sherpas, y debemos compartir la carga (de José Valim y su equipo) para hacer de Elixir, Phoenix y Elm un gran lenguaje.</p>

<p>También espero que poco a poco, según vaya necesitando saber más sobre cómo
hacer cosas con el lenguaje, vaya descubriendo blogs y autores acerca del
lenguaje.</p>

<h2>Plan de aprendizaje</h2>

<p>Por ahora no tengo ningún plan. El más básico que tengo es empezar a leer el
libro Programming Elixir y cuando sea capaz de escribir algún programa más
complejo que un <em>Hola mundo</em> empezar a resolver problemas en exercism.io.</p>

<p>A partir de ahí, el tiempo dirá.</p>

<h2>Recursos filtrados</h2>

<p>Creo que no tengo tantos recursos como para filtrarlos. Empezando con el libro,
con exercism.io y de vez en cuando la web oficial del lenguaje puede ser
suficiente para ir cogiendo ritmo.</p>

<h2>Asaltos</h2>

<ol>
<li><a href="http://rchavarria.github.io/blog/2016/02/09/elixir-primer-asalto/">Primer asalto</a>: tipos, funciones, pattern matching y módulos</li>
<li><a href="http://rchavarria.github.io/blog/2016/03/27/elixir-segundo-asalto/">Segundo asalto</a>: listas, diccionarios, structs y sets</li>
<li><a href="http://rchavarria.github.io/blog/2016/05/01/elixir-tercer-round/">Tercer asalto</a>: más colecciones, módulos <code>Enum</code>, <code>Stream</code> y <em>comprehensions</em></li>
<li><a href="http://rchavarria.github.io/blog/2016/08/10/elixir-cuarto-asalto/">Cuarto asalto</a>: tipos de datos binarios, cadenas, <code>String</code>s y <em>sigils</em></li>
<li><a href="http://rchavarria.github.io/blog/2016/09/11/elixir-quinto-asalto/">Quinto asalto</a>: estructuras de control: <code>if</code>, <code>unless</code>, <code>cond</code> y <code>case</code></li>
<li><a href="http://rchavarria.github.io/blog/2016/09/14/elixir-sexto-asalto/">Sexto asalto</a>: herramientas auxiliares como <code>mix</code>, <code>ExUnit</code>, <code>ExDoc</code>,&#8230;</li>
<li><a href="http://rchavarria.github.io/blog/2016/09/18/elixir-septimo-asalto/">Séptimo asalto</a>: procesos, concurrencia, monitorización de procesos</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Artículo técnico: Getting testy]]></title>
    <link href="http://rchavarria.github.io/blog/2015/12/28/getting-testy/"/>
    <updated>2015-12-28T21:33:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/12/28/getting-testy</id>
    <content type="html"><![CDATA[<p><img class="right" style="width: 250px" src="http://rchavarria.github.io/images/2015/getting-testy.svg"/></p>

<p>Dando una vuelta por Twitter descubrí una serie de artículos sobre testing
titulados <a href="http://randycoulman.com/blog/2015/08/04/getting-testy-redux/">Getting testy</a>, de <a href="http://randycoulman.com/">Randy Coulman</a>. Parecían artículos interesantes,
pero era mucha lectura para ser tratada como un blog. Así que decidí leerlo
como si fuera un libro. Aunque un libro cortito.</p>

<p>Es una serie de artículos muy recomendable sobre TDD y cómo escribir buen
software. Trata muchísimos temas relacionados con escribir tests para nuestro
código. Conceptos sencillos y conceptos avanzados. Diferencias entre los dos
estilos principales de hacer TDD. Qué hacer y qué no hacer a la hora de
escribir tests. Y un sinfín de cosas más. Todas interesantísimas.</p>

<!-- more -->


<h2>Frases a destacar</h2>

<blockquote><p>A la hora de tomar decisiones entre dos extremos, el autor se fija en los más
  y en los menos de cada extremo y trata de sintetizar las mejores partes de
  cada uno en algo sobre lo que pueda trabajar</p></blockquote>

<!-- -->


<blockquote><p>Los problemas a la hora de testear son una buena indicación de los problemas
  que encontrará el código cliente de esos mismos APIs</p></blockquote>

<!-- -->


<blockquote><p>Los tests de aceptación nos dicen si vamos a <strong>construir el sistema
  correcto</strong>. Los tests de más bajo nivel nos dicen si vamos a <strong>construir el
  sistema correctamente</strong> (build the right thing, build the thing right)</p></blockquote>

<!-- -->


<blockquote><p>No se recomiendan tests que prueben métodos específicos: se deberían testear
  las responsabilidades, no los métodos</p></blockquote>

<!-- -->


<blockquote><p>Guard the borders, not the hinterlands</p></blockquote>

<!-- -->


<blockquote><p>No escribas el test que te fuerza a escribir el código que tu quieres.
  Escribe el test que fuerza a tu objeto a tener las responsabilidades que
  quieres que tenga</p></blockquote>

<h2>Notas tomadas</h2>

<p><strong>Historia y mecanismos</strong></p>

<p><em>Dobles de tests</em> es una analogía de la idea de la situación en la que en una
película de acción, un doble suplanta al actor profesional en una escena
peligrosa</p>

<p><strong>Filosofía</strong></p>

<p>A la hora de tomar decisiones entre dos extremos, el autor se fija en los más y
en los menos de cada extremo y trata de sintetizar las mejores partes de cada
uno en algo sobre lo que pueda trabajar.</p>

<p>Dos escuelas fundamentales de hacer TDD:</p>

<ol>
<li>Statist, Detroit: se enfocan en los objetos de tu sistema, lo que lleva a
escribir tests basados en estado.</li>
<li>Mockist, Londres: se enfocan en los mensajes enviados en el sistema, lo que
lleva a escribir tests basados en mocks (o dobles de tests).</li>
</ol>


<p><em>Nota: existe un vídeo, de <a href="https://twitter.com/searls">Justin Searls</a>, donde compara detalladamente estas
dos escuelas: <a href="https://www.youtube.com/watch?v=aeX5OXO-w30">Comparación escuelas TDD</a></em></p>

<p>Un proceso ingenioso para añadir tests a código que existe actualmente:</p>

<ol>
<li>Comenta el codigo que quieres probar</li>
<li>Escribe un test que falle</li>
<li>descomenta el mínimo código que haga que ese test pase</li>
<li>Refactorizar y repetir</li>
</ol>


<p>No tengas miedo a borrar tests. Es más, hay ocasiones en las que querrás
escribir tests para después borrarlos. En ocasiones, cuando estás escribiendo
un algoritmo complejo, querrás escribir tests para las partes que más tarde
serán privadas. Necesitas probar esos pasos intermedios que te lleven a la
solución. Más tarde, cuando hagas esas partes privadas, podrás borrar los tests
<em>temporales</em>.</p>

<p><strong>Funciones</strong></p>

<p>Deja que los tests guíen tu diseño, especialmente la API pública de tus
objetos. Los problemas a la hora de testear son una buena indicación de los
problemas que encontrará el código cliente de esos mismos APIs.</p>

<p>Haz que cada test <em>se pague</em> a sí mismo. Los tests cuestan tiempo y dinero de
ejecutar y mantener. No escribas tests que no añadan suficiente valor para
sobrepasar esos costes. O escríbelos hasta que consigas tener el código que
buscas. Luego, bórralos.</p>

<p><strong>Abstracciones</strong></p>

<p>Cuando crees abstracciones en tu código, es importante elegir aquellas que son
de alguna utilidad. Muchas veces escogemos las abstracciones equivocadas y eso
hace nuestro código más confuso para los que vendrán después de nosotros. Esto
me recuerda a una charla de Sandi Metz, en la que recomendaba algo de
duplicación en lugar de una mala abstracción o mala legibilidad
(<a href="http://rchavarria.github.io/blog/2015/10/18/charla-tecnica-all-the-little-things/">All the little things</a>)</p>

<p><strong>Capas</strong></p>

<p>Los tests de aceptación nos dicen si vamos a <strong>construir el sistema correcto</strong>.
Los tests de más bajo nivel nos dicen si vamos a <strong>construir el sistema
correctamente</strong> (build the right thing, build the thing right)</p>

<p><strong>Aceptación</strong></p>

<p>En la mayoría de los sistemas, los tests de la capa más externa son los tests
más lentos que tenemos. Así pues, queremos cuantos menos de ellos mejor, que no
es lo mismo que decir que no los queremos en absoluto.</p>

<p>Cuando usamos una herramienta como Cucumber of Fitnesse, deberíamos ser capaces
de portar nuestra aplicación a un lenguaje de programación completemante
diferente y seguir manteniendo estos tests. Es decir, los tests de aceptación
deben tener su propio lenguaje, el del negocio, el del dominio del cliente que
va a usar el software.</p>

<p>Cuando estés escribiendo tests para la capa más externa de tu sistema,
pregúntate continuamente si esos tests sobrevivirian si cambias
signficativamente la implementación del sistema que están probando.</p>

<p><strong>Outside-in</strong></p>

<p>Si sientes la necesidad de testear detalles internos de una clase,
probablemente es que hay un objeto que está intentando <em>salir</em>.</p>

<p>Trata de no limitar tus pensamientos a los objetos que ya tienes. No tengas
miedo de introducir nuevos objectos si eso mejora el diseño.</p>

<p><strong>APIs</strong></p>

<p>Para aislarnos de sistemas externos (normalmente escritos por terceros),
debemos ocultar el servicio detrás de un interfaz que definamos y controlemos
nosotros.</p>

<p>No se recomiendan tests que prueben métodos específicos: se deberían testear
las responsabilidades, no los métodos. Los detalles de implementación deberían
estar fuera de los tests.</p>

<p><strong>Pasos</strong></p>

<p>Generalmente, es mejor hacer todo el saneamiento, validaciones y
normalizaciones en los bordes del sistema. Protege las fronteras, no el
interior (Guard the borders, not the hinterlands).</p>

<p><strong>¿Por qué?</strong></p>

<p>Por cada verificación que quieras escribir, pregúntate el por qué de dicha
verificación. ¿La razón tiene que ver con detalles de implementación o tiene
que ver con responsabilidades esenciales del código que estás probando? Si es
la primera, párate un poco y recapacita. Si es la segunda, probablemente vayas
en la buena dirección.</p>

<p>Cuando realizamos verificaciones sobre el estado de la aplicaión antes de hacer
nada en nuestros tests, estamos comunicando algo al lector del código. Es
preferible hacer esa comunicación en un tests separado antes que hacer esas
verificaciones una y otra vez, lo que nos llevaría a tener duplicación en
muchos tests</p>

<p>Otro caso en el que puede haber valor al realizar <em>verificaciones de setup</em>
(verificaciones antes de hacer el propio test) es en código legacy.</p>

<p>No escribas el test que te fuerza a escribir el código que tu quieres. Escribe
el test que fuerza a tu objeto a tener las responsabilidades que quieres que
tenga.</p>

<p><strong>Dobles de tests</strong></p>

<p>¿Cómo saber si un doble de test es un colaborador o un detalle interno? Podemos
hacernos las siguientes preguntas: ¿está al mismo nivel de abstracción que el
objeto que estoy probando? ¿tiene su propio ciclo de vida? Si es así,
probablemente es un colaborador y estaría bien utilizar un doble de tests. En
otro caso, podría ser un detalle interno de implementación, donde deberíamos
plantearnos seriamente si usar el doble de test o no.</p>

<p><strong>Antipatrones</strong></p>

<p>Un buen test unitario debería responder a las siglas en inglés <a href="http://agileinaflash.blogspot.de/2009/02/first.html">F.I.R.S.T.</a>:
Fast, Isolated, Repeatable, Self-verifying, Timely.</p>

<p><strong>Legacy</strong></p>

<p>Al escribir tests para código legacy, no nos debería importar si el código está
dando la respuesa correcta. Solo nos interesa si el código está dando la
<strong>misma</strong> respuesta que antes de realizar los cambios.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mi CAS 2015]]></title>
    <link href="http://rchavarria.github.io/blog/2015/12/13/mi-cas-2015/"/>
    <updated>2015-12-13T21:48:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/12/13/mi-cas-2015</id>
    <content type="html"><![CDATA[<p>Me quedé sin chapa. Sin chapa de &#8220;Mi primera CAS&#8221;. Conocí a varias personas que
la llevaban orgullosos. Espero que para ellos significara lo mismo que
significó para mí <a href="http://rchavarria.github.io/blog/2012/11/08/mi-experiencia-en-la-cas2012/">mi primera CAS</a>.</p>

<p>Ésta, como aquella, ha sido una gran experiencia. La de este año ha sido
enooorme, comparada con la de Cáceres. Hemos asistido más de 700 personas. Ha
tenido que ser un trabajo monumental organizarla, así que desde aquí mis
agradecimientos y admiración a todos los que la han hecho posible:
organizadores, patrocinadores y voluntarios. Olé!</p>

<!-- more -->


<p>La conferencia fueron dos intensos días llenos de charlas interesantísimas. Dos
días que saben a poco. Sobretodo porque no he podido disfrutar de las cañas de
después, o las quedadas fuera del evento. Y también porque, a pesar de que
todos los asistentes estuviéramos en la misma sala para tomar café y comer, me
ha resultado imposible entablar conversaciones con todas las personas que
quería. ¡Agotador! Pero muy motivador a la vez.</p>

<p>Sigamos con las charlas a las que asistí, y qué me llevé de ellas:</p>

<h2><a href="http://www.slideshare.net/carlosble/cas2015-opening-improving-the-software">Apertura</a>, <a href="https://twitter.com/carlosble">Carlos Blé</a></h2>

<p>Carlos habló de la necesidad de hablar inglés, no porque sí, si no para
aprender de las fuentes. También habló de la importancia de hablar otro
lenguaje, extraño para los desarrolladores, el de negocio. De esta forma nos
entenderemos mejor ambas partes. Fue una charla muy inspiradora, fenommenal
como apertura. Me quedaría con la frase:</p>

<blockquote><p>Tú eres el único responsable de tu carrera</p></blockquote>

<h2><a href="https://www.youtube.com/watch?v=C6Sy0v19RAc&amp;t=2h14m00s">Your application is not your framework</a>, de <a href="https://twitter.com/ecomba">Enrique Comba</a></h2>

<p>¿Por qué cuando te preguntan por tu applicación dices qué framework estás
usando? Habla sobre qué hace de verdad tu aplicación. Enrique habló de muchos
conceptos alrededor de los frameworks: <em>convention over configuration</em>, mezcla
de lógica de negocio con la lógica impuesta por el framework. ¿Qué beneficios
trae separar la lógica de tu aplicación del framework? Separación de
responsabilidades, velocidad en los tests automáticos y sobretodo claridad en
el <strong>propósito</strong> y <strong>estructura</strong> de tu aplicación.</p>

<h2><a href="http://www.slideshare.net/PeterMarshall10/pete-marshall-casmadrid2015-continuous-delivery-in-legacy-environments">Continuous delivery</a>, de <a href="https://twitter.com/petemar5hall">Peter Marshal</a></h2>

<p>Peter compartió su experiencia en llevar a un equipo desde el desarrollo de una
aplicación <em>a la vieja usanza</em> hasta alcanzar puestas en producción diarias. En
las slides de la presentación encontrarás multitud de consejos para llevarlo a
cabo, pero yo me quedaría con estos conceptos o enseñanzas:</p>

<ul>
<li>La entrega contínua es enfocarse en la excelencia técnica</li>
<li>Conforme avanza el tiempo, el mayor problema de las aplicaciones con
problemas es que los bugs aumentan mientras que las funcionalidades
desplegadas disminuyen.</li>
<li>La clave está en la simplicidad</li>
<li>Lleva su tiempo madurar (equipo, producto, compañía,&#8230;)</li>
</ul>


<h2><a href="http://cas2015.agile-spain.org/charlas/">Building resilient integrations</a>, de <a href="https://twitter.com/cuvuligio">Dave Moore</a></h2>

<p>Esta charla tuvo su parte teórica y su parte práctica. De la parte teórica,
decir que debemos entender que los fallos están en todas partes, por lo que es
nuestro trabajo hacer software que no falle, que sea tolerante a fallos de
sistemas externos. Algunas técnicas para hacerlo podrían ser: tests automáticos
(no mienten, la documentación sí), aislar integraciones que herramientas de
terceros (creando interfaces que las separen de nuestra applicación), utilizar
nuestro propio modelo de datos, política de reintentos de conexión,&#8230;</p>

<p>En el taller de después tuvimos la oportunidad de poner todo esto en prática.
Un taller super divertido.</p>

<h2><a href="http://es.slideshare.net/juanignaciosl/continuous-integration-at-cartodb">Continuous integration in CartoBD</a>, de <a href="https://twitter.com/juanignaciosl">Juan Ignacio Sánchez</a></h2>

<p>Juan Ignacio empezó fuerte, comentando que, aunque hay millones de
herramientas, es el <strong>equipo</strong> quien realmente puede hacer que la integración,
entrega y despliegue contínuo funcionen.</p>

<p>¿Cómo lo hacen en CartoDB? Planeándolo desde antes que la gente entre a
trabajar con ellos, despligando desde el primer día, planes iterativos e
incrementales, tests, code reviews, pull requests, feature toggles, pequeñas
releases a grupos controlados de usuarios (canary releases), posibilidad de
hacer rollback rápidamente (pequeños despliegues llevan a que esto sea
posible), análisis post-mortem de grandes fallos, mucha instrumentación y
monitorización.</p>

<h2><a href="http://www.slideshare.net/lantoli/believe-it-or-not-keynote-cas-2015-55802209">Keynote técnica</a>, de <a href="https://twitter.com/lantoli">Leo Antolí</a></h2>

<p>Leo hizo incapié en lo más profundo de agile y lean: no te creas lo que te
cuenten, pruébalo y si te funciona úsalo, si no te funciona, descártalo. Hay
mucho estudios que dicen que una práctica es X veces mejor. Analiza esos
estudios y te darás cuenta de que son humo. Pon en duda el pair programming,
TDD, mejoras en productividad, code dojos, code retreats, craftsmanship, deuda
técnica, tasa de proyectos software fallidos,&#8230;</p>

<p>Como buena keynote, lo que me llevo de esta charla son pensamientos, dudas,
cuestiones. Debo entender que el software no es el fin, es un medio para
conseguir un fin. Deja de usar números no probados. Cuenta experiencias propias
(no sirven para demostrar nada, pero son algo real). Y sobretodo, mantén un
<strong>espiritu crítico</strong>.</p>

<h2><a href="https://www.youtube.com/watch?v=_CcO9upHiDU&amp;t=9m20s">Keynote viernes</a>, de <a href="https://twitter.com/rachelcdavies">Rachel Davis</a></h2>

<p>Esta keynote trató de introducir cambios, de introducir tiempo para el
aprendizaje. Debemos crear tiempo para ello a lo largo de nuestra semana. No
tengas prisa en introducir cambios, la gente necesita <strong>tiempo</strong>.</p>

<p>De esta keynote quiero recordar dos consejos de Rachel: comparte lo aprendido
(por ejemplo en esta CAS), invierte tiempo en profundizar en lo aprendido.</p>

<h2><a href="https://medium.com/@borillo/el-modelo-de-desarrollo-mete-saca-be17304ad1df#.b0vwf7ben">Escapando del modelo mete-saca</a>, de <a href="https://twitter.com/borillo">Ricardo Borillo</a></h2>

<p>¿Estamos seguros de que lo que quiere el usuario es un simple sistema CRUD? ¿No
hay una forma de aportar más valor? Un CRUD es muy genérico, seguro que no
resuelve las necesidades del usuario con la mejor eficiencia.</p>

<p>Ricardo analizó qué nos lleva a este modelo: pobres historias de usuario, mal
definidas, que nos llevan a hacer cosas generales; los frameworks (como ORMs);
y arquitecturas de usuario pobres, con componentes maestro-detalle, consumo de
apis REST,&#8230; todo esto nos conduce al modelo mete-saca.</p>

<p>La solución propuesta por Ricardo, un único punto de entrada (en contraposición
a los múltiples endpoints REST) con una arquitectura <a href="https://en.wikipedia.org/wiki/Command%E2%80%93query_separation#Command_Query_Responsibility_Segregation">CQRS</a>. Cada <em>comando</em>
correspondería con una acción del usuario, una historia de usuario, un caso de
uso muy específico, que nos conduciría a tener las mínimas funcionalidades
desarrolladas con la máxima eficiencia y la mejor usabilidad para el usuario.</p>

<h2><a href="http://www.slideshare.net/programania/software-economics-tradeoffs-of-decoupled-softwre">Economía del software</a>, de <a href="https://twitter.com/artolamola">Luis Artola</a> y <a href="https://twitter.com/ggalmazor">Guillermo Gutierrez</a></h2>

<p>Luis y Guillermo nos condujeron en un viaje apasionante desde las necesidades
de negocio hasta detalles del código, tales como las dependencias. En el
camino, comentaron multitud de conceptos, de buenas prácticas, hicieron
referencia a charlas de todo el evento (lo que pone de manifiesto lo amplio de
su charla).</p>

<p>Concepto clave: negocio quiere entrega de <strong>valor</strong>, minimizando <strong>costes</strong> y
<strong>riesgos</strong> pero manteniendo <strong>opciones</strong> abiertas. El mayor en el software es
el coste de evolución. Cuanto más difícil sea cambiar algo, más costoso será a
lo largo del tiempo. El desarrollo iterativo e incremental reduce los riestos.
El despliegue de pequeñas funcionalidades, interfaces, inversión de control son
formas de crear opciones.</p>

<h2><a href="http://eamodeorubio.github.io/effective-ui-bdd-with-js/short.html#/">Effective UI testing</a>, de <a href="https://twitter.com/eamodeorubio">Enrique Amodeo</a></h2>

<p>Todo comenzó con el dilema: ¿debo testear cada clase individual o todo el
sistema? Pues ni lo uno, ni lo otro. En cuanto a la interfaz gráfica, la
podríamos dividir en dos dominios: la presentación y la lógica de usabilidad.</p>

<p>¿Como testear cada parte? Para testear la presentación debemos mockear el DOM
del navegador. Para testear la lógica de usabilida, debemos mockear el acceso
al servidor. Basándose en eso, Enrique recomienda seguir dos prácticas:
encapsular los accesos al servidor y los accesos al DOM.</p>

<h2>Trabajo para casa</h2>

<ul>
<li>Parece que integración, entrega y despliegue contínuos son prácticas básicas para empresas exitosas.</li>
<li>Prepara las conferencias a las que asistas: busca el lugar donde se va a
celebrar e imprime un plano de las salas que se van a utilizar, crea una
checklist con las cosas que hacer antes de asistir a un evento. Como por
ejemplo prepar preguntas a hacer a gente interesante que quiero conocer (me
gustó aquello que hiciste/dijiste, discrepo con aquello que &#8230;)</li>
<li>Echar un vistazo a la herramienta Screen Hero</li>
<li>Libro recomendado por Leo Antolí: Pensar rápido, pensar despacio</li>
<li>Libro recomendado por Rachel Davis: Drive (cómo introducir cambios)</li>
<li>Busca slide de Rachel Davis sobre <em>Sources of learning</em></li>
<li>Busca referencia a lo que falta de SOLID: RCCASS</li>
<li>¿Qué es el patrón Page Object?</li>
<li>Slide con las <em>mejores prácticas</em> recomendadas por Enrique Amodeo</li>
</ul>


<h2>Recursos</h2>

<ul>
<li><a href="https://gist.github.com/nhpatt/89f90a27042e4fd1db7b">Charlas, artículos y más sobre la CAS 2015</a></li>
<li><a href="https://www.youtube.com/watch?v=C6Sy0v19RAc">Streaming del día 1</a></li>
<li><a href="https://www.youtube.com/watch?v=_CcO9upHiDU">Streaming del día 2</a></li>
<li><a href="http://martinfowler.com/bliki/CQRS.html">Martin Fowler acerca de CQRS</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mi fracción del Codemotion 2015]]></title>
    <link href="http://rchavarria.github.io/blog/2015/11/29/mi-fraccion-codemotion/"/>
    <updated>2015-11-29T19:09:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/11/29/mi-fraccion-codemotion</id>
    <content type="html"><![CDATA[<p>Por 4º año consecutivo he tenido el placer de asistir a <a href="http://2015.codemotion.es/">Codemotion</a>, un evento
donde todas las comunidades tecnológicas tienen cabida, un evento con más de
2000 asistentes (este año hablan de 2500), con 8 tracks en paralelo mas 4
talleres.</p>

<p>En esta entrada trato de mostrar mi pequeña porción de lo vivido, por lo que no
esperes que coincida con la tuya si has estado allí, y no esperes que coincida
completamente con la realidad, porque lo que aquí leerás es solo una mínima
parte de todo lo ocurrido.</p>

<!-- more -->


<p>En un evento de este calibre no solo hay que valorar las charlas técnicas que
te inspiran, te enseñan y te encienden la chispa de la curiosidad. También hay
que valorar lo que pasa fuera de las charlas. Este año me he centrado más en
las charlas. Aún así, he conocido en persona a <a href="http://ocana.github.io/">Miguel</a>, que ya tenía ganas, y
he vuelto a ver a antiguos amigos de profesión que estamos convirtiendo en
costumbre lo de encontranos cada año en el Codemotion.</p>

<p>Otros años me ha parecido que han asistido más estudiantes, este año, la
impresión que he tenido es que el porcentaje de estudiantes/profesionales ha
estado bastante igualado.</p>

<p>Charlas a las que he asistido:</p>

<h2><a href="http://2015.codemotion.es/agenda.html#5677904553836544/43004005">El arte de ser vago</a>, de <a href="http://cjgaliana.com/">Camilo Galiana</a></h2>

<p>Esta charla fue un calentamiento perfecto. Camilo se expresa perfectamente, y
llevó un ritmo bastante bueno en su charla. Se podría resumir la charla como:</p>

<blockquote><p>Se programa para personas, no para las máquinas</p></blockquote>

<p>Se hizo un repaso de multitud de principios de programación imprescindibles
para un buen desarrollo de aplicaciones. Me quedaría con una frase graciosa.
Imagínate en una entrevista:</p>

<blockquote><p>¿Cuál es tu mayor fortaleza?
Soy vago</p></blockquote>

<h2><a href="http://2015.codemotion.es/agenda.html#5677904553836544/50404003">Technical debt for developers&#8230; and managers!</a>, de <a href="https://twitter.com/luiyo">Luis García Castro</a></h2>

<p>Charla completísima acerca del concepto de <a href="http://rchavarria.github.io/blog/2015/10/12/deuda-tecnica/">deuda técnica</a>. Luis cubrió casi
todos los aspectos relacionados con la deuda técnica (y otras deudas):
metáfora, síntomas, ventajas, inconvenientes, cómo evitarla, cómo pagarla,&#8230;</p>

<p>La charla estuvo bastante bien, y muy bien amenizada por Luis. Hubo debate, por
lo que estuvo bastante animada.</p>

<p>Como punto gracioso, Luis expuso una serie de frases que todos hemos dicho u
oido en el trabajo, como por ejemplo:</p>

<blockquote><p>Pon un comentario y lo arreglamos luego</p></blockquote>

<h2><a href="http://2015.codemotion.es/agenda.html#5677904553836544/48514002">Dando amor a los tests</a>, de <a href="https://twitter.com/kinisoftware">Joaquín Engelmo</a></h2>

<p>Esta es la segunda parte de una charla de Kini (creo recordar que se titulaba
«Adicto al verde». Como segunda parte, los conceptos tratados en esta charla
son más avanzados y por las pequeñas preguntas para responder a mano alzada, no
toda la audiencia estaba familiarizada con ellos, por lo que seguro que hubo
mucha gente que aprendió mucho de la charla.</p>

<p>De la charla me llevo la confirmación de una sospecha que tenía: cuantos más
tests tienes y más grande es tu aplicación, más debes tratar a los tests como
código de producción y seguir los mismos principios, de lo contrario, cualquier
pequeño cambio requerirá múltiples cambios en los tests y supondrán más un
lastre que una ayuda.</p>

<h2><a href="http://2015.codemotion.es/agenda.html#5699289732874240/49544011">Del infierno al cielo</a>, de <a href="https://twitter.com/rrequero">Raúl Requero</a></h2>

<p>Para ser una charla a primera hora, Raúl fue valiente y fue directo al grano,
sin rodeos. Prometía ser una charla dura. Y lo fue, pero fue genial. Charla muy
práctica, llena de ejemplos y de código (¡bien!).</p>

<p>La charla se centró en una funcionalidad introducida en ECMAScript 2015, los
generadores. Y Raúl los destripó de arriba a abajo: qué son, cuándo
utilizarlos, cuándo no, librerías que hacen su uso más sencillo (si quieres que
te duela la cabeza busca <a href="https://github.com/thunks/thunks">thunks</a> y <a href="https://github.com/tj/co">co</a>, increíbles).</p>

<h2><a href="http://2015.codemotion.es/agenda.html#5699289732874240/50504009">Coding culture</a>, de <a href="https://twitter.com/svenpet">Sven Peters</a></h2>

<p>Estaba deseando ver esta charla, no me la perdería por nada del mundo. Había
visto algunas charlas grabadas de Sven, y es un ponente con muchas tablas. Unos
gráficos espectaculares y una historia muy depurada. Con giros argumentales
inesperados y con mucho sentido del humor.</p>

<p>Sven presentó distintos conceptos relacionados con la cultura de empresa y
distintas actividades que se realizan en Attlassian. Habló de la cultura de la
innovación, de la felicidad, del balance de la pasión (producto o cliente), de
equipo y cultura que escala.</p>

<p>Si tienes ganas, aquí encontrarás todas las <a href="http://svenpet.com/talks/">charlas de Sven</a>.</p>

<h2><a href="http://2015.codemotion.es/agenda.html#5699289732874240/49534007">Programando en diferido</a>, de <a href="https://twitter.com/flipper83">Jorge Juan Barroso</a></h2>

<p>En un principio no tenía pensado entrar en esta charla, pero no me arrepiento
de nada. Jorge es un ponente increíble, fue una sorpresa muy positiva para mí.
Explicó conceptos muy complejos de una manera muy clara y sencilla. Esta charla
también me sirvió para refrescar un poco mi cada vez más aturdido <em>sentido
Javero</em>, conociendo de mano de un crack conceptos como <em>Streams</em> en Java,
observables (cold y hot), la librería RxJava y el <em>Reactive manifesto</em></p>

<p>De la charla me llevo un consejo que me pareció buenísimo</p>

<blockquote><p>Primero resuelve el problema, luego escribe el código</p></blockquote>

<h2><a href="http://2015.codemotion.es/agenda.html#5699289732874240/45634007">Navegando con el piloto automático con CasperJS</a>, de <a href="https://twitter.com/asanzdiego">Adolfo Sanz</a></h2>

<p>En esta charla Adofo nos presentó CasperJS, que no es una herramienta que corre
en NodeJS, si no que es una herramienta de scripting, y que entre otras cosas
sirve para programar o automatizar tus navegaciones web. Aunque el uso que más
interesó a la gente, a la vista de la cantidad de preguntas al ponente, fue la
posibilidad de escribir y ejecutar tests de aceptación con la herramienta.</p>

<p>Fue un charlas super práctica, toda con código en vivo y con demostraciones.</p>

<h2><a href="http://2015.codemotion.es/agenda.html#5699289732874240/44774010">Help, I need more women!</a>, de <a href="https://twitter.com/Laura_Morillo">Laura Morillo</a>, <a href="https://www.koliseo.com/anafvm">Ana Fernández</a> y <a href="https://www.koliseo.com/mlorenzosanchez">Marina Lorenzo</a></h2>

<p>El título de la charla lo dice todo, el discurso de la misma giró en torno al
hecho de la poca presencia femenina en el campo tecnológico y en el análisis de
sus posibles causas. Una de ellas se atribuye a la escasez de <em>referentes</em>, por
lo cual las niñas (las futuras ingenieras) no tienen quien les inspire y no
eligen carreras científicas o relacionadas con las ingenierías.</p>

<p>Las ponentes hicieron un repaso de las distintas mujeres destacadas en el campo
de la ingeniería de la historia y de cómo los medios de comunicación
representan a las mujeres en este campo, que por cierto, no es muy buena la
imagen que proyectan.</p>

<p>Finalmente, expusieron una serie de iniciativas que se están llevando a cabo a
nivel nacional e internacional, y creo que consiguieron que muchas mujeres
asistentes se interesaran por ellas, así que ¡FELICIDADES!</p>

<h2><a href="http://2015.codemotion.es/agenda.html#5699289732874240/48544008">Taiga, de 0 a 70.000 proyectos</a>, de <a href="https://twitter.com/diacritica">Pablo Ruiz</a></h2>

<p>En esta charla Pablo presentó Taiga, un gestor de proyectos ágiles. Soporta
Scrum y Kanban. Descrito así, parece que fue una charla absolutamente
publicitaria, pero para nada. Por supuesto, Pablo presentó la herramienta. Pero
después dió paso a una serie de peticiones de funcionalidad de los usuarios a
la herramienta y le dió un enfoque muy especial. Mezcló los valores y
principios ágiles con los valores y principios que defienden en Taiga y
justificó el porqué hacen caso, o no, a sus usuarios. Una clase absolutamente
magistral de lo que significa ser ágil y gestionar proyectos ágiles.</p>

<p>Algunas de las funcionalidades pedidas por usuarios <em>ágiles</em> serían: llevar una
cuenta de las horas consumidas, contabilizar historias no terminadas en un
sprint, poder representar personas asignadas a varios proyectos,&#8230;</p>

<h2><a href="http://2015.codemotion.es/agenda.html#5699289732874240/43004009">Gente que hace cosas con cacharros</a>, de <a href="https://www.koliseo.com/miguelangellv">Miguel Ángel López</a> y <a href="https://twitter.com/josejuansanchez">Jose Juan Sánchez</a></h2>

<p>Y para terminar, una charla que me sorprendió. Se podría resumir con algo que
dijo Miguel Ángel, que según él es a lo que se dedica en su tiempo libre:</p>

<blockquote><p>Hago cosas que, no sirven para nada, pero molan</p></blockquote>

<p>Así fue la charla. Llena de experimentos de <em>maker</em>, de pequeños inventos
curiosos, imaginativos, que no tenían valor útil, no iban a cambiar el mundo,
pero molaban mil. Fue la charla ideal para terminar dos días a tope. Divertida,
desenfada y llena de imaginación. ¡Qué ganas tengo de usar algo parecido con mi
hijo!</p>

<h2>Trabajo para casa</h2>

<p>Y esto fue más o menos mi Codemotion. Los organizadores del mismo no quieren
que Codemotion termine aquí, quieren que ahora empiece el #codemotion2015. La
idea de continuar es que lo aprendido no se quede en estos dos magníficos días,
si no que los extendamos en el tiempo. Por eso mismo, éstos son los deberes que
me llevo para casa:</p>

<ol>
<li>Conoce tus herramientas: ¿qué tal si empiezo a usar la consola de PhpStorm?</li>
<li>¿Existe alguna forma de cuantificar la deuda técnica?</li>
<li>Buscar acerca del concepto de <em>property-based testing</em>. Ha aparecido por mi
radar últimamente, pero no le he hecho mucho caso. Ha llegado el momento</li>
<li>Attlassian Mood App</li>
<li>¿Podrías encontrar alguna utilidad a CasperJS?</li>
<li>Serie <em>Halt &amp; Catch Fire</em></li>
<li>Proponer PI Week en el trabajo</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Se aceptan mejoras]]></title>
    <link href="http://rchavarria.github.io/blog/2015/11/22/se-aceptan-mejoras/"/>
    <updated>2015-11-22T22:27:00+01:00</updated>
    <id>http://rchavarria.github.io/blog/2015/11/22/se-aceptan-mejoras</id>
    <content type="html"><![CDATA[<p>Existe una cosa maravillosa en el mundo de open source, y es que personas que
ni siquiera sabes que existen, usan tu trabajo, lo mejoran con el suyo, y te lo
donan a tí para que otra gente se beneficie del trabajo de ambos.</p>

<p><img class="left" src="http://rchavarria.github.io/images/2015/contribution.png"></p>

<p>Imagina que tienes una librería y tienes una base de usuarios. Ningún software
se adapta a todos sus usuarios, así que lo más seguro es que los usuarios de tu
librería encuentren algún detalle que no encaja a la perfección con sus
necesidades. ¿No sería incríble que tus propios usuarios mejoraran la librería y
te dieran su trabajo así como les das tú el tuyo? Pues eso es lo que pasa
precisamente con el open source.</p>

<p>Y algo parecido pasa cuando contribuyes a algún proyecto open source. Tus
contribuciones son usadas por los usuarios del proyecto. Y algunos de ellos
proponen nuevas mejoras al proyecto. Quizá algunas de estas mejoras sean sobre
el trabajo que tú has realizado. Gente que ni conoces está aportando su
experiencia para mejorar tu trabajo. Hay que ser muy tonto para no aprovechar
esta oportunidad para aprender.</p>

<!-- more -->


<p>Este artículo describe el proceso a seguir para aceptar mejoras en un proyecto
publicado en <a href="https://github.com/">Github</a>, donde [<code>git</code>] es usada como herramienta de control de
versiones. Estas mejoras son propuestas por usuarios externos al proyecto a
través de <a href="https://help.github.com/articles/using-pull-requests/">Pull Requests</a> (o también PR). Github te ayuda a la hora de
incorporar esas mejoras a tu proyecto, pero hacerlo así deja la historia de tu
control de versiones hecha unos zorros (en <a href="http://blog.differential.com/best-way-to-merge-a-github-pull-request/">Best way to merge a pull request</a>
lo cuentan más detalladamente).</p>

<p>Ésta es la secuencia de comandos mediante los cuales se incoroporarían los
cambios propuestos en un Pull Request con número <code>pr-number</code> desde una rama
creada por el autor llamada <code>user-working-branch</code>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rchavarria@proyect$ git checkout master
</span><span class='line'>rchavarria@proyect$ git fetch origin
</span><span class='line'>rchavarria@proyect$ git reset --hard origin/master
</span><span class='line'>
</span><span class='line'>rchavarria@proyect$ git fetch origin refs/pull/&lt;pr-number&gt;/head
</span><span class='line'>rchavarria@proyect$ git checkout -b &lt;user-working-branch&gt; FETCH_HEAD
</span><span class='line'>rchavarria@proyect$ git rebase master
</span><span class='line'>
</span><span class='line'>rchavarria@proyect$ git checkout master
</span><span class='line'>rchavarria@proyect$ git merge --no-ff &lt;user-working-branch&gt;
</span><span class='line'>rchavarria@proyect$ git push origin master</span></code></pre></td></tr></table></div></figure>


<h2>Limpiar el espacio de trabajo</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rchavarria@proyect$ git checkout master
</span><span class='line'>Already on 'master'
</span><span class='line'>Your branch is up-to-date with 'origin/master'.
</span><span class='line'>rchavarria@proyect$ git fetch origin
</span><span class='line'>remote: Counting objects: 66, done.
</span><span class='line'>remote: Compressing objects: 100% (43/43), done.
</span><span class='line'>remote: Total 66 (delta 14), reused 6 (delta 6), pack-reused 17
</span><span class='line'>Unpacking objects: 100% (66/66), done.
</span><span class='line'>From https://github.com/exercism/xecmascript
</span><span class='line'>   9b32d79..de450d0  master     -&gt; origin/master
</span><span class='line'> * [new branch]      new-exercise-raindrops -&gt; origin/new-exercise-raindrops</span></code></pre></td></tr></table></div></figure>


<p>Con estos comandos simplemente se cambia a la rama <code>master</code> y se descargan los
cambios que existan en el repositorio remoto (sin aplicar los cambios a ningún
archivo todavía). En este caso, el repositorio es uno de Github. En el código
anterior se puede ver cómo existe una nueva rama en remoto,
<code>new-exercise-raindrops</code>, que se corresponde con el Pull Request que vamos a
incorporar al repositorio.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rchavarria@proyect$ git reset --hard origin/master
</span><span class='line'>HEAD is now at de450d0 Merge pull request #78 from rchavarria/new-exercise-roman-numerals</span></code></pre></td></tr></table></div></figure>


<p>Este comando elimina cualquier cambio en local y lo sobreescribe exactamente
con los cambios que ha tomado del repositorio remoto. De esta forma <strong>se tiene
en local exactamente lo mismo que en remoto</strong>, y es un punto de partida seguro.</p>

<h2>Descargar las mejoras</h2>

<p>Anteriormente git ha avisado de que hay una nueva rama, un nuevo Pull Request.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rchavarria@proyect$ git fetch origin refs/pull/80/head
</span><span class='line'>From https://github.com/exercism/xecmascript
</span><span class='line'> * branch            refs/pull/80/head -&gt; FETCH_HEAD</span></code></pre></td></tr></table></div></figure>


<p>El anterior comando descarga los cambios contenido en el Pull Request con
número <code>&lt;pr-number&gt;</code>, que podría ser por ejemplo el <code>80</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rchavarria@proyect$ git checkout -b new-exercise-raindrops FETCH_HEAD
</span><span class='line'>Switched to a new branch 'new-exercise-raindrops'</span></code></pre></td></tr></table></div></figure>


<p>Así, se crea una nueva rama, llamada <code>new-exercise-raindrops</code> que contiene los
cambios del Pull Request.</p>

<p>Y ahora llega un momento delicado. Se debe hacer que el commit por el que
comienza la rama recién creada sea el último commit que existía en <code>master</code>. De
esta forma se consigue que la historia del control de versiones sea la más
legible. En este punto es posible que se produzcan conflictos. Ese es otro tema
que daría para muchas explicaciones. Si se quiere profundizar, se puede echar
un vistazo a la propia [documentación de <code>git</code> sobre el comando <code>rebase</code>].</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rchavarria@proyect$ git rebase master
</span><span class='line'>Current branch new-exercise-raindrops is up to date.</span></code></pre></td></tr></table></div></figure>


<p>Si no hay conflictos, perfecto, ya está.</p>

<h2>Comprobar las mejoras</h2>

<p>Ahora es el momento de hacer comprobaciones:</p>

<ul>
<li>Se deberían ejecutar los tests del proyecto</li>
<li>Chequear los cambios, comparándolos con versiones anteriores</li>
<li>Comprobar que se siguen las reglas de estilo en el código</li>
<li>En general, asegurarse de que el código a incorporar es un código con el que
estamos contentos</li>
</ul>


<p>En esta fase se pueden hacer nuevos cambios o pedir al programador que
contribuye que realice algunos cambios por sí mismo y que actualize el Pull
Request.</p>

<p><img class="center" src="http://rchavarria.github.io/images/2015/github-diff.png"></p>

<h2>Incorporar los cambios</h2>

<p>Una vez está todo comprobado y se está de acuerdo con los cambios, ha llegado
la hora de incorporar los cambios a la rama <code>master</code> para que finalmente formen
parte del código del proyecto.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rchavarria@proyect$ git checkout master
</span><span class='line'>Switched to branch 'master'
</span><span class='line'>Your branch is up-to-date with 'origin/master'.
</span><span class='line'>rchavarria@proyect$ git merge --no-ff new-exercise-raindrops
</span><span class='line'>Merge made by the 'recursive' strategy.
</span><span class='line'> config.json                 |  3 ++-
</span><span class='line'> raindrops/example.js        | 17 +++++++++++++++++
</span><span class='line'> raindrops/gulpfile.js       | 42 ++++++++++++++++++++++++++++++++++++++++++
</span><span class='line'> raindrops/package.json      | 24 ++++++++++++++++++++++++
</span><span class='line'> raindrops/raindrops.spec.js | 38 ++++++++++++++++++++++++++++++++++++++
</span><span class='line'> 5 files changed, 123 insertions(+), 1 deletion(-)
</span><span class='line'> create mode 100644 raindrops/example.js
</span><span class='line'> create mode 100644 raindrops/gulpfile.js
</span><span class='line'> create mode 100644 raindrops/package.json
</span><span class='line'> create mode 100644 raindrops/raindrops.spec.js</span></code></pre></td></tr></table></div></figure>


<p>Los comandos cambian el espacio de trabajo a la rama <code>master</code> e incorporan los
cambios a la misma. Se deberá proporcionar un mensaje para el commit que va a
generar <code>git merge</code>. Un ejemplo sería:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Merge pull request #80 from matthewmorgan/new-exercise-raindrops
</span><span class='line'>
</span><span class='line'>Closes #80</span></code></pre></td></tr></table></div></figure>


<p>Donde <code>80</code> es el número del Pull Request, <code>matthewmorgan</code> es el nombre del
programador que contribuye y <code>new-exercise-raindrops</code> es el nombre de la rama
que le dió el programador y el que se ha utilizado para la incorporación de los
cambios.</p>

<p>Finalmente, se suben los cambios al repositorio remoto y &#8230;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rchavarria@proyect$ git push origin master
</span><span class='line'>Username for 'https://github.com': rchavarria
</span><span class='line'>Password for 'https://rchavarria@github.com': 
</span><span class='line'>Counting objects: 1, done.
</span><span class='line'>Writing objects: 100% (1/1), 273 bytes | 0 bytes/s, done.
</span><span class='line'>Total 1 (delta 0), reused 0 (delta 0)
</span><span class='line'>To https://github.com/exercism/xecmascript.git
</span><span class='line'>   de450d0..eae366a  master -&gt; master</span></code></pre></td></tr></table></div></figure>


<p>&#8230; ¡magia!</p>

<p><img class="center" src="http://rchavarria.github.io/images/2015/pull-request-merged.png"></p>

<h2>Referencias</h2>

<ul>
<li><a href="http://blog.differential.com/best-way-to-merge-a-github-pull-request/">Best way to merge a pull request</a></li>
<li><a href="https://www.youtube.com/watch?v=1ffBJ4sVUb4">Git for 4 and up</a></li>
<li><a href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">Better commit messages</a></li>
<li><a href="https://www.youtube.com/watch?v=8YjSty6bfog">Do your commits suck?</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
